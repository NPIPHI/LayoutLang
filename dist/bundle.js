/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/antlr4/src/antlr4/BufferedTokenStream.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/BufferedTokenStream.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/src/antlr4/Lexer.js");
const {Interval} = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");

// this is just to keep meaningful parameter types to Parser
class TokenStream {}

/**
 * This implementation of {@link TokenStream} loads tokens from a
 * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
 * access to any previous token by index.
 *
 * <p>
 * This token stream ignores the value of {@link Token//getChannel}. If your
 * parser requires the token stream filter tokens to only those on a particular
 * channel, such as {@link Token//DEFAULT_CHANNEL} or
 * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
 * {@link CommonTokenStream}.</p>
 */
class BufferedTokenStream extends TokenStream {
	constructor(tokenSource) {

		super();
		// The {@link TokenSource} from which tokens for this stream are fetched.
		this.tokenSource = tokenSource;
		/**
		 * A collection of all tokens fetched from the token source. The list is
		 * considered a complete view of the input once {@link //fetchedEOF} is set
		 * to {@code true}.
		 */
		this.tokens = [];

		/**
		 * The index into {@link //tokens} of the current token (next token to
		 * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
		 * be
		 * {@link //LT LT(1)}.
		 *
		 * <p>This field is set to -1 when the stream is first constructed or when
		 * {@link //setTokenSource} is called, indicating that the first token has
		 * not yet been fetched from the token source. For additional information,
		 * see the documentation of {@link IntStream} for a description of
		 * Initializing Methods.</p>
		 */
		this.index = -1;

		/**
		 * Indicates whether the {@link Token//EOF} token has been fetched from
		 * {@link //tokenSource} and added to {@link //tokens}. This field improves
		 * performance for the following cases:
		 *
		 * <ul>
		 * <li>{@link //consume}: The lookahead check in {@link //consume} to
		 * prevent
		 * consuming the EOF symbol is optimized by checking the values of
		 * {@link //fetchedEOF} and {@link //p} instead of calling {@link
		 * //LA}.</li>
		 * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
		 * into
		 * {@link //tokens} is trivial with this field.</li>
		 * <ul>
		 */
		this.fetchedEOF = false;
	}

	mark() {
		return 0;
	}

	release(marker) {
		// no resources to release
	}

	reset() {
		this.seek(0);
	}

	seek(index) {
		this.lazyInit();
		this.index = this.adjustSeekIndex(index);
	}

	get(index) {
		this.lazyInit();
		return this.tokens[index];
	}

	consume() {
		let skipEofCheck = false;
		if (this.index >= 0) {
			if (this.fetchedEOF) {
				// the last token in tokens is EOF. skip check if p indexes any
				// fetched token except the last.
				skipEofCheck = this.index < this.tokens.length - 1;
			} else {
				// no EOF token in tokens. skip check if p indexes a fetched token.
				skipEofCheck = this.index < this.tokens.length;
			}
		} else {
			// not yet initialized
			skipEofCheck = false;
		}
		if (!skipEofCheck && this.LA(1) === Token.EOF) {
			throw "cannot consume EOF";
		}
		if (this.sync(this.index + 1)) {
			this.index = this.adjustSeekIndex(this.index + 1);
		}
	}

	/**
	 * Make sure index {@code i} in tokens has a token.
	 *
	 * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise
	 * {@code false}.
	 * @see //get(int i)
	 */
	sync(i) {
		const n = i - this.tokens.length + 1; // how many more elements we need?
		if (n > 0) {
			const fetched = this.fetch(n);
			return fetched >= n;
		}
		return true;
	}

	/**
	 * Add {@code n} elements to buffer.
	 *
	 * @return {Number} The actual number of elements added to the buffer.
	 */
	fetch(n) {
		if (this.fetchedEOF) {
			return 0;
		}
		for (let i = 0; i < n; i++) {
			const t = this.tokenSource.nextToken();
			t.tokenIndex = this.tokens.length;
			this.tokens.push(t);
			if (t.type === Token.EOF) {
				this.fetchedEOF = true;
				return i + 1;
			}
		}
		return n;
	}

// Get all tokens from start..stop inclusively///
	getTokens(start, stop, types) {
		if (types === undefined) {
			types = null;
		}
		if (start < 0 || stop < 0) {
			return null;
		}
		this.lazyInit();
		const subset = [];
		if (stop >= this.tokens.length) {
			stop = this.tokens.length - 1;
		}
		for (let i = start; i < stop; i++) {
			const t = this.tokens[i];
			if (t.type === Token.EOF) {
				break;
			}
			if (types === null || types.contains(t.type)) {
				subset.push(t);
			}
		}
		return subset;
	}

	LA(i) {
		return this.LT(i).type;
	}

	LB(k) {
		if (this.index - k < 0) {
			return null;
		}
		return this.tokens[this.index - k];
	}

	LT(k) {
		this.lazyInit();
		if (k === 0) {
			return null;
		}
		if (k < 0) {
			return this.LB(-k);
		}
		const i = this.index + k - 1;
		this.sync(i);
		if (i >= this.tokens.length) { // return EOF token
			// EOF must be last token
			return this.tokens[this.tokens.length - 1];
		}
		return this.tokens[i];
	}

	/**
	 * Allowed derived classes to modify the behavior of operations which change
	 * the current stream position by adjusting the target token index of a seek
	 * operation. The default implementation simply returns {@code i}. If an
	 * exception is thrown in this method, the current stream index should not be
	 * changed.
	 *
	 * <p>For example, {@link CommonTokenStream} overrides this method to ensure
	 * that
	 * the seek target is always an on-channel token.</p>
	 *
	 * @param {Number} i The target token index.
	 * @return {Number} The adjusted target token index.
	 */
	adjustSeekIndex(i) {
		return i;
	}

	lazyInit() {
		if (this.index === -1) {
			this.setup();
		}
	}

	setup() {
		this.sync(0);
		this.index = this.adjustSeekIndex(0);
	}

// Reset this token stream by setting its token source.///
	setTokenSource(tokenSource) {
		this.tokenSource = tokenSource;
		this.tokens = [];
		this.index = -1;
		this.fetchedEOF = false;
	}

	/**
	 * Given a starting index, return the index of the next token on channel.
	 * Return i if tokens[i] is on channel. Return -1 if there are no tokens
	 * on channel between i and EOF.
	 */
	nextTokenOnChannel(i, channel) {
		this.sync(i);
		if (i >= this.tokens.length) {
			return -1;
		}
		let token = this.tokens[i];
		while (token.channel !== this.channel) {
			if (token.type === Token.EOF) {
				return -1;
			}
			i += 1;
			this.sync(i);
			token = this.tokens[i];
		}
		return i;
	}

	/**
	 * Given a starting index, return the index of the previous token on channel.
	 * Return i if tokens[i] is on channel. Return -1 if there are no tokens
	 * on channel between i and 0.
	 */
	previousTokenOnChannel(i, channel) {
		while (i >= 0 && this.tokens[i].channel !== channel) {
			i -= 1;
		}
		return i;
	}

	/**
	 * Collect all tokens on specified channel to the right of
	 * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
	 * EOF. If channel is -1, find any non default channel token.
	 */
	getHiddenTokensToRight(tokenIndex,
			channel) {
		if (channel === undefined) {
			channel = -1;
		}
		this.lazyInit();
		if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
			throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
		}
		const nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
		const from_ = tokenIndex + 1;
		// if none onchannel to right, nextOnChannel=-1 so set to = last token
		const to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
		return this.filterForChannel(from_, to, channel);
	}

	/**
	 * Collect all tokens on specified channel to the left of
	 * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
	 * If channel is -1, find any non default channel token.
	 */
	getHiddenTokensToLeft(tokenIndex,
			channel) {
		if (channel === undefined) {
			channel = -1;
		}
		this.lazyInit();
		if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
			throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
		}
		const prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
		if (prevOnChannel === tokenIndex - 1) {
			return null;
		}
		// if none on channel to left, prevOnChannel=-1 then from=0
		const from_ = prevOnChannel + 1;
		const to = tokenIndex - 1;
		return this.filterForChannel(from_, to, channel);
	}

	filterForChannel(left, right, channel) {
		const hidden = [];
		for (let i = left; i < right + 1; i++) {
			const t = this.tokens[i];
			if (channel === -1) {
				if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
					hidden.push(t);
				}
			} else if (t.channel === channel) {
				hidden.push(t);
			}
		}
		if (hidden.length === 0) {
			return null;
		}
		return hidden;
	}

	getSourceName() {
		return this.tokenSource.getSourceName();
	}

// Get the text of all tokens in this buffer.///
	getText(interval) {
		this.lazyInit();
		this.fill();
		if (interval === undefined || interval === null) {
			interval = new Interval(0, this.tokens.length - 1);
		}
		let start = interval.start;
		if (start instanceof Token) {
			start = start.tokenIndex;
		}
		let stop = interval.stop;
		if (stop instanceof Token) {
			stop = stop.tokenIndex;
		}
		if (start === null || stop === null || start < 0 || stop < 0) {
			return "";
		}
		if (stop >= this.tokens.length) {
			stop = this.tokens.length - 1;
		}
		let s = "";
		for (let i = start; i < stop + 1; i++) {
			const t = this.tokens[i];
			if (t.type === Token.EOF) {
				break;
			}
			s = s + t.text;
		}
		return s;
	}

// Get all tokens from lexer until EOF///
	fill() {
		this.lazyInit();
		while (this.fetch(1000) === 1000) {
			continue;
		}
	}
}


module.exports = BufferedTokenStream;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CharStreams.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CharStreams.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/src/antlr4/InputStream.js");
const fs = __webpack_require__(/*! fs */ "?1ac6");

/**
 * Utility functions to create InputStreams from various sources.
 *
 * All returned InputStreams support the full range of Unicode
 * up to U+10FFFF (the default behavior of InputStream only supports
 * code points up to U+FFFF).
 */
const CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return new InputStream(str, true);
  },

  /**
   * Asynchronously creates an InputStream from a blob given the
   * encoding of the bytes in that blob (defaults to 'utf8' if
   * encoding is null).
   *
   * Invokes onLoad(result) on success, onError(error) on
   * failure.
   */
  fromBlob: function(blob, encoding, onLoad, onError) {
    const reader = new window.FileReader();
    reader.onload = function(e) {
      const is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  /**
   * Creates an InputStream from a Buffer given the
   * encoding of the bytes in that buffer (defaults to 'utf8' if
   * encoding is null).
   */
  fromBuffer: function(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  /** Asynchronously creates an InputStream from a file on disk given
   * the encoding of the bytes in that file (defaults to 'utf8' if
   * encoding is null).
   *
   * Invokes callback(error, result) on completion.
   */
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      let is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  /**
   * Synchronously creates an InputStream given a path to a file
   * on disk and the encoding of the bytes in that file (defaults to
   * 'utf8' if encoding is null).
   */
  fromPathSync: function(path, encoding) {
    const data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

module.exports = CharStreams;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonTokenFactory.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonTokenFactory.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const CommonToken = (__webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js").CommonToken);

class TokenFactory {}

/**
 * This default implementation of {@link TokenFactory} creates
 * {@link CommonToken} objects.
 */
class CommonTokenFactory extends TokenFactory {
    constructor(copyText) {
        super();
        /**
         * Indicates whether {@link CommonToken//setText} should be called after
         * constructing tokens to explicitly set the text. This is useful for cases
         * where the input stream might not be able to provide arbitrary substrings
         * of text from the input after the lexer creates a token (e.g. the
         * implementation of {@link CharStream//getText} in
         * {@link UnbufferedCharStream} throws an
         * {@link UnsupportedOperationException}). Explicitly setting the token text
         * allows {@link Token//getText} to be called at any time regardless of the
         * input stream implementation.
         *
         * <p>
         * The default value is {@code false} to avoid the performance and memory
         * overhead of copying text for every token unless explicitly requested.</p>
         */
        this.copyText = copyText===undefined ? false : copyText;
    }

    create(source, type, text, channel, start, stop, line, column) {
        const t = new CommonToken(source, type, channel, start, stop);
        t.line = line;
        t.column = column;
        if (text !==null) {
            t.text = text;
        } else if (this.copyText && source[1] !==null) {
            t.text = source[1].getText(start,stop);
        }
        return t;
    }

    createThin(type, text) {
        const t = new CommonToken(null, type);
        t.text = text;
        return t;
    }
}

/**
 * The default {@link CommonTokenFactory} instance.
 *
 * <p>
 * This token factory does not explicitly copy token text when constructing
 * tokens.</p>
 */
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

module.exports = CommonTokenFactory;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonTokenStream.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonTokenStream.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */


const Token = (__webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js").Token);
const BufferedTokenStream = __webpack_require__(/*! ./BufferedTokenStream */ "./node_modules/antlr4/src/antlr4/BufferedTokenStream.js");

/**
 * This class extends {@link BufferedTokenStream} with functionality to filter
 * token streams to tokens on a particular channel (tokens where
 * {@link Token//getChannel} returns a particular value).
 *
 * <p>
 * This token stream provides access to all tokens by index or when calling
 * methods like {@link //getText}. The channel filtering is only used for code
 * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
 * {@link //LB}.</p>
 *
 * <p>
 * By default, tokens are placed on the default channel
 * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
 * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
 * call {@link Lexer//setChannel}.
 * </p>
 *
 * <p>
 * Note: lexer rules which use the {@code ->skip} lexer command or call
 * {@link Lexer//skip} do not produce tokens at all, so input text matched by
 * such a rule will not be available as part of the token stream, regardless of
 * channel.</p>
 */
class CommonTokenStream extends BufferedTokenStream {
    constructor(lexer, channel) {
        super(lexer);
        this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    }

    adjustSeekIndex(i) {
        return this.nextTokenOnChannel(i, this.channel);
    }

    LB(k) {
        if (k===0 || this.index-k<0) {
            return null;
        }
        let i = this.index;
        let n = 1;
        // find k good tokens looking backwards
        while (n <= k) {
            // skip off-channel tokens
            i = this.previousTokenOnChannel(i - 1, this.channel);
            n += 1;
        }
        if (i < 0) {
            return null;
        }
        return this.tokens[i];
    }

    LT(k) {
        this.lazyInit();
        if (k === 0) {
            return null;
        }
        if (k < 0) {
            return this.LB(-k);
        }
        let i = this.index;
        let n = 1; // we know tokens[pos] is a good one
        // find k good tokens
        while (n < k) {
            // skip off-channel tokens, but make sure to not look past EOF
            if (this.sync(i + 1)) {
                i = this.nextTokenOnChannel(i + 1, this.channel);
            }
            n += 1;
        }
        return this.tokens[i];
    }

    // Count EOF just once.
    getNumberOfOnChannelTokens() {
        let n = 0;
        this.fill();
        for (let i =0; i< this.tokens.length;i++) {
            const t = this.tokens[i];
            if( t.channel===this.channel) {
                n += 1;
            }
            if( t.type===Token.EOF) {
                break;
            }
        }
        return n;
    }
}

module.exports = CommonTokenStream;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/FileStream.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/FileStream.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/src/antlr4/InputStream.js");
const fs = __webpack_require__(/*! fs */ "?1ac6");

/**
 * This is an InputStream that is loaded from a file all at once
 * when you construct the object.
 */
class FileStream extends InputStream {
	constructor(fileName, decodeToUnicodeCodePoints) {
		const data = fs.readFileSync(fileName, "utf8");
		super(data, decodeToUnicodeCodePoints);
		this.fileName = fileName;
	}
}

module.exports = FileStream


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/InputStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/InputStream.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
__webpack_require__(/*! ./polyfills/codepointat */ "./node_modules/antlr4/src/antlr4/polyfills/codepointat.js");
__webpack_require__(/*! ./polyfills/fromcodepoint */ "./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js");

/**
 * If decodeToUnicodeCodePoints is true, the input is treated
 * as a series of Unicode code points.
 *
 * Otherwise, the input is treated as a series of 16-bit UTF-16 code
 * units.
 */
class InputStream {
	constructor(data, decodeToUnicodeCodePoints) {
		this.name = "<empty>";
		this.strdata = data;
		this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
		// _loadString - Vacuum all input from a string and then treat it like a buffer.
		this._index = 0;
		this.data = [];
		if (this.decodeToUnicodeCodePoints) {
			for (let i = 0; i < this.strdata.length; ) {
				const codePoint = this.strdata.codePointAt(i);
				this.data.push(codePoint);
				i += codePoint <= 0xFFFF ? 1 : 2;
			}
		} else {
			this.data = new Array(this.strdata.length);
			for (let i = 0; i < this.strdata.length; i++) {
				const codeUnit = this.strdata.charCodeAt(i);
				this.data[i] = codeUnit;
			}
		}
		this._size = this.data.length;
	}

	/**
	 * Reset the stream so that it's in the same state it was
	 * when the object was created *except* the data array is not
	 * touched.
	 */
	reset() {
		this._index = 0;
	}

	consume() {
		if (this._index >= this._size) {
			// assert this.LA(1) == Token.EOF
			throw ("cannot consume EOF");
		}
		this._index += 1;
	}

	LA(offset) {
		if (offset === 0) {
			return 0; // undefined
		}
		if (offset < 0) {
			offset += 1; // e.g., translate LA(-1) to use offset=0
		}
		const pos = this._index + offset - 1;
		if (pos < 0 || pos >= this._size) { // invalid
			return Token.EOF;
		}
		return this.data[pos];
	}

	LT(offset) {
		return this.LA(offset);
	}

// mark/release do nothing; we have entire buffer
	mark() {
		return -1;
	}

	release(marker) {
	}

	/**
	 * consume() ahead until p==_index; can't just set p=_index as we must
	 * update line and column. If we seek backwards, just set p
	 */
	seek(_index) {
		if (_index <= this._index) {
			this._index = _index; // just jump; don't update stream state (line,
									// ...)
			return;
		}
		// seek forward
		this._index = Math.min(_index, this._size);
	}

	getText(start, stop) {
		if (stop >= this._size) {
			stop = this._size - 1;
		}
		if (start >= this._size) {
			return "";
		} else {
			if (this.decodeToUnicodeCodePoints) {
				let result = "";
				for (let i = start; i <= stop; i++) {
					result += String.fromCodePoint(this.data[i]);
				}
				return result;
			} else {
				return this.strdata.slice(start, stop + 1);
			}
		}
	}

	toString() {
		return this.strdata;
	}

	get index(){
		return this._index;
	}

	get size(){
		return this._size;
	}
}


module.exports = InputStream;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/IntervalSet.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/IntervalSet.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");

/* stop is not included! */
class Interval {

	constructor(start, stop) {
		this.start = start;
		this.stop = stop;
	}

	clone() {
		return new Interval(this.start, this.stop);
	}

	contains(item) {
		return item >= this.start && item < this.stop;
	}

	toString() {
		if(this.start===this.stop-1) {
			return this.start.toString();
		} else {
			return this.start.toString() + ".." + (this.stop-1).toString();
		}
	}

	get length(){
		return this.stop - this.start;
	}
}


class IntervalSet {
	constructor() {
		this.intervals = null;
		this.readOnly = false;
	}

	first(v) {
		if (this.intervals === null || this.intervals.length===0) {
			return Token.INVALID_TYPE;
		} else {
			return this.intervals[0].start;
		}
	}

	addOne(v) {
		this.addInterval(new Interval(v, v + 1));
	}

	addRange(l, h) {
		this.addInterval(new Interval(l, h + 1));
	}

	addInterval(toAdd) {
		if (this.intervals === null) {
			this.intervals = [];
			this.intervals.push(toAdd.clone());
		} else {
			// find insert pos
			for (let pos = 0; pos < this.intervals.length; pos++) {
				const existing = this.intervals[pos];
				// distinct range -> insert
				if (toAdd.stop < existing.start) {
					this.intervals.splice(pos, 0, toAdd);
					return;
				}
				// contiguous range -> adjust
				else if (toAdd.stop === existing.start) {
					this.intervals[pos] = new Interval(toAdd.start, existing.stop)
					return;
				}
				// overlapping range -> adjust and reduce
				else if (toAdd.start <= existing.stop) {
					this.intervals[pos] = new Interval(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));
					this.reduce(pos);
					return;
				}
			}
			// greater than any existing
			this.intervals.push(toAdd.clone());
		}
	}

	addSet(other) {
		if (other.intervals !== null) {
			other.intervals.forEach( toAdd => this.addInterval(toAdd), this);
		}
		return this;
	}

	reduce(pos) {
		// only need to reduce if pos is not the last
		if (pos < this.intervals.length - 1) {
			const current = this.intervals[pos];
			const next = this.intervals[pos + 1];
			// if next contained in current
			if (current.stop >= next.stop) {
				this.intervals.splice(pos + 1, 1);
				this.reduce(pos);
			} else if (current.stop >= next.start) {
				this.intervals[pos] = new Interval(current.start, next.stop);
				this.intervals.splice(pos + 1, 1);
			}
		}
	}

	complement(start, stop) {
		const result = new IntervalSet();
		result.addInterval(new Interval(start, stop + 1));
		if(this.intervals !== null)
			this.intervals.forEach(toRemove => result.removeRange(toRemove));
		return result;
	}

	contains(item) {
		if (this.intervals === null) {
			return false;
		} else {
			for (let k = 0; k < this.intervals.length; k++) {
				if(this.intervals[k].contains(item)) {
					return true;
				}
			}
			return false;
		}
	}

	removeRange(toRemove) {
		if(toRemove.start===toRemove.stop-1) {
			this.removeOne(toRemove.start);
		} else if (this.intervals !== null) {
			let pos = 0;
			for(let n=0; n<this.intervals.length; n++) {
				const existing = this.intervals[pos];
				// intervals are ordered
				if (toRemove.stop<=existing.start) {
					return;
				}
				// check for including range, split it
				else if(toRemove.start>existing.start && toRemove.stop<existing.stop) {
					this.intervals[pos] = new Interval(existing.start, toRemove.start);
					const x = new Interval(toRemove.stop, existing.stop);
					this.intervals.splice(pos, 0, x);
					return;
				}
				// check for included range, remove it
				else if(toRemove.start<=existing.start && toRemove.stop>=existing.stop) {
					this.intervals.splice(pos, 1);
					pos = pos - 1; // need another pass
				}
				// check for lower boundary
				else if(toRemove.start<existing.stop) {
					this.intervals[pos] = new Interval(existing.start, toRemove.start);
				}
				// check for upper boundary
				else if(toRemove.stop<existing.stop) {
					this.intervals[pos] = new Interval(toRemove.stop, existing.stop);
				}
				pos += 1;
			}
		}
	}

	removeOne(value) {
		if (this.intervals !== null) {
			for (let i = 0; i < this.intervals.length; i++) {
				const existing = this.intervals[i];
				// intervals are ordered
				if (value < existing.start) {
					return;
				}
				// check for single value range
				else if (value === existing.start && value === existing.stop - 1) {
					this.intervals.splice(i, 1);
					return;
				}
				// check for lower boundary
				else if (value === existing.start) {
					this.intervals[i] = new Interval(existing.start + 1, existing.stop);
					return;
				}
				// check for upper boundary
				else if (value === existing.stop - 1) {
					this.intervals[i] = new Interval(existing.start, existing.stop - 1);
					return;
				}
				// split existing range
				else if (value < existing.stop - 1) {
					const replace = new Interval(existing.start, value);
					existing.start = value + 1;
					this.intervals.splice(i, 0, replace);
					return;
				}
			}
		}
	}

	toString(literalNames, symbolicNames, elemsAreChar) {
		literalNames = literalNames || null;
		symbolicNames = symbolicNames || null;
		elemsAreChar = elemsAreChar || false;
		if (this.intervals === null) {
			return "{}";
		} else if(literalNames!==null || symbolicNames!==null) {
			return this.toTokenString(literalNames, symbolicNames);
		} else if(elemsAreChar) {
			return this.toCharString();
		} else {
			return this.toIndexString();
		}
	}

	toCharString() {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const existing = this.intervals[i];
			if(existing.stop===existing.start+1) {
				if ( existing.start===Token.EOF ) {
					names.push("<EOF>");
				} else {
					names.push("'" + String.fromCharCode(existing.start) + "'");
				}
			} else {
				names.push("'" + String.fromCharCode(existing.start) + "'..'" + String.fromCharCode(existing.stop-1) + "'");
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	toIndexString() {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const existing = this.intervals[i];
			if(existing.stop===existing.start+1) {
				if ( existing.start===Token.EOF ) {
					names.push("<EOF>");
				} else {
					names.push(existing.start.toString());
				}
			} else {
				names.push(existing.start.toString() + ".." + (existing.stop-1).toString());
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	toTokenString(literalNames, symbolicNames) {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const existing = this.intervals[i];
			for (let j = existing.start; j < existing.stop; j++) {
				names.push(this.elementName(literalNames, symbolicNames, j));
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	elementName(literalNames, symbolicNames, token) {
		if (token === Token.EOF) {
			return "<EOF>";
		} else if (token === Token.EPSILON) {
			return "<EPSILON>";
		} else {
			return literalNames[token] || symbolicNames[token];
		}
	}

	get length(){
		return this.intervals.map( interval => interval.length ).reduce((acc, val) => acc + val);
	}
}

module.exports = {
	Interval,
	IntervalSet
};


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/LL1Analyzer.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/LL1Analyzer.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Set, BitSet} = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {ATNConfig} = __webpack_require__(/*! ./atn/ATNConfig */ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js");
const {IntervalSet} = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const {RuleStopState} = __webpack_require__(/*! ./atn/ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {RuleTransition, NotSetTransition, WildcardTransition, AbstractPredicateTransition} = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js");
const {predictionContextFromRuleContext, PredictionContext, SingletonPredictionContext} = __webpack_require__(/*! ./PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");

class LL1Analyzer {
    constructor(atn) {
        this.atn = atn;
    }

    /**
     * Calculates the SLL(1) expected lookahead set for each outgoing transition
     * of an {@link ATNState}. The returned array has one element for each
     * outgoing transition in {@code s}. If the closure from transition
     * <em>i</em> leads to a semantic predicate before matching a symbol, the
     * element at index <em>i</em> of the result will be {@code null}.
     *
     * @param s the ATN state
     * @return the expected symbols for each outgoing transition of {@code s}.
     */
    getDecisionLookahead(s) {
        if (s === null) {
            return null;
        }
        const count = s.transitions.length;
        const look = [];
        for(let alt=0; alt< count; alt++) {
            look[alt] = new IntervalSet();
            const lookBusy = new Set();
            const seeThruPreds = false; // fail to get lookahead upon pred
            this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
                  look[alt], lookBusy, new BitSet(), seeThruPreds, false);
            // Wipe out lookahead for this alternative if we found nothing
            // or we had a predicate when we !seeThruPreds
            if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
                look[alt] = null;
            }
        }
        return look;
    }

    /**
     * Compute set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     *
     * <p>If {@code ctx} is {@code null} and the end of the rule containing
     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.
     * If {@code ctx} is not {@code null} and the end of the outermost rule is
     * reached, {@link Token//EOF} is added to the result set.</p>
     *
     * @param s the ATN state
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx the complete parser context, or {@code null} if the context
     * should be ignored
     *
     * @return The set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     */
    LOOK(s, stopState, ctx) {
        const r = new IntervalSet();
        const seeThruPreds = true; // ignore preds; get all lookahead
        ctx = ctx || null;
        const lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
        this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
        return r;
    }

    /**
     * Compute set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     *
     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to
     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
     * {@code true} and {@code stopState} or the end of the outermost rule is
     * reached, {@link Token//EOF} is added to the result set.</p>
     *
     * @param s the ATN state.
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx The outer context, or {@code null} if the outer context should
     * not be used.
     * @param look The result lookahead set.
     * @param lookBusy A set used for preventing epsilon closures in the ATN
     * from causing a stack overflow. Outside code should pass
     * {@code new Set<ATNConfig>} for this argument.
     * @param calledRuleStack A set used for preventing left recursion in the
     * ATN from causing a stack overflow. Outside code should pass
     * {@code new BitSet()} for this argument.
     * @param seeThruPreds {@code true} to true semantic predicates as
     * implicitly {@code true} and "see through them", otherwise {@code false}
     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
     * result if one is encountered.
     * @param addEOF Add {@link Token//EOF} to the result if the end of the
     * outermost context is reached. This parameter has no effect if {@code ctx}
     * is {@code null}.
     */
    _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
        const c = new ATNConfig({state:s, alt:0, context: ctx}, null);
        if (lookBusy.contains(c)) {
            return;
        }
        lookBusy.add(c);
        if (s === stopState) {
            if (ctx ===null) {
                look.addOne(Token.EPSILON);
                return;
            } else if (ctx.isEmpty() && addEOF) {
                look.addOne(Token.EOF);
                return;
            }
        }
        if (s instanceof RuleStopState ) {
            if (ctx ===null) {
                look.addOne(Token.EPSILON);
                return;
            } else if (ctx.isEmpty() && addEOF) {
                look.addOne(Token.EOF);
                return;
            }
            if (ctx !== PredictionContext.EMPTY) {
                const removed = calledRuleStack.contains(s.ruleIndex);
                try {
                    calledRuleStack.remove(s.ruleIndex);
                    // run thru all possible stack tops in ctx
                    for (let i = 0; i < ctx.length; i++) {
                        const returnState = this.atn.states[ctx.getReturnState(i)];
                        this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                    }
                }finally {
                    if (removed) {
                        calledRuleStack.add(s.ruleIndex);
                    }
                }
                return;
            }
        }
        for(let j=0; j<s.transitions.length; j++) {
            const t = s.transitions[j];
            if (t.constructor === RuleTransition) {
                if (calledRuleStack.contains(t.target.ruleIndex)) {
                    continue;
                }
                const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
                try {
                    calledRuleStack.add(t.target.ruleIndex);
                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    calledRuleStack.remove(t.target.ruleIndex);
                }
            } else if (t instanceof AbstractPredicateTransition ) {
                if (seeThruPreds) {
                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } else {
                    look.addOne(LL1Analyzer.HIT_PRED);
                }
            } else if( t.isEpsilon) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else if (t.constructor === WildcardTransition) {
                look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
            } else {
                let set = t.label;
                if (set !== null) {
                    if (t instanceof NotSetTransition) {
                        set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                    }
                    look.addSet(set);
                }
            }
        }
    }
}

/**
 * Special value added to the lookahead sets to indicate that we hit
 * a predicate during analysis if {@code seeThruPreds==false}.
 */
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;

module.exports = LL1Analyzer;



/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Lexer.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Lexer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const Recognizer = __webpack_require__(/*! ./Recognizer */ "./node_modules/antlr4/src/antlr4/Recognizer.js");
const CommonTokenFactory = __webpack_require__(/*! ./CommonTokenFactory */ "./node_modules/antlr4/src/antlr4/CommonTokenFactory.js");
const {RecognitionException} = __webpack_require__(/*! ./error/Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js");
const {LexerNoViableAltException} = __webpack_require__(/*! ./error/Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js");

class TokenSource {}

/**
 * A lexer is recognizer that draws input symbols from a character stream.
 * lexer grammars result in a subclass of this object. A Lexer object
 * uses simplified match() and error recovery mechanisms in the interest of speed.
 */
class Lexer extends Recognizer {
	constructor(input) {
		super();
		this._input = input;
		this._factory = CommonTokenFactory.DEFAULT;
		this._tokenFactorySourcePair = [ this, input ];

		this._interp = null; // child classes must populate this

		/**
		 * The goal of all lexer rules/methods is to create a token object.
		 * this is an instance variable as multiple rules may collaborate to
		 * create a single token. nextToken will return this object after
		 * matching lexer rule(s). If you subclass to allow multiple token
		 * emissions, then set this to the last token to be matched or
		 * something nonnull so that the auto token emit mechanism will not
		 * emit another token.
		 */
		this._token = null;

		/**
		 * What character index in the stream did the current token start at?
		 * Needed, for example, to get the text for current token. Set at
		 * the start of nextToken.
		 */
		this._tokenStartCharIndex = -1;

		// The line on which the first character of the token resides///
		this._tokenStartLine = -1;

		// The character position of first character within the line///
		this._tokenStartColumn = -1;

		// Once we see EOF on char stream, next token will be EOF.
		// If you have DONE : EOF ; then you see DONE EOF.
		this._hitEOF = false;

		// The channel number for the current token///
		this._channel = Token.DEFAULT_CHANNEL;

		// The token type for the current token///
		this._type = Token.INVALID_TYPE;

		this._modeStack = [];
		this._mode = Lexer.DEFAULT_MODE;

		/**
		 * You can set the text for the current token to override what is in
		 * the input char buffer. Use setText() or can set this instance var.
		 */
		this._text = null;
	}

	reset() {
		// wack Lexer state variables
		if (this._input !== null) {
			this._input.seek(0); // rewind the input
		}
		this._token = null;
		this._type = Token.INVALID_TYPE;
		this._channel = Token.DEFAULT_CHANNEL;
		this._tokenStartCharIndex = -1;
		this._tokenStartColumn = -1;
		this._tokenStartLine = -1;
		this._text = null;

		this._hitEOF = false;
		this._mode = Lexer.DEFAULT_MODE;
		this._modeStack = [];

		this._interp.reset();
	}

// Return a token from this source; i.e., match a token on the char stream.
	nextToken() {
		if (this._input === null) {
			throw "nextToken requires a non-null input stream.";
		}

		/**
		 * Mark start location in char stream so unbuffered streams are
		 * guaranteed at least have text of current token
		 */
		const tokenStartMarker = this._input.mark();
		try {
			while (true) {
				if (this._hitEOF) {
					this.emitEOF();
					return this._token;
				}
				this._token = null;
				this._channel = Token.DEFAULT_CHANNEL;
				this._tokenStartCharIndex = this._input.index;
				this._tokenStartColumn = this._interp.column;
				this._tokenStartLine = this._interp.line;
				this._text = null;
				let continueOuter = false;
				while (true) {
					this._type = Token.INVALID_TYPE;
					let ttype = Lexer.SKIP;
					try {
						ttype = this._interp.match(this._input, this._mode);
					} catch (e) {
						if(e instanceof RecognitionException) {
							this.notifyListeners(e); // report error
							this.recover(e);
						} else {
							console.log(e.stack);
							throw e;
						}
					}
					if (this._input.LA(1) === Token.EOF) {
						this._hitEOF = true;
					}
					if (this._type === Token.INVALID_TYPE) {
						this._type = ttype;
					}
					if (this._type === Lexer.SKIP) {
						continueOuter = true;
						break;
					}
					if (this._type !== Lexer.MORE) {
						break;
					}
				}
				if (continueOuter) {
					continue;
				}
				if (this._token === null) {
					this.emit();
				}
				return this._token;
			}
		} finally {
			// make sure we release marker after match or
			// unbuffered char stream will keep buffering
			this._input.release(tokenStartMarker);
		}
	}

	/**
	 * Instruct the lexer to skip creating a token for current lexer rule
	 * and look for another token. nextToken() knows to keep looking when
	 * a lexer rule finishes with token set to SKIP_TOKEN. Recall that
	 * if token==null at end of any token rule, it creates one for you
	 * and emits it.
	 */
	skip() {
		this._type = Lexer.SKIP;
	}

	more() {
		this._type = Lexer.MORE;
	}

	mode(m) {
		this._mode = m;
	}

	pushMode(m) {
		if (this._interp.debug) {
			console.log("pushMode " + m);
		}
		this._modeStack.push(this._mode);
		this.mode(m);
	}

	popMode() {
		if (this._modeStack.length === 0) {
			throw "Empty Stack";
		}
		if (this._interp.debug) {
			console.log("popMode back to " + this._modeStack.slice(0, -1));
		}
		this.mode(this._modeStack.pop());
		return this._mode;
	}

	/**
	 * By default does not support multiple emits per nextToken invocation
	 * for efficiency reasons. Subclass and override this method, nextToken,
	 * and getToken (to push tokens into a list and pull from that list
	 * rather than a single variable as this implementation does).
	 */
	emitToken(token) {
		this._token = token;
	}

	/**
	 * The standard method called to automatically emit a token at the
	 * outermost lexical rule. The token object should point into the
	 * char buffer start..stop. If there is a text override in 'text',
	 * use that to set the token's text. Override this method to emit
	 * custom Token objects or provide a new factory.
	 */
	emit() {
		const t = this._factory.create(this._tokenFactorySourcePair, this._type,
				this._text, this._channel, this._tokenStartCharIndex, this
						.getCharIndex() - 1, this._tokenStartLine,
				this._tokenStartColumn);
		this.emitToken(t);
		return t;
	}

	emitEOF() {
		const cpos = this.column;
		const lpos = this.line;
		const eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
				null, Token.DEFAULT_CHANNEL, this._input.index,
				this._input.index - 1, lpos, cpos);
		this.emitToken(eof);
		return eof;
	}

// What is the index of the current character of lookahead?///
	getCharIndex() {
		return this._input.index;
	}

	/**
	 * Return a list of all Token objects in input char stream.
	 * Forces load of all tokens. Does not include EOF token.
	 */
	getAllTokens() {
		const tokens = [];
		let t = this.nextToken();
		while (t.type !== Token.EOF) {
			tokens.push(t);
			t = this.nextToken();
		}
		return tokens;
	}

	notifyListeners(e) {
		const start = this._tokenStartCharIndex;
		const stop = this._input.index;
		const text = this._input.getText(start, stop);
		const msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
		const listener = this.getErrorListenerDispatch();
		listener.syntaxError(this, null, this._tokenStartLine,
				this._tokenStartColumn, msg, e);
	}

	getErrorDisplay(s) {
		const d = [];
		for (let i = 0; i < s.length; i++) {
			d.push(s[i]);
		}
		return d.join('');
	}

	getErrorDisplayForChar(c) {
		if (c.charCodeAt(0) === Token.EOF) {
			return "<EOF>";
		} else if (c === '\n') {
			return "\\n";
		} else if (c === '\t') {
			return "\\t";
		} else if (c === '\r') {
			return "\\r";
		} else {
			return c;
		}
	}

	getCharErrorDisplay(c) {
		return "'" + this.getErrorDisplayForChar(c) + "'";
	}

	/**
	 * Lexers can normally match any char in it's vocabulary after matching
	 * a token, so do the easy thing and just kill a character and hope
	 * it all works out. You can instead use the rule invocation stack
	 * to do sophisticated error recovery if you are in a fragment rule.
	 */
	recover(re) {
		if (this._input.LA(1) !== Token.EOF) {
			if (re instanceof LexerNoViableAltException) {
				// skip a char and try again
				this._interp.consume(this._input);
			} else {
				// TODO: Do we lose character or line position information?
				this._input.consume();
			}
		}
	}

	get inputStream(){
		return this._input;
	}

	set inputStream(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}

	get sourceName(){
		return this._input.sourceName;
	}

	get type(){
		return this._type;
	}

	set type(type) {
		this._type = type;
	}

	get line(){
		return this._interp.line;
	}

	set line(line) {
		this._interp.line = line;
	}

	get column(){
		return this._interp.column;
	}

	set column(column) {
		this._interp.column = column;
	}

	get text(){
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	}

	set text(text) {
		this._text = text;
	}
}




Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

// Set the char stream and reset the lexer


module.exports = Lexer;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Parser.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Parser.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {ParseTreeListener, TerminalNode, ErrorNode} = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const Recognizer = __webpack_require__(/*! ./Recognizer */ "./node_modules/antlr4/src/antlr4/Recognizer.js");
const {DefaultErrorStrategy} = __webpack_require__(/*! ./error/ErrorStrategy */ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js");
const ATNDeserializer = __webpack_require__(/*! ./atn/ATNDeserializer */ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js");
const ATNDeserializationOptions = __webpack_require__(/*! ./atn/ATNDeserializationOptions */ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js");
const Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/src/antlr4/Lexer.js");

class TraceListener extends ParseTreeListener {
	constructor(parser) {
		super();
		this.parser = parser;
	}

	enterEveryRule(ctx) {
		console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
	}

	visitTerminal(node) {
		console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
	}

	exitEveryRule(ctx) {
		console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
	}
}

class Parser extends Recognizer {
	/**
	 * this is all the parsing support code essentially; most of it is error
	 * recovery stuff.
	 */
	constructor(input) {
		super();
		// The input stream.
		this._input = null;
		/**
		 * The error handling strategy for the parser. The default value is a new
		 * instance of {@link DefaultErrorStrategy}.
		 */
		this._errHandler = new DefaultErrorStrategy();
		this._precedenceStack = [];
		this._precedenceStack.push(0);
		/**
		 * The {@link ParserRuleContext} object for the currently executing rule.
		 * this is always non-null during the parsing process.
		 */
		this._ctx = null;
		/**
		 * Specifies whether or not the parser should construct a parse tree during
		 * the parsing process. The default value is {@code true}.
		 */
		this.buildParseTrees = true;
		/**
		 * When {@link //setTrace}{@code (true)} is called, a reference to the
		 * {@link TraceListener} is stored here so it can be easily removed in a
		 * later call to {@link //setTrace}{@code (false)}. The listener itself is
		 * implemented as a parser listener so this field is not directly used by
		 * other parser methods.
		 */
		this._tracer = null;
		/**
		 * The list of {@link ParseTreeListener} listeners registered to receive
		 * events during the parse.
		 */
		this._parseListeners = null;
		/**
		 * The number of syntax errors reported during parsing. this value is
		 * incremented each time {@link //notifyErrorListeners} is called.
		 */
		this._syntaxErrors = 0;
		this.setInputStream(input);
	}

	// reset the parser's state
	reset() {
		if (this._input !== null) {
			this._input.seek(0);
		}
		this._errHandler.reset(this);
		this._ctx = null;
		this._syntaxErrors = 0;
		this.setTrace(false);
		this._precedenceStack = [];
		this._precedenceStack.push(0);
		if (this._interp !== null) {
			this._interp.reset();
		}
	}

	/**
	 * Match current input symbol against {@code ttype}. If the symbol type
	 * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
	 * called to complete the match process.
	 *
	 * <p>If the symbol type does not match,
	 * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
	 * strategy to attempt recovery. If {@link //getBuildParseTree} is
	 * {@code true} and the token index of the symbol returned by
	 * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
	 * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
	 *
	 * @param ttype the token type to match
	 * @return the matched symbol
	 * @throws RecognitionException if the current input symbol did not match
	 * {@code ttype} and the error strategy could not recover from the
	 * mismatched symbol
	 */
	match(ttype) {
		let t = this.getCurrentToken();
		if (t.type === ttype) {
			this._errHandler.reportMatch(this);
			this.consume();
		} else {
			t = this._errHandler.recoverInline(this);
			if (this.buildParseTrees && t.tokenIndex === -1) {
				// we must have conjured up a new token during single token
				// insertion
				// if it's not the current symbol
				this._ctx.addErrorNode(t);
			}
		}
		return t;
	}

	/**
	 * Match current input symbol as a wildcard. If the symbol type matches
	 * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
	 * and {@link //consume} are called to complete the match process.
	 *
	 * <p>If the symbol type does not match,
	 * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
	 * strategy to attempt recovery. If {@link //getBuildParseTree} is
	 * {@code true} and the token index of the symbol returned by
	 * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
	 * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
	 *
	 * @return the matched symbol
	 * @throws RecognitionException if the current input symbol did not match
	 * a wildcard and the error strategy could not recover from the mismatched
	 * symbol
	 */
	matchWildcard() {
		let t = this.getCurrentToken();
		if (t.type > 0) {
			this._errHandler.reportMatch(this);
			this.consume();
		} else {
			t = this._errHandler.recoverInline(this);
			if (this._buildParseTrees && t.tokenIndex === -1) {
				// we must have conjured up a new token during single token
				// insertion
				// if it's not the current symbol
				this._ctx.addErrorNode(t);
			}
		}
		return t;
	}

	getParseListeners() {
		return this._parseListeners || [];
	}

	/**
	 * Registers {@code listener} to receive events during the parsing process.
	 *
	 * <p>To support output-preserving grammar transformations (including but not
	 * limited to left-recursion removal, automated left-factoring, and
	 * optimized code generation), calls to listener methods during the parse
	 * may differ substantially from calls made by
	 * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
	 * particular, rule entry and exit events may occur in a different order
	 * during the parse than after the parser. In addition, calls to certain
	 * rule entry methods may be omitted.</p>
	 *
	 * <p>With the following specific exceptions, calls to listener events are
	 * <em>deterministic</em>, i.e. for identical input the calls to listener
	 * methods will be the same.</p>
	 *
	 * <ul>
	 * <li>Alterations to the grammar used to generate code may change the
	 * behavior of the listener calls.</li>
	 * <li>Alterations to the command line options passed to ANTLR 4 when
	 * generating the parser may change the behavior of the listener calls.</li>
	 * <li>Changing the version of the ANTLR Tool used to generate the parser
	 * may change the behavior of the listener calls.</li>
	 * </ul>
	 *
	 * @param listener the listener to add
	 *
	 * @throws NullPointerException if {@code} listener is {@code null}
	 */
	addParseListener(listener) {
		if (listener === null) {
			throw "listener";
		}
		if (this._parseListeners === null) {
			this._parseListeners = [];
		}
		this._parseListeners.push(listener);
	}

	/**
	 * Remove {@code listener} from the list of parse listeners.
	 *
	 * <p>If {@code listener} is {@code null} or has not been added as a parse
	 * listener, this method does nothing.</p>
	 * @param listener the listener to remove
	 */
	removeParseListener(listener) {
		if (this._parseListeners !== null) {
			const idx = this._parseListeners.indexOf(listener);
			if (idx >= 0) {
				this._parseListeners.splice(idx, 1);
			}
			if (this._parseListeners.length === 0) {
				this._parseListeners = null;
			}
		}
	}

	// Remove all parse listeners.
	removeParseListeners() {
		this._parseListeners = null;
	}

	// Notify any parse listeners of an enter rule event.
	triggerEnterRuleEvent() {
		if (this._parseListeners !== null) {
			const ctx = this._ctx;
			this._parseListeners.forEach(function(listener) {
				listener.enterEveryRule(ctx);
				ctx.enterRule(listener);
			});
		}
	}

	/**
	 * Notify any parse listeners of an exit rule event.
	 * @see //addParseListener
	 */
	triggerExitRuleEvent() {
		if (this._parseListeners !== null) {
			// reverse order walk of listeners
			const ctx = this._ctx;
			this._parseListeners.slice(0).reverse().forEach(function(listener) {
				ctx.exitRule(listener);
				listener.exitEveryRule(ctx);
			});
		}
	}

	getTokenFactory() {
		return this._input.tokenSource._factory;
	}

	// Tell our token source and error strategy about a new way to create tokens.
	setTokenFactory(factory) {
		this._input.tokenSource._factory = factory;
	}

	/**
	 * The ATN with bypass alternatives is expensive to create so we create it
	 * lazily.
	 *
	 * @throws UnsupportedOperationException if the current parser does not
	 * implement the {@link //getSerializedATN()} method.
	 */
	getATNWithBypassAlts() {
		const serializedAtn = this.getSerializedATN();
		if (serializedAtn === null) {
			throw "The current parser does not support an ATN with bypass alternatives.";
		}
		let result = this.bypassAltsAtnCache[serializedAtn];
		if (result === null) {
			const deserializationOptions = new ATNDeserializationOptions();
			deserializationOptions.generateRuleBypassTransitions = true;
			result = new ATNDeserializer(deserializationOptions)
					.deserialize(serializedAtn);
			this.bypassAltsAtnCache[serializedAtn] = result;
		}
		return result;
	}

	/**
	 * The preferred method of getting a tree pattern. For example, here's a
	 * sample use:
	 *
	 * <pre>
	 * ParseTree t = parser.expr();
	 * ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
	 * MyParser.RULE_expr);
	 * ParseTreeMatch m = p.match(t);
	 * String id = m.get("ID");
	 * </pre>
	 */
	compileParseTreePattern(pattern, patternRuleIndex, lexer) {
		lexer = lexer || null;
		if (lexer === null) {
			if (this.getTokenStream() !== null) {
				const tokenSource = this.getTokenStream().tokenSource;
				if (tokenSource instanceof Lexer) {
					lexer = tokenSource;
				}
			}
		}
		if (lexer === null) {
			throw "Parser can't discover a lexer to use";
		}
		const m = new ParseTreePatternMatcher(lexer, this);
		return m.compile(pattern, patternRuleIndex);
	}

	getInputStream() {
		return this.getTokenStream();
	}

	setInputStream(input) {
		this.setTokenStream(input);
	}

	getTokenStream() {
		return this._input;
	}

	// Set the token stream and reset the parser.
	setTokenStream(input) {
		this._input = null;
		this.reset();
		this._input = input;
	}

	/**
	 * Match needs to return the current input symbol, which gets put
	 * into the label for the associated token ref; e.g., x=ID.
	 */
	getCurrentToken() {
		return this._input.LT(1);
	}

	notifyErrorListeners(msg, offendingToken, err) {
		offendingToken = offendingToken || null;
		err = err || null;
		if (offendingToken === null) {
			offendingToken = this.getCurrentToken();
		}
		this._syntaxErrors += 1;
		const line = offendingToken.line;
		const column = offendingToken.column;
		const listener = this.getErrorListenerDispatch();
		listener.syntaxError(this, offendingToken, line, column, msg, err);
	}

	/**
	 * Consume and return the {@linkplain //getCurrentToken current symbol}.
	 *
	 * <p>E.g., given the following input with {@code A} being the current
	 * lookahead symbol, this function moves the cursor to {@code B} and returns
	 * {@code A}.</p>
	 *
	 * <pre>
	 * A B
	 * ^
	 * </pre>
	 *
	 * If the parser is not in error recovery mode, the consumed symbol is added
	 * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
	 * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
	 * If the parser <em>is</em> in error recovery mode, the consumed symbol is
	 * added to the parse tree using
	 * {@link ParserRuleContext//addErrorNode(Token)}, and
	 * {@link ParseTreeListener//visitErrorNode} is called on any parse
	 * listeners.
	 */
	consume() {
		const o = this.getCurrentToken();
		if (o.type !== Token.EOF) {
			this.getInputStream().consume();
		}
		const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
		if (this.buildParseTrees || hasListener) {
			let node;
			if (this._errHandler.inErrorRecoveryMode(this)) {
				node = this._ctx.addErrorNode(o);
			} else {
				node = this._ctx.addTokenNode(o);
			}
			node.invokingState = this.state;
			if (hasListener) {
				this._parseListeners.forEach(function(listener) {
					if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
						listener.visitErrorNode(node);
					} else if (node instanceof TerminalNode) {
						listener.visitTerminal(node);
					}
				});
			}
		}
		return o;
	}

	addContextToParseTree() {
		// add current context to parent if we have a parent
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.addChild(this._ctx);
		}
	}

	/**
	 * Always called by generated parsers upon entry to a rule. Access field
	 * {@link //_ctx} get the current context.
	 */
	enterRule(localctx, state, ruleIndex) {
		this.state = state;
		this._ctx = localctx;
		this._ctx.start = this._input.LT(1);
		if (this.buildParseTrees) {
			this.addContextToParseTree();
		}
		this.triggerEnterRuleEvent();
	}

	exitRule() {
		this._ctx.stop = this._input.LT(-1);
		// trigger event on _ctx, before it reverts to parent
		this.triggerExitRuleEvent();
		this.state = this._ctx.invokingState;
		this._ctx = this._ctx.parentCtx;
	}

	enterOuterAlt(localctx, altNum) {
		localctx.setAltNumber(altNum);
		// if we have new localctx, make sure we replace existing ctx
		// that is previous child of parse tree
		if (this.buildParseTrees && this._ctx !== localctx) {
			if (this._ctx.parentCtx !== null) {
				this._ctx.parentCtx.removeLastChild();
				this._ctx.parentCtx.addChild(localctx);
			}
		}
		this._ctx = localctx;
	}

	/**
	 * Get the precedence level for the top-most precedence rule.
	 *
	 * @return The precedence level for the top-most precedence rule, or -1 if
	 * the parser context is not nested within a precedence rule.
	 */
	getPrecedence() {
		if (this._precedenceStack.length === 0) {
			return -1;
		} else {
			return this._precedenceStack[this._precedenceStack.length-1];
		}
	}

	enterRecursionRule(localctx, state, ruleIndex, precedence) {
	   this.state = state;
	   this._precedenceStack.push(precedence);
	   this._ctx = localctx;
	   this._ctx.start = this._input.LT(1);
	   this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
   }

	// Like {@link //enterRule} but for recursive rules.
	pushNewRecursionContext(localctx, state, ruleIndex) {
		const previous = this._ctx;
		previous.parentCtx = localctx;
		previous.invokingState = state;
		previous.stop = this._input.LT(-1);

		this._ctx = localctx;
		this._ctx.start = previous.start;
		if (this.buildParseTrees) {
			this._ctx.addChild(previous);
		}
		this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
	}

	unrollRecursionContexts(parentCtx) {
		this._precedenceStack.pop();
		this._ctx.stop = this._input.LT(-1);
		const retCtx = this._ctx; // save current ctx (return value)
		// unroll so _ctx is as it was before call to recursive method
		const parseListeners = this.getParseListeners();
		if (parseListeners !== null && parseListeners.length > 0) {
			while (this._ctx !== parentCtx) {
				this.triggerExitRuleEvent();
				this._ctx = this._ctx.parentCtx;
			}
		} else {
			this._ctx = parentCtx;
		}
		// hook into tree
		retCtx.parentCtx = parentCtx;
		if (this.buildParseTrees && parentCtx !== null) {
			// add return ctx into invoking rule's tree
			parentCtx.addChild(retCtx);
		}
	}

	getInvokingContext(ruleIndex) {
		let ctx = this._ctx;
		while (ctx !== null) {
			if (ctx.ruleIndex === ruleIndex) {
				return ctx;
			}
			ctx = ctx.parentCtx;
		}
		return null;
	}

	precpred(localctx, precedence) {
		return precedence >= this._precedenceStack[this._precedenceStack.length-1];
	}

	inContext(context) {
		// TODO: useful in parser?
		return false;
	}

	/**
	 * Checks whether or not {@code symbol} can follow the current state in the
	 * ATN. The behavior of this method is equivalent to the following, but is
	 * implemented such that the complete context-sensitive follow set does not
	 * need to be explicitly constructed.
	 *
	 * <pre>
	 * return getExpectedTokens().contains(symbol);
	 * </pre>
	 *
	 * @param symbol the symbol type to check
	 * @return {@code true} if {@code symbol} can follow the current state in
	 * the ATN, otherwise {@code false}.
	 */
	isExpectedToken(symbol) {
		const atn = this._interp.atn;
		let ctx = this._ctx;
		const s = atn.states[this.state];
		let following = atn.nextTokens(s);
		if (following.contains(symbol)) {
			return true;
		}
		if (!following.contains(Token.EPSILON)) {
			return false;
		}
		while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
			const invokingState = atn.states[ctx.invokingState];
			const rt = invokingState.transitions[0];
			following = atn.nextTokens(rt.followState);
			if (following.contains(symbol)) {
				return true;
			}
			ctx = ctx.parentCtx;
		}
		if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Computes the set of input symbols which could follow the current parser
	 * state and context, as given by {@link //getState} and {@link //getContext},
	 * respectively.
	 *
	 * @see ATN//getExpectedTokens(int, RuleContext)
	 */
	getExpectedTokens() {
		return this._interp.atn.getExpectedTokens(this.state, this._ctx);
	}

	getExpectedTokensWithinCurrentRule() {
		const atn = this._interp.atn;
		const s = atn.states[this.state];
		return atn.nextTokens(s);
	}

	// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.
	getRuleIndex(ruleName) {
		const ruleIndex = this.getRuleIndexMap()[ruleName];
		if (ruleIndex !== null) {
			return ruleIndex;
		} else {
			return -1;
		}
	}

	/**
	 * Return List&lt;String&gt; of the rule names in your parser instance
	 * leading up to a call to the current rule. You could override if
	 * you want more details such as the file/line info of where
	 * in the ATN a rule is invoked.
	 *
	 * this is very useful for error messages.
	 */
	getRuleInvocationStack(p) {
		p = p || null;
		if (p === null) {
			p = this._ctx;
		}
		const stack = [];
		while (p !== null) {
			// compute what follows who invoked us
			const ruleIndex = p.ruleIndex;
			if (ruleIndex < 0) {
				stack.push("n/a");
			} else {
				stack.push(this.ruleNames[ruleIndex]);
			}
			p = p.parentCtx;
		}
		return stack;
	}

	// For debugging and other purposes.
	getDFAStrings() {
		return this._interp.decisionToDFA.toString();
	}

	// For debugging and other purposes.
	dumpDFA() {
		let seenOne = false;
		for (let i = 0; i < this._interp.decisionToDFA.length; i++) {
			const dfa = this._interp.decisionToDFA[i];
			if (dfa.states.length > 0) {
				if (seenOne) {
					console.log();
				}
				this.printer.println("Decision " + dfa.decision + ":");
				this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
				seenOne = true;
			}
		}
	}

	/*
		"			printer = function() {\r\n" +
		"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
		"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
		"			};\r\n" +
		*/
	getSourceName() {
		return this._input.sourceName;
	}

	/**
	 * During a parse is sometimes useful to listen in on the rule entry and exit
	 * events as well as token matches. this is for quick and dirty debugging.
	 */
	setTrace(trace) {
		if (!trace) {
			this.removeParseListener(this._tracer);
			this._tracer = null;
		} else {
			if (this._tracer !== null) {
				this.removeParseListener(this._tracer);
			}
			this._tracer = new TraceListener(this);
			this.addParseListener(this._tracer);
		}
	}
}

/**
 * this field maps from the serialized ATN string to the deserialized {@link
 * ATN} with
 * bypass alternatives.
 *
 * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
 */
Parser.bypassAltsAtnCache = {};

module.exports = Parser;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/ParserRuleContext.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/ParserRuleContext.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const RuleContext = __webpack_require__(/*! ./RuleContext */ "./node_modules/antlr4/src/antlr4/RuleContext.js");
const Tree = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const INVALID_INTERVAL = Tree.INVALID_INTERVAL;
const TerminalNode = Tree.TerminalNode;
const TerminalNodeImpl = Tree.TerminalNodeImpl;
const ErrorNodeImpl = Tree.ErrorNodeImpl;
const Interval = (__webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js").Interval);

/**
 * A rule invocation record for parsing.
 *
 *  Contains all of the information about the current rule not stored in the
 *  RuleContext. It handles parse tree children list, Any ATN state
 *  tracing, and the default values available for rule indications:
 *  start, stop, rule index, current alt number, current
 *  ATN state.
 *
 *  Subclasses made for each rule and grammar track the parameters,
 *  return values, locals, and labels specific to that rule. These
 *  are the objects that are returned from rules.
 *
 *  Note text is not an actual field of a rule return value; it is computed
 *  from start and stop using the input stream's toString() method.  I
 *  could add a ctor to this so that we can pass in and store the input
 *  stream, but I'm not sure we want to do that.  It would seem to be undefined
 *  to get the .text property anyway if the rule matches tokens from multiple
 *  input streams.
 *
 *  I do not use getters for fields of objects that are used simply to
 *  group values such as this aggregate.  The getters/setters are there to
 *  satisfy the superclass interface.
 */
class ParserRuleContext extends RuleContext {
	constructor(parent, invokingStateNumber) {
		parent = parent || null;
		invokingStateNumber = invokingStateNumber || null;
		super(parent, invokingStateNumber);
		this.ruleIndex = -1;
		/**
		 * If we are debugging or building a parse tree for a visitor,
		 * we need to track all of the tokens and rule invocations associated
		 * with this rule's context. This is empty for parsing w/o tree constr.
		 * operation because we don't the need to track the details about
		 * how we parse this rule.
		 */
		this.children = null;
		this.start = null;
		this.stop = null;
		/**
		 * The exception that forced this rule to return. If the rule successfully
		 * completed, this is {@code null}.
		 */
		this.exception = null;
	}

	// COPY a ctx (I'm deliberately not using copy constructor)
	copyFrom(ctx) {
		// from RuleContext
		this.parentCtx = ctx.parentCtx;
		this.invokingState = ctx.invokingState;
		this.children = null;
		this.start = ctx.start;
		this.stop = ctx.stop;
		// copy any error nodes to alt label node
		if(ctx.children) {
			this.children = [];
			// reset parent pointer for any error nodes
			ctx.children.map(function(child) {
				if (child instanceof ErrorNodeImpl) {
					this.children.push(child);
					child.parentCtx = this;
				}
			}, this);
		}
	}

	// Double dispatch methods for listeners
	enterRule(listener) {
	}

	exitRule(listener) {
	}

	// Does not set parent link; other add methods do that
	addChild(child) {
		if (this.children === null) {
			this.children = [];
		}
		this.children.push(child);
		return child;
	}

	/** Used by enterOuterAlt to toss out a RuleContext previously added as
	 * we entered a rule. If we have // label, we will need to remove
	 * generic ruleContext object.
	 */
	removeLastChild() {
		if (this.children !== null) {
			this.children.pop();
		}
	}

	addTokenNode(token) {
		const node = new TerminalNodeImpl(token);
		this.addChild(node);
		node.parentCtx = this;
		return node;
	}

	addErrorNode(badToken) {
		const node = new ErrorNodeImpl(badToken);
		this.addChild(node);
		node.parentCtx = this;
		return node;
	}

	getChild(i, type) {
		type = type || null;
		if (this.children === null || i < 0 || i >= this.children.length) {
			return null;
		}
		if (type === null) {
			return this.children[i];
		} else {
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if(child instanceof type) {
					if(i===0) {
						return child;
					} else {
						i -= 1;
					}
				}
			}
			return null;
		}
	}

	getToken(ttype, i) {
		if (this.children === null || i < 0 || i >= this.children.length) {
			return null;
		}
		for(let j=0; j<this.children.length; j++) {
			const child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					if(i===0) {
						return child;
					} else {
						i -= 1;
					}
				}
			}
		}
		return null;
	}

	getTokens(ttype ) {
		if (this.children=== null) {
			return [];
		} else {
			const tokens = [];
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if (child instanceof TerminalNode) {
					if (child.symbol.type === ttype) {
						tokens.push(child);
					}
				}
			}
			return tokens;
		}
	}

	getTypedRuleContext(ctxType, i) {
		return this.getChild(i, ctxType);
	}

	getTypedRuleContexts(ctxType) {
		if (this.children=== null) {
			return [];
		} else {
			const contexts = [];
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if (child instanceof ctxType) {
					contexts.push(child);
				}
			}
			return contexts;
		}
	}

	getChildCount() {
		if (this.children=== null) {
			return 0;
		} else {
			return this.children.length;
		}
	}

	getSourceInterval() {
		if( this.start === null || this.stop === null) {
			return INVALID_INTERVAL;
		} else {
			return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
		}
	}
}

RuleContext.EMPTY = new ParserRuleContext();

class InterpreterRuleContext extends ParserRuleContext {
	constructor(parent, invokingStateNumber, ruleIndex) {
		super(parent, invokingStateNumber);
		this.ruleIndex = ruleIndex;
	}
}

module.exports = ParserRuleContext;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/PredictionContext.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/PredictionContext.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const RuleContext = __webpack_require__(/*! ./RuleContext */ "./node_modules/antlr4/src/antlr4/RuleContext.js");
const {Hash, Map, equalArrays} = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

class PredictionContext {

	constructor(cachedHashCode) {
		this.cachedHashCode = cachedHashCode;
	}

	/**
	 * Stores the computed hash code of this {@link PredictionContext}. The hash
	 * code is computed in parts to match the following reference algorithm.
	 *
	 * <pre>
	 * private int referenceHashCode() {
	 * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
	 * //INITIAL_HASH});
	 *
	 * for (int i = 0; i &lt; {@link //size()}; i++) {
	 * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
	 * getParent}(i));
	 * }
	 *
	 * for (int i = 0; i &lt; {@link //size()}; i++) {
	 * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
	 * //getReturnState getReturnState}(i));
	 * }
	 *
	 * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
	 * //size()});
	 * return hash;
	 * }
	 * </pre>
	 * This means only the {@link //EMPTY} context is in set.
	 */
	isEmpty() {
		return this === PredictionContext.EMPTY;
	}

	hasEmptyPath() {
		return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
	}

	hashCode() {
		return this.cachedHashCode;
	}

	updateHashCode(hash) {
		hash.update(this.cachedHashCode);
	}
}

/**
 * Represents {@code $} in local context prediction, which means wildcard.
 * {@code//+x =//}.
 */
PredictionContext.EMPTY = null;

/**
 * Represents {@code $} in an array in full context mode, when {@code $}
 * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
 * {@code $} = {@link //EMPTY_RETURN_STATE}.
 */
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;


/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

/**
 * Used to cache {@link PredictionContext} objects. Its used for the shared
 * context cash associated with contexts in DFA states. This cache
 * can be used for both lexers and parsers.
 */
class PredictionContextCache {

	constructor() {
		this.cache = new Map();
	}

	/**
	 * Add a context to the cache and return it. If the context already exists,
	 * return that one instead and do not add a new context to the cache.
	 * Protect shared cache from unsafe thread access.
	 */
	add(ctx) {
		if (ctx === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY;
		}
		const existing = this.cache.get(ctx) || null;
		if (existing !== null) {
			return existing;
		}
		this.cache.put(ctx, ctx);
		return ctx;
	}

	get(ctx) {
		return this.cache.get(ctx) || null;
	}

	get length(){
		return this.cache.length;
	}
}


class SingletonPredictionContext extends PredictionContext {

	constructor(parent, returnState) {
		let hashCode = 0;
		const hash = new Hash();
		if(parent !== null) {
			hash.update(parent, returnState);
		} else {
			hash.update(1);
		}
		hashCode = hash.finish();
		super(hashCode);
		this.parentCtx = parent;
		this.returnState = returnState;
	}

	getParent(index) {
		return this.parentCtx;
	}

	getReturnState(index) {
		return this.returnState;
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof SingletonPredictionContext)) {
			return false;
		} else if (this.hashCode() !== other.hashCode()) {
			return false; // can't be same if hash is different
		} else {
			if(this.returnState !== other.returnState)
				return false;
			else if(this.parentCtx==null)
				return other.parentCtx==null
			else
				return this.parentCtx.equals(other.parentCtx);
		}
	}

	toString() {
		const up = this.parentCtx === null ? "" : this.parentCtx.toString();
		if (up.length === 0) {
			if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
				return "$";
			} else {
				return "" + this.returnState;
			}
		} else {
			return "" + this.returnState + " " + up;
		}
	}

	get length(){
		return 1;
	}

	static create(parent, returnState) {
		if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
			// someone can pass in the bits of an array ctx that mean $
			return PredictionContext.EMPTY;
		} else {
			return new SingletonPredictionContext(parent, returnState);
		}
	}
}

class EmptyPredictionContext extends SingletonPredictionContext {

	constructor() {
		super(null, PredictionContext.EMPTY_RETURN_STATE);
	}

	isEmpty() {
		return true;
	}

	getParent(index) {
		return null;
	}

	getReturnState(index) {
		return this.returnState;
	}

	equals(other) {
		return this === other;
	}

	toString() {
		return "$";
	}
}


PredictionContext.EMPTY = new EmptyPredictionContext();

class ArrayPredictionContext extends PredictionContext {

	constructor(parents, returnStates) {
		/**
		 * Parent can be null only if full ctx mode and we make an array
		 * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
		 * null parent and
		 * returnState == {@link //EMPTY_RETURN_STATE}.
		 */
		const h = new Hash();
		h.update(parents, returnStates);
		const hashCode = h.finish();
		super(hashCode);
		this.parents = parents;
		this.returnStates = returnStates;
		return this;
	}

	isEmpty() {
		// since EMPTY_RETURN_STATE can only appear in the last position, we
		// don't need to verify that size==1
		return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
	}

	getParent(index) {
		return this.parents[index];
	}

	getReturnState(index) {
		return this.returnStates[index];
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof ArrayPredictionContext)) {
			return false;
		} else if (this.hashCode() !== other.hashCode()) {
			return false; // can't be same if hash is different
		} else {
			return equalArrays(this.returnStates, other.returnStates) &&
				equalArrays(this.parents, other.parents);
		}
	}

	toString() {
		if (this.isEmpty()) {
			return "[]";
		} else {
			let s = "[";
			for (let i = 0; i < this.returnStates.length; i++) {
				if (i > 0) {
					s = s + ", ";
				}
				if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
					s = s + "$";
					continue;
				}
				s = s + this.returnStates[i];
				if (this.parents[i] !== null) {
					s = s + " " + this.parents[i];
				} else {
					s = s + "null";
				}
			}
			return s + "]";
		}
	}

	get length(){
		return this.returnStates.length;
	}
}


/**
 * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
 * Return {@link //EMPTY} if {@code outerContext} is empty or null.
 */
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	const parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	const state = atn.states[outerContext.invokingState];
	const transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	const s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

/**
 * Merge two {@link SingletonPredictionContext} instances.
 *
 * <p>Stack tops equal, parents merge is same; return left graph.<br>
 * <embed src="images/SingletonMerge_SameRootSamePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Same stack top, parents differ; merge parents giving array node, then
 * remainders of those graphs. A new root node is created to point to the
 * merged parents.<br>
 * <embed src="images/SingletonMerge_SameRootDiffPar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Different stack tops pointing to same parent. Make array node for the
 * root where both element in the root point to the same (original)
 * parent.<br>
 * <embed src="images/SingletonMerge_DiffRootSamePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Different stack tops pointing to different parents. Make array node for
 * the root where each element points to the corresponding original
 * parent.<br>
 * <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
 * type="image/svg+xml"/></p>
 *
 * @param a the first {@link SingletonPredictionContext}
 * @param b the second {@link SingletonPredictionContext}
 * @param rootIsWildcard {@code true} if this is a local-context merge,
 * otherwise false to indicate a full-context merge
 * @param mergeCache
 */
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		let previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	const rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		const spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		let singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			const payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			const parents = [ singleParent, singleParent ];
			const apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		const payloads = [ a.returnState, b.returnState ];
		let parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		const a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

/**
 * Handle case where at least one of {@code a} or {@code b} is
 * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
 * to represent {@link //EMPTY}.
 *
 * <h2>Local-Context Merges</h2>
 *
 * <p>These local-context merge operations are used when {@code rootIsWildcard}
 * is true.</p>
 *
 * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
 * <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
 *
 * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
 * {@code //EMPTY}; return left graph.<br>
 * <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
 *
 * <p>Special case of last merge if local context.<br>
 * <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
 *
 * <h2>Full-Context Merges</h2>
 *
 * <p>These full-context merge operations are used when {@code rootIsWildcard}
 * is false.</p>
 *
 * <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
 *
 * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
 * null parent).<br>
 * <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
 *
 * <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
 *
 * @param a the first {@link SingletonPredictionContext}
 * @param b the second {@link SingletonPredictionContext}
 * @param rootIsWildcard {@code true} if this is a local-context merge,
 * otherwise false to indicate a full-context merge
 */
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			const payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			const parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			const payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			const parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

/**
 * Merge two {@link ArrayPredictionContext} instances.
 *
 * <p>Different tops, different parents.<br>
 * <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, same parents.<br>
 * <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, different parents.<br>
 * <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, all shared parents.<br>
 * <embed src="images/ArrayMerge_ShareTopSharePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Equal tops, merge parents and reduce top to
 * {@link SingletonPredictionContext}.<br>
 * <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
 */
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		let previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	let i = 0; // walks a
	let j = 0; // walks b
	let k = 0; // walks target M array

	let mergedReturnStates = [];
	let mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		const a_parent = a.parents[i];
		const b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			const payload = a.returnStates[i];
			// $+$ = $
			const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			const ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (let p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (let p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			const a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	const M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

/**
 * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
 * ones.
 */
function combineCommonParents(parents) {
	const uniqueParents = new Map();

	for (let p = 0; p < parents.length; p++) {
		const parent = parents[p];
		if (!(uniqueParents.containsKey(parent))) {
			uniqueParents.put(parent, parent);
		}
	}
	for (let q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents.get(parents[q]);
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	let existing = visited.get(context) || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited.put(context, existing);
		return existing;
	}
	let changed = false;
	let parents = [];
	for (let i = 0; i < parents.length; i++) {
		const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (let j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited.put(context, context);
		return context;
	}
	let updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited.put(updated, updated);
	visited.put(context, updated);

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = new Map();
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited.containsKey(context)) {
			return nodes;
		}
		visited.put(context, context);
		nodes.push(context);
		for (let i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

module.exports = {
	merge,
	PredictionContext,
	PredictionContextCache,
	SingletonPredictionContext,
	predictionContextFromRuleContext,
	getCachedPredictionContext
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Recognizer.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Recognizer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {ConsoleErrorListener} = __webpack_require__(/*! ./error/ErrorListener */ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js");
const {ProxyErrorListener} = __webpack_require__(/*! ./error/ErrorListener */ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js");

class Recognizer {
    constructor() {
        this._listeners = [ ConsoleErrorListener.INSTANCE ];
        this._interp = null;
        this._stateNumber = -1;
    }

    checkVersion(toolVersion) {
        const runtimeVersion = "4.9.3";
        if (runtimeVersion!==toolVersion) {
            console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
        }
    }

    addErrorListener(listener) {
        this._listeners.push(listener);
    }

    removeErrorListeners() {
        this._listeners = [];
    }

    getLiteralNames() {
        return Object.getPrototypeOf(this).constructor.literalNames || [];
    }

    getSymbolicNames() {
        return Object.getPrototypeOf(this).constructor.symbolicNames || [];
    }

    getTokenNames() {
        if(!this.tokenNames) {
            const literalNames = this.getLiteralNames();
            const symbolicNames = this.getSymbolicNames();
            const length = literalNames.length > symbolicNames.length ? literalNames.length : symbolicNames.length;
            this.tokenNames = [];
            for(let i=0; i<length; i++) {
                this.tokenNames[i] = literalNames[i] || symbolicNames[i] || "<INVALID";
            }
        }
        return this.tokenNames;
    }

    getTokenTypeMap() {
        const tokenNames = this.getTokenNames();
        if (tokenNames===null) {
            throw("The current recognizer does not provide a list of token names.");
        }
        let result = this.tokenTypeMapCache[tokenNames];
        if(result===undefined) {
            result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
            result.EOF = Token.EOF;
            this.tokenTypeMapCache[tokenNames] = result;
        }
        return result;
    }

    /**
     * Get a map from rule names to rule indexes.
     * <p>Used for XPath and tree pattern compilation.</p>
     */
    getRuleIndexMap() {
        const ruleNames = this.ruleNames;
        if (ruleNames===null) {
            throw("The current recognizer does not provide a list of rule names.");
        }
        let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?
        if(result===undefined) {
            result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
            this.ruleIndexMapCache[ruleNames] = result;
        }
        return result;
    }

    getTokenType(tokenName) {
        const ttype = this.getTokenTypeMap()[tokenName];
        if (ttype !==undefined) {
            return ttype;
        } else {
            return Token.INVALID_TYPE;
        }
    }

    // What is the error header, normally line/character position information?
    getErrorHeader(e) {
        const line = e.getOffendingToken().line;
        const column = e.getOffendingToken().column;
        return "line " + line + ":" + column;
    }

    /**
     * How should a token be displayed in an error message? The default
     * is to display just the text, but during development you might
     * want to have a lot of information spit out.  Override in that case
     * to use t.toString() (which, for CommonToken, dumps everything about
     * the token). This is better than forcing you to override a method in
     * your token objects because you don't have to go modify your lexer
     * so that it creates a new Java type.
     *
     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific
     * implementations of {@link ANTLRErrorStrategy} may provide a similar
     * feature when necessary. For example, see
     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/
    getTokenErrorDisplay(t) {
        if (t===null) {
            return "<no token>";
        }
        let s = t.text;
        if (s===null) {
            if (t.type===Token.EOF) {
                s = "<EOF>";
            } else {
                s = "<" + t.type + ">";
            }
        }
        s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
        return "'" + s + "'";
    }

    getErrorListenerDispatch() {
        return new ProxyErrorListener(this._listeners);
    }

    /**
     * subclass needs to override these if there are sempreds or actions
     * that the ATN interp needs to execute
     */
    sempred(localctx, ruleIndex, actionIndex) {
        return true;
    }

    precpred(localctx , precedence) {
        return true;
    }

    get state(){
        return this._stateNumber;
    }

    set state(state) {
        this._stateNumber = state;
    }
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};

module.exports = Recognizer;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/RuleContext.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/RuleContext.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {RuleNode} = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const {INVALID_INTERVAL} = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const Trees = __webpack_require__(/*! ./tree/Trees */ "./node_modules/antlr4/src/antlr4/tree/Trees.js");

class RuleContext extends RuleNode {
	/** A rule context is a record of a single rule invocation. It knows
	 * which context invoked it, if any. If there is no parent context, then
	 * naturally the invoking state is not valid.  The parent link
	 * provides a chain upwards from the current rule invocation to the root
	 * of the invocation tree, forming a stack. We actually carry no
	 * information about the rule associated with this context (except
	 * when parsing). We keep only the state number of the invoking state from
	 * the ATN submachine that invoked this. Contrast this with the s
	 * pointer inside ParserRuleContext that tracks the current state
	 * being "executed" for the current rule.
	 *
	 * The parent contexts are useful for computing lookahead sets and
	 * getting error information.
	 *
	 * These objects are used during parsing and prediction.
	 * For the special case of parsers, we use the subclass
	 * ParserRuleContext.
	 *
	 * @see ParserRuleContext
	 */
	constructor(parent, invokingState) {
		// What context invoked this rule?
		super();
		this.parentCtx = parent || null;
		/**
		 * What state invoked the rule associated with this context?
		 * The "return address" is the followState of invokingState
		 * If parent is null, this should be -1.
		 */
		this.invokingState = invokingState || -1;
	}

	depth() {
		let n = 0;
		let p = this;
		while (p !== null) {
			p = p.parentCtx;
			n += 1;
		}
		return n;
	}

	/**
	 * A context is empty if there is no invoking state; meaning nobody call
	 * current context.
	 */
	isEmpty() {
		return this.invokingState === -1;
	}

// satisfy the ParseTree / SyntaxTree interface
	getSourceInterval() {
		return INVALID_INTERVAL;
	}

	getRuleContext() {
		return this;
	}

	getPayload() {
		return this;
	}

	/**
	 * Return the combined text of all child nodes. This method only considers
	 * tokens which have been added to the parse tree.
	 * <p>
	 * Since tokens on hidden channels (e.g. whitespace or comments) are not
	 * added to the parse trees, they will not appear in the output of this
	 * method.
	 */
	getText() {
		if (this.getChildCount() === 0) {
			return "";
		} else {
			return this.children.map(function(child) {
				return child.getText();
			}).join("");
		}
	}

	/**
	 * For rule associated with this parse tree internal node, return
	 * the outer alternative number used to match the input. Default
	 * implementation does not compute nor store this alt num. Create
	 * a subclass of ParserRuleContext with backing field and set
	 * option contextSuperClass.
	 * to set it.
	 */
	getAltNumber() {
	    // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
	    return 0;
    }

	/**
	 * Set the outer alternative number for this context node. Default
	 * implementation does nothing to avoid backing field overhead for
	 * trees that don't need it.  Create
	 * a subclass of ParserRuleContext with backing field and set
	 * option contextSuperClass.
	 */
	setAltNumber(altNumber) { }

	getChild(i) {
		return null;
	}

	getChildCount() {
		return 0;
	}

	accept(visitor) {
		return visitor.visitChildren(this);
	}

	/**
	 * Print out a whole tree, not just a node, in LISP format
	 * (root child1 .. childN). Print just a node if this is a leaf.
	 */
	toStringTree(ruleNames, recog) {
		return Trees.toStringTree(this, ruleNames, recog);
	}

	toString(ruleNames, stop) {
		ruleNames = ruleNames || null;
		stop = stop || null;
		let p = this;
		let s = "[";
		while (p !== null && p !== stop) {
			if (ruleNames === null) {
				if (!p.isEmpty()) {
					s += p.invokingState;
				}
			} else {
				const ri = p.ruleIndex;
				const ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
						: "" + ri;
				s += ruleName;
			}
			if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
				s += " ";
			}
			p = p.parentCtx;
		}
		s += "]";
		return s;
	}
}

module.exports = RuleContext;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Token.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Token.js ***!
  \*************************************************/
/***/ ((module) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * A token has properties: text, type, line, character position in the line
 * (so we can ignore tabs), token channel, index, and source from which
 * we obtained this token.
 */
class Token {
	constructor() {
		this.source = null;
		this.type = null; // token type of the token
		this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
		this.start = null; // optional; return -1 if not implemented.
		this.stop = null; // optional; return -1 if not implemented.
		this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
		this.line = null; // line=1..n of the 1st character
		this.column = null; // beginning of the line at which it occurs, 0..n-1
		this._text = null; // text of the token.
	}

	getTokenSource() {
		return this.source[0];
	}

	getInputStream() {
		return this.source[1];
	}

	get text(){
		return this._text;
	}

	set text(text) {
		this._text = text;
	}
}

Token.INVALID_TYPE = 0;

/**
 * During lookahead operations, this "token" signifies we hit rule end ATN state
 * and did not follow it despite needing to.
 */
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

/**
 * All tokens go to the parser (unless skip() is called in that rule)
 * on a particular "channel". The parser tunes to a particular channel
 * so that whitespace etc... can go to the parser on a "hidden" channel.
 */
Token.DEFAULT_CHANNEL = 0;

/**
 * Anything on different channel than DEFAULT_CHANNEL is not parsed
 * by parser.
 */
Token.HIDDEN_CHANNEL = 1;


class CommonToken extends Token {
	constructor(source, type, channel, start, stop) {
		super();
		this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
		this.type = type !== undefined ? type : null;
		this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
		this.start = start !== undefined ? start : -1;
		this.stop = stop !== undefined ? stop : -1;
		this.tokenIndex = -1;
		if (this.source[0] !== null) {
			this.line = source[0].line;
			this.column = source[0].column;
		} else {
			this.column = -1;
		}
	}

	/**
	 * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
	 *
	 * <p>
	 * If {@code oldToken} is also a {@link CommonToken} instance, the newly
	 * constructed token will share a reference to the {@link //text} field and
	 * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
	 * be assigned the result of calling {@link //getText}, and {@link //source}
	 * will be constructed from the result of {@link Token//getTokenSource} and
	 * {@link Token//getInputStream}.</p>
	 *
	 * @param oldToken The token to copy.
	 */
	clone() {
		const t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);
		t.tokenIndex = this.tokenIndex;
		t.line = this.line;
		t.column = this.column;
		t.text = this.text;
		return t;
	}

	toString() {
		let txt = this.text;
		if (txt !== null) {
			txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
		} else {
			txt = "<no text>";
		}
		return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
				txt + "',<" + this.type + ">" +
				(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
				this.line + ":" + this.column + "]";
	}

	get text(){
		if (this._text !== null) {
			return this._text;
		}
		const input = this.getInputStream();
		if (input === null) {
			return null;
		}
		const n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	}

	set text(text) {
		this._text = text;
	}
}

/**
 * An empty {@link Pair} which is used as the default value of
 * {@link //source} for tokens that do not have a source.
 */
CommonToken.EMPTY_SOURCE = [ null, null ];

module.exports = {
	Token,
	CommonToken
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Utils.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Utils.js ***!
  \*************************************************/
/***/ ((module) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function valueToString(v) {
    return v === null ? "null" : v;
}

function arrayToString(a) {
    return Array.isArray(a) ? ("[" + a.map(valueToString).join(", ") + "]") : "null";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    const key = this.toString();
    let h1b, k1;

    const remainder = key.length & 3; // key.length % 4
    const bytes = key.length - remainder;
    let h1 = String.prototype.seed;
    const c1 = 0xcc9e2d51;
    const c2 = 0x1b873593;
    let i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a ? a.equals(b) : a==b;
}

function standardHashCodeFunction(a) {
    return a ? a.hashCode() : -1;
}

class Set {
    constructor(hashFunction, equalsFunction) {
        this.data = {};
        this.hashFunction = hashFunction || standardHashCodeFunction;
        this.equalsFunction = equalsFunction || standardEqualsFunction;
    }

    add(value) {
        const hash = this.hashFunction(value);
        const key = "hash_" + hash;
        if (key in this.data) {
            const values = this.data[key];
            for (let i = 0; i < values.length; i++) {
                if (this.equalsFunction(value, values[i])) {
                    return values[i];
                }
            }
            values.push(value);
            return value;
        } else {
            this.data[key] = [value];
            return value;
        }
    }

    contains(value) {
        return this.get(value) != null;
    }

    get(value) {
        const hash = this.hashFunction(value);
        const key = "hash_" + hash;
        if (key in this.data) {
            const values = this.data[key];
            for (let i = 0; i < values.length; i++) {
                if (this.equalsFunction(value, values[i])) {
                    return values[i];
                }
            }
        }
        return null;
    }

    values() {
        let l = [];
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l.concat(this.data[key]);
            }
        }
        return l;
    }

    toString() {
        return arrayToString(this.values());
    }

    get length(){
        let l = 0;
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
}


class BitSet {
    constructor() {
        this.data = [];
    }

    add(value) {
        this.data[value] = true;
    }

    or(set) {
        const bits = this;
        Object.keys(set.data).map(function (alt) {
            bits.add(alt);
        });
    }

    remove(value) {
        delete this.data[value];
    }

    contains(value) {
        return this.data[value] === true;
    }

    values() {
        return Object.keys(this.data);
    }

    minValue() {
        return Math.min.apply(null, this.values());
    }

    hashCode() {
        const hash = new Hash();
        hash.update(this.values());
        return hash.finish();
    }

    equals(other) {
        if (!(other instanceof BitSet)) {
            return false;
        }
        return this.hashCode() === other.hashCode();
    }

    toString() {
        return "{" + this.values().join(", ") + "}";
    }

    get length(){
        return this.values().length;
    }
}


class Map {
    constructor(hashFunction, equalsFunction) {
        this.data = {};
        this.hashFunction = hashFunction || standardHashCodeFunction;
        this.equalsFunction = equalsFunction || standardEqualsFunction;
    }

    put(key, value) {
        const hashKey = "hash_" + this.hashFunction(key);
        if (hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key)) {
                    const oldValue = entry.value;
                    entry.value = value;
                    return oldValue;
                }
            }
            entries.push({key:key, value:value});
            return value;
        } else {
            this.data[hashKey] = [{key:key, value:value}];
            return value;
        }
    }

    containsKey(key) {
        const hashKey = "hash_" + this.hashFunction(key);
        if(hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key))
                    return true;
            }
        }
        return false;
    }

    get(key) {
        const hashKey = "hash_" + this.hashFunction(key);
        if(hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key))
                    return entry.value;
            }
        }
        return null;
    }

    entries() {
        let l = [];
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l.concat(this.data[key]);
            }
        }
        return l;
    }

    getKeys() {
        return this.entries().map(function(e) {
            return e.key;
        });
    }

    getValues() {
        return this.entries().map(function(e) {
                return e.value;
        });
    }

    toString() {
        const ss = this.entries().map(function(entry) {
            return '{' + entry.key + ':' + entry.value + '}';
        });
        return '[' + ss.join(", ") + ']';
    }

    get length(){
        let l = 0;
        for (const hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
}


class AltDict {
    constructor() {
        this.data = {};
    }

    get(key) {
        key = "k-" + key;
        if (key in this.data) {
            return this.data[key];
        } else {
            return null;
        }
    }

    put(key, value) {
        key = "k-" + key;
        this.data[key] = value;
    }

    values() {
        const data = this.data;
        const keys = Object.keys(this.data);
        return keys.map(function (key) {
            return data[key];
        });
    }
}


class DoubleDict {
    constructor(defaultMapCtor) {
        this.defaultMapCtor = defaultMapCtor || Map;
        this.cacheMap = new this.defaultMapCtor();
    }

    get(a, b) {
        const d = this.cacheMap.get(a) || null;
        return d === null ? null : (d.get(b) || null);
    }

    set(a, b, o) {
        let d = this.cacheMap.get(a) || null;
        if (d === null) {
            d = new this.defaultMapCtor();
            this.cacheMap.put(a, d);
        }
        d.put(b, o);
    }
}

class Hash {
    constructor() {
        this.count = 0;
        this.hash = 0;
    }

    update() {
        for(let i=0;i<arguments.length;i++) {
            const value = arguments[i];
            if (value == null)
                continue;
            if(Array.isArray(value))
                this.update.apply(this, value);
            else {
                let k = 0;
                switch (typeof(value)) {
                    case 'undefined':
                    case 'function':
                        continue;
                    case 'number':
                    case 'boolean':
                        k = value;
                        break;
                    case 'string':
                        k = value.hashCode();
                        break;
                    default:
                        if(value.updateHashCode)
                            value.updateHashCode(this);
                        else
                            console.log("No updateHashCode for " + value.toString())
                        continue;
                }
                k = k * 0xCC9E2D51;
                k = (k << 15) | (k >>> (32 - 15));
                k = k * 0x1B873593;
                this.count = this.count + 1;
                let hash = this.hash ^ k;
                hash = (hash << 13) | (hash >>> (32 - 13));
                hash = hash * 5 + 0xE6546B64;
                this.hash = hash;
            }
        }
    }

    finish() {
        let hash = this.hash ^ (this.count * 4);
        hash = hash ^ (hash >>> 16);
        hash = hash * 0x85EBCA6B;
        hash = hash ^ (hash >>> 13);
        hash = hash * 0xC2B2AE35;
        hash = hash ^ (hash >>> 16);
        return hash;
    }
}

function hashStuff() {
    const hash = new Hash();
    hash.update.apply(hash, arguments);
    return hash.finish();
}


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t")
         .replace(/\n/g, "\\n")
         .replace(/\r/g, "\\r");
    if (escapeSpaces) {
        s = s.replace(/ /g, "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
}

function equalArrays(a, b) {
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a === b)
        return true;
    if (a.length !== b.length)
        return false;
    for (let i = 0; i < a.length; i++) {
        if (a[i] === b[i])
            continue;
        if (!a[i].equals || !a[i].equals(b[i]))
            return false;
    }
    return true;
}

module.exports = {
    Hash,
    Set,
    Map,
    BitSet,
    AltDict,
    DoubleDict,
    hashStuff,
    escapeWhitespace,
    arrayToString,
    titleCase,
    equalArrays
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATN.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATN.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const LL1Analyzer = __webpack_require__(/*! ./../LL1Analyzer */ "./node_modules/antlr4/src/antlr4/LL1Analyzer.js");
const {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");

class ATN {

    constructor(grammarType , maxTokenType) {
        /**
         * Used for runtime deserialization of ATNs from strings
         * The type of the ATN.
        */
        this.grammarType = grammarType;
        // The maximum value for any symbol recognized by a transition in the ATN.
        this.maxTokenType = maxTokenType;
        this.states = [];
        /**
         * Each subrule/rule is a decision point and we must track them so we
         * can go back later and build DFA predictors for them.  This includes
         * all the rules, subrules, optional blocks, ()+, ()* etc...
         */
        this.decisionToState = [];
        // Maps from rule index to starting state number.
        this.ruleToStartState = [];
        // Maps from rule index to stop state number.
        this.ruleToStopState = null;
        this.modeNameToStartState = {};
        /**
         * For lexer ATNs, this maps the rule index to the resulting token type.
         * For parser ATNs, this maps the rule index to the generated bypass token
         * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
         * deserialization option was specified; otherwise, this is {@code null}
         */
        this.ruleToTokenType = null;
        /**
         * For lexer ATNs, this is an array of {@link LexerAction} objects which may
         * be referenced by action transitions in the ATN
         */
        this.lexerActions = null;
        this.modeToStartState = [];
    }

    /**
     * Compute the set of valid tokens that can occur starting in state {@code s}.
     * If {@code ctx} is null, the set of tokens will not include what can follow
     * the rule surrounding {@code s}. In other words, the set will be
     * restricted to tokens reachable staying within {@code s}'s rule
     */
    nextTokensInContext(s, ctx) {
        const anal = new LL1Analyzer(this);
        return anal.LOOK(s, null, ctx);
    }

    /**
     * Compute the set of valid tokens that can occur starting in {@code s} and
     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of
     * rule
     */
    nextTokensNoContext(s) {
        if (s.nextTokenWithinRule !== null ) {
            return s.nextTokenWithinRule;
        }
        s.nextTokenWithinRule = this.nextTokensInContext(s, null);
        s.nextTokenWithinRule.readOnly = true;
        return s.nextTokenWithinRule;
    }

    nextTokens(s, ctx) {
        if ( ctx===undefined ) {
            return this.nextTokensNoContext(s);
        } else {
            return this.nextTokensInContext(s, ctx);
        }
    }

    addState(state) {
        if ( state !== null ) {
            state.atn = this;
            state.stateNumber = this.states.length;
        }
        this.states.push(state);
    }

    removeState(state) {
        this.states[state.stateNumber] = null; // just free mem, don't shift states in list
    }

    defineDecisionState(s) {
        this.decisionToState.push(s);
        s.decision = this.decisionToState.length-1;
        return s.decision;
    }

    getDecisionState(decision) {
        if (this.decisionToState.length===0) {
            return null;
        } else {
            return this.decisionToState[decision];
        }
    }

    /**
     * Computes the set of input symbols which could follow ATN state number
     * {@code stateNumber} in the specified full {@code context}. This method
     * considers the complete parser context, but does not evaluate semantic
     * predicates (i.e. all predicates encountered during the calculation are
     * assumed true). If a path in the ATN exists from the starting state to the
     * {@link RuleStopState} of the outermost context without matching any
     * symbols, {@link Token//EOF} is added to the returned set.
     *
     * <p>If {@code context} is {@code null}, it is treated as
     * {@link ParserRuleContext//EMPTY}.</p>
     *
     * @param stateNumber the ATN state number
     * @param ctx the full parse context
     *
     * @return {IntervalSet} The set of potentially valid input symbols which could follow the
     * specified state in the specified context.
     *
     * @throws IllegalArgumentException if the ATN does not contain a state with
     * number {@code stateNumber}
     */
    getExpectedTokens(stateNumber, ctx ) {
        if ( stateNumber < 0 || stateNumber >= this.states.length ) {
            throw("Invalid state number.");
        }
        const s = this.states[stateNumber];
        let following = this.nextTokens(s);
        if (!following.contains(Token.EPSILON)) {
            return following;
        }
        const expected = new IntervalSet();
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
            const invokingState = this.states[ctx.invokingState];
            const rt = invokingState.transitions[0];
            following = this.nextTokens(rt.followState);
            expected.addSet(following);
            expected.removeOne(Token.EPSILON);
            ctx = ctx.parentCtx;
        }
        if (following.contains(Token.EPSILON)) {
            expected.addOne(Token.EOF);
        }
        return expected;
    }
}

ATN.INVALID_ALT_NUMBER = 0;

module.exports = ATN;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNConfig.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {DecisionState} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");
const {Hash} = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");


function checkParams(params, isCfg) {
	if(params===null) {
		const result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		const props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

class ATNConfig {
    /**
     * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).
     * The syntactic context is a graph-structured stack node whose
     * path(s) to the root is the rule invocation(s)
     * chain used to arrive at the state.  The semantic context is
     * the tree of semantic predicates encountered before reaching
     * an ATN state
     */
    constructor(params, config) {
        this.checkContext(params, config);
        params = checkParams(params);
        config = checkParams(config, true);
        // The ATN state associated with this configuration///
        this.state = params.state!==null ? params.state : config.state;
        // What alt (or lexer rule) is predicted by this configuration///
        this.alt = params.alt!==null ? params.alt : config.alt;
        /**
         * The stack of invoking states leading to the rule/states associated
         * with this config.  We track only those contexts pushed during
         * execution of the ATN simulator
         */
        this.context = params.context!==null ? params.context : config.context;
        this.semanticContext = params.semanticContext!==null ? params.semanticContext :
            (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
        // TODO: make it a boolean then
        /**
         * We cannot execute predicates dependent upon local context unless
         * we know for sure we are in the correct context. Because there is
         * no way to do this efficiently, we simply cannot evaluate
         * dependent predicates unless we are in the rule that initially
         * invokes the ATN simulator.
         * closure() tracks the depth of how far we dip into the
         * outer context: depth &gt; 0.  Note that it may not be totally
         * accurate depth since I don't ever decrement
         */
        this.reachesIntoOuterContext = config.reachesIntoOuterContext;
        this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    }

    checkContext(params, config) {
        if((params.context===null || params.context===undefined) &&
                (config===null || config.context===null || config.context===undefined)) {
            this.context = null;
        }
    }

    hashCode() {
        const hash = new Hash();
        this.updateHashCode(hash);
        return hash.finish();
    }

    updateHashCode(hash) {
        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
    }

    /**
     * An ATN configuration is equal to another if both have
     * the same state, they predict the same alternative, and
     * syntactic/semantic contexts are the same
     */
    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof ATNConfig)) {
            return false;
        } else {
            return this.state.stateNumber===other.state.stateNumber &&
                this.alt===other.alt &&
                (this.context===null ? other.context===null : this.context.equals(other.context)) &&
                this.semanticContext.equals(other.semanticContext) &&
                this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
        }
    }

    hashCodeForConfigSet() {
        const hash = new Hash();
        hash.update(this.state.stateNumber, this.alt, this.semanticContext);
        return hash.finish();
    }

    equalsForConfigSet(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof ATNConfig)) {
            return false;
        } else {
            return this.state.stateNumber===other.state.stateNumber &&
                this.alt===other.alt &&
                this.semanticContext.equals(other.semanticContext);
        }
    }

    toString() {
        return "(" + this.state + "," + this.alt +
            (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
            (this.semanticContext !== SemanticContext.NONE ?
                    ("," + this.semanticContext.toString())
                    : "") +
            (this.reachesIntoOuterContext>0 ?
                    (",up=" + this.reachesIntoOuterContext)
                    : "") + ")";
    }
}


class LexerATNConfig extends ATNConfig {
    constructor(params, config) {
        super(params, config);

        // This is the backing field for {@link //getLexerActionExecutor}.
        const lexerActionExecutor = params.lexerActionExecutor || null;
        this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
        this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
        this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;
        this.equalsForConfigSet = LexerATNConfig.prototype.equals;
        return this;
    }

    updateHashCode(hash) {
        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
    }

    equals(other) {
        return this === other ||
                (other instanceof LexerATNConfig &&
                this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision &&
                (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
                super.equals(other));
    }

    checkNonGreedyDecision(source, target) {
        return source.passedThroughNonGreedyDecision ||
            (target instanceof DecisionState) && target.nonGreedy;
    }
}


module.exports.ATNConfig = ATNConfig;
module.exports.LexerATNConfig = LexerATNConfig;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");
const {merge} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }

/**
 * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
 * info about the set, with support for combining similar configurations using a
 * graph-structured stack
 */
class ATNConfigSet {
	constructor(fullCtx) {
		/**
		 * The reason that we need this is because we don't want the hash map to use
		 * the standard hash code and equals. We need all configurations with the
		 * same
		 * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
		 * doubles
		 * the number of objects associated with ATNConfigs. The other solution is
		 * to
		 * use a hash table that lets us specify the equals/hashcode operation.
		 * All configs but hashed by (s, i, _, pi) not including context. Wiped out
		 * when we go readonly as this set becomes a DFA state
		 */
		this.configLookup = new Utils.Set(hashATNConfig, equalATNConfigs);
		/**
		 * Indicates that this configuration set is part of a full context
		 * LL prediction. It will be used to determine how to merge $. With SLL
		 * it's a wildcard whereas it is not for LL context merge
		 */
		this.fullCtx = fullCtx === undefined ? true : fullCtx;
		/**
		 * Indicates that the set of configurations is read-only. Do not
		 * allow any code to manipulate the set; DFA states will point at
		 * the sets and they must not change. This does not protect the other
		 * fields; in particular, conflictingAlts is set after
		 * we've made this readonly
		 */
		this.readOnly = false;
		// Track the elements as they are added to the set; supports get(i)///
		this.configs = [];

		// TODO: these fields make me pretty uncomfortable but nice to pack up info
		// together, saves recomputation
		// TODO: can we track conflicts as they are added to save scanning configs
		// later?
		this.uniqueAlt = 0;
		this.conflictingAlts = null;

		/**
		 * Used in parser and lexer. In lexer, it indicates we hit a pred
		 * while computing a closure operation. Don't make a DFA state from this
		 */
		this.hasSemanticContext = false;
		this.dipsIntoOuterContext = false;

		this.cachedHashCode = -1;
	}

	/**
	 * Adding a new config means merging contexts with existing configs for
	 * {@code (s, i, pi, _)}, where {@code s} is the
	 * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
	 * {@code pi} is the {@link ATNConfig//semanticContext}. We use
	 * {@code (s,i,pi)} as key.
	 *
	 * <p>This method updates {@link //dipsIntoOuterContext} and
	 * {@link //hasSemanticContext} when necessary.</p>
	 */
	add(config, mergeCache) {
		if (mergeCache === undefined) {
			mergeCache = null;
		}
		if (this.readOnly) {
			throw "This set is readonly";
		}
		if (config.semanticContext !== SemanticContext.NONE) {
			this.hasSemanticContext = true;
		}
		if (config.reachesIntoOuterContext > 0) {
			this.dipsIntoOuterContext = true;
		}
		const existing = this.configLookup.add(config);
		if (existing === config) {
			this.cachedHashCode = -1;
			this.configs.push(config); // track order here
			return true;
		}
		// a previous (s,i,pi,_), merge with it and save result
		const rootIsWildcard = !this.fullCtx;
		const merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
		/**
		 * no need to check for existing.context, config.context in cache
		 * since only way to create new graphs is "call rule" and here. We
		 * cache at both places
		 */
		existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
		// make sure to preserve the precedence filter suppression during the merge
		if (config.precedenceFilterSuppressed) {
			existing.precedenceFilterSuppressed = true;
		}
		existing.context = merged; // replace context; no need to alt mapping
		return true;
	}

	getStates() {
		const states = new Utils.Set();
		for (let i = 0; i < this.configs.length; i++) {
			states.add(this.configs[i].state);
		}
		return states;
	}

	getPredicates() {
		const preds = [];
		for (let i = 0; i < this.configs.length; i++) {
			const c = this.configs[i].semanticContext;
			if (c !== SemanticContext.NONE) {
				preds.push(c.semanticContext);
			}
		}
		return preds;
	}

	optimizeConfigs(interpreter) {
		if (this.readOnly) {
			throw "This set is readonly";
		}
		if (this.configLookup.length === 0) {
			return;
		}
		for (let i = 0; i < this.configs.length; i++) {
			const config = this.configs[i];
			config.context = interpreter.getCachedContext(config.context);
		}
	}

	addAll(coll) {
		for (let i = 0; i < coll.length; i++) {
			this.add(coll[i]);
		}
		return false;
	}

	equals(other) {
		return this === other ||
			(other instanceof ATNConfigSet &&
			Utils.equalArrays(this.configs, other.configs) &&
			this.fullCtx === other.fullCtx &&
			this.uniqueAlt === other.uniqueAlt &&
			this.conflictingAlts === other.conflictingAlts &&
			this.hasSemanticContext === other.hasSemanticContext &&
			this.dipsIntoOuterContext === other.dipsIntoOuterContext);
	}

	hashCode() {
		const hash = new Utils.Hash();
		hash.update(this.configs);
		return hash.finish();
	}

	updateHashCode(hash) {
		if (this.readOnly) {
			if (this.cachedHashCode === -1) {
				this.cachedHashCode = this.hashCode();
			}
			hash.update(this.cachedHashCode);
		} else {
			hash.update(this.hashCode());
		}
	}

	isEmpty() {
		return this.configs.length === 0;
	}

	contains(item) {
		if (this.configLookup === null) {
			throw "This method is not implemented for readonly sets.";
		}
		return this.configLookup.contains(item);
	}

	containsFast(item) {
		if (this.configLookup === null) {
			throw "This method is not implemented for readonly sets.";
		}
		return this.configLookup.containsFast(item);
	}

	clear() {
		if (this.readOnly) {
			throw "This set is readonly";
		}
		this.configs = [];
		this.cachedHashCode = -1;
		this.configLookup = new Utils.Set();
	}

	setReadonly(readOnly) {
		this.readOnly = readOnly;
		if (readOnly) {
			this.configLookup = null; // can't mod, no need for lookup cache
		}
	}

	toString() {
		return Utils.arrayToString(this.configs) +
			(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
			(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
			(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
			(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
	}

	get items(){
		return this.configs;
	}

	get length(){
		return this.configs.length;
	}
}


class OrderedATNConfigSet extends ATNConfigSet {
	constructor() {
		super();
		this.configLookup = new Utils.Set();
	}
}

module.exports = {
	ATNConfigSet,
	OrderedATNConfigSet
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js ***!
  \*************************************************************************/
/***/ ((module) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

class ATNDeserializationOptions {
	constructor(copyFrom) {
		if(copyFrom===undefined) {
			copyFrom = null;
		}
		this.readOnly = false;
		this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
		this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;
	}
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

module.exports = ATNDeserializationOptions


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const ATNType = __webpack_require__(/*! ./ATNType */ "./node_modules/antlr4/src/antlr4/atn/ATNType.js");

const {
    ATNState,
    BasicState,
    DecisionState,
    BlockStartState,
    BlockEndState,
    LoopEndState,
    RuleStartState,
    RuleStopState,
    TokensStartState,
    PlusLoopbackState,
    StarLoopbackState,
    StarLoopEntryState,
    PlusBlockStartState,
    StarBlockStartState,
    BasicBlockStartState
} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");

const {
    Transition,
    AtomTransition,
    SetTransition,
    NotSetTransition,
    RuleTransition,
    RangeTransition,
    ActionTransition,
    EpsilonTransition,
    WildcardTransition,
    PredicateTransition,
    PrecedencePredicateTransition
} = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js")

const {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const ATNDeserializationOptions = __webpack_require__(/*! ./ATNDeserializationOptions */ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js");

const {
    LexerActionType,
    LexerSkipAction,
    LexerChannelAction,
    LexerCustomAction,
    LexerMoreAction,
    LexerTypeAction,
    LexerPushModeAction,
    LexerPopModeAction,
    LexerModeAction,
} = __webpack_require__(/*! ./LexerAction */ "./node_modules/antlr4/src/antlr4/atn/LexerAction.js");

// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
const BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
const ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
const SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

const SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
const SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	const tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

class ATNDeserializer {
    constructor(options) {

        if ( options=== undefined || options === null ) {
            options = ATNDeserializationOptions.defaultOptions;
        }
        this.deserializationOptions = options;
        this.stateFactories = null;
        this.actionFactories = null;
    }

    /**
     * Determines if a particular serialized representation of an ATN supports
     * a particular feature, identified by the {@link UUID} used for serializing
     * the ATN at the time the feature was first introduced.
     *
     * @param feature The {@link UUID} marking the first time the feature was
     * supported in the serialized ATN.
     * @param actualUuid The {@link UUID} of the actual serialized ATN which is
     * currently being deserialized.
     * @return {@code true} if the {@code actualUuid} value represents a
     * serialized ATN at or after the feature identified by {@code feature} was
     * introduced; otherwise, {@code false}.
    */
    isFeatureSupported(feature, actualUuid) {
        const idx1 = SUPPORTED_UUIDS.indexOf(feature);
        if (idx1<0) {
            return false;
        }
        const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
        return idx2 >= idx1;
    }

    deserialize(data) {
        this.reset(data);
        this.checkVersion();
        this.checkUUID();
        const atn = this.readATN();
        this.readStates(atn);
        this.readRules(atn);
        this.readModes(atn);
        const sets = [];
        // First, deserialize sets with 16-bit arguments <= U+FFFF.
        this.readSets(atn, sets, this.readInt.bind(this));
        // Next, if the ATN was serialized with the Unicode SMP feature,
        // deserialize sets with 32-bit arguments <= U+10FFFF.
        if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
            this.readSets(atn, sets, this.readInt32.bind(this));
        }
        this.readEdges(atn, sets);
        this.readDecisions(atn);
        this.readLexerActions(atn);
        this.markPrecedenceDecisions(atn);
        this.verifyATN(atn);
        if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
            this.generateRuleBypassTransitions(atn);
            // re-verify after modification
            this.verifyATN(atn);
        }
        return atn;
    }

    reset(data) {
        const adjust = function(c) {
            const v = c.charCodeAt(0);
            return v>1  ? v-2 : v + 65534;
        };
        const temp = data.split("").map(adjust);
        // don't adjust the first value since that's the version number
        temp[0] = data.charCodeAt(0);
        this.data = temp;
        this.pos = 0;
    }

    checkVersion() {
        const version = this.readInt();
        if ( version !== SERIALIZED_VERSION ) {
            throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
        }
    }

    checkUUID() {
        const uuid = this.readUUID();
        if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
            throw ("Could not deserialize ATN with UUID: " + uuid +
                            " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
        }
        this.uuid = uuid;
    }

    readATN() {
        const grammarType = this.readInt();
        const maxTokenType = this.readInt();
        return new ATN(grammarType, maxTokenType);
    }

    readStates(atn) {
        let j, pair, stateNumber;
        const  loopBackStateNumbers = [];
        const  endStateNumbers = [];
        const  nstates = this.readInt();
        for(let i=0; i<nstates; i++) {
            const  stype = this.readInt();
            // ignore bad type of states
            if (stype===ATNState.INVALID_TYPE) {
                atn.addState(null);
                continue;
            }
            let ruleIndex = this.readInt();
            if (ruleIndex === 0xFFFF) {
                ruleIndex = -1;
            }
            const  s = this.stateFactory(stype, ruleIndex);
            if (stype === ATNState.LOOP_END) { // special case
                const  loopBackStateNumber = this.readInt();
                loopBackStateNumbers.push([s, loopBackStateNumber]);
            } else if(s instanceof BlockStartState) {
                const  endStateNumber = this.readInt();
                endStateNumbers.push([s, endStateNumber]);
            }
            atn.addState(s);
        }
        // delay the assignment of loop back and end states until we know all the
        // state instances have been initialized
        for (j=0; j<loopBackStateNumbers.length; j++) {
            pair = loopBackStateNumbers[j];
            pair[0].loopBackState = atn.states[pair[1]];
        }

        for (j=0; j<endStateNumbers.length; j++) {
            pair = endStateNumbers[j];
            pair[0].endState = atn.states[pair[1]];
        }

        let numNonGreedyStates = this.readInt();
        for (j=0; j<numNonGreedyStates; j++) {
            stateNumber = this.readInt();
            atn.states[stateNumber].nonGreedy = true;
        }

        let numPrecedenceStates = this.readInt();
        for (j=0; j<numPrecedenceStates; j++) {
            stateNumber = this.readInt();
            atn.states[stateNumber].isPrecedenceRule = true;
        }
    }

    readRules(atn) {
        let i;
        const nrules = this.readInt();
        if (atn.grammarType === ATNType.LEXER ) {
            atn.ruleToTokenType = initArray(nrules, 0);
        }
        atn.ruleToStartState = initArray(nrules, 0);
        for (i=0; i<nrules; i++) {
            const s = this.readInt();
            atn.ruleToStartState[i] = atn.states[s];
            if ( atn.grammarType === ATNType.LEXER ) {
                let tokenType = this.readInt();
                if (tokenType === 0xFFFF) {
                    tokenType = Token.EOF;
                }
                atn.ruleToTokenType[i] = tokenType;
            }
        }
        atn.ruleToStopState = initArray(nrules, 0);
        for (i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (!(state instanceof RuleStopState)) {
                continue;
            }
            atn.ruleToStopState[state.ruleIndex] = state;
            atn.ruleToStartState[state.ruleIndex].stopState = state;
        }
    }

    readModes(atn) {
        const nmodes = this.readInt();
        for (let i=0; i<nmodes; i++) {
            let s = this.readInt();
            atn.modeToStartState.push(atn.states[s]);
        }
    }

    readSets(atn, sets, readUnicode) {
        const m = this.readInt();
        for (let i=0; i<m; i++) {
            const iset = new IntervalSet();
            sets.push(iset);
            const n = this.readInt();
            const containsEof = this.readInt();
            if (containsEof!==0) {
                iset.addOne(-1);
            }
            for (let j=0; j<n; j++) {
                const i1 = readUnicode();
                const i2 = readUnicode();
                iset.addRange(i1, i2);
            }
        }
    }

    readEdges(atn, sets) {
        let i, j, state, trans, target;
        const nedges = this.readInt();
        for (i=0; i<nedges; i++) {
            const src = this.readInt();
            const trg = this.readInt();
            const ttype = this.readInt();
            const arg1 = this.readInt();
            const arg2 = this.readInt();
            const arg3 = this.readInt();
            trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
            const srcState = atn.states[src];
            srcState.addTransition(trans);
        }
        // edges for rule stop states can be derived, so they aren't serialized
        for (i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            for (j=0; j<state.transitions.length; j++) {
                const t = state.transitions[j];
                if (!(t instanceof RuleTransition)) {
                    continue;
                }
                let outermostPrecedenceReturn = -1;
                if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
                    if (t.precedence === 0) {
                        outermostPrecedenceReturn = t.target.ruleIndex;
                    }
                }

                trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
            }
        }

        for (i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (state instanceof BlockStartState) {
                // we need to know the end state to set its start state
                if (state.endState === null) {
                    throw ("IllegalState");
                }
                // block end states can only be associated to a single block start
                // state
                if ( state.endState.startState !== null) {
                    throw ("IllegalState");
                }
                state.endState.startState = state;
            }
            if (state instanceof PlusLoopbackState) {
                for (j=0; j<state.transitions.length; j++) {
                    target = state.transitions[j].target;
                    if (target instanceof PlusBlockStartState) {
                        target.loopBackState = state;
                    }
                }
            } else if (state instanceof StarLoopbackState) {
                for (j=0; j<state.transitions.length; j++) {
                    target = state.transitions[j].target;
                    if (target instanceof StarLoopEntryState) {
                        target.loopBackState = state;
                    }
                }
            }
        }
    }

    readDecisions(atn) {
        const ndecisions = this.readInt();
        for (let i=0; i<ndecisions; i++) {
            const s = this.readInt();
            const decState = atn.states[s];
            atn.decisionToState.push(decState);
            decState.decision = i;
        }
    }

    readLexerActions(atn) {
        if (atn.grammarType === ATNType.LEXER) {
            const count = this.readInt();
            atn.lexerActions = initArray(count, null);
            for (let i=0; i<count; i++) {
                const actionType = this.readInt();
                let data1 = this.readInt();
                if (data1 === 0xFFFF) {
                    data1 = -1;
                }
                let data2 = this.readInt();
                if (data2 === 0xFFFF) {
                    data2 = -1;
                }

                atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);
            }
        }
    }

    generateRuleBypassTransitions(atn) {
        let i;
        const count = atn.ruleToStartState.length;
        for(i=0; i<count; i++) {
            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
        }
        for(i=0; i<count; i++) {
            this.generateRuleBypassTransition(atn, i);
        }
    }

    generateRuleBypassTransition(atn, idx) {
        let i, state;
        const bypassStart = new BasicBlockStartState();
        bypassStart.ruleIndex = idx;
        atn.addState(bypassStart);

        const bypassStop = new BlockEndState();
        bypassStop.ruleIndex = idx;
        atn.addState(bypassStop);

        bypassStart.endState = bypassStop;
        atn.defineDecisionState(bypassStart);

        bypassStop.startState = bypassStart;

        let excludeTransition = null;
        let endState = null;

        if (atn.ruleToStartState[idx].isPrecedenceRule) {
            // wrap from the beginning of the rule to the StarLoopEntryState
            endState = null;
            for(i=0; i<atn.states.length; i++) {
                state = atn.states[i];
                if (this.stateIsEndStateFor(state, idx)) {
                    endState = state;
                    excludeTransition = state.loopBackState.transitions[0];
                    break;
                }
            }
            if (excludeTransition === null) {
                throw ("Couldn't identify final state of the precedence rule prefix section.");
            }
        } else {
            endState = atn.ruleToStopState[idx];
        }

        // all non-excluded transitions that currently target end state need to
        // target blockEnd instead
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            for(let j=0; j<state.transitions.length; j++) {
                const transition = state.transitions[j];
                if (transition === excludeTransition) {
                    continue;
                }
                if (transition.target === endState) {
                    transition.target = bypassStop;
                }
            }
        }

        // all transitions leaving the rule start state need to leave blockStart
        // instead
        const ruleToStartState = atn.ruleToStartState[idx];
        const count = ruleToStartState.transitions.length;
        while ( count > 0) {
            bypassStart.addTransition(ruleToStartState.transitions[count-1]);
            ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
        }
        // link the new states
        atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
        bypassStop.addTransition(new EpsilonTransition(endState));

        const matchState = new BasicState();
        atn.addState(matchState);
        matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
        bypassStart.addTransition(new EpsilonTransition(matchState));
    }

    stateIsEndStateFor(state, idx) {
        if ( state.ruleIndex !== idx) {
            return null;
        }
        if (!( state instanceof StarLoopEntryState)) {
            return null;
        }
        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
        if (!( maybeLoopEndState instanceof LoopEndState)) {
            return null;
        }
        if (maybeLoopEndState.epsilonOnlyTransitions &&
            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
            return state;
        } else {
            return null;
        }
    }

    /**
     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the
     * correct value.
     * @param atn The ATN.
     */
    markPrecedenceDecisions(atn) {
        for(let i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (!( state instanceof StarLoopEntryState)) {
                continue;
            }
            // We analyze the ATN to determine if this ATN decision state is the
            // decision for the closure block that determines whether a
            // precedence rule should continue or complete.
            if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
                const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
                if (maybeLoopEndState instanceof LoopEndState) {
                    if ( maybeLoopEndState.epsilonOnlyTransitions &&
                            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                        state.isPrecedenceDecision = true;
                    }
                }
            }
        }
    }

    verifyATN(atn) {
        if (!this.deserializationOptions.verifyATN) {
            return;
        }
        // verify assumptions
        for(let i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (state === null) {
                continue;
            }
            this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
            if (state instanceof PlusBlockStartState) {
                this.checkCondition(state.loopBackState !== null);
            } else  if (state instanceof StarLoopEntryState) {
                this.checkCondition(state.loopBackState !== null);
                this.checkCondition(state.transitions.length === 2);
                if (state.transitions[0].target instanceof StarBlockStartState) {
                    this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                    this.checkCondition(!state.nonGreedy);
                } else if (state.transitions[0].target instanceof LoopEndState) {
                    this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                    this.checkCondition(state.nonGreedy);
                } else {
                    throw("IllegalState");
                }
            } else if (state instanceof StarLoopbackState) {
                this.checkCondition(state.transitions.length === 1);
                this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
            } else if (state instanceof LoopEndState) {
                this.checkCondition(state.loopBackState !== null);
            } else if (state instanceof RuleStartState) {
                this.checkCondition(state.stopState !== null);
            } else if (state instanceof BlockStartState) {
                this.checkCondition(state.endState !== null);
            } else if (state instanceof BlockEndState) {
                this.checkCondition(state.startState !== null);
            } else if (state instanceof DecisionState) {
                this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
            } else {
                this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
            }
        }
    }

    checkCondition(condition, message) {
        if (!condition) {
            if (message === undefined || message===null) {
                message = "IllegalState";
            }
            throw (message);
        }
    }

    readInt() {
        return this.data[this.pos++];
    }

    readInt32() {
        const low = this.readInt();
        const high = this.readInt();
        return low | (high << 16);
    }

    readLong() {
        const low = this.readInt32();
        const high = this.readInt32();
        return (low & 0x00000000FFFFFFFF) | (high << 32);
    }

    readUUID() {
        const bb = [];
        for(let i=7;i>=0;i--) {
            const int = this.readInt();
            /* jshint bitwise: false */
            bb[(2*i)+1] = int & 0xFF;
            bb[2*i] = (int >> 8) & 0xFF;
        }
        return byteToHex[bb[0]] + byteToHex[bb[1]] +
        byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
        byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
        byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
        byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
        byteToHex[bb[10]] + byteToHex[bb[11]] +
        byteToHex[bb[12]] + byteToHex[bb[13]] +
        byteToHex[bb[14]] + byteToHex[bb[15]];
    }

    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
        const target = atn.states[trg];
        switch(type) {
        case Transition.EPSILON:
            return new EpsilonTransition(target);
        case Transition.RANGE:
            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
        case Transition.RULE:
            return new RuleTransition(atn.states[arg1], arg2, arg3, target);
        case Transition.PREDICATE:
            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.PRECEDENCE:
            return new PrecedencePredicateTransition(target, arg1);
        case Transition.ATOM:
            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
        case Transition.ACTION:
            return new ActionTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.SET:
            return new SetTransition(target, sets[arg1]);
        case Transition.NOT_SET:
            return new NotSetTransition(target, sets[arg1]);
        case Transition.WILDCARD:
            return new WildcardTransition(target);
        default:
            throw "The specified transition type: " + type + " is not valid.";
        }
    }

    stateFactory(type, ruleIndex) {
        if (this.stateFactories === null) {
            const sf = [];
            sf[ATNState.INVALID_TYPE] = null;
            sf[ATNState.BASIC] = () => new BasicState();
            sf[ATNState.RULE_START] = () => new RuleStartState();
            sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();
            sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();
            sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();
            sf[ATNState.TOKEN_START] = () => new TokensStartState();
            sf[ATNState.RULE_STOP] = () => new RuleStopState();
            sf[ATNState.BLOCK_END] = () => new BlockEndState();
            sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();
            sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();
            sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();
            sf[ATNState.LOOP_END] = () => new LoopEndState();
            this.stateFactories = sf;
        }
        if (type>this.stateFactories.length || this.stateFactories[type] === null) {
            throw("The specified state type " + type + " is not valid.");
        } else {
            const s = this.stateFactories[type]();
            if (s!==null) {
                s.ruleIndex = ruleIndex;
                return s;
            }
        }
    }

    lexerActionFactory(type, data1, data2) {
        if (this.actionFactories === null) {
            const af = [];
            af[LexerActionType.CHANNEL] = (data1, data2) => new LexerChannelAction(data1);
            af[LexerActionType.CUSTOM] = (data1, data2) => new LexerCustomAction(data1, data2);
            af[LexerActionType.MODE] = (data1, data2) => new LexerModeAction(data1);
            af[LexerActionType.MORE] = (data1, data2) => LexerMoreAction.INSTANCE;
            af[LexerActionType.POP_MODE] = (data1, data2) => LexerPopModeAction.INSTANCE;
            af[LexerActionType.PUSH_MODE] = (data1, data2) => new LexerPushModeAction(data1);
            af[LexerActionType.SKIP] = (data1, data2) => LexerSkipAction.INSTANCE;
            af[LexerActionType.TYPE] = (data1, data2) => new LexerTypeAction(data1);
            this.actionFactories = af;
        }
        if (type>this.actionFactories.length || this.actionFactories[type] === null) {
            throw("The specified lexer action type " + type + " is not valid.");
        } else {
            return this.actionFactories[type](data1, data2);
        }
    }
}

function createByteToHex() {
	const bth = [];
	for (let i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

const byteToHex = createByteToHex();


module.exports = ATNDeserializer;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {DFAState} = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js");
const {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {getCachedPredictionContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
const {Map} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

class ATNSimulator {
    constructor(atn, sharedContextCache) {
        /**
         * The context cache maps all PredictionContext objects that are ==
         * to a single cached copy. This cache is shared across all contexts
         * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
         * to use only cached nodes/graphs in addDFAState(). We don't want to
         * fill this during closure() since there are lots of contexts that
         * pop up but are not used ever again. It also greatly slows down closure().
         *
         * <p>This cache makes a huge difference in memory and a little bit in speed.
         * For the Java grammar on java.*, it dropped the memory requirements
         * at the end from 25M to 16M. We don't store any of the full context
         * graphs in the DFA because they are limited to local context only,
         * but apparently there's a lot of repetition there as well. We optimize
         * the config contexts before storing the config set in the DFA states
         * by literally rebuilding them with cached subgraphs only.</p>
         *
         * <p>I tried a cache for use during closure operations, that was
         * whacked after each adaptivePredict(). It cost a little bit
         * more time I think and doesn't save on the overall footprint
         * so it's not worth the complexity.</p>
         */
        this.atn = atn;
        this.sharedContextCache = sharedContextCache;
        return this;
    }

    getCachedContext(context) {
        if (this.sharedContextCache ===null) {
            return context;
        }
        const visited = new Map();
        return getCachedPredictionContext(context, this.sharedContextCache, visited);
    }
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


module.exports = ATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNState.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNState.js ***!
  \********************************************************/
/***/ ((module) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const INITIAL_NUM_TRANSITIONS = 4;

/**
 * The following images show the relation of states and
 * {@link ATNState//transitions} for various grammar constructs.
 *
 * <ul>
 *
 * <li>Solid edges marked with an &//0949; indicate a required
 * {@link EpsilonTransition}.</li>
 *
 * <li>Dashed edges indicate locations where any transition derived from
 * {@link Transition} might appear.</li>
 *
 * <li>Dashed nodes are place holders for either a sequence of linked
 * {@link BasicState} states or the inclusion of a block representing a nested
 * construct in one of the forms below.</li>
 *
 * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
 * any number of alternatives (one or more). Nodes without the {@code ...} only
 * support the exact number of alternatives shown in the diagram.</li>
 *
 * </ul>
 *
 * <h2>Basic Blocks</h2>
 *
 * <h3>Rule</h3>
 *
 * <embed src="images/Rule.svg" type="image/svg+xml"/>
 *
 * <h3>Block of 1 or more alternatives</h3>
 *
 * <embed src="images/Block.svg" type="image/svg+xml"/>
 *
 * <h2>Greedy Loops</h2>
 *
 * <h3>Greedy Closure: {@code (...)*}</h3>
 *
 * <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Positive Closure: {@code (...)+}</h3>
 *
 * <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Optional: {@code (...)?}</h3>
 *
 * <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
 *
 * <h2>Non-Greedy Loops</h2>
 *
 * <h3>Non-Greedy Closure: {@code (...)*?}</h3>
 *
 * <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
 *
 * <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Optional: {@code (...)??}</h3>
 *
 * <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
 */
class ATNState {
    constructor() {
        // Which ATN are we in?
        this.atn = null;
        this.stateNumber = ATNState.INVALID_STATE_NUMBER;
        this.stateType = null;
        this.ruleIndex = 0; // at runtime, we don't have Rule objects
        this.epsilonOnlyTransitions = false;
        // Track the transitions emanating from this ATN state.
        this.transitions = [];
        // Used to cache lookahead during parsing, not used during construction
        this.nextTokenWithinRule = null;
    }

    toString() {
        return this.stateNumber;
    }

    equals(other) {
        if (other instanceof ATNState) {
            return this.stateNumber===other.stateNumber;
        } else {
            return false;
        }
    }

    isNonGreedyExitState() {
        return false;
    }

    addTransition(trans, index) {
        if(index===undefined) {
            index = -1;
        }
        if (this.transitions.length===0) {
            this.epsilonOnlyTransitions = trans.isEpsilon;
        } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
            this.epsilonOnlyTransitions = false;
        }
        if (index===-1) {
            this.transitions.push(trans);
        } else {
            this.transitions.splice(index, 1, trans);
        }
    }
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;


class BasicState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.BASIC;
    }
}

class DecisionState extends ATNState {
    constructor() {
        super();
        this.decision = -1;
        this.nonGreedy = false;
        return this;
    }
}

/**
 *  The start of a regular {@code (...)} block
 */
class BlockStartState extends DecisionState {
    constructor() {
        super();
        this.endState = null;
        return this;
    }
}

class BasicBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.BLOCK_START;
        return this;
    }
}

/**
 * Terminal node of a simple {@code (a|b|c)} block
 */
class BlockEndState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.BLOCK_END;
        this.startState = null;
        return this;
    }
}

/**
 * The last node in the ATN for a rule, unless that rule is the start symbol.
 * In that case, there is one transition to EOF. Later, we might encode
 * references to all calls to this rule to compute FOLLOW sets for
 * error handling
 */
class RuleStopState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.RULE_STOP;
        return this;
    }
}

class RuleStartState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.RULE_START;
        this.stopState = null;
        this.isPrecedenceRule = false;
        return this;
    }
}

/**
 * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
 * one to the loop back to start of the block and one to exit.
 */
class PlusLoopbackState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.PLUS_LOOP_BACK;
        return this;
    }
}

/**
 * Start of {@code (A|B|...)+} loop. Technically a decision state, but
 * we don't use for code generation; somebody might need it, so I'm defining
 * it for completeness. In reality, the {@link PlusLoopbackState} node is the
 * real decision-making note for {@code A+}
 */
class PlusBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.PLUS_BLOCK_START;
        this.loopBackState = null;
        return this;
    }
}

/**
 * The block that begins a closure loop
 */
class StarBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_BLOCK_START;
        return this;
    }
}

class StarLoopbackState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_LOOP_BACK;
        return this;
    }
}

class StarLoopEntryState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_LOOP_ENTRY;
        this.loopBackState = null;
        // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
        this.isPrecedenceDecision = null;
        return this;
    }
}

/**
 * Mark the end of a * or + loop
 */
class LoopEndState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.LOOP_END;
        this.loopBackState = null;
        return this;
    }
}

/**
 * The Tokens rule start state linking to each lexer rule start state
 */
class TokensStartState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.TOKEN_START;
        return this;
    }
}

module.exports = {
    ATNState,
    BasicState,
    DecisionState,
    BlockStartState,
    BlockEndState,
    LoopEndState,
    RuleStartState,
    RuleStopState,
    TokensStartState,
    PlusLoopbackState,
    StarLoopbackState,
    StarLoopEntryState,
    PlusBlockStartState,
    StarBlockStartState,
    BasicBlockStartState
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNType.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNType.js ***!
  \*******************************************************/
/***/ ((module) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Represents the type of recognizer an ATN applies to
 */
module.exports = {
    LEXER: 0,
    PARSER: 1
};



/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const Lexer = __webpack_require__(/*! ./../Lexer */ "./node_modules/antlr4/src/antlr4/Lexer.js");
const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ "./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js");
const {DFAState} = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js");
const {OrderedATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {PredictionContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
const {SingletonPredictionContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
const {RuleStopState} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {LexerATNConfig} = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js");
const {Transition} = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js");
const LexerActionExecutor = __webpack_require__(/*! ./LexerActionExecutor */ "./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js");
const {LexerNoViableAltException} = __webpack_require__(/*! ./../error/Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js");

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

class SimState {
	constructor() {
		resetSimState(this);
	}

	reset() {
		resetSimState(this);
	}
}

class LexerATNSimulator extends ATNSimulator {
	/**
	 * When we hit an accept state in either the DFA or the ATN, we
	 * have to notify the character stream to start buffering characters
	 * via {@link IntStream//mark} and record the current state. The current sim state
	 * includes the current index into the input, the current line,
	 * and current character position in that line. Note that the Lexer is
	 * tracking the starting line and characterization of the token. These
	 * variables track the "state" of the simulator when it hits an accept state.
	 *
	 * <p>We track these variables separately for the DFA and ATN simulation
	 * because the DFA simulation often has to fail over to the ATN
	 * simulation. If the ATN simulation fails, we need the DFA to fall
	 * back to its previously accepted state, if any. If the ATN succeeds,
	 * then the ATN does the accept and the DFA simulator that invoked it
	 * can simply return the predicted token type.</p>
	 */
	constructor(recog, atn, decisionToDFA, sharedContextCache) {
		super(atn, sharedContextCache);
		this.decisionToDFA = decisionToDFA;
		this.recog = recog;
		/**
		 * The current token's starting index into the character stream.
		 * Shared across DFA to ATN simulation in case the ATN fails and the
		 * DFA did not have a previous accept state. In this case, we use the
		 * ATN-generated exception object
		 */
		this.startIndex = -1;
		// line number 1..n within the input///
		this.line = 1;
		/**
		 * The index of the character relative to the beginning of the line
		 * 0..n-1
		 */
		this.column = 0;
		this.mode = Lexer.DEFAULT_MODE;
		/**
		 * Used during DFA/ATN exec to record the most recent accept configuration
		 * info
		 */
		this.prevAccept = new SimState();
	}

	copyState(simulator) {
		this.column = simulator.column;
		this.line = simulator.line;
		this.mode = simulator.mode;
		this.startIndex = simulator.startIndex;
	}

	match(input, mode) {
		this.match_calls += 1;
		this.mode = mode;
		const mark = input.mark();
		try {
			this.startIndex = input.index;
			this.prevAccept.reset();
			const dfa = this.decisionToDFA[mode];
			if (dfa.s0 === null) {
				return this.matchATN(input);
			} else {
				return this.execATN(input, dfa.s0);
			}
		} finally {
			input.release(mark);
		}
	}

	reset() {
		this.prevAccept.reset();
		this.startIndex = -1;
		this.line = 1;
		this.column = 0;
		this.mode = Lexer.DEFAULT_MODE;
	}

	matchATN(input) {
		const startState = this.atn.modeToStartState[this.mode];

		if (LexerATNSimulator.debug) {
			console.log("matchATN mode " + this.mode + " start: " + startState);
		}
		const old_mode = this.mode;
		const s0_closure = this.computeStartState(input, startState);
		const suppressEdge = s0_closure.hasSemanticContext;
		s0_closure.hasSemanticContext = false;

		const next = this.addDFAState(s0_closure);
		if (!suppressEdge) {
			this.decisionToDFA[this.mode].s0 = next;
		}

		const predict = this.execATN(input, next);

		if (LexerATNSimulator.debug) {
			console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
		}
		return predict;
	}

	execATN(input, ds0) {
		if (LexerATNSimulator.debug) {
			console.log("start state closure=" + ds0.configs);
		}
		if (ds0.isAcceptState) {
			// allow zero-length tokens
			this.captureSimState(this.prevAccept, input, ds0);
		}
		let t = input.LA(1);
		let s = ds0; // s is current/from DFA state

		while (true) { // while more work
			if (LexerATNSimulator.debug) {
				console.log("execATN loop starting closure: " + s.configs);
			}

			/**
			 * As we move src->trg, src->trg, we keep track of the previous trg to
			 * avoid looking up the DFA state again, which is expensive.
			 * If the previous target was already part of the DFA, we might
			 * be able to avoid doing a reach operation upon t. If s!=null,
			 * it means that semantic predicates didn't prevent us from
			 * creating a DFA state. Once we know s!=null, we check to see if
			 * the DFA state has an edge already for t. If so, we can just reuse
			 * it's configuration set; there's no point in re-computing it.
			 * This is kind of like doing DFA simulation within the ATN
			 * simulation because DFA simulation is really just a way to avoid
			 * computing reach/closure sets. Technically, once we know that
			 * we have a previously added DFA state, we could jump over to
			 * the DFA simulator. But, that would mean popping back and forth
			 * a lot and making things more complicated algorithmically.
			 * This optimization makes a lot of sense for loops within DFA.
			 * A character will take us back to an existing DFA state
			 * that already has lots of edges out of it. e.g., .* in comments.
			 * print("Target for:" + str(s) + " and:" + str(t))
			 */
			let target = this.getExistingTargetState(s, t);
			// print("Existing:" + str(target))
			if (target === null) {
				target = this.computeTargetState(input, s, t);
				// print("Computed:" + str(target))
			}
			if (target === ATNSimulator.ERROR) {
				break;
			}
			// If this is a consumable input element, make sure to consume before
			// capturing the accept state so the input index, line, and char
			// position accurately reflect the state of the interpreter at the
			// end of the token.
			if (t !== Token.EOF) {
				this.consume(input);
			}
			if (target.isAcceptState) {
				this.captureSimState(this.prevAccept, input, target);
				if (t === Token.EOF) {
					break;
				}
			}
			t = input.LA(1);
			s = target; // flip; current DFA target becomes new src/from state
		}
		return this.failOrAccept(this.prevAccept, input, s.configs, t);
	}

	/**
	 * Get an existing target state for an edge in the DFA. If the target state
	 * for the edge has not yet been computed or is otherwise not available,
	 * this method returns {@code null}.
	 *
	 * @param s The current DFA state
	 * @param t The next input symbol
	 * @return The existing target DFA state for the given input symbol
	 * {@code t}, or {@code null} if the target state for this edge is not
	 * already cached
	 */
	getExistingTargetState(s, t) {
		if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
			return null;
		}

		let target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
		if(target===undefined) {
			target = null;
		}
		if (LexerATNSimulator.debug && target !== null) {
			console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
		}
		return target;
	}

	/**
	 * Compute a target state for an edge in the DFA, and attempt to add the
	 * computed state and corresponding edge to the DFA.
	 *
	 * @param input The input stream
	 * @param s The current DFA state
	 * @param t The next input symbol
	 *
	 * @return The computed target DFA state for the given input symbol
	 * {@code t}. If {@code t} does not lead to a valid DFA state, this method
	 * returns {@link //ERROR}.
	 */
	computeTargetState(input, s, t) {
		const reach = new OrderedATNConfigSet();
		// if we don't find an existing DFA state
		// Fill reach starting from closure, following t transitions
		this.getReachableConfigSet(input, s.configs, reach, t);

		if (reach.items.length === 0) { // we got nowhere on t from s
			if (!reach.hasSemanticContext) {
				// we got nowhere on t, don't throw out this knowledge; it'd
				// cause a failover from DFA later.
				this.addDFAEdge(s, t, ATNSimulator.ERROR);
			}
			// stop when we can't match any more char
			return ATNSimulator.ERROR;
		}
		// Add an edge from s to target DFA found/created for reach
		return this.addDFAEdge(s, t, null, reach);
	}

	failOrAccept(prevAccept, input, reach, t) {
		if (this.prevAccept.dfaState !== null) {
			const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
			this.accept(input, lexerActionExecutor, this.startIndex,
					prevAccept.index, prevAccept.line, prevAccept.column);
			return prevAccept.dfaState.prediction;
		} else {
			// if no accept and EOF is first char, return EOF
			if (t === Token.EOF && input.index === this.startIndex) {
				return Token.EOF;
			}
			throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
		}
	}

	/**
	 * Given a starting configuration set, figure out all ATN configurations
	 * we can reach upon input {@code t}. Parameter {@code reach} is a return
	 * parameter.
	 */
	getReachableConfigSet(input, closure,
			reach, t) {
		// this is used to skip processing for configs which have a lower priority
		// than a config that already reached an accept state for the same rule
		let skipAlt = ATN.INVALID_ALT_NUMBER;
		for (let i = 0; i < closure.items.length; i++) {
			const cfg = closure.items[i];
			const currentAltReachedAcceptState = (cfg.alt === skipAlt);
			if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
				continue;
			}
			if (LexerATNSimulator.debug) {
				console.log("testing %s at %s\n", this.getTokenName(t), cfg
						.toString(this.recog, true));
			}
			for (let j = 0; j < cfg.state.transitions.length; j++) {
				const trans = cfg.state.transitions[j]; // for each transition
				const target = this.getReachableTarget(trans, t);
				if (target !== null) {
					let lexerActionExecutor = cfg.lexerActionExecutor;
					if (lexerActionExecutor !== null) {
						lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
					}
					const treatEofAsEpsilon = (t === Token.EOF);
					const config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
					if (this.closure(input, config, reach,
							currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
						// any remaining configs for this alt have a lower priority
						// than the one that just reached an accept state.
						skipAlt = cfg.alt;
					}
				}
			}
		}
	}

	accept(input, lexerActionExecutor,
			   startIndex, index, line, charPos) {
		   if (LexerATNSimulator.debug) {
			   console.log("ACTION %s\n", lexerActionExecutor);
		   }
		   // seek to after last char in token
		   input.seek(index);
		   this.line = line;
		   this.column = charPos;
		   if (lexerActionExecutor !== null && this.recog !== null) {
			   lexerActionExecutor.execute(this.recog, input, startIndex);
		   }
	   }

	getReachableTarget(trans, t) {
		if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
			return trans.target;
		} else {
			return null;
		}
	}

	computeStartState(input, p) {
		const initialContext = PredictionContext.EMPTY;
		const configs = new OrderedATNConfigSet();
		for (let i = 0; i < p.transitions.length; i++) {
			const target = p.transitions[i].target;
			const cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
			this.closure(input, cfg, configs, false, false, false);
		}
		return configs;
	}

	/**
	 * Since the alternatives within any lexer decision are ordered by
	 * preference, this method stops pursuing the closure as soon as an accept
	 * state is reached. After the first accept state is reached by depth-first
	 * search from {@code config}, all other (potentially reachable) states for
	 * this rule would have a lower priority.
	 *
	 * @return {Boolean} {@code true} if an accept state is reached, otherwise
	 * {@code false}.
	 */
	closure(input, config, configs,
			currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
		let cfg = null;
		if (LexerATNSimulator.debug) {
			console.log("closure(" + config.toString(this.recog, true) + ")");
		}
		if (config.state instanceof RuleStopState) {
			if (LexerATNSimulator.debug) {
				if (this.recog !== null) {
					console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
				} else {
					console.log("closure at rule stop %s\n", config);
				}
			}
			if (config.context === null || config.context.hasEmptyPath()) {
				if (config.context === null || config.context.isEmpty()) {
					configs.add(config);
					return true;
				} else {
					configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
					currentAltReachedAcceptState = true;
				}
			}
			if (config.context !== null && !config.context.isEmpty()) {
				for (let i = 0; i < config.context.length; i++) {
					if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
						const newContext = config.context.getParent(i); // "pop" return state
						const returnState = this.atn.states[config.context.getReturnState(i)];
						cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
						currentAltReachedAcceptState = this.closure(input, cfg,
								configs, currentAltReachedAcceptState, speculative,
								treatEofAsEpsilon);
					}
				}
			}
			return currentAltReachedAcceptState;
		}
		// optimization
		if (!config.state.epsilonOnlyTransitions) {
			if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
				configs.add(config);
			}
		}
		for (let j = 0; j < config.state.transitions.length; j++) {
			const trans = config.state.transitions[j];
			cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
			if (cfg !== null) {
				currentAltReachedAcceptState = this.closure(input, cfg, configs,
						currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
			}
		}
		return currentAltReachedAcceptState;
	}

	// side-effect: can alter configs.hasSemanticContext
	getEpsilonTarget(input, config, trans,
			configs, speculative, treatEofAsEpsilon) {
		let cfg = null;
		if (trans.serializationType === Transition.RULE) {
			const newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
			cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
		} else if (trans.serializationType === Transition.PRECEDENCE) {
			throw "Precedence predicates are not supported in lexers.";
		} else if (trans.serializationType === Transition.PREDICATE) {
			// Track traversing semantic predicates. If we traverse,
			// we cannot add a DFA state for this "reach" computation
			// because the DFA would not test the predicate again in the
			// future. Rather than creating collections of semantic predicates
			// like v3 and testing them on prediction, v4 will test them on the
			// fly all the time using the ATN not the DFA. This is slower but
			// semantically it's not used that often. One of the key elements to
			// this predicate mechanism is not adding DFA states that see
			// predicates immediately afterwards in the ATN. For example,

			// a : ID {p1}? | ID {p2}? ;

			// should create the start state for rule 'a' (to save start state
			// competition), but should not create target of ID state. The
			// collection of ATN states the following ID references includes
			// states reached by traversing predicates. Since this is when we
			// test them, we cannot cash the DFA state target of ID.

			if (LexerATNSimulator.debug) {
				console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
			}
			configs.hasSemanticContext = true;
			if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
				cfg = new LexerATNConfig({ state:trans.target}, config);
			}
		} else if (trans.serializationType === Transition.ACTION) {
			if (config.context === null || config.context.hasEmptyPath()) {
				// execute actions anywhere in the start rule for a token.
				//
				// TODO: if the entry rule is invoked recursively, some
				// actions may be executed during the recursive call. The
				// problem can appear when hasEmptyPath() is true but
				// isEmpty() is false. In this case, the config needs to be
				// split into two contexts - one with just the empty path
				// and another with everything but the empty path.
				// Unfortunately, the current algorithm does not allow
				// getEpsilonTarget to return two configurations, so
				// additional modifications are needed before we can support
				// the split operation.
				const lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
						this.atn.lexerActions[trans.actionIndex]);
				cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
			} else {
				// ignore actions in referenced rules
				cfg = new LexerATNConfig( { state:trans.target}, config);
			}
		} else if (trans.serializationType === Transition.EPSILON) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		} else if (trans.serializationType === Transition.ATOM ||
					trans.serializationType === Transition.RANGE ||
					trans.serializationType === Transition.SET) {
			if (treatEofAsEpsilon) {
				if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
					cfg = new LexerATNConfig( { state:trans.target }, config);
				}
			}
		}
		return cfg;
	}

	/**
	 * Evaluate a predicate specified in the lexer.
	 *
	 * <p>If {@code speculative} is {@code true}, this method was called before
	 * {@link //consume} for the matched character. This method should call
	 * {@link //consume} before evaluating the predicate to ensure position
	 * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
	 * and {@link Lexer//getcolumn}, properly reflect the current
	 * lexer state. This method should restore {@code input} and the simulator
	 * to the original state before returning (i.e. undo the actions made by the
	 * call to {@link //consume}.</p>
	 *
	 * @param input The input stream.
	 * @param ruleIndex The rule containing the predicate.
	 * @param predIndex The index of the predicate within the rule.
	 * @param speculative {@code true} if the current index in {@code input} is
	 * one character before the predicate's location.
	 *
	 * @return {@code true} if the specified predicate evaluates to
	 * {@code true}.
	 */
	evaluatePredicate(input, ruleIndex,
			predIndex, speculative) {
		// assume true if no recognizer was provided
		if (this.recog === null) {
			return true;
		}
		if (!speculative) {
			return this.recog.sempred(null, ruleIndex, predIndex);
		}
		const savedcolumn = this.column;
		const savedLine = this.line;
		const index = input.index;
		const marker = input.mark();
		try {
			this.consume(input);
			return this.recog.sempred(null, ruleIndex, predIndex);
		} finally {
			this.column = savedcolumn;
			this.line = savedLine;
			input.seek(index);
			input.release(marker);
		}
	}

	captureSimState(settings, input, dfaState) {
		settings.index = input.index;
		settings.line = this.line;
		settings.column = this.column;
		settings.dfaState = dfaState;
	}

	addDFAEdge(from_, tk, to, cfgs) {
		if (to === undefined) {
			to = null;
		}
		if (cfgs === undefined) {
			cfgs = null;
		}
		if (to === null && cfgs !== null) {
			// leading to this call, ATNConfigSet.hasSemanticContext is used as a
			// marker indicating dynamic predicate evaluation makes this edge
			// dependent on the specific input sequence, so the static edge in the
			// DFA should be omitted. The target DFAState is still created since
			// execATN has the ability to resynchronize with the DFA state cache
			// following the predicate evaluation step.
			//
			// TJP notes: next time through the DFA, we see a pred again and eval.
			// If that gets us to a previously created (but dangling) DFA
			// state, we can continue in pure DFA mode from there.
			// /
			const suppressEdge = cfgs.hasSemanticContext;
			cfgs.hasSemanticContext = false;

			to = this.addDFAState(cfgs);

			if (suppressEdge) {
				return to;
			}
		}
		// add the edge
		if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
			// Only track edges within the DFA bounds
			return to;
		}
		if (LexerATNSimulator.debug) {
			console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
		}
		if (from_.edges === null) {
			// make room for tokens 1..n and -1 masquerading as index 0
			from_.edges = [];
		}
		from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

		return to;
	}

	/**
	 * Add a new DFA state if there isn't one with this set of
	 * configurations already. This method also detects the first
	 * configuration containing an ATN rule stop state. Later, when
	 * traversing the DFA, we will know which rule to accept.
	 */
	addDFAState(configs) {
		const proposed = new DFAState(null, configs);
		let firstConfigWithRuleStopState = null;
		for (let i = 0; i < configs.items.length; i++) {
			const cfg = configs.items[i];
			if (cfg.state instanceof RuleStopState) {
				firstConfigWithRuleStopState = cfg;
				break;
			}
		}
		if (firstConfigWithRuleStopState !== null) {
			proposed.isAcceptState = true;
			proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
			proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
		}
		const dfa = this.decisionToDFA[this.mode];
		const existing = dfa.states.get(proposed);
		if (existing!==null) {
			return existing;
		}
		const newState = proposed;
		newState.stateNumber = dfa.states.length;
		configs.setReadonly(true);
		newState.configs = configs;
		dfa.states.add(newState);
		return newState;
	}

	getDFA(mode) {
		return this.decisionToDFA[mode];
	}

// Get the text matched so far for the current token.
	getText(input) {
		// index is first lookahead char, don't include.
		return input.getText(this.startIndex, input.index - 1);
	}

	consume(input) {
		const curChar = input.LA(1);
		if (curChar === "\n".charCodeAt(0)) {
			this.line += 1;
			this.column = 0;
		} else {
			this.column += 1;
		}
		input.consume();
	}

	getTokenName(tt) {
		if (tt === -1) {
			return "EOF";
		} else {
			return "'" + String.fromCharCode(tt) + "'";
		}
	}
}

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

module.exports = LexerATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerAction.js":
/*!***********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerAction.js ***!
  \***********************************************************/
/***/ ((module) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const LexerActionType = {
    // The type of a {@link LexerChannelAction} action.
    CHANNEL: 0,
    // The type of a {@link LexerCustomAction} action
    CUSTOM: 1,
    // The type of a {@link LexerModeAction} action.
    MODE: 2,
    //The type of a {@link LexerMoreAction} action.
    MORE: 3,
    //The type of a {@link LexerPopModeAction} action.
    POP_MODE: 4,
    //The type of a {@link LexerPushModeAction} action.
    PUSH_MODE: 5,
    //The type of a {@link LexerSkipAction} action.
    SKIP: 6,
    //The type of a {@link LexerTypeAction} action.
    TYPE: 7
}

class LexerAction {
    constructor(action) {
        this.actionType = action;
        this.isPositionDependent = false;
    }

    hashCode() {
        const hash = new Hash();
        this.updateHashCode(hash);
        return hash.finish()
    }

    updateHashCode(hash) {
        hash.update(this.actionType);
    }

    equals(other) {
        return this === other;
    }
}


/**
 * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
 *
 * <p>The {@code skip} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerSkipAction extends LexerAction {
    constructor() {
        super(LexerActionType.SKIP);
    }

    execute(lexer) {
        lexer.skip();
    }

    toString() {
        return "skip";
    }
}

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

/**
 * Implements the {@code type} lexer action by calling {@link Lexer//setType}
 * with the assigned type
 */
class LexerTypeAction extends LexerAction {
    constructor(type) {
        super(LexerActionType.TYPE);
        this.type = type;
    }

    execute(lexer) {
        lexer.type = this.type;
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.type);
    }

    equals(other) {
        if(this === other) {
            return true;
        } else if (! (other instanceof LexerTypeAction)) {
            return false;
        } else {
            return this.type === other.type;
        }
    }

    toString() {
        return "type(" + this.type + ")";
    }
}


/**
 * Implements the {@code pushMode} lexer action by calling
 * {@link Lexer//pushMode} with the assigned mode
 */
class LexerPushModeAction extends LexerAction {
    constructor(mode) {
        super(LexerActionType.PUSH_MODE);
        this.mode = mode;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//pushMode} with the
     * value provided by {@link //getMode}.</p>
     */
    execute(lexer) {
        lexer.pushMode(this.mode);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.mode);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerPushModeAction)) {
            return false;
        } else {
            return this.mode === other.mode;
        }
    }

    toString() {
        return "pushMode(" + this.mode + ")";
    }
}

/**
 * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
 *
 * <p>The {@code popMode} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerPopModeAction extends LexerAction {
    constructor() {
        super(LexerActionType.POP_MODE);
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
     */
    execute(lexer) {
        lexer.popMode();
    }

    toString() {
        return "popMode";
    }
}

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

/**
 * Implements the {@code more} lexer action by calling {@link Lexer//more}.
 *
 * <p>The {@code more} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerMoreAction extends LexerAction {
    constructor() {
        super(LexerActionType.MORE);
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
     */
    execute(lexer) {
        lexer.more();
    }

    toString() {
        return "more";
    }
}

LexerMoreAction.INSTANCE = new LexerMoreAction();


/**
 * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
 * the assigned mode
 */
class LexerModeAction extends LexerAction {
    constructor(mode) {
        super(LexerActionType.MODE);
        this.mode = mode;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//mode} with the
     * value provided by {@link //getMode}.</p>
     */
    execute(lexer) {
        lexer.mode(this.mode);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.mode);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerModeAction)) {
            return false;
        } else {
            return this.mode === other.mode;
        }
    }

    toString() {
        return "mode(" + this.mode + ")";
    }
}

/**
 * Executes a custom lexer action by calling {@link Recognizer//action} with the
 * rule and action indexes assigned to the custom action. The implementation of
 * a custom action is added to the generated code for the lexer in an override
 * of {@link Recognizer//action} when the grammar is compiled.
 *
 * <p>This class may represent embedded actions created with the <code>{...}</code>
 * syntax in ANTLR 4, as well as actions created for lexer commands where the
 * command argument could not be evaluated when the grammar was compiled.</p>
 */
class LexerCustomAction extends LexerAction {
    /**
     * Constructs a custom lexer action with the specified rule and action
     * indexes.
     *
     * @param ruleIndex The rule index to use for calls to
     * {@link Recognizer//action}.
     * @param actionIndex The action index to use for calls to
     * {@link Recognizer//action}.
     */
    constructor(ruleIndex, actionIndex) {
        super(LexerActionType.CUSTOM);
        this.ruleIndex = ruleIndex;
        this.actionIndex = actionIndex;
        this.isPositionDependent = true;
    }

    /**
     * <p>Custom actions are implemented by calling {@link Lexer//action} with the
     * appropriate rule and action indexes.</p>
     */
    execute(lexer) {
        lexer.action(null, this.ruleIndex, this.actionIndex);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.ruleIndex, this.actionIndex);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerCustomAction)) {
            return false;
        } else {
            return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
        }
    }
}

/**
 * Implements the {@code channel} lexer action by calling
 * {@link Lexer//setChannel} with the assigned channel.
 * Constructs a new {@code channel} action with the specified channel value.
 * @param channel The channel value to pass to {@link Lexer//setChannel}
 */
class LexerChannelAction extends LexerAction {
    constructor(channel) {
        super(LexerActionType.CHANNEL);
        this.channel = channel;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//setChannel} with the
     * value provided by {@link //getChannel}.</p>
     */
    execute(lexer) {
        lexer._channel = this.channel;
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.channel);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerChannelAction)) {
            return false;
        } else {
            return this.channel === other.channel;
        }
    }

    toString() {
        return "channel(" + this.channel + ")";
    }
}


/**
 * This implementation of {@link LexerAction} is used for tracking input offsets
 * for position-dependent actions within a {@link LexerActionExecutor}.
 *
 * <p>This action is not serialized as part of the ATN, and is only required for
 * position-dependent lexer actions which appear at a location other than the
 * end of a rule. For more information about DFA optimizations employed for
 * lexer actions, see {@link LexerActionExecutor//append} and
 * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>
 *
 * Constructs a new indexed custom action by associating a character offset
 * with a {@link LexerAction}.
 *
 * <p>Note: This class is only required for lexer actions for which
 * {@link LexerAction//isPositionDependent} returns {@code true}.</p>
 *
 * @param offset The offset into the input {@link CharStream}, relative to
 * the token start index, at which the specified lexer action should be
 * executed.
 * @param action The lexer action to execute at a particular offset in the
 * input {@link CharStream}.
 */
class LexerIndexedCustomAction extends LexerAction {
    constructor(offset, action) {
        super(action.actionType);
        this.offset = offset;
        this.action = action;
        this.isPositionDependent = true;
    }

    /**
     * <p>This method calls {@link //execute} on the result of {@link //getAction}
     * using the provided {@code lexer}.</p>
     */
    execute(lexer) {
        // assume the input stream position was properly set by the calling code
        this.action.execute(lexer);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.offset, this.action);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerIndexedCustomAction)) {
            return false;
        } else {
            return this.offset === other.offset && this.action === other.action;
        }
    }
}

module.exports = {
    LexerActionType,
    LexerSkipAction,
    LexerChannelAction,
    LexerCustomAction,
    LexerIndexedCustomAction,
    LexerMoreAction,
    LexerTypeAction,
    LexerPushModeAction,
    LexerPopModeAction,
    LexerModeAction
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {hashStuff} = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {LexerIndexedCustomAction} = __webpack_require__(/*! ./LexerAction */ "./node_modules/antlr4/src/antlr4/atn/LexerAction.js");

class LexerActionExecutor {
	/**
	 * Represents an executor for a sequence of lexer actions which traversed during
	 * the matching operation of a lexer rule (token).
	 *
	 * <p>The executor tracks position information for position-dependent lexer actions
	 * efficiently, ensuring that actions appearing only at the end of the rule do
	 * not cause bloating of the {@link DFA} created for the lexer.</p>
	 */
	constructor(lexerActions) {
		this.lexerActions = lexerActions === null ? [] : lexerActions;
		/**
		 * Caches the result of {@link //hashCode} since the hash code is an element
		 * of the performance-critical {@link LexerATNConfig//hashCode} operation
		 */
		this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
		// lexerActions]))
		return this;
	}

	/**
	 * Creates a {@link LexerActionExecutor} which encodes the current offset
	 * for position-dependent lexer actions.
	 *
	 * <p>Normally, when the executor encounters lexer actions where
	 * {@link LexerAction//isPositionDependent} returns {@code true}, it calls
	 * {@link IntStream//seek} on the input {@link CharStream} to set the input
	 * position to the <em>end</em> of the current token. This behavior provides
	 * for efficient DFA representation of lexer actions which appear at the end
	 * of a lexer rule, even when the lexer rule matches a variable number of
	 * characters.</p>
	 *
	 * <p>Prior to traversing a match transition in the ATN, the current offset
	 * from the token start index is assigned to all position-dependent lexer
	 * actions which have not already been assigned a fixed offset. By storing
	 * the offsets relative to the token start index, the DFA representation of
	 * lexer actions which appear in the middle of tokens remains efficient due
	 * to sharing among tokens of the same length, regardless of their absolute
	 * position in the input stream.</p>
	 *
	 * <p>If the current executor already has offsets assigned to all
	 * position-dependent lexer actions, the method returns {@code this}.</p>
	 *
	 * @param offset The current offset to assign to all position-dependent
	 * lexer actions which do not already have offsets assigned.
	 *
	 * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets
	 * for all position-dependent lexer actions.
	 */
	fixOffsetBeforeMatch(offset) {
		let updatedLexerActions = null;
		for (let i = 0; i < this.lexerActions.length; i++) {
			if (this.lexerActions[i].isPositionDependent &&
					!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
				if (updatedLexerActions === null) {
					updatedLexerActions = this.lexerActions.concat([]);
				}
				updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
						this.lexerActions[i]);
			}
		}
		if (updatedLexerActions === null) {
			return this;
		} else {
			return new LexerActionExecutor(updatedLexerActions);
		}
	}

	/**
	 * Execute the actions encapsulated by this executor within the context of a
	 * particular {@link Lexer}.
	 *
	 * <p>This method calls {@link IntStream//seek} to set the position of the
	 * {@code input} {@link CharStream} prior to calling
	 * {@link LexerAction//execute} on a position-dependent action. Before the
	 * method returns, the input position will be restored to the same position
	 * it was in when the method was invoked.</p>
	 *
	 * @param lexer The lexer instance.
	 * @param input The input stream which is the source for the current token.
	 * When this method is called, the current {@link IntStream//index} for
	 * {@code input} should be the start of the following token, i.e. 1
	 * character past the end of the current token.
	 * @param startIndex The token start index. This value may be passed to
	 * {@link IntStream//seek} to set the {@code input} position to the beginning
	 * of the token.
	 */
	execute(lexer, input, startIndex) {
		let requiresSeek = false;
		const stopIndex = input.index;
		try {
			for (let i = 0; i < this.lexerActions.length; i++) {
				let lexerAction = this.lexerActions[i];
				if (lexerAction instanceof LexerIndexedCustomAction) {
					const offset = lexerAction.offset;
					input.seek(startIndex + offset);
					lexerAction = lexerAction.action;
					requiresSeek = (startIndex + offset) !== stopIndex;
				} else if (lexerAction.isPositionDependent) {
					input.seek(stopIndex);
					requiresSeek = false;
				}
				lexerAction.execute(lexer);
			}
		} finally {
			if (requiresSeek) {
				input.seek(stopIndex);
			}
		}
	}

	hashCode() {
		return this.cachedHashCode;
	}

	updateHashCode(hash) {
		hash.update(this.cachedHashCode);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof LexerActionExecutor)) {
			return false;
		} else if (this.cachedHashCode != other.cachedHashCode) {
			return false;
		} else if (this.lexerActions.length != other.lexerActions.length) {
			return false;
		} else {
			const numActions = this.lexerActions.length
			for (let idx = 0; idx < numActions; ++idx) {
				if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
					return false;
				}
			}
			return true;
		}
	}

	/**
	 * Creates a {@link LexerActionExecutor} which executes the actions for
	 * the input {@code lexerActionExecutor} followed by a specified
	 * {@code lexerAction}.
	 *
	 * @param lexerActionExecutor The executor for actions already traversed by
	 * the lexer while matching a token within a particular
	 * {@link LexerATNConfig}. If this is {@code null}, the method behaves as
	 * though it were an empty executor.
	 * @param lexerAction The lexer action to execute after the actions
	 * specified in {@code lexerActionExecutor}.
	 *
	 * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions
	 * of {@code lexerActionExecutor} and {@code lexerAction}.
	 */
	static append(lexerActionExecutor, lexerAction) {
		if (lexerActionExecutor === null) {
			return new LexerActionExecutor([ lexerAction ]);
		}
		const lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
		return new LexerActionExecutor(lexerActions);
	}
}


module.exports = LexerActionExecutor;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {Set, BitSet, DoubleDict} = Utils;

const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const {ATNState, RuleStopState} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");

const {ATNConfig} = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js");
const {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {DFAState, PredPrediction} = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js");
const ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ "./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js");
const PredictionMode = __webpack_require__(/*! ./PredictionMode */ "./node_modules/antlr4/src/antlr4/atn/PredictionMode.js");
const RuleContext = __webpack_require__(/*! ./../RuleContext */ "./node_modules/antlr4/src/antlr4/RuleContext.js");
const ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ "./node_modules/antlr4/src/antlr4/ParserRuleContext.js");
const {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");
const {PredictionContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
const {Interval} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const {Transition, SetTransition, NotSetTransition, RuleTransition, ActionTransition} = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js");
const {NoViableAltException} = __webpack_require__(/*! ./../error/Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js");
const {SingletonPredictionContext, predictionContextFromRuleContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");


/**
 * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
 *
 * <p>
 * The basic complexity of the adaptive strategy makes it harder to understand.
 * We begin with ATN simulation to build paths in a DFA. Subsequent prediction
 * requests go through the DFA first. If they reach a state without an edge for
 * the current symbol, the algorithm fails over to the ATN simulation to
 * complete the DFA path for the current input (until it finds a conflict state
 * or uniquely predicting state).</p>
 *
 * <p>
 * All of that is done without using the outer context because we want to create
 * a DFA that is not dependent upon the rule invocation stack when we do a
 * prediction. One DFA works in all contexts. We avoid using context not
 * necessarily because it's slower, although it can be, but because of the DFA
 * caching problem. The closure routine only considers the rule invocation stack
 * created during prediction beginning in the decision rule. For example, if
 * prediction occurs without invoking another rule's ATN, there are no context
 * stacks in the configurations. When lack of context leads to a conflict, we
 * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
 * strategy (versus full LL(*)).</p>
 *
 * <p>
 * When SLL yields a configuration set with conflict, we rewind the input and
 * retry the ATN simulation, this time using full outer context without adding
 * to the DFA. Configuration context stacks will be the full invocation stacks
 * from the start rule. If we get a conflict using full context, then we can
 * definitively say we have a true ambiguity for that input sequence. If we
 * don't get a conflict, it implies that the decision is sensitive to the outer
 * context. (It is not context-sensitive in the sense of context-sensitive
 * grammars.)</p>
 *
 * <p>
 * The next time we reach this DFA state with an SLL conflict, through DFA
 * simulation, we will again retry the ATN simulation using full context mode.
 * This is slow because we can't save the results and have to "interpret" the
 * ATN each time we get that input.</p>
 *
 * <p>
 * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
 *
 * <p>
 * We could cache results from full context to predicted alternative easily and
 * that saves a lot of time but doesn't work in presence of predicates. The set
 * of visible predicates from the ATN start state changes depending on the
 * context, because closure can fall off the end of a rule. I tried to cache
 * tuples (stack context, semantic context, predicted alt) but it was slower
 * than interpreting and much more complicated. Also required a huge amount of
 * memory. The goal is not to create the world's fastest parser anyway. I'd like
 * to keep this algorithm simple. By launching multiple threads, we can improve
 * the speed of parsing across a large number of files.</p>
 *
 * <p>
 * There is no strict ordering between the amount of input used by SLL vs LL,
 * which makes it really hard to build a cache for full context. Let's say that
 * we have input A B C that leads to an SLL conflict with full context X. That
 * implies that using X we might only use A B but we could also use A B C D to
 * resolve conflict. Input A B C D could predict alternative 1 in one position
 * in the input and A B C E could predict alternative 2 in another position in
 * input. The conflicting SLL configurations could still be non-unique in the
 * full context prediction, which would lead us to requiring more input than the
 * original A B C.	To make a	prediction cache work, we have to track	the exact
 * input	used during the previous prediction. That amounts to a cache that maps
 * X to a specific DFA for that context.</p>
 *
 * <p>
 * Something should be done for left-recursive expression predictions. They are
 * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
 * with full LL thing Sam does.</p>
 *
 * <p>
 * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
 *
 * <p>
 * We avoid doing full context retry when the outer context is empty, we did not
 * dip into the outer context by falling off the end of the decision state rule,
 * or when we force SLL mode.</p>
 *
 * <p>
 * As an example of the not dip into outer context case, consider as super
 * constructor calls versus function calls. One grammar might look like
 * this:</p>
 *
 * <pre>
 * ctorBody
 *   : '{' superCall? stat* '}'
 *   ;
 * </pre>
 *
 * <p>
 * Or, you might see something like</p>
 *
 * <pre>
 * stat
 *   : superCall ';'
 *   | expression ';'
 *   | ...
 *   ;
 * </pre>
 *
 * <p>
 * In both cases I believe that no closure operations will dip into the outer
 * context. In the first case ctorBody in the worst case will stop at the '}'.
 * In the 2nd case it should stop at the ';'. Both cases should stay within the
 * entry rule and not dip into the outer context.</p>
 *
 * <p>
 * <strong>PREDICATES</strong></p>
 *
 * <p>
 * Predicates are always evaluated if present in either SLL or LL both. SLL and
 * LL simulation deals with predicates differently. SLL collects predicates as
 * it performs closure operations like ANTLR v3 did. It delays predicate
 * evaluation until it reaches and accept state. This allows us to cache the SLL
 * ATN simulation whereas, if we had evaluated predicates on-the-fly during
 * closure, the DFA state configuration sets would be different and we couldn't
 * build up a suitable DFA.</p>
 *
 * <p>
 * When building a DFA accept state during ATN simulation, we evaluate any
 * predicates and return the sole semantically valid alternative. If there is
 * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
 * we throw an exception. Alternatives without predicates act like they have
 * true predicates. The simple way to think about it is to strip away all
 * alternatives with false predicates and choose the minimum alternative that
 * remains.</p>
 *
 * <p>
 * When we start in the DFA and reach an accept state that's predicated, we test
 * those and return the minimum semantically viable alternative. If no
 * alternatives are viable, we throw an exception.</p>
 *
 * <p>
 * During full LL ATN simulation, closure always evaluates predicates and
 * on-the-fly. This is crucial to reducing the configuration set size during
 * closure. It hits a landmine when parsing with the Java grammar, for example,
 * without this on-the-fly evaluation.</p>
 *
 * <p>
 * <strong>SHARING DFA</strong></p>
 *
 * <p>
 * All instances of the same parser share the same decision DFAs through a
 * static field. Each instance gets its own ATN simulator but they share the
 * same {@link //decisionToDFA} field. They also share a
 * {@link PredictionContextCache} object that makes sure that all
 * {@link PredictionContext} objects are shared among the DFA states. This makes
 * a big size difference.</p>
 *
 * <p>
 * <strong>THREAD SAFETY</strong></p>
 *
 * <p>
 * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
 * it adds a new DFA object to that array. {@link //addDFAEdge}
 * locks on the DFA for the current decision when setting the
 * {@link DFAState//edges} field. {@link //addDFAState} locks on
 * the DFA for the current decision when looking up a DFA state to see if it
 * already exists. We must make sure that all requests to add DFA states that
 * are equivalent result in the same shared DFA object. This is because lots of
 * threads will be trying to update the DFA at once. The
 * {@link //addDFAState} method also locks inside the DFA lock
 * but this time on the shared context cache when it rebuilds the
 * configurations' {@link PredictionContext} objects using cached
 * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
 * safe as long as we can guarantee that all threads referencing
 * {@code s.edge[t]} get the same physical target {@link DFAState}, or
 * {@code null}. Once into the DFA, the DFA simulation does not reference the
 * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
 * targets. The DFA simulator will either find {@link DFAState//edges} to be
 * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
 * {@code dfa.edges[t]} to be non-null. The
 * {@link //addDFAEdge} method could be racing to set the field
 * but in either case the DFA simulator works; if {@code null}, and requests ATN
 * simulation. It could also race trying to get {@code dfa.edges[t]}, but either
 * way it will work because it's not doing a test and set operation.</p>
 *
 * <p>
 * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
 * Parsing)</strong></p>
 *
 * <p>
 * Sam pointed out that if SLL does not give a syntax error, then there is no
 * point in doing full LL, which is slower. We only have to try LL if we get a
 * syntax error. For maximum speed, Sam starts the parser set to pure SLL
 * mode with the {@link BailErrorStrategy}:</p>
 *
 * <pre>
 * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
 * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
 * </pre>
 *
 * <p>
 * If it does not get a syntax error, then we're done. If it does get a syntax
 * error, we need to retry with the combined SLL/LL strategy.</p>
 *
 * <p>
 * The reason this works is as follows. If there are no SLL conflicts, then the
 * grammar is SLL (at least for that input set). If there is an SLL conflict,
 * the full LL analysis must yield a set of viable alternatives which is a
 * subset of the alternatives reported by SLL. If the LL set is a singleton,
 * then the grammar is LL but not SLL. If the LL set is the same size as the SLL
 * set, the decision is SLL. If the LL set has size &gt; 1, then that decision
 * is truly ambiguous on the current input. If the LL set is smaller, then the
 * SLL conflict resolution might choose an alternative that the full LL would
 * rule out as a possibility based upon better context information. If that's
 * the case, then the SLL parse will definitely get an error because the full LL
 * analysis says it's not viable. If SLL conflict resolution chooses an
 * alternative within the LL set, them both SLL and LL would choose the same
 * alternative because they both choose the minimum of multiple conflicting
 * alternatives.</p>
 *
 * <p>
 * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
 * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
 * parsing will get an error because SLL will pursue alternative 1. If
 * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
 * choose the same alternative because alternative one is the minimum of either
 * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
 * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
 *
 * <p>
 * Of course, if the input is invalid, then we will get an error for sure in
 * both SLL and LL parsing. Erroneous input will therefore require 2 passes over
 * the input.</p>
 */
class ParserATNSimulator extends ATNSimulator {
    constructor(parser, atn, decisionToDFA, sharedContextCache) {
        super(atn, sharedContextCache);
        this.parser = parser;
        this.decisionToDFA = decisionToDFA;
        // SLL, LL, or LL + exact ambig detection?//
        this.predictionMode = PredictionMode.LL;
        // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
        this._input = null;
        this._startIndex = 0;
        this._outerContext = null;
        this._dfa = null;
        /**
         * Each prediction operation uses a cache for merge of prediction contexts.
         *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
         *  isn't synchronized but we're ok since two threads shouldn't reuse same
         *  parser/atnsim object because it can only handle one input at a time.
         *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
         *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
         *  also be examined during cache lookup.
         */
        this.mergeCache = null;
        this.debug = false;
        this.debug_closure = false;
        this.debug_add = false;
        this.debug_list_atn_decisions = false;
        this.dfa_debug = false;
        this.retry_debug = false;
    }

    reset() {}

    adaptivePredict(input, decision, outerContext) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("adaptivePredict decision " + decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   " line " + input.LT(1).line + ":" +
                                   input.LT(1).column);
        }
        this._input = input;
        this._startIndex = input.index;
        this._outerContext = outerContext;

        const dfa = this.decisionToDFA[decision];
        this._dfa = dfa;
        const m = input.mark();
        const index = input.index;

        // Now we are certain to have a specific decision's DFA
        // But, do we still need an initial state?
        try {
            let s0;
            if (dfa.precedenceDfa) {
                // the start state for a precedence DFA depends on the current
                // parser precedence, and is provided by a DFA method.
                s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
            } else {
                // the start state for a "regular" DFA is just s0
                s0 = dfa.s0;
            }
            if (s0===null) {
                if (outerContext===null) {
                    outerContext = RuleContext.EMPTY;
                }
                if (this.debug || this.debug_list_atn_decisions) {
                    console.log("predictATN decision " + dfa.decision +
                                       " exec LA(1)==" + this.getLookaheadName(input) +
                                       ", outerContext=" + outerContext.toString(this.parser.ruleNames));
                }

                const fullCtx = false;
                let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

                if( dfa.precedenceDfa) {
                    // If this is a precedence DFA, we use applyPrecedenceFilter
                    // to convert the computed start state to a precedence start
                    // state. We then use DFA.setPrecedenceStartState to set the
                    // appropriate start state for the precedence level rather
                    // than simply setting DFA.s0.
                    //
                    dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                    s0_closure = this.applyPrecedenceFilter(s0_closure);
                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                    dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
                } else {
                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                    dfa.s0 = s0;
                }
            }
            const alt = this.execATN(dfa, s0, input, index, outerContext);
            if (this.debug) {
                console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames, this.parser.symbolicNames));
            }
            return alt;
        } finally {
            this._dfa = null;
            this.mergeCache = null; // wack cache after each prediction
            input.seek(index);
            input.release(m);
        }
    }

    /**
     * Performs ATN simulation to compute a predicted alternative based
     *  upon the remaining input, but also updates the DFA cache to avoid
     *  having to traverse the ATN again for the same input sequence.
     *
     * There are some key conditions we're looking for after computing a new
     * set of ATN configs (proposed DFA state):
     *       if the set is empty, there is no viable alternative for current symbol
     *       does the state uniquely predict an alternative?
     *       does the state have a conflict that would prevent us from
     *         putting it on the work list?
     *
     * We also have some key operations to do:
     *       add an edge from previous DFA state to potentially new DFA state, D,
     *         upon current symbol but only if adding to work list, which means in all
     *         cases except no viable alternative (and possibly non-greedy decisions?)
     *       collecting predicates and adding semantic context to DFA accept states
     *       adding rule context to context-sensitive DFA accept states
     *       consuming an input symbol
     *       reporting a conflict
     *       reporting an ambiguity
     *       reporting a context sensitivity
     *       reporting insufficient predicates
     *
     * cover these cases:
     *    dead end
     *    single alt
     *    single alt + preds
     *    conflict
     *    conflict + preds
     *
     */
    execATN(dfa, s0, input, startIndex, outerContext ) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("execATN decision " + dfa.decision +
                    " exec LA(1)==" + this.getLookaheadName(input) +
                    " line " + input.LT(1).line + ":" + input.LT(1).column);
        }
        let alt;
        let previousD = s0;

        if (this.debug) {
            console.log("s0 = " + s0);
        }
        let t = input.LA(1);
        while(true) { // while more work
            let D = this.getExistingTargetState(previousD, t);
            if(D===null) {
                D = this.computeTargetState(dfa, previousD, t);
            }
            if(D===ATNSimulator.ERROR) {
                // if any configs in previous dipped into outer context, that
                // means that input up to t actually finished entry rule
                // at least for SLL decision. Full LL doesn't dip into outer
                // so don't need special case.
                // We will get an error no matter what so delay until after
                // decision; better error message. Also, no reachable target
                // ATN states in SLL implies LL will also get nowhere.
                // If conflict in states that dip out, choose min since we
                // will get error no matter what.
                const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
                input.seek(startIndex);
                alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
                if(alt!==ATN.INVALID_ALT_NUMBER) {
                    return alt;
                } else {
                    throw e;
                }
            }
            if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
                // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
                let conflictingAlts = null;
                if (D.predicates!==null) {
                    if (this.debug) {
                        console.log("DFA state has preds in DFA sim LL failover");
                    }
                    const conflictIndex = input.index;
                    if(conflictIndex !== startIndex) {
                        input.seek(startIndex);
                    }
                    conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                    if (conflictingAlts.length===1) {
                        if(this.debug) {
                            console.log("Full LL avoided");
                        }
                        return conflictingAlts.minValue();
                    }
                    if (conflictIndex !== startIndex) {
                        // restore the index so reporting the fallback to full
                        // context occurs with the index at the correct spot
                        input.seek(conflictIndex);
                    }
                }
                if (this.dfa_debug) {
                    console.log("ctx sensitive state " + outerContext +" in " + D);
                }
                const fullCtx = true;
                const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
                this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
                alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
                return alt;
            }
            if (D.isAcceptState) {
                if (D.predicates===null) {
                    return D.prediction;
                }
                const stopIndex = input.index;
                input.seek(startIndex);
                const alts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (alts.length===0) {
                    throw this.noViableAlt(input, outerContext, D.configs, startIndex);
                } else if (alts.length===1) {
                    return alts.minValue();
                } else {
                    // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                    this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                    return alts.minValue();
                }
            }
            previousD = D;

            if (t !== Token.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
    }

    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns {@code null}.
     *
     * @param previousD The current DFA state
     * @param t The next input symbol
     * @return The existing target DFA state for the given input symbol
     * {@code t}, or {@code null} if the target state for this edge is not
     * already cached
     */
    getExistingTargetState(previousD, t) {
        const edges = previousD.edges;
        if (edges===null) {
            return null;
        } else {
            return edges[t + 1] || null;
        }
    }

    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param dfa The DFA
     * @param previousD The current DFA state
     * @param t The next input symbol
     *
     * @return The computed target DFA state for the given input symbol
     * {@code t}. If {@code t} does not lead to a valid DFA state, this method
     * returns {@link //ERROR
     */
    computeTargetState(dfa, previousD, t) {
       const reach = this.computeReachSet(previousD.configs, t, false);
        if(reach===null) {
            this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
            return ATNSimulator.ERROR;
        }
        // create new target state; we'll add to DFA after it's complete
        let D = new DFAState(null, reach);

        const predictedAlt = this.getUniqueAlt(reach);

        if (this.debug) {
            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);
            console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                        /*", previous=" + previousD.configs + */
                        ", configs=" + reach +
                        ", predict=" + predictedAlt +
                        ", allSubsetsConflict=" +
                        PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                        this.getConflictingAlts(reach));
        }
        if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
            // NO CONFLICT, UNIQUELY PREDICTED ALT
            D.isAcceptState = true;
            D.configs.uniqueAlt = predictedAlt;
            D.prediction = predictedAlt;
        } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
            // MORE THAN ONE VIABLE ALTERNATIVE
            D.configs.conflictingAlts = this.getConflictingAlts(reach);
            D.requiresFullContext = true;
            // in SLL-only mode, we will stop at this state and return the minimum alt
            D.isAcceptState = true;
            D.prediction = D.configs.conflictingAlts.minValue();
        }
        if (D.isAcceptState && D.configs.hasSemanticContext) {
            this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
            if( D.predicates!==null) {
                D.prediction = ATN.INVALID_ALT_NUMBER;
            }
        }
        // all adds to dfa are done after we've created full D state
        D = this.addDFAEdge(dfa, previousD, t, D);
        return D;
    }

    predicateDFAState(dfaState, decisionState) {
        // We need to test all predicates, even in DFA states that
        // uniquely predict alternative.
        const nalts = decisionState.transitions.length;
        // Update DFA so reach becomes accept state with (predicate,alt)
        // pairs if preds found for conflicting alts
        const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
        const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
        if (altToPred!==null) {
            dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
            dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
        } else {
            // There are preds in configs but they might go away
            // when OR'd together like {p}? || NONE == NONE. If neither
            // alt has preds, resolve to min alt
            dfaState.prediction = altsToCollectPredsFrom.minValue();
        }
    }

// comes back with reach.uniqueAlt set to a valid alt
    execATNWithFullContext(dfa, D, // how far we got before failing over
                                         s0,
                                         input,
                                         startIndex,
                                         outerContext) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("execATNWithFullContext "+s0);
        }
        const fullCtx = true;
        let foundExactAmbig = false;
        let reach;
        let previous = s0;
        input.seek(startIndex);
        let t = input.LA(1);
        let predictedAlt = -1;
        while (true) { // while more work
            reach = this.computeReachSet(previous, t, fullCtx);
            if (reach===null) {
                // if any configs in previous dipped into outer context, that
                // means that input up to t actually finished entry rule
                // at least for LL decision. Full LL doesn't dip into outer
                // so don't need special case.
                // We will get an error no matter what so delay until after
                // decision; better error message. Also, no reachable target
                // ATN states in SLL implies LL will also get nowhere.
                // If conflict in states that dip out, choose min since we
                // will get error no matter what.
                const e = this.noViableAlt(input, outerContext, previous, startIndex);
                input.seek(startIndex);
                const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
                if(alt!==ATN.INVALID_ALT_NUMBER) {
                    return alt;
                } else {
                    throw e;
                }
            }
            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);
            if(this.debug) {
                console.log("LL altSubSets=" + altSubSets + ", predict=" +
                      PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                      PredictionMode.resolvesToJustOneViableAlt(altSubSets));
            }
            reach.uniqueAlt = this.getUniqueAlt(reach);
            // unique prediction?
            if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
                predictedAlt = reach.uniqueAlt;
                break;
            } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
                predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
                if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                    break;
                }
            } else {
                // In exact ambiguity mode, we never try to terminate early.
                // Just keeps scarfing until we know what the conflict is
                if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                    foundExactAmbig = true;
                    predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                    break;
                }
                // else there are multiple non-conflicting subsets or
                // we're not sure what the ambiguity is yet.
                // So, keep going.
            }
            previous = reach;
            if( t !== Token.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
        // If the configuration set uniquely predicts an alternative,
        // without conflict, then we know that it's a full LL decision
        // not SLL.
        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
            this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
            return predictedAlt;
        }
        // We do not check predicates here because we have checked them
        // on-the-fly when doing full context prediction.

        //
        // In non-exact ambiguity detection mode, we might	actually be able to
        // detect an exact ambiguity, but I'm not going to spend the cycles
        // needed to check. We only emit ambiguity warnings in exact ambiguity
        // mode.
        //
        // For example, we might know that we have conflicting configurations.
        // But, that does not mean that there is no way forward without a
        // conflict. It's possible to have nonconflicting alt subsets as in:

        // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

        // from
        //
        //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
        //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
        //
        // In this case, (17,1,[5 $]) indicates there is some next sequence that
        // would resolve this without conflict to alternative 1. Any other viable
        // next sequence, however, is associated with a conflict.  We stop
        // looking for input because no amount of further lookahead will alter
        // the fact that we should predict alternative 1.  We just can't say for
        // sure that there is an ambiguity without looking further.

        this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

        return predictedAlt;
    }

    computeReachSet(closure, t, fullCtx) {
        if (this.debug) {
            console.log("in computeReachSet, starting closure: " + closure);
        }
        if( this.mergeCache===null) {
            this.mergeCache = new DoubleDict();
        }
        const intermediate = new ATNConfigSet(fullCtx);

        // Configurations already in a rule stop state indicate reaching the end
        // of the decision rule (local context) or end of the start rule (full
        // context). Once reached, these configurations are never updated by a
        // closure operation, so they are handled separately for the performance
        // advantage of having a smaller intermediate set when calling closure.
        //
        // For full-context reach operations, separate handling is required to
        // ensure that the alternative matching the longest overall sequence is
        // chosen when multiple such configurations can match the input.

        let skippedStopStates = null;

        // First figure out where we can reach on input t
        for (let i=0; i<closure.items.length;i++) {
            const c = closure.items[i];
            if(this.debug) {
                console.log("testing " + this.getTokenName(t) + " at " + c);
            }
            if (c.state instanceof RuleStopState) {
                if (fullCtx || t === Token.EOF) {
                    if (skippedStopStates===null) {
                        skippedStopStates = [];
                    }
                    skippedStopStates.push(c);
                    if(this.debug_add) {
                        console.log("added " + c + " to skippedStopStates");
                    }
                }
                continue;
            }
            for(let j=0;j<c.state.transitions.length;j++) {
                const trans = c.state.transitions[j];
                const target = this.getReachableTarget(trans, t);
                if (target!==null) {
                    const cfg = new ATNConfig({state:target}, c);
                    intermediate.add(cfg, this.mergeCache);
                    if(this.debug_add) {
                        console.log("added " + cfg + " to intermediate");
                    }
                }
            }
        }
        // Now figure out where the reach operation can take us...
        let reach = null;

        // This block optimizes the reach operation for intermediate sets which
        // trivially indicate a termination state for the overall
        // adaptivePredict operation.
        //
        // The conditions assume that intermediate
        // contains all configurations relevant to the reach set, but this
        // condition is not true when one or more configurations have been
        // withheld in skippedStopStates, or when the current symbol is EOF.
        //
        if (skippedStopStates===null && t!==Token.EOF) {
            if (intermediate.items.length===1) {
                // Don't pursue the closure if there is just one state.
                // It can only have one alternative; just add to result
                // Also don't pursue the closure if there is unique alternative
                // among the configurations.
                reach = intermediate;
            } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
                // Also don't pursue the closure if there is unique alternative
                // among the configurations.
                reach = intermediate;
            }
        }
        // If the reach set could not be trivially determined, perform a closure
        // operation on the intermediate set to compute its initial value.
        //
        if (reach===null) {
            reach = new ATNConfigSet(fullCtx);
            const closureBusy = new Set();
            const treatEofAsEpsilon = t === Token.EOF;
            for (let k=0; k<intermediate.items.length;k++) {
                this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
            }
        }
        if (t === Token.EOF) {
            // After consuming EOF no additional input is possible, so we are
            // only interested in configurations which reached the end of the
            // decision rule (local context) or end of the start rule (full
            // context). Update reach to contain only these configurations. This
            // handles both explicit EOF transitions in the grammar and implicit
            // EOF transitions following the end of the decision or start rule.
            //
            // When reach==intermediate, no closure operation was performed. In
            // this case, removeAllConfigsNotInRuleStopState needs to check for
            // reachable rule stop states as well as configurations already in
            // a rule stop state.
            //
            // This is handled before the configurations in skippedStopStates,
            // because any configurations potentially added from that list are
            // already guaranteed to meet this condition whether or not it's
            // required.
            //
            reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
        }
        // If skippedStopStates!==null, then it contains at least one
        // configuration. For full-context reach operations, these
        // configurations reached the end of the start rule, in which case we
        // only add them back to reach if no configuration during the current
        // closure operation reached such a state. This ensures adaptivePredict
        // chooses an alternative matching the longest overall sequence when
        // multiple alternatives are viable.
        //
        if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
            for (let l=0; l<skippedStopStates.length;l++) {
                reach.add(skippedStopStates[l], this.mergeCache);
            }
        }
        if (reach.items.length===0) {
            return null;
        } else {
            return reach;
        }
    }

    /**
     * Return a configuration set containing only the configurations from
     * {@code configs} which are in a {@link RuleStopState}. If all
     * configurations in {@code configs} are already in a rule stop state, this
     * method simply returns {@code configs}.
     *
     * <p>When {@code lookToEndOfRule} is true, this method uses
     * {@link ATN//nextTokens} for each configuration in {@code configs} which is
     * not already in a rule stop state to see if a rule stop state is reachable
     * from the configuration via epsilon-only transitions.</p>
     *
     * @param configs the configuration set to update
     * @param lookToEndOfRule when true, this method checks for rule stop states
     * reachable by epsilon-only transitions from each configuration in
     * {@code configs}.
     *
     * @return {@code configs} if all configurations in {@code configs} are in a
     * rule stop state, otherwise return a new configuration set containing only
     * the configurations from {@code configs} which are in a rule stop state
     */
    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {
        if (PredictionMode.allConfigsInRuleStopStates(configs)) {
            return configs;
        }
        const result = new ATNConfigSet(configs.fullCtx);
        for(let i=0; i<configs.items.length;i++) {
            const config = configs.items[i];
            if (config.state instanceof RuleStopState) {
                result.add(config, this.mergeCache);
                continue;
            }
            if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
                const nextTokens = this.atn.nextTokens(config.state);
                if (nextTokens.contains(Token.EPSILON)) {
                    const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                    result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
                }
            }
        }
        return result;
    }

    computeStartState(p, ctx, fullCtx) {
        // always at least the implicit call to start rule
        const initialContext = predictionContextFromRuleContext(this.atn, ctx);
        const configs = new ATNConfigSet(fullCtx);
        for(let i=0;i<p.transitions.length;i++) {
            const target = p.transitions[i].target;
            const c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
            const closureBusy = new Set();
            this.closure(c, configs, closureBusy, true, fullCtx, false);
        }
        return configs;
    }

    /**
     * This method transforms the start state computed by
     * {@link //computeStartState} to the special start state used by a
     * precedence DFA for a particular precedence value. The transformation
     * process applies the following changes to the start state's configuration
     * set.
     *
     * <ol>
     * <li>Evaluate the precedence predicates for each configuration using
     * {@link SemanticContext//evalPrecedence}.</li>
     * <li>Remove all configurations which predict an alternative greater than
     * 1, for which another configuration that predicts alternative 1 is in the
     * same ATN state with the same prediction context. This transformation is
     * valid for the following reasons:
     * <ul>
     * <li>The closure block cannot contain any epsilon transitions which bypass
     * the body of the closure, so all states reachable via alternative 1 are
     * part of the precedence alternatives of the transformed left-recursive
     * rule.</li>
     * <li>The "primary" portion of a left recursive rule cannot contain an
     * epsilon transition, so the only way an alternative other than 1 can exist
     * in a state that is also reachable via alternative 1 is by nesting calls
     * to the left-recursive rule, with the outer calls not being at the
     * preferred precedence level.</li>
     * </ul>
     * </li>
     * </ol>
     *
     * <p>
     * The prediction context must be considered by this filter to address
     * situations like the following.
     * </p>
     * <code>
     * <pre>
     * grammar TA;
     * prog: statement* EOF;
     * statement: letterA | statement letterA 'b' ;
     * letterA: 'a';
     * </pre>
     * </code>
     * <p>
     * If the above grammar, the ATN state immediately before the token
     * reference {@code 'a'} in {@code letterA} is reachable from the left edge
     * of both the primary and closure blocks of the left-recursive rule
     * {@code statement}. The prediction context associated with each of these
     * configurations distinguishes between them, and prevents the alternative
     * which stepped out to {@code prog} (and then back in to {@code statement}
     * from being eliminated by the filter.
     * </p>
     *
     * @param configs The configuration set computed by
     * {@link //computeStartState} as the start state for the DFA.
     * @return The transformed configuration set representing the start state
     * for a precedence DFA at a particular precedence level (determined by
     * calling {@link Parser//getPrecedence})
     */
    applyPrecedenceFilter(configs) {
        let config;
        const statesFromAlt1 = [];
        const configSet = new ATNConfigSet(configs.fullCtx);
        for(let i=0; i<configs.items.length; i++) {
            config = configs.items[i];
            // handle alt 1 first
            if (config.alt !== 1) {
                continue;
            }
            const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
            if (updatedContext===null) {
                // the configuration was eliminated
                continue;
            }
            statesFromAlt1[config.state.stateNumber] = config.context;
            if (updatedContext !== config.semanticContext) {
                configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
            } else {
                configSet.add(config, this.mergeCache);
            }
        }
        for(let i=0; i<configs.items.length; i++) {
            config = configs.items[i];
            if (config.alt === 1) {
                // already handled
                continue;
            }
            // In the future, this elimination step could be updated to also
            // filter the prediction context for alternatives predicting alt>1
            // (basically a graph subtraction algorithm).
            if (!config.precedenceFilterSuppressed) {
                const context = statesFromAlt1[config.state.stateNumber] || null;
                if (context!==null && context.equals(config.context)) {
                    // eliminated
                    continue;
                }
            }
            configSet.add(config, this.mergeCache);
        }
        return configSet;
    }

    getReachableTarget(trans, ttype) {
        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
            return trans.target;
        } else {
            return null;
        }
    }

    getPredsForAmbigAlts(ambigAlts, configs, nalts) {
        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
        // altToPred starts as an array of all null contexts. The entry at index i
        // corresponds to alternative i. altToPred[i] may have one of three values:
        //   1. null: no ATNConfig c is found such that c.alt==i
        //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
        //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
        //      alt i has at least one unpredicated config.
        //   3. Non-NONE Semantic Context: There exists at least one, and for all
        //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
        //
        // From this, it is clear that NONE||anything==NONE.
        //
        let altToPred = [];
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if(ambigAlts.contains( c.alt )) {
                altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
            }
        }
        let nPredAlts = 0;
        for (let i =1;i< nalts+1;i++) {
            const pred = altToPred[i] || null;
            if (pred===null) {
                altToPred[i] = SemanticContext.NONE;
            } else if (pred !== SemanticContext.NONE) {
                nPredAlts += 1;
            }
        }
        // nonambig alts are null in altToPred
        if (nPredAlts===0) {
            altToPred = null;
        }
        if (this.debug) {
            console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
        }
        return altToPred;
    }

    getPredicatePredictions(ambigAlts, altToPred) {
        const pairs = [];
        let containsPredicate = false;
        for (let i=1; i<altToPred.length;i++) {
            const pred = altToPred[i];
            // unpredicated is indicated by SemanticContext.NONE
            if( ambigAlts!==null && ambigAlts.contains( i )) {
                pairs.push(new PredPrediction(pred, i));
            }
            if (pred !== SemanticContext.NONE) {
                containsPredicate = true;
            }
        }
        if (! containsPredicate) {
            return null;
        }
        return pairs;
    }

    /**
     * This method is used to improve the localization of error messages by
     * choosing an alternative rather than throwing a
     * {@link NoViableAltException} in particular prediction scenarios where the
     * {@link //ERROR} state was reached during ATN simulation.
     *
     * <p>
     * The default implementation of this method uses the following
     * algorithm to identify an ATN configuration which successfully parsed the
     * decision entry rule. Choosing such an alternative ensures that the
     * {@link ParserRuleContext} returned by the calling rule will be complete
     * and valid, and the syntax error will be reported later at a more
     * localized location.</p>
     *
     * <ul>
     * <li>If a syntactically valid path or paths reach the end of the decision rule and
     * they are semantically valid if predicated, return the min associated alt.</li>
     * <li>Else, if a semantically invalid but syntactically valid path exist
     * or paths exist, return the minimum associated alt.
     * </li>
     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
     * </ul>
     *
     * <p>
     * In some scenarios, the algorithm described above could predict an
     * alternative which will result in a {@link FailedPredicateException} in
     * the parser. Specifically, this could occur if the <em>only</em> configuration
     * capable of successfully parsing to the end of the decision rule is
     * blocked by a semantic predicate. By choosing this alternative within
     * {@link //adaptivePredict} instead of throwing a
     * {@link NoViableAltException}, the resulting
     * {@link FailedPredicateException} in the parser will identify the specific
     * predicate which is preventing the parser from successfully parsing the
     * decision rule, which helps developers identify and correct logic errors
     * in semantic predicates.
     * </p>
     *
     * @param configs The ATN configurations which were valid immediately before
     * the {@link //ERROR} state was reached
     * @param outerContext The is the \gamma_0 initial parser context from the paper
     * or the parser stack at the instant before prediction commences.
     *
     * @return The value to return from {@link //adaptivePredict}, or
     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
     * identified and {@link //adaptivePredict} should report an error instead
     */
    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {
        const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
        const semValidConfigs = cfgs[0];
        const semInvalidConfigs = cfgs[1];
        let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
            return alt;
        }
        // Is there a syntactically valid path with a failed pred?
        if (semInvalidConfigs.items.length>0) {
            alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
            if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
                return alt;
            }
        }
        return ATN.INVALID_ALT_NUMBER;
    }

    getAltThatFinishedDecisionEntryRule(configs) {
        const alts = [];
        for(let i=0;i<configs.items.length; i++) {
            const c = configs.items[i];
            if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
                if(alts.indexOf(c.alt)<0) {
                    alts.push(c.alt);
                }
            }
        }
        if (alts.length===0) {
            return ATN.INVALID_ALT_NUMBER;
        } else {
            return Math.min.apply(null, alts);
        }
    }

    /**
     * Walk the list of configurations and split them according to
     * those that have preds evaluating to true/false.  If no pred, assume
     * true pred and include in succeeded set.  Returns Pair of sets.
     *
     * Create a new set so as not to alter the incoming parameter.
     *
     * Assumption: the input stream has been restored to the starting point
     * prediction, which is where predicates need to evaluate.*/
    splitAccordingToSemanticValidity( configs, outerContext) {
        const succeeded = new ATNConfigSet(configs.fullCtx);
        const failed = new ATNConfigSet(configs.fullCtx);
        for(let i=0;i<configs.items.length; i++) {
            const c = configs.items[i];
            if (c.semanticContext !== SemanticContext.NONE) {
                const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
                if (predicateEvaluationResult) {
                    succeeded.add(c);
                } else {
                    failed.add(c);
                }
            } else {
                succeeded.add(c);
            }
        }
        return [succeeded, failed];
    }

    /**
     * Look through a list of predicate/alt pairs, returning alts for the
     * pairs that win. A {@code NONE} predicate indicates an alt containing an
     * unpredicated config which behaves as "always true." If !complete
     * then we stop at the first predicate that evaluates to true. This
     * includes pairs with null predicates.
     */
    evalSemanticContext(predPredictions, outerContext, complete) {
        const predictions = new BitSet();
        for(let i=0;i<predPredictions.length;i++) {
            const pair = predPredictions[i];
            if (pair.pred === SemanticContext.NONE) {
                predictions.add(pair.alt);
                if (! complete) {
                    break;
                }
                continue;
            }
            const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
            if (this.debug || this.dfa_debug) {
                console.log("eval pred " + pair + "=" + predicateEvaluationResult);
            }
            if (predicateEvaluationResult) {
                if (this.debug || this.dfa_debug) {
                    console.log("PREDICT " + pair.alt);
                }
                predictions.add(pair.alt);
                if (! complete) {
                    break;
                }
            }
        }
        return predictions;
    }

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//
    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
        const initialDepth = 0;
        this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                                 fullCtx, initialDepth, treatEofAsEpsilon);
    }

    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
        if (this.debug || this.debug_closure) {
            console.log("closure(" + config.toString(this.parser,true) + ")");
            // console.log("configs(" + configs.toString() + ")");
            if(config.reachesIntoOuterContext>50) {
                throw "problem";
            }
        }
        if (config.state instanceof RuleStopState) {
            // We hit rule end. If we have context info, use it
            // run thru all possible stack tops in ctx
            if (! config.context.isEmpty()) {
                for (let i =0; i<config.context.length; i++) {
                    if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                        if (fullCtx) {
                            configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                            continue;
                        } else {
                            // we have no context info, just chase follow links (if greedy)
                            if (this.debug) {
                                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                            }
                            this.closure_(config, configs, closureBusy, collectPredicates,
                                     fullCtx, depth, treatEofAsEpsilon);
                        }
                        continue;
                    }
                    const returnState = this.atn.states[config.context.getReturnState(i)];
                    const newContext = config.context.getParent(i); // "pop" return state
                    const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                    const c = new ATNConfig(parms, null);
                    // While we have context to pop back from, we may have
                    // gotten that context AFTER having falling off a rule.
                    // Make sure we track that we are now out of context.
                    c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                    this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
                }
                return;
            } else if( fullCtx) {
                // reached end of start rule
                configs.add(config, this.mergeCache);
                return;
            } else {
                // else if we have no context info, just chase follow links (if greedy)
                if (this.debug) {
                    console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                }
            }
        }
        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
    }

    // Do the actual work of walking epsilon edges//
    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
        const p = config.state;
        // optimization
        if (! p.epsilonOnlyTransitions) {
            configs.add(config, this.mergeCache);
            // make sure to not return here, because EOF transitions can act as
            // both epsilon transitions and non-epsilon transitions.
        }
        for(let i = 0;i<p.transitions.length; i++) {
            if(i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
                continue;

            const t = p.transitions[i];
            const continueCollecting = collectPredicates && !(t instanceof ActionTransition);
            const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
            if (c!==null) {
                let newDepth = depth;
                if ( config.state instanceof RuleStopState) {
                    // target fell off end of rule; mark resulting c as having dipped into outer context
                    // We can't get here if incoming config was rule stop and we had context
                    // track how far we dip into outer context.  Might
                    // come in handy and we avoid evaluating context dependent
                    // preds if this is > 0.
                    if (this._dfa !== null && this._dfa.precedenceDfa) {
                        if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
                            c.precedenceFilterSuppressed = true;
                        }
                    }

                    c.reachesIntoOuterContext += 1;
                    if (closureBusy.add(c)!==c) {
                        // avoid infinite recursion for right-recursive rules
                        continue;
                    }
                    configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                    newDepth -= 1;
                    if (this.debug) {
                        console.log("dips into outer ctx: " + c);
                    }
                } else {
                    if (!t.isEpsilon && closureBusy.add(c)!==c){
                        // avoid infinite recursion for EOF* and EOF+
                        continue;
                    }
                    if (t instanceof RuleTransition) {
                        // latch when newDepth goes negative - once we step out of the entry context we can't return
                        if (newDepth >= 0) {
                            newDepth += 1;
                        }
                    }
                }
                this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
            }
        }
    }

    canDropLoopEntryEdgeInLeftRecursiveRule(config) {
        // return False
        const p = config.state;
        // First check to see if we are in StarLoopEntryState generated during
        // left-recursion elimination. For efficiency, also check if
        // the context has an empty stack case. If so, it would mean
        // global FOLLOW so we can't perform optimization
        // Are we the special loop entry/exit state? or SLL wildcard
        if(p.stateType !== ATNState.STAR_LOOP_ENTRY)
            return false;
        if(p.stateType !== ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
               config.context.isEmpty() || config.context.hasEmptyPath())
            return false;

        // Require all return states to return back to the same rule that p is in.
        const numCtxs = config.context.length;
        for(let i=0; i<numCtxs; i++) { // for each stack context
            const returnState = this.atn.states[config.context.getReturnState(i)];
            if (returnState.ruleIndex !== p.ruleIndex)
                return false;
        }

        const decisionStartState = p.transitions[0].target;
        const blockEndStateNum = decisionStartState.endState.stateNumber;
        const blockEndState = this.atn.states[blockEndStateNum];

        // Verify that the top of each stack context leads to loop entry/exit
        // state through epsilon edges and w/o leaving rule.
        for(let i=0; i<numCtxs; i++) { // for each stack context
            const returnStateNumber = config.context.getReturnState(i);
            const returnState = this.atn.states[returnStateNumber];
            // all states must have single outgoing epsilon edge
            if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)
                return false;

            // Look for prefix op case like 'not expr', (' type ')' expr
            const returnStateTarget = returnState.transitions[0].target;
            if ( returnState.stateType === ATNState.BLOCK_END && returnStateTarget === p )
                continue;

            // Look for 'expr op expr' or case where expr's return state is block end
            // of (...)* internal block; the block end points to loop back
            // which points to p but we don't need to check that
            if ( returnState === blockEndState )
                continue;

            // Look for ternary expr ? expr : expr. The return state points at block end,
            // which points at loop entry state
            if ( returnStateTarget === blockEndState )
                continue;

            // Look for complex prefix 'between expr and expr' case where 2nd expr's
            // return state points at block end state of (...)* internal block
            if (returnStateTarget.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1
                    && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)
                continue;

            // anything else ain't conforming
            return false;
        }
        return true;
    }

    getRuleName(index) {
        if (this.parser!==null && index>=0) {
            return this.parser.ruleNames[index];
        } else {
            return "<rule " + index + ">";
        }
    }

    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
        switch(t.serializationType) {
        case Transition.RULE:
            return this.ruleTransition(config, t);
        case Transition.PRECEDENCE:
            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.PREDICATE:
            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.ACTION:
            return this.actionTransition(config, t);
        case Transition.EPSILON:
            return new ATNConfig({state:t.target}, config);
        case Transition.ATOM:
        case Transition.RANGE:
        case Transition.SET:
            // EOF transitions act like epsilon transitions after the first EOF
            // transition is traversed
            if (treatEofAsEpsilon) {
                if (t.matches(Token.EOF, 0, 1)) {
                    return new ATNConfig({state: t.target}, config);
                }
            }
            return null;
        default:
            return null;
        }
    }

    actionTransition(config, t) {
        if (this.debug) {
            const index = t.actionIndex === -1 ? 65535 : t.actionIndex;
            console.log("ACTION edge " + t.ruleIndex + ":" + index);
        }
        return new ATNConfig({state:t.target}, config);
    }

    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {
        if (this.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                    pt.precedence + ">=_p, ctx dependent=true");
            if (this.parser!==null) {
                console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
            }
        }
        let c = null;
        if (collectPredicates && inContext) {
            if (fullCtx) {
                // In full context mode, we can evaluate predicates on-the-fly
                // during closure, which dramatically reduces the size of
                // the config sets. It also obviates the need to test predicates
                // later during conflict resolution.
                const currentPosition = this._input.index;
                this._input.seek(this._startIndex);
                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
                this._input.seek(currentPosition);
                if (predSucceeds) {
                    c = new ATNConfig({state:pt.target}, config); // no pred context
                }
            } else {
                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
            }
        } else {
            c = new ATNConfig({state:pt.target}, config);
        }
        if (this.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }

    predTransition(config, pt, collectPredicates, inContext, fullCtx) {
        if (this.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                    ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
            if (this.parser!==null) {
                console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
            }
        }
        let c = null;
        if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
            if (fullCtx) {
                // In full context mode, we can evaluate predicates on-the-fly
                // during closure, which dramatically reduces the size of
                // the config sets. It also obviates the need to test predicates
                // later during conflict resolution.
                const currentPosition = this._input.index;
                this._input.seek(this._startIndex);
                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
                this._input.seek(currentPosition);
                if (predSucceeds) {
                    c = new ATNConfig({state:pt.target}, config); // no pred context
                }
            } else {
                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
            }
        } else {
            c = new ATNConfig({state:pt.target}, config);
        }
        if (this.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }

    ruleTransition(config, t) {
        if (this.debug) {
            console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
        }
        const returnState = t.followState;
        const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
        return new ATNConfig({state:t.target, context:newContext}, config );
    }

    getConflictingAlts(configs) {
        const altsets = PredictionMode.getConflictingAltSubsets(configs);
        return PredictionMode.getAlts(altsets);
    }

    /**
     * Sam pointed out a problem with the previous definition, v3, of
     * ambiguous states. If we have another state associated with conflicting
     * alternatives, we should keep going. For example, the following grammar
     *
     * s : (ID | ID ID?) ';' ;
     *
     * When the ATN simulation reaches the state before ';', it has a DFA
     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
     * because alternative to has another way to continue, via [6|2|[]].
     * The key is that we have a single state that has config's only associated
     * with a single alternative, 2, and crucially the state transitions
     * among the configurations are all non-epsilon transitions. That means
     * we don't consider any conflicts that include alternative 2. So, we
     * ignore the conflict between alts 1 and 2. We ignore a set of
     * conflicting alts when there is an intersection with an alternative
     * associated with a single alt state in the state&rarr;config-list map.
     *
     * It's also the case that we might have two conflicting configurations but
     * also a 3rd nonconflicting configuration for a different alternative:
     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
     *
     * a : A | A | A B ;
     *
     * After matching input A, we reach the stop state for rule A, state 1.
     * State 8 is the state right before B. Clearly alternatives 1 and 2
     * conflict and no amount of further lookahead will separate the two.
     * However, alternative 3 will be able to continue and so we do not
     * stop working on this state. In the previous example, we're concerned
     * with states associated with the conflicting alternatives. Here alt
     * 3 is not associated with the conflicting configs, but since we can continue
     * looking for input reasonably, I don't declare the state done. We
     * ignore a set of conflicting alts when we have an alternative
     * that we still need to pursue
     */
    getConflictingAltsOrUniqueAlt(configs) {
        let conflictingAlts = null;
        if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
            conflictingAlts = new BitSet();
            conflictingAlts.add(configs.uniqueAlt);
        } else {
            conflictingAlts = configs.conflictingAlts;
        }
        return conflictingAlts;
    }

    getTokenName(t) {
        if (t===Token.EOF) {
            return "EOF";
        }
        if( this.parser!==null && this.parser.literalNames!==null) {
            if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
                console.log("" + t + " ttype out of range: " + this.parser.literalNames);
                console.log("" + this.parser.getInputStream().getTokens());
            } else {
                const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
                return name + "<" + t + ">";
            }
        }
        return "" + t;
    }

    getLookaheadName(input) {
        return this.getTokenName(input.LA(1));
    }

    /**
     * Used for debugging in adaptivePredict around execATN but I cut
     * it out for clarity now that alg. works well. We can leave this
     * "dead" code for a bit
     */
    dumpDeadEndConfigs(nvae) {
        console.log("dead end configs: ");
        const decs = nvae.getDeadEndConfigs();
        for(let i=0; i<decs.length; i++) {
            const c = decs[i];
            let trans = "no edges";
            if (c.state.transitions.length>0) {
                const t = c.state.transitions[0];
                if (t instanceof AtomTransition) {
                    trans = "Atom "+ this.getTokenName(t.label);
                } else if (t instanceof SetTransition) {
                    const neg = (t instanceof NotSetTransition);
                    trans = (neg ? "~" : "") + "Set " + t.set;
                }
            }
            console.error(c.toString(this.parser, true) + ":" + trans);
        }
    }

    noViableAlt(input, outerContext, configs, startIndex) {
        return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
    }

    getUniqueAlt(configs) {
        let alt = ATN.INVALID_ALT_NUMBER;
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (alt === ATN.INVALID_ALT_NUMBER) {
                alt = c.alt // found first alt
            } else if( c.alt!==alt) {
                return ATN.INVALID_ALT_NUMBER;
            }
        }
        return alt;
    }

    /**
     * Add an edge to the DFA, if possible. This method calls
     * {@link //addDFAState} to ensure the {@code to} state is present in the
     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the
     * range of edges that can be represented in the DFA tables, this method
     * returns without adding the edge to the DFA.
     *
     * <p>If {@code to} is {@code null}, this method returns {@code null}.
     * Otherwise, this method returns the {@link DFAState} returned by calling
     * {@link //addDFAState} for the {@code to} state.</p>
     *
     * @param dfa The DFA
     * @param from_ The source state for the edge
     * @param t The input symbol
     * @param to The target state for the edge
     *
     * @return If {@code to} is {@code null}, this method returns {@code null};
     * otherwise this method returns the result of calling {@link //addDFAState}
     * on {@code to}
     */
    addDFAEdge(dfa, from_, t, to) {
        if( this.debug) {
            console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
        }
        if (to===null) {
            return null;
        }
        to = this.addDFAState(dfa, to); // used existing if possible not incoming
        if (from_===null || t < -1 || t > this.atn.maxTokenType) {
            return to;
        }
        if (from_.edges===null) {
            from_.edges = [];
        }
        from_.edges[t+1] = to; // connect

        if (this.debug) {
            const literalNames = this.parser===null ? null : this.parser.literalNames;
            const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
            console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
        }
        return to;
    }

    /**
     * Add state {@code D} to the DFA if it is not already present, and return
     * the actual instance stored in the DFA. If a state equivalent to {@code D}
     * is already in the DFA, the existing state is returned. Otherwise this
     * method returns {@code D} after adding it to the DFA.
     *
     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
     * does not change the DFA.</p>
     *
     * @param dfa The dfa
     * @param D The DFA state to add
     * @return The state stored in the DFA. This will be either the existing
     * state if {@code D} is already in the DFA, or {@code D} itself if the
     * state was not already present
     */
    addDFAState(dfa, D) {
        if (D === ATNSimulator.ERROR) {
            return D;
        }
        const existing = dfa.states.get(D);
        if(existing!==null) {
            return existing;
        }
        D.stateNumber = dfa.states.length;
        if (! D.configs.readOnly) {
            D.configs.optimizeConfigs(this);
            D.configs.setReadonly(true);
        }
        dfa.states.add(D);
        if (this.debug) {
            console.log("adding new DFA state: " + D);
        }
        return D;
    }

    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
        }
    }

    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
        }
    }

    // If context sensitive parsing, we know it's ambiguity not conflict//
    reportAmbiguity(dfa, D, startIndex, stopIndex,
                                   exact, ambigAlts, configs ) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
        }
    }
}

module.exports = ParserATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/PredictionMode.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/PredictionMode.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Map, BitSet, AltDict, hashStuff} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const {RuleStopState} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {ATNConfig} = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js");
const {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");

/**
 * This enumeration defines the prediction modes available in ANTLR 4 along with
 * utility methods for analyzing configuration sets for conflicts and/or
 * ambiguities.
 */
const PredictionMode = {
    /**
     * The SLL(*) prediction mode. This prediction mode ignores the current
     * parser context when making predictions. This is the fastest prediction
     * mode, and provides correct results for many grammars. This prediction
     * mode is more powerful than the prediction mode provided by ANTLR 3, but
     * may result in syntax errors for grammar and input combinations which are
     * not SLL.
     *
     * <p>
     * When using this prediction mode, the parser will either return a correct
     * parse tree (i.e. the same parse tree that would be returned with the
     * {@link //LL} prediction mode), or it will report a syntax error. If a
     * syntax error is encountered when using the {@link //SLL} prediction mode,
     * it may be due to either an actual syntax error in the input or indicate
     * that the particular combination of grammar and input requires the more
     * powerful {@link //LL} prediction abilities to complete successfully.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    SLL: 0,

    /**
     * The LL(*) prediction mode. This prediction mode allows the current parser
     * context to be used for resolving SLL conflicts that occur during
     * prediction. This is the fastest prediction mode that guarantees correct
     * parse results for all combinations of grammars with syntactically correct
     * inputs.
     *
     * <p>
     * When using this prediction mode, the parser will make correct decisions
     * for all syntactically-correct grammar and input combinations. However, in
     * cases where the grammar is truly ambiguous this prediction mode might not
     * report a precise answer for <em>exactly which</em> alternatives are
     * ambiguous.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    LL: 1,

    /**
     *
     * The LL(*) prediction mode with exact ambiguity detection. In addition to
     * the correctness guarantees provided by the {@link //LL} prediction mode,
     * this prediction mode instructs the prediction algorithm to determine the
     * complete and exact set of ambiguous alternatives for every ambiguous
     * decision encountered while parsing.
     *
     * <p>
     * This prediction mode may be used for diagnosing ambiguities during
     * grammar development. Due to the performance overhead of calculating sets
     * of ambiguous alternatives, this prediction mode should be avoided when
     * the exact results are not necessary.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    LL_EXACT_AMBIG_DETECTION: 2,

    /**
     *
     * Computes the SLL prediction termination condition.
     *
     * <p>
     * This method computes the SLL prediction termination condition for both of
     * the following cases.</p>
     *
     * <ul>
     * <li>The usual SLL+LL fallback upon SLL conflict</li>
     * <li>Pure SLL without LL fallback</li>
     * </ul>
     *
     * <p><strong>COMBINED SLL+LL PARSING</strong></p>
     *
     * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
     * ensured regardless of how the termination condition is computed by this
     * method. Due to the substantially higher cost of LL prediction, the
     * prediction should only fall back to LL when the additional lookahead
     * cannot lead to a unique SLL prediction.</p>
     *
     * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
     * conflicting subsets should fall back to full LL, even if the
     * configuration sets don't resolve to the same alternative (e.g.
     * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
     * configuration, SLL could continue with the hopes that more lookahead will
     * resolve via one of those non-conflicting configurations.</p>
     *
     * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
     * stops when it sees only conflicting configuration subsets. In contrast,
     * full LL keeps going when there is uncertainty.</p>
     *
     * <p><strong>HEURISTIC</strong></p>
     *
     * <p>As a heuristic, we stop prediction when we see any conflicting subset
     * unless we see a state that only has one alternative associated with it.
     * The single-alt-state thing lets prediction continue upon rules like
     * (otherwise, it would admit defeat too soon):</p>
     *
     * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
     *
     * <p>When the ATN simulation reaches the state before {@code ';'}, it has a
     * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
     * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
     * processing this node because alternative to has another way to continue,
     * via {@code [6|2|[]]}.</p>
     *
     * <p>It also let's us continue for this rule:</p>
     *
     * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
     *
     * <p>After matching input A, we reach the stop state for rule A, state 1.
     * State 8 is the state right before B. Clearly alternatives 1 and 2
     * conflict and no amount of further lookahead will separate the two.
     * However, alternative 3 will be able to continue and so we do not stop
     * working on this state. In the previous example, we're concerned with
     * states associated with the conflicting alternatives. Here alt 3 is not
     * associated with the conflicting configs, but since we can continue
     * looking for input reasonably, don't declare the state done.</p>
     *
     * <p><strong>PURE SLL PARSING</strong></p>
     *
     * <p>To handle pure SLL parsing, all we have to do is make sure that we
     * combine stack contexts for configurations that differ only by semantic
     * predicate. From there, we can do the usual SLL termination heuristic.</p>
     *
     * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
     *
     * <p>SLL decisions don't evaluate predicates until after they reach DFA stop
     * states because they need to create the DFA cache that works in all
     * semantic situations. In contrast, full LL evaluates predicates collected
     * during start state computation so it can ignore predicates thereafter.
     * This means that SLL termination detection can totally ignore semantic
     * predicates.</p>
     *
     * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
     * semantic predicate contexts so we might see two configurations like the
     * following.</p>
     *
     * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
     *
     * <p>Before testing these configurations against others, we have to merge
     * {@code x} and {@code x'} (without modifying the existing configurations).
     * For example, we test {@code (x+x')==x''} when looking for conflicts in
     * the following configurations.</p>
     *
     * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
     *
     * <p>If the configuration set has predicates (as indicated by
     * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
     * the configurations to strip out all of the predicates so that a standard
     * {@link ATNConfigSet} will merge everything ignoring predicates.</p>
     */
    hasSLLConflictTerminatingPrediction: function( mode, configs) {
        // Configs in rule stop states indicate reaching the end of the decision
        // rule (local context) or end of start rule (full context). If all
        // configs meet this condition, then none of the configurations is able
        // to match additional input so we terminate prediction.
        //
        if (PredictionMode.allConfigsInRuleStopStates(configs)) {
            return true;
        }
        // pure SLL mode parsing
        if (mode === PredictionMode.SLL) {
            // Don't bother with combining configs from different semantic
            // contexts if we can fail over to full LL; costs more time
            // since we'll often fail over anyway.
            if (configs.hasSemanticContext) {
                // dup configs, tossing out semantic predicates
                const dup = new ATNConfigSet();
                for(let i=0;i<configs.items.length;i++) {
                    let c = configs.items[i];
                    c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                    dup.add(c);
                }
                configs = dup;
            }
            // now we have combined contexts for configs with dissimilar preds
        }
        // pure SLL or combined SLL+LL mode parsing
        const altsets = PredictionMode.getConflictingAltSubsets(configs);
        return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
    },

    /**
     * Checks if any configuration in {@code configs} is in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @return {@code true} if any configuration in {@code configs} is in a
     * {@link RuleStopState}, otherwise {@code false}
     */
    hasConfigInRuleStopState: function(configs) {
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (c.state instanceof RuleStopState) {
                return true;
            }
        }
        return false;
    },

    /**
     * Checks if all configurations in {@code configs} are in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @return {@code true} if all configurations in {@code configs} are in a
     * {@link RuleStopState}, otherwise {@code false}
     */
    allConfigsInRuleStopStates: function(configs) {
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (!(c.state instanceof RuleStopState)) {
                return false;
            }
        }
        return true;
    },

    /**
     *
     * Full LL prediction termination.
     *
     * <p>Can we stop looking ahead during ATN simulation or is there some
     * uncertainty as to which alternative we will ultimately pick, after
     * consuming more input? Even if there are partial conflicts, we might know
     * that everything is going to resolve to the same minimum alternative. That
     * means we can stop since no more lookahead will change that fact. On the
     * other hand, there might be multiple conflicts that resolve to different
     * minimums. That means we need more look ahead to decide which of those
     * alternatives we should predict.</p>
     *
     * <p>The basic idea is to split the set of configurations {@code C}, into
     * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
     * non-conflicting configurations. Two configurations conflict if they have
     * identical {@link ATNConfig//state} and {@link ATNConfig//context} values
     * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
     * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
     *
     * <p>Reduce these configuration subsets to the set of possible alternatives.
     * You can compute the alternative subsets in one pass as follows:</p>
     *
     * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
     * {@code C} holding {@code s} and {@code ctx} fixed.</p>
     *
     * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
     *
     * <pre>
     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
     * alt and not pred
     * </pre>
     *
     * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
     *
     * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
     * {@code s} and {@code ctx}.</p>
     *
     * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
     * the union of these alternative subsets is a singleton, then no amount of
     * more lookahead will help us. We will always pick that alternative. If,
     * however, there is more than one alternative, then we are uncertain which
     * alternative to predict and must continue looking for resolution. We may
     * or may not discover an ambiguity in the future, even if there are no
     * conflicting subsets this round.</p>
     *
     * <p>The biggest sin is to terminate early because it means we've made a
     * decision but were uncertain as to the eventual outcome. We haven't used
     * enough lookahead. On the other hand, announcing a conflict too late is no
     * big deal; you will still have the conflict. It's just inefficient. It
     * might even look until the end of file.</p>
     *
     * <p>No special consideration for semantic predicates is required because
     * predicates are evaluated on-the-fly for full LL prediction, ensuring that
     * no configuration contains a semantic context during the termination
     * check.</p>
     *
     * <p><strong>CONFLICTING CONFIGS</strong></p>
     *
     * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
     * when {@code i!=j} but {@code x=x'}. Because we merge all
     * {@code (s, i, _)} configurations together, that means that there are at
     * most {@code n} configurations associated with state {@code s} for
     * {@code n} possible alternatives in the decision. The merged stacks
     * complicate the comparison of configuration contexts {@code x} and
     * {@code x'}. Sam checks to see if one is a subset of the other by calling
     * merge and checking to see if the merged result is either {@code x} or
     * {@code x'}. If the {@code x} associated with lowest alternative {@code i}
     * is the superset, then {@code i} is the only possible prediction since the
     * others resolve to {@code min(i)} as well. However, if {@code x} is
     * associated with {@code j>i} then at least one stack configuration for
     * {@code j} is not in conflict with alternative {@code i}. The algorithm
     * should keep going, looking for more lookahead due to the uncertainty.</p>
     *
     * <p>For simplicity, I'm doing a equality check between {@code x} and
     * {@code x'} that lets the algorithm continue to consume lookahead longer
     * than necessary. The reason I like the equality is of course the
     * simplicity but also because that is the test you need to detect the
     * alternatives that are actually in conflict.</p>
     *
     * <p><strong>CONTINUE/STOP RULE</strong></p>
     *
     * <p>Continue if union of resolved alternative sets from non-conflicting and
     * conflicting alternative subsets has more than one alternative. We are
     * uncertain about which alternative to predict.</p>
     *
     * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
     * alternatives are still in the running for the amount of input we've
     * consumed at this point. The conflicting sets let us to strip away
     * configurations that won't lead to more states because we resolve
     * conflicts to the configuration with a minimum alternate for the
     * conflicting set.</p>
     *
     * <p><strong>CASES</strong></p>
     *
     * <ul>
     *
     * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
     *
     * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
     * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
     * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
     * {@code {1,3}} =&gt; continue
     * </li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
     * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
     * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
     * {@code {1}} =&gt; stop and predict 1</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
     * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
     * ambiguity {@code {1,2}}</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
     * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {2}} = {@code {1,2}} =&gt; continue</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
     * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {3}} = {@code {1,3}} =&gt; continue</li>
     *
     * </ul>
     *
     * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
     *
     * <p>If all states report the same conflicting set of alternatives, then we
     * know we have the exact ambiguity set.</p>
     *
     * <p><code>|A_<em>i</em>|&gt;1</code> and
     * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
     *
     * <p>In other words, we continue examining lookahead until all {@code A_i}
     * have more than one alternative and all {@code A_i} are the same. If
     * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
     * because the resolved set is {@code {1}}. To determine what the real
     * ambiguity is, we have to know whether the ambiguity is between one and
     * two or one and three so we keep going. We can only stop prediction when
     * we need exact ambiguity detection when the sets look like
     * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
     */
    resolvesToJustOneViableAlt: function(altsets) {
        return PredictionMode.getSingleViableAlt(altsets);
    },

    /**
     * Determines if every alternative subset in {@code altsets} contains more
     * than one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if every {@link BitSet} in {@code altsets} has
     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
     */
    allSubsetsConflict: function(altsets) {
        return ! PredictionMode.hasNonConflictingAltSet(altsets);
    },
    /**
     * Determines if any single alternative subset in {@code altsets} contains
     * exactly one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if {@code altsets} contains a {@link BitSet} with
     * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
     */
    hasNonConflictingAltSet: function(altsets) {
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (alts.length===1) {
                return true;
            }
        }
        return false;
    },


    /**
     * Determines if any single alternative subset in {@code altsets} contains
     * more than one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if {@code altsets} contains a {@link BitSet} with
     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
     */
    hasConflictingAltSet: function(altsets) {
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (alts.length>1) {
                return true;
            }
        }
        return false;
    },


    /**
     * Determines if every alternative subset in {@code altsets} is equivalent.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if every member of {@code altsets} is equal to the
     * others, otherwise {@code false}
     */
    allSubsetsEqual: function(altsets) {
        let first = null;
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (first === null) {
                first = alts;
            } else if (alts!==first) {
                return false;
            }
        }
        return true;
    },


    /**
     * Returns the unique alternative predicted by all alternative subsets in
     * {@code altsets}. If no such alternative exists, this method returns
     * {@link ATN//INVALID_ALT_NUMBER}.
     *
     * @param altsets a collection of alternative subsets
     */
    getUniqueAlt: function(altsets) {
        const all = PredictionMode.getAlts(altsets);
        if (all.length===1) {
            return all.minValue();
        } else {
            return ATN.INVALID_ALT_NUMBER;
        }
    },

    /**
     * Gets the complete set of represented alternatives for a collection of
     * alternative subsets. This method returns the union of each {@link BitSet}
     * in {@code altsets}.
     *
     * @param altsets a collection of alternative subsets
     * @return the set of represented alternatives in {@code altsets}
     */
    getAlts: function(altsets) {
        const all = new BitSet();
        altsets.map( function(alts) { all.or(alts); });
        return all;
    },

    /**
     * This function gets the conflicting alt subsets from a configuration set.
     * For each configuration {@code c} in {@code configs}:
     *
     * <pre>
     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
     * alt and not pred
     * </pre>
     */
    getConflictingAltSubsets: function(configs) {
        const configToAlts = new Map();
        configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
        configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);};
        configs.items.map(function(cfg) {
            let alts = configToAlts.get(cfg);
            if (alts === null) {
                alts = new BitSet();
                configToAlts.put(cfg, alts);
            }
            alts.add(cfg.alt);
        });
        return configToAlts.getValues();
    },

    /**
     * Get a map from state to alt subset from a configuration set. For each
     * configuration {@code c} in {@code configs}:
     *
     * <pre>
     * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
     * </pre>
     */
    getStateToAltMap: function(configs) {
        const m = new AltDict();
        configs.items.map(function(c) {
            let alts = m.get(c.state);
            if (alts === null) {
                alts = new BitSet();
                m.put(c.state, alts);
            }
            alts.add(c.alt);
        });
        return m;
    },

    hasStateAssociatedWithOneAlt: function(configs) {
        const values = PredictionMode.getStateToAltMap(configs).values();
        for(let i=0;i<values.length;i++) {
            if (values[i].length===1) {
                return true;
            }
        }
        return false;
    },

    getSingleViableAlt: function(altsets) {
        let result = null;
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            const minAlt = alts.minValue();
            if(result===null) {
                result = minAlt;
            } else if(result!==minAlt) { // more than 1 viable alt
                return ATN.INVALID_ALT_NUMBER;
            }
        }
        return result;
    }
};

module.exports = PredictionMode;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/SemanticContext.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const { Set, Hash, equalArrays } = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

/**
 * A tree structure used to record the semantic context in which
 * an ATN configuration is valid.  It's either a single predicate,
 * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
 *
 * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
 * {@link SemanticContext} within the scope of this outer class.</p>
 */
class SemanticContext {

	hashCode() {
		const hash = new Hash();
		this.updateHashCode(hash);
		return hash.finish();
	}

	/**
	 * For context independent predicates, we evaluate them without a local
	 * context (i.e., null context). That way, we can evaluate them without
	 * having to create proper rule-specific context during prediction (as
	 * opposed to the parser, which creates them naturally). In a practical
	 * sense, this avoids a cast exception from RuleContext to myruleContext.
	 *
	 * <p>For context dependent predicates, we must pass in a local context so that
	 * references such as $arg evaluate properly as _localctx.arg. We only
	 * capture context dependent predicates in the context in which we begin
	 * prediction, so we passed in the outer context here in case of context
	 * dependent predicate evaluation.</p>
	 */
	evaluate(parser, outerContext) {}

	/**
	 * Evaluate the precedence predicates for the context and reduce the result.
	 *
	 * @param parser The parser instance.
	 * @param outerContext The current parser context object.
	 * @return The simplified semantic context after precedence predicates are
	 * evaluated, which will be one of the following values.
	 * <ul>
	 * <li>{@link //NONE}: if the predicate simplifies to {@code true} after
	 * precedence predicates are evaluated.</li>
	 * <li>{@code null}: if the predicate simplifies to {@code false} after
	 * precedence predicates are evaluated.</li>
	 * <li>{@code this}: if the semantic context is not changed as a result of
	 * precedence predicate evaluation.</li>
	 * <li>A non-{@code null} {@link SemanticContext}: the new simplified
	 * semantic context after precedence predicates are evaluated.</li>
	 * </ul>
	 */
	evalPrecedence(parser, outerContext) {
		return this;
	}

	static andContext(a, b) {
		if (a === null || a === SemanticContext.NONE) {
			return b;
		}
		if (b === null || b === SemanticContext.NONE) {
			return a;
		}
		const result = new AND(a, b);
		if (result.opnds.length === 1) {
			return result.opnds[0];
		} else {
			return result;
		}
	}

	static orContext(a, b) {
		if (a === null) {
			return b;
		}
		if (b === null) {
			return a;
		}
		if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
			return SemanticContext.NONE;
		}
		const result = new OR(a, b);
		if (result.opnds.length === 1) {
			return result.opnds[0];
		} else {
			return result;
		}
	}
}


class Predicate extends SemanticContext {

	constructor(ruleIndex, predIndex, isCtxDependent) {
		super();
		this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
		this.predIndex = predIndex === undefined ? -1 : predIndex;
		this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	}

	evaluate(parser, outerContext) {
		const localctx = this.isCtxDependent ? outerContext : null;
		return parser.sempred(localctx, this.ruleIndex, this.predIndex);
	}

	updateHashCode(hash) {
		hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof Predicate)) {
			return false;
		} else {
			return this.ruleIndex === other.ruleIndex &&
					this.predIndex === other.predIndex &&
					this.isCtxDependent === other.isCtxDependent;
		}
	}

	toString() {
		return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
	}
}

/**
 * The default {@link SemanticContext}, which is semantically equivalent to
 * a predicate of the form {@code {true}?}
 */
SemanticContext.NONE = new Predicate();


class PrecedencePredicate extends SemanticContext {

	constructor(precedence) {
		super();
		this.precedence = precedence === undefined ? 0 : precedence;
	}

	evaluate(parser, outerContext) {
		return parser.precpred(outerContext, this.precedence);
	}

	evalPrecedence(parser, outerContext) {
		if (parser.precpred(outerContext, this.precedence)) {
			return SemanticContext.NONE;
		} else {
			return null;
		}
	}

	compareTo(other) {
		return this.precedence - other.precedence;
	}

	updateHashCode(hash) {
		hash.update(this.precedence);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof PrecedencePredicate)) {
			return false;
		} else {
			return this.precedence === other.precedence;
		}
	}

	toString() {
		return "{" + this.precedence + ">=prec}?";
	}

	static filterPrecedencePredicates(set) {
		const result = [];
		set.values().map( function(context) {
			if (context instanceof PrecedencePredicate) {
				result.push(context);
			}
		});
		return result;
	}
}

class AND extends SemanticContext {
	/**
	 * A semantic context which is true whenever none of the contained contexts
	 * is false
	 */
	constructor(a, b) {
		super();
		const operands = new Set();
		if (a instanceof AND) {
			a.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(a);
		}
		if (b instanceof AND) {
			b.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(b);
		}
		const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
		if (precedencePredicates.length > 0) {
			// interested in the transition with the lowest precedence
			let reduced = null;
			precedencePredicates.map( function(p) {
				if(reduced===null || p.precedence<reduced.precedence) {
					reduced = p;
				}
			});
			operands.add(reduced);
		}
		this.opnds = Array.from(operands.values());
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof AND)) {
			return false;
		} else {
			return equalArrays(this.opnds, other.opnds);
		}
	}

	updateHashCode(hash) {
		hash.update(this.opnds, "AND");
	}

	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * The evaluation of predicates by this context is short-circuiting, but
	 * unordered.</p>
	 */
	evaluate(parser, outerContext) {
		for (let i = 0; i < this.opnds.length; i++) {
			if (!this.opnds[i].evaluate(parser, outerContext)) {
				return false;
			}
		}
		return true;
	}

	evalPrecedence(parser, outerContext) {
		let differs = false;
		const operands = [];
		for (let i = 0; i < this.opnds.length; i++) {
			const context = this.opnds[i];
			const evaluated = context.evalPrecedence(parser, outerContext);
			differs |= (evaluated !== context);
			if (evaluated === null) {
				// The AND context is false if any element is false
				return null;
			} else if (evaluated !== SemanticContext.NONE) {
				// Reduce the result by skipping true elements
				operands.push(evaluated);
			}
		}
		if (!differs) {
			return this;
		}
		if (operands.length === 0) {
			// all elements were true, so the AND context is true
			return SemanticContext.NONE;
		}
		let result = null;
		operands.map(function(o) {
			result = result === null ? o : SemanticContext.andContext(result, o);
		});
		return result;
	}

	toString() {
		const s = this.opnds.map(o => o.toString());
		return (s.length > 3 ? s.slice(3) : s).join("&&");
	}
}


class OR extends SemanticContext {
	/**
	 * A semantic context which is true whenever at least one of the contained
	 * contexts is true
	 */
	constructor(a, b) {
		super();
		const operands = new Set();
		if (a instanceof OR) {
			a.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(a);
		}
		if (b instanceof OR) {
			b.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(b);
		}

		const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
		if (precedencePredicates.length > 0) {
			// interested in the transition with the highest precedence
			const s = precedencePredicates.sort(function(a, b) {
				return a.compareTo(b);
			});
			const reduced = s[s.length-1];
			operands.add(reduced);
		}
		this.opnds = Array.from(operands.values());
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof OR)) {
			return false;
		} else {
			return equalArrays(this.opnds, other.opnds);
		}
	}

	updateHashCode(hash) {
		hash.update(this.opnds, "OR");
	}

	/**
	 * <p>
	 * The evaluation of predicates by this context is short-circuiting, but
	 * unordered.</p>
	 */
	evaluate(parser, outerContext) {
		for (let i = 0; i < this.opnds.length; i++) {
			if (this.opnds[i].evaluate(parser, outerContext)) {
				return true;
			}
		}
		return false;
	}

	evalPrecedence(parser, outerContext) {
		let differs = false;
		const operands = [];
		for (let i = 0; i < this.opnds.length; i++) {
			const context = this.opnds[i];
			const evaluated = context.evalPrecedence(parser, outerContext);
			differs |= (evaluated !== context);
			if (evaluated === SemanticContext.NONE) {
				// The OR context is true if any element is true
				return SemanticContext.NONE;
			} else if (evaluated !== null) {
				// Reduce the result by skipping false elements
				operands.push(evaluated);
			}
		}
		if (!differs) {
			return this;
		}
		if (operands.length === 0) {
			// all elements were false, so the OR context is false
			return null;
		}
		const result = null;
		operands.map(function(o) {
			return result === null ? o : SemanticContext.orContext(result, o);
		});
		return result;
	}

	toString() {
		const s = this.opnds.map(o => o.toString());
		return (s.length > 3 ? s.slice(3) : s).join("||");
	}
}

module.exports = {
	SemanticContext,
	PrecedencePredicate,
	Predicate
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/Transition.js":
/*!**********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/Transition.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const {Predicate, PrecedencePredicate} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");

/**
 * An ATN transition between any two ATN states.  Subclasses define
 * atom, set, epsilon, action, predicate, rule transitions.
 *
 * <p>This is a one way link.  It emanates from a state (usually via a list of
 * transitions) and has a target state.</p>
 *
 * <p>Since we never have to change the ATN transitions once we construct it,
 * we can fix these transitions as specific classes. The DFA transitions
 * on the other hand need to update the labels as it adds transitions to
 * the states. We'll use the term Edge for the DFA to distinguish them from
 * ATN transitions.</p>
 */
class Transition {
    constructor(target) {
        // The target of this transition.
        if (target===undefined || target===null) {
            throw "target cannot be null.";
        }
        this.target = target;
        // Are we epsilon, action, sempred?
        this.isEpsilon = false;
        this.label = null;
    }
}

// constants for serialization

Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
// e.g., {isType(input.LT(1))}?
Transition.PREDICATE = 4;
Transition.ATOM = 5;
Transition.ACTION = 6;
// ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.SET = 7;
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges

class AtomTransition extends Transition {
    constructor(target, label) {
        super(target);
        // The token type or character value; or, signifies special label.
        this.label_ = label;
        this.label = this.makeLabel();
        this.serializationType = Transition.ATOM;
    }

    makeLabel() {
        const s = new IntervalSet();
        s.addOne(this.label_);
        return s;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this.label_ === symbol;
    }

    toString() {
        return this.label_;
    }
}


class RuleTransition extends Transition {
    constructor(ruleStart, ruleIndex, precedence, followState) {
        super(ruleStart);
        // ptr to the rule definition object for this rule ref
        this.ruleIndex = ruleIndex;
        this.precedence = precedence;
        // what node to begin computations following ref to rule
        this.followState = followState;
        this.serializationType = Transition.RULE;
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
}

class EpsilonTransition extends Transition {
    constructor(target, outermostPrecedenceReturn) {
        super(target);
        this.serializationType = Transition.EPSILON;
        this.isEpsilon = true;
        this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    toString() {
        return "epsilon";
    }
}


class RangeTransition extends Transition {
    constructor(target, start, stop) {
        super(target);
        this.serializationType = Transition.RANGE;
        this.start = start;
        this.stop = stop;
        this.label = this.makeLabel();
    }

    makeLabel() {
        const s = new IntervalSet();
        s.addRange(this.start, this.stop);
        return s;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= this.start && symbol <= this.stop;
    }

    toString() {
        return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
    }
}


class AbstractPredicateTransition extends Transition {
    constructor(target) {
        super(target);
    }
}

class PredicateTransition extends AbstractPredicateTransition {
    constructor(target, ruleIndex, predIndex, isCtxDependent) {
        super(target);
        this.serializationType = Transition.PREDICATE;
        this.ruleIndex = ruleIndex;
        this.predIndex = predIndex;
        this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    getPredicate() {
        return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }

    toString() {
        return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
}


class ActionTransition extends Transition {
    constructor(target, ruleIndex, actionIndex, isCtxDependent) {
        super(target);
        this.serializationType = Transition.ACTION;
        this.ruleIndex = ruleIndex;
        this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
        this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    toString() {
        return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
}


// A transition containing a set of values.
class SetTransition extends Transition {
    constructor(target, set) {
        super(target);
        this.serializationType = Transition.SET;
        if (set !==undefined && set !==null) {
            this.label = set;
        } else {
            this.label = new IntervalSet();
            this.label.addOne(Token.INVALID_TYPE);
        }
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this.label.contains(symbol);
    }

    toString() {
        return this.label.toString();
    }
}

class NotSetTransition extends SetTransition {
    constructor(target, set) {
        super(target, set);
        this.serializationType = Transition.NOT_SET;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
                !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
    }

    toString() {
        return '~' + super.toString();
    }
}

class WildcardTransition extends Transition {
    constructor(target) {
        super(target);
        this.serializationType = Transition.WILDCARD;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
    }

    toString() {
        return ".";
    }
}

class PrecedencePredicateTransition extends AbstractPredicateTransition {
    constructor(target, precedence) {
        super(target);
        this.serializationType = Transition.PRECEDENCE;
        this.precedence = precedence;
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    getPredicate() {
        return new PrecedencePredicate(this.precedence);
    }

    toString() {
        return this.precedence + " >= _p";
    }
}

module.exports = {
    Transition,
    AtomTransition,
    SetTransition,
    NotSetTransition,
    RuleTransition,
    ActionTransition,
    EpsilonTransition,
    RangeTransition,
    WildcardTransition,
    PredicateTransition,
    PrecedencePredicateTransition,
    AbstractPredicateTransition
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
exports.ATNDeserializer = __webpack_require__(/*! ./ATNDeserializer */ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js");
exports.LexerATNSimulator = __webpack_require__(/*! ./LexerATNSimulator */ "./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js");
exports.ParserATNSimulator = __webpack_require__(/*! ./ParserATNSimulator */ "./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js");
exports.PredictionMode = __webpack_require__(/*! ./PredictionMode */ "./node_modules/antlr4/src/antlr4/atn/PredictionMode.js");


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFA.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFA.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Set} = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {DFAState} = __webpack_require__(/*! ./DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js");
const {StarLoopEntryState} = __webpack_require__(/*! ../atn/ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {ATNConfigSet} = __webpack_require__(/*! ./../atn/ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {DFASerializer} = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js");
const {LexerDFASerializer} = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js");

class DFA {
	constructor(atnStartState, decision) {
		if (decision === undefined) {
			decision = 0;
		}
		/**
		 * From which ATN state did we create this DFA?
		 */
		this.atnStartState = atnStartState;
		this.decision = decision;
		/**
		 * A set of all DFA states. Use {@link Map} so we can get old state back
		 * ({@link Set} only allows you to see if it's there).
		 */
		this._states = new Set();
		this.s0 = null;
		/**
		 * {@code true} if this DFA is for a precedence decision; otherwise,
		 * {@code false}. This is the backing field for {@link //isPrecedenceDfa},
		 * {@link //setPrecedenceDfa}
		 */
		this.precedenceDfa = false;
		if (atnStartState instanceof StarLoopEntryState)
		{
			if (atnStartState.isPrecedenceDecision) {
				this.precedenceDfa = true;
				const precedenceState = new DFAState(null, new ATNConfigSet());
				precedenceState.edges = [];
				precedenceState.isAcceptState = false;
				precedenceState.requiresFullContext = false;
				this.s0 = precedenceState;
			}
		}
	}

	/**
	 * Get the start state for a specific precedence value.
	 *
	 * @param precedence The current precedence.
	 * @return The start state corresponding to the specified precedence, or
	 * {@code null} if no start state exists for the specified precedence.
	 *
	 * @throws IllegalStateException if this is not a precedence DFA.
	 * @see //isPrecedenceDfa()
	 */
	getPrecedenceStartState(precedence) {
		if (!(this.precedenceDfa)) {
			throw ("Only precedence DFAs may contain a precedence start state.");
		}
		// s0.edges is never null for a precedence DFA
		if (precedence < 0 || precedence >= this.s0.edges.length) {
			return null;
		}
		return this.s0.edges[precedence] || null;
	}

	/**
	 * Set the start state for a specific precedence value.
	 *
	 * @param precedence The current precedence.
	 * @param startState The start state corresponding to the specified
	 * precedence.
	 *
	 * @throws IllegalStateException if this is not a precedence DFA.
	 * @see //isPrecedenceDfa()
	 */
	setPrecedenceStartState(precedence, startState) {
		if (!(this.precedenceDfa)) {
			throw ("Only precedence DFAs may contain a precedence start state.");
		}
		if (precedence < 0) {
			return;
		}

		/**
		 * synchronization on s0 here is ok. when the DFA is turned into a
		 * precedence DFA, s0 will be initialized once and not updated again
		 * s0.edges is never null for a precedence DFA
		 */
		this.s0.edges[precedence] = startState;
	}

	/**
	 * Sets whether this is a precedence DFA. If the specified value differs
	 * from the current DFA configuration, the following actions are taken;
	 * otherwise no changes are made to the current DFA.
	 *
	 * <ul>
	 * <li>The {@link //states} map is cleared</li>
	 * <li>If {@code precedenceDfa} is {@code false}, the initial state
	 * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
	 * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
	 * store the start states for individual precedence values.</li>
	 * <li>The {@link //precedenceDfa} field is updated</li>
	 * </ul>
	 *
	 * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
	 * {@code false}
	 */
	setPrecedenceDfa(precedenceDfa) {
		if (this.precedenceDfa!==precedenceDfa) {
			this._states = new Set();
			if (precedenceDfa) {
				const precedenceState = new DFAState(null, new ATNConfigSet());
				precedenceState.edges = [];
				precedenceState.isAcceptState = false;
				precedenceState.requiresFullContext = false;
				this.s0 = precedenceState;
			} else {
				this.s0 = null;
			}
			this.precedenceDfa = precedenceDfa;
		}
	}

	/**
	 * Return a list of all states in this DFA, ordered by state number.
	 */
	sortedStates() {
		const list = this._states.values();
		return list.sort(function(a, b) {
			return a.stateNumber - b.stateNumber;
		});
	}

	toString(literalNames, symbolicNames) {
		literalNames = literalNames || null;
		symbolicNames = symbolicNames || null;
		if (this.s0 === null) {
			return "";
		}
		const serializer = new DFASerializer(this, literalNames, symbolicNames);
		return serializer.toString();
	}

	toLexerString() {
		if (this.s0 === null) {
			return "";
		}
		const serializer = new LexerDFASerializer(this);
		return serializer.toString();
	}

	get states(){
		return this._states;
	}
}


module.exports = DFA;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
const Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

/**
 * A DFA walker that knows how to dump them to serialized strings.
 */
class DFASerializer {
    constructor(dfa, literalNames, symbolicNames) {
        this.dfa = dfa;
        this.literalNames = literalNames || [];
        this.symbolicNames = symbolicNames || [];
    }

    toString() {
       if(this.dfa.s0 === null) {
           return null;
       }
       let buf = "";
       const states = this.dfa.sortedStates();
       for(let i=0; i<states.length; i++) {
           const s = states[i];
           if(s.edges!==null) {
                const n = s.edges.length;
                for(let j=0;j<n;j++) {
                    const t = s.edges[j] || null;
                    if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                        buf = buf.concat(this.getStateString(s));
                        buf = buf.concat("-");
                        buf = buf.concat(this.getEdgeLabel(j));
                        buf = buf.concat("->");
                        buf = buf.concat(this.getStateString(t));
                        buf = buf.concat('\n');
                    }
                }
           }
       }
       return buf.length===0 ? null : buf;
    }

    getEdgeLabel(i) {
        if (i===0) {
            return "EOF";
        } else if(this.literalNames !==null || this.symbolicNames!==null) {
            return this.literalNames[i-1] || this.symbolicNames[i-1];
        } else {
            return String.fromCharCode(i-1);
        }
    }

    getStateString(s) {
        const baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
        if(s.isAcceptState) {
            if (s.predicates !== null) {
                return baseStateStr + "=>" + Utils.arrayToString(s.predicates);
            } else {
                return baseStateStr + "=>" + s.prediction.toString();
            }
        } else {
            return baseStateStr;
        }
    }
}

class LexerDFASerializer extends DFASerializer {
    constructor(dfa) {
        super(dfa, null);
    }

    getEdgeLabel(i) {
        return "'" + String.fromCharCode(i) + "'";
    }
}

module.exports = { DFASerializer , LexerDFASerializer };



/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFAState.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {ATNConfigSet} = __webpack_require__(/*! ./../atn/ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {Hash, Set} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

/**
 * Map a predicate to a predicted alternative.
 */
class PredPrediction {
	constructor(pred, alt) {
		this.alt = alt;
		this.pred = pred;
	}

	toString() {
		return "(" + this.pred + ", " + this.alt + ")";
	}
}

/**
 * A DFA state represents a set of possible ATN configurations.
 * As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
 * to keep track of all possible states the ATN can be in after
 * reading each input symbol. That is to say, after reading
 * input a1a2..an, the DFA is in a state that represents the
 * subset T of the states of the ATN that are reachable from the
 * ATN's start state along some path labeled a1a2..an."
 * In conventional NFA&rarr;DFA conversion, therefore, the subset T
 * would be a bitset representing the set of states the
 * ATN could be in. We need to track the alt predicted by each
 * state as well, however. More importantly, we need to maintain
 * a stack of states, tracking the closure operations as they
 * jump from rule to rule, emulating rule invocations (method calls).
 * I have to add a stack to simulate the proper lookahead sequences for
 * the underlying LL grammar from which the ATN was derived.
 *
 * <p>I use a set of ATNConfig objects not simple states. An ATNConfig
 * is both a state (ala normal conversion) and a RuleContext describing
 * the chain of rules (if any) followed to arrive at that state.</p>
 *
 * <p>A DFA state may have multiple references to a particular state,
 * but with different ATN contexts (with same or different alts)
 * meaning that state was reached via a different set of rule invocations.</p>
 */
class DFAState {
	constructor(stateNumber, configs) {
		if (stateNumber === null) {
			stateNumber = -1;
		}
		if (configs === null) {
			configs = new ATNConfigSet();
		}
		this.stateNumber = stateNumber;
		this.configs = configs;
		/**
		 * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
		 * {@link Token//EOF} maps to {@code edges[0]}.
		 */
		this.edges = null;
		this.isAcceptState = false;
		/**
		 * if accept state, what ttype do we match or alt do we predict?
		 * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}
		 * {@code !=null} or {@link //requiresFullContext}.
		 */
		this.prediction = 0;
		this.lexerActionExecutor = null;
		/**
		 * Indicates that this state was created during SLL prediction that
		 * discovered a conflict between the configurations in the state. Future
		 * {@link ParserATNSimulator//execATN} invocations immediately jumped doing
		 * full context prediction if this field is true.
		 */
		this.requiresFullContext = false;
		/**
		 * During SLL parsing, this is a list of predicates associated with the
		 * ATN configurations of the DFA state. When we have predicates,
		 * {@link //requiresFullContext} is {@code false} since full context
		 * prediction evaluates predicates
		 * on-the-fly. If this is not null, then {@link //prediction} is
		 * {@link ATN//INVALID_ALT_NUMBER}.
		 *
		 * <p>We only use these for non-{@link //requiresFullContext} but
		 * conflicting states. That
		 * means we know from the context (it's $ or we don't dip into outer
		 * context) that it's an ambiguity not a conflict.</p>
		 *
		 * <p>This list is computed by {@link
		 * ParserATNSimulator//predicateDFAState}.</p>
		 */
		this.predicates = null;
		return this;
	}

	/**
	 * Get the set of all alts mentioned by all ATN configurations in this
	 * DFA state.
	 */
	getAltSet() {
		const alts = new Set();
		if (this.configs !== null) {
			for (let i = 0; i < this.configs.length; i++) {
				const c = this.configs[i];
				alts.add(c.alt);
			}
		}
		if (alts.length === 0) {
			return null;
		} else {
			return alts;
		}
	}

	/**
	 * Two {@link DFAState} instances are equal if their ATN configuration sets
	 * are the same. This method is used to see if a state already exists.
	 *
	 * <p>Because the number of alternatives and number of ATN configurations are
	 * finite, there is a finite number of DFA states that can be processed.
	 * This is necessary to show that the algorithm terminates.</p>
	 *
	 * <p>Cannot test the DFA state numbers here because in
	 * {@link ParserATNSimulator//addDFAState} we need to know if any other state
	 * exists that has this exact set of ATN configurations. The
	 * {@link //stateNumber} is irrelevant.</p>
	 */
	equals(other) {
		// compare set of ATN configurations in this set with other
		return this === other ||
				(other instanceof DFAState &&
					this.configs.equals(other.configs));
	}

	toString() {
		let s = "" + this.stateNumber + ":" + this.configs;
		if(this.isAcceptState) {
			s = s + "=>";
			if (this.predicates !== null)
				s = s + this.predicates;
			else
				s = s + this.prediction;
		}
		return s;
	}

	hashCode() {
		const hash = new Hash();
		hash.update(this.configs);
		return hash.finish();
	}
}

module.exports = { DFAState, PredPrediction };


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = __webpack_require__(/*! ./DFA */ "./node_modules/antlr4/src/antlr4/dfa/DFA.js");
exports.DFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js").DFASerializer;
exports.LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js").LexerDFASerializer;
exports.PredPrediction = __webpack_require__(/*! ./DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js").PredPrediction;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {BitSet} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {ErrorListener} = __webpack_require__(/*! ./ErrorListener */ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js")
const {Interval} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js")


/**
 * This implementation of {@link ANTLRErrorListener} can be used to identify
 *  certain potential correctness and performance problems in grammars. "Reports"
 *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate
 *  message.
 *
 *  <ul>
 *  <li><b>Ambiguities</b>: These are cases where more than one path through the
 *  grammar can match the input.</li>
 *  <li><b>Weak context sensitivity</b>: These are cases where full-context
 *  prediction resolved an SLL conflict to a unique alternative which equaled the
 *  minimum alternative of the SLL conflict.</li>
 *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the
 *  full-context prediction resolved an SLL conflict to a unique alternative,
 *  <em>and</em> the minimum alternative of the SLL conflict was found to not be
 *  a truly viable alternative. Two-stage parsing cannot be used for inputs where
 *  this situation occurs.</li>
 *  </ul>
 */
class DiagnosticErrorListener extends ErrorListener {
	constructor(exactOnly) {
		super();
		exactOnly = exactOnly || true;
		// whether all ambiguities or only exact ambiguities are reported.
		this.exactOnly = exactOnly;
	}

	reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
		if (this.exactOnly && !exact) {
			return;
		}
		const msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
		const msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
		const msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	getDecisionDescription(recognizer, dfa) {
		const decision = dfa.decision
		const ruleIndex = dfa.atnStartState.ruleIndex

		const ruleNames = recognizer.ruleNames
		if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
			return "" + decision;
		}
		const ruleName = ruleNames[ruleIndex] || null
		if (ruleName === null || ruleName.length === 0) {
			return "" + decision;
		}
		return `${decision} (${ruleName})`;
	}

	/**
	 * Computes the set of conflicting or ambiguous alternatives from a
	 * configuration set, if that information was not already provided by the
	 * parser.
	 *
	 * @param reportedAlts The set of conflicting or ambiguous alternatives, as
	 * reported by the parser.
	 * @param configs The conflicting or ambiguous configuration set.
	 * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
	 * returns the set of alternatives represented in {@code configs}.
     */
	getConflictingAlts(reportedAlts, configs) {
		if (reportedAlts !== null) {
			return reportedAlts;
		}
		const result = new BitSet()
		for (let i = 0; i < configs.items.length; i++) {
			result.add(configs.items[i].alt);
		}
		return `{${result.values().join(", ")}}`;
	}
}

module.exports = DiagnosticErrorListener


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ErrorListener.js ***!
  \***************************************************************/
/***/ ((module) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Provides an empty default implementation of {@link ANTLRErrorListener}. The
 * default implementation of each method does nothing, but can be overridden as
 * necessary.
 */
class ErrorListener {
    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
    }

    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    }

    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
    }

    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
    }
}

/**
 * {@inheritDoc}
 *
 * <p>
 * This implementation prints messages to {@link System//err} containing the
 * values of {@code line}, {@code charPositionInLine}, and {@code msg} using
 * the following format.</p>
 *
 * <pre>
 * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
 * </pre>
 *
 */
class ConsoleErrorListener extends ErrorListener {
    constructor() {
        super();
    }

    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
        console.error("line " + line + ":" + column + " " + msg);
    }
}


/**
 * Provides a default instance of {@link ConsoleErrorListener}.
 */
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

class ProxyErrorListener extends ErrorListener {
    constructor(delegates) {
        super();
        if (delegates===null) {
            throw "delegates";
        }
        this.delegates = delegates;
        return this;
    }

    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));
    }

    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));
    }

    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));
    }

    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));
    }
}

module.exports = {ErrorListener, ConsoleErrorListener, ProxyErrorListener}



/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js")
const {NoViableAltException, InputMismatchException, FailedPredicateException, ParseCancellationException} = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js")
const {ATNState} = __webpack_require__(/*! ./../atn/ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js")
const {Interval, IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js")

class ErrorStrategy {

    reset(recognizer) {
    }

    recoverInline(recognizer) {
    }

    recover(recognizer, e) {
    }

    sync(recognizer) {
    }

    inErrorRecoveryMode(recognizer) {
    }

    reportError(recognizer) {
    }
}


/**
 * This is the default implementation of {@link ANTLRErrorStrategy} used for
 * error reporting and recovery in ANTLR parsers.
*/
class DefaultErrorStrategy extends ErrorStrategy {
    constructor() {
        super();
        /**
         * Indicates whether the error strategy is currently "recovering from an
         * error". This is used to suppress reporting multiple error messages while
         * attempting to recover from a detected syntax error.
         *
         * @see //inErrorRecoveryMode
         */
        this.errorRecoveryMode = false;

        /**
         * The index into the input stream where the last error occurred.
         * This is used to prevent infinite loops where an error is found
         * but no token is consumed during recovery...another error is found,
         * ad nauseum. This is a failsafe mechanism to guarantee that at least
         * one token/tree node is consumed for two errors.
         */
        this.lastErrorIndex = -1;
        this.lastErrorStates = null;
        this.nextTokensContext = null;
        this.nextTokenState = 0;
    }

    /**
     * <p>The default implementation simply calls {@link //endErrorCondition} to
     * ensure that the handler is not in error recovery mode.</p>
    */
    reset(recognizer) {
        this.endErrorCondition(recognizer);
    }

    /**
     * This method is called to enter error recovery mode when a recognition
     * exception is reported.
     *
     * @param recognizer the parser instance
    */
    beginErrorCondition(recognizer) {
        this.errorRecoveryMode = true;
    }

    inErrorRecoveryMode(recognizer) {
        return this.errorRecoveryMode;
    }

    /**
     * This method is called to leave error recovery mode after recovering from
     * a recognition exception.
     * @param recognizer
     */
    endErrorCondition(recognizer) {
        this.errorRecoveryMode = false;
        this.lastErrorStates = null;
        this.lastErrorIndex = -1;
    }

    /**
     * {@inheritDoc}
     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>
     */
    reportMatch(recognizer) {
        this.endErrorCondition(recognizer);
    }

    /**
     * {@inheritDoc}
     *
     * <p>The default implementation returns immediately if the handler is already
     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
     * and dispatches the reporting task based on the runtime type of {@code e}
     * according to the following table.</p>
     *
     * <ul>
     * <li>{@link NoViableAltException}: Dispatches the call to
     * {@link //reportNoViableAlternative}</li>
     * <li>{@link InputMismatchException}: Dispatches the call to
     * {@link //reportInputMismatch}</li>
     * <li>{@link FailedPredicateException}: Dispatches the call to
     * {@link //reportFailedPredicate}</li>
     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report
     * the exception</li>
     * </ul>
     */
    reportError(recognizer, e) {
       // if we've already reported an error and have not matched a token
       // yet successfully, don't report any errors.
        if(this.inErrorRecoveryMode(recognizer)) {
            return; // don't report spurious errors
        }
        this.beginErrorCondition(recognizer);
        if ( e instanceof NoViableAltException ) {
            this.reportNoViableAlternative(recognizer, e);
        } else if ( e instanceof InputMismatchException ) {
            this.reportInputMismatch(recognizer, e);
        } else if ( e instanceof FailedPredicateException ) {
            this.reportFailedPredicate(recognizer, e);
        } else {
            console.log("unknown recognition error type: " + e.constructor.name);
            console.log(e.stack);
            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
        }
    }

    /**
     *
     * {@inheritDoc}
     *
     * <p>The default implementation resynchronizes the parser by consuming tokens
     * until we find one in the resynchronization set--loosely the set of tokens
     * that can follow the current rule.</p>
     *
     */
    recover(recognizer, e) {
        if (this.lastErrorIndex===recognizer.getInputStream().index &&
            this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
            // uh oh, another error at same token index and previously-visited
            // state in ATN; must be a case where LT(1) is in the recovery
            // token set so nothing got consumed. Consume a single token
            // at least to prevent an infinite loop; this is a failsafe.
            recognizer.consume();
        }
        this.lastErrorIndex = recognizer._input.index;
        if (this.lastErrorStates === null) {
            this.lastErrorStates = [];
        }
        this.lastErrorStates.push(recognizer.state);
        const followSet = this.getErrorRecoverySet(recognizer)
        this.consumeUntil(recognizer, followSet);
    }

    /**
     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
     * that the current lookahead symbol is consistent with what were expecting
     * at this point in the ATN. You can call this anytime but ANTLR only
     * generates code to check before subrules/loops and each iteration.
     *
     * <p>Implements Jim Idle's magic sync mechanism in closures and optional
     * subrules. E.g.,</p>
     *
     * <pre>
     * a : sync ( stuff sync )* ;
     * sync : {consume to what can follow sync} ;
     * </pre>
     *
     * At the start of a sub rule upon error, {@link //sync} performs single
     * token deletion, if possible. If it can't do that, it bails on the current
     * rule and uses the default error recovery, which consumes until the
     * resynchronization set of the current rule.
     *
     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
     * with an empty alternative), then the expected set includes what follows
     * the subrule.</p>
     *
     * <p>During loop iteration, it consumes until it sees a token that can start a
     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
     * stay in the loop as long as possible.</p>
     *
     * <p><strong>ORIGINS</strong></p>
     *
     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.
     * A single mismatch token or missing token would force the parser to bail
     * out of the entire rules surrounding the loop. So, for rule</p>
     *
     * <pre>
     * classDef : 'class' ID '{' member* '}'
     * </pre>
     *
     * input with an extra token between members would force the parser to
     * consume until it found the next class definition rather than the next
     * member definition of the current class.
     *
     * <p>This functionality cost a little bit of effort because the parser has to
     * compare token set at the start of the loop and at each iteration. If for
     * some reason speed is suffering for you, you can turn off this
     * functionality by simply overriding this method as a blank { }.</p>
     *
     */
    sync(recognizer) {
        // If already recovering, don't try to sync
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        const s = recognizer._interp.atn.states[recognizer.state];
        const la = recognizer.getTokenStream().LA(1);
        // try cheaper subset first; might get lucky. seems to shave a wee bit off
        const nextTokens = recognizer.atn.nextTokens(s);
        if(nextTokens.contains(la)) {
            this.nextTokensContext = null;
            this.nextTokenState = ATNState.INVALID_STATE_NUMBER;
            return;
        } else if (nextTokens.contains(Token.EPSILON)) {
            if(this.nextTokensContext === null) {
                // It's possible the next token won't match information tracked
                // by sync is restricted for performance.
                this.nextTokensContext = recognizer._ctx;
                this.nextTokensState = recognizer._stateNumber;
            }
            return;
        }
        switch (s.stateType) {
        case ATNState.BLOCK_START:
        case ATNState.STAR_BLOCK_START:
        case ATNState.PLUS_BLOCK_START:
        case ATNState.STAR_LOOP_ENTRY:
           // report error and recover if possible
            if( this.singleTokenDeletion(recognizer) !== null) {
                return;
            } else {
                throw new InputMismatchException(recognizer);
            }
        case ATNState.PLUS_LOOP_BACK:
        case ATNState.STAR_LOOP_BACK:
            this.reportUnwantedToken(recognizer);
            const expecting = new IntervalSet()
            expecting.addSet(recognizer.getExpectedTokens());
            const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer))
            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
            break;
        default:
            // do nothing if we can't identify the exact kind of ATN state
        }
    }

    /**
     * This is called by {@link //reportError} when the exception is a
     * {@link NoViableAltException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportNoViableAlternative(recognizer, e) {
        const tokens = recognizer.getTokenStream()
        let input
        if(tokens !== null) {
            if (e.startToken.type===Token.EOF) {
                input = "<EOF>";
            } else {
                input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
            }
        } else {
            input = "<unknown input>";
        }
        const msg = "no viable alternative at input " + this.escapeWSAndQuote(input)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This is called by {@link //reportError} when the exception is an
     * {@link InputMismatchException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportInputMismatch(recognizer, e) {
        const msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
            " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This is called by {@link //reportError} when the exception is a
     * {@link FailedPredicateException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportFailedPredicate(recognizer, e) {
        const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex]
        const msg = "rule " + ruleName + " " + e.message
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This method is called to report a syntax error which requires the removal
     * of a token from the input stream. At the time this method is called, the
     * erroneous symbol is current {@code LT(1)} symbol and has not yet been
     * removed from the input stream. When this method returns,
     * {@code recognizer} is in error recovery mode.
     *
     * <p>This method is called when {@link //singleTokenDeletion} identifies
     * single-token deletion as a viable recovery strategy for a mismatched
     * input error.</p>
     *
     * <p>The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser//notifyErrorListeners}.</p>
     *
     * @param recognizer the parser instance
     *
     */
    reportUnwantedToken(recognizer) {
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        const t = recognizer.getCurrentToken()
        const tokenName = this.getTokenErrorDisplay(t)
        const expecting = this.getExpectedTokens(recognizer)
        const msg = "extraneous input " + tokenName + " expecting " +
            expecting.toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, t, null);
    }

    /**
     * This method is called to report a syntax error which requires the
     * insertion of a missing token into the input stream. At the time this
     * method is called, the missing token has not yet been inserted. When this
     * method returns, {@code recognizer} is in error recovery mode.
     *
     * <p>This method is called when {@link //singleTokenInsertion} identifies
     * single-token insertion as a viable recovery strategy for a mismatched
     * input error.</p>
     *
     * <p>The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser//notifyErrorListeners}.</p>
     *
     * @param recognizer the parser instance
     */
    reportMissingToken(recognizer) {
        if ( this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        const t = recognizer.getCurrentToken()
        const expecting = this.getExpectedTokens(recognizer)
        const msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
            " at " + this.getTokenErrorDisplay(t)
        recognizer.notifyErrorListeners(msg, t, null);
    }

    /**
     * <p>The default implementation attempts to recover from the mismatched input
     * by using single token insertion and deletion as described below. If the
     * recovery attempt fails, this method throws an
     * {@link InputMismatchException}.</p>
     *
     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
     *
     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
     * right token, however, then assume {@code LA(1)} is some extra spurious
     * token and delete it. Then consume and return the next token (which was
     * the {@code LA(2)} token) as the successful result of the match operation.</p>
     *
     * <p>This recovery strategy is implemented by {@link
     * //singleTokenDeletion}.</p>
     *
     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
     *
     * <p>If current token (at {@code LA(1)}) is consistent with what could come
     * after the expected {@code LA(1)} token, then assume the token is missing
     * and use the parser's {@link TokenFactory} to create it on the fly. The
     * "insertion" is performed by returning the created token as the successful
     * result of the match operation.</p>
     *
     * <p>This recovery strategy is implemented by {@link
     * //singleTokenInsertion}.</p>
     *
     * <p><strong>EXAMPLE</strong></p>
     *
     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
     * the parser returns from the nested call to {@code expr}, it will have
     * call chain:</p>
     *
     * <pre>
     * stat &rarr; expr &rarr; atom
     * </pre>
     *
     * and it will be trying to match the {@code ')'} at this point in the
     * derivation:
     *
     * <pre>
     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
     * ^
     * </pre>
     *
     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and
     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
     * is in the set of tokens that can follow the {@code ')'} token reference
     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.
     */
    recoverInline(recognizer) {
        // SINGLE TOKEN DELETION
        const matchedSymbol = this.singleTokenDeletion(recognizer)
        if (matchedSymbol !== null) {
            // we have deleted the extra token.
            // now, move past ttype token as if all were ok
            recognizer.consume();
            return matchedSymbol;
        }
        // SINGLE TOKEN INSERTION
        if (this.singleTokenInsertion(recognizer)) {
            return this.getMissingSymbol(recognizer);
        }
        // even that didn't work; must throw the exception
        throw new InputMismatchException(recognizer);
    }

    /**
     * This method implements the single-token insertion inline error recovery
     * strategy. It is called by {@link //recoverInline} if the single-token
     * deletion strategy fails to recover from the mismatched input. If this
     * method returns {@code true}, {@code recognizer} will be in error recovery
     * mode.
     *
     * <p>This method determines whether or not single-token insertion is viable by
     * checking if the {@code LA(1)} input symbol could be successfully matched
     * if it were instead the {@code LA(2)} symbol. If this method returns
     * {@code true}, the caller is responsible for creating and inserting a
     * token with the correct type to produce this behavior.</p>
     *
     * @param recognizer the parser instance
     * @return {@code true} if single-token insertion is a viable recovery
     * strategy for the current mismatched input, otherwise {@code false}
     */
    singleTokenInsertion(recognizer) {
        const currentSymbolType = recognizer.getTokenStream().LA(1)
        // if current token is consistent with what could come after current
        // ATN state, then we know we're missing a token; error recovery
        // is free to conjure up and insert the missing token
        const atn = recognizer._interp.atn
        const currentState = atn.states[recognizer.state]
        const next = currentState.transitions[0].target
        const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)
        if (expectingAtLL2.contains(currentSymbolType) ){
            this.reportMissingToken(recognizer);
            return true;
        } else {
            return false;
        }
    }

    /**
     * This method implements the single-token deletion inline error recovery
     * strategy. It is called by {@link //recoverInline} to attempt to recover
     * from mismatched input. If this method returns null, the parser and error
     * handler state will not have changed. If this method returns non-null,
     * {@code recognizer} will <em>not</em> be in error recovery mode since the
     * returned token was a successful match.
     *
     * <p>If the single-token deletion is successful, this method calls
     * {@link //reportUnwantedToken} to report the error, followed by
     * {@link Parser//consume} to actually "delete" the extraneous token. Then,
     * before returning {@link //reportMatch} is called to signal a successful
     * match.</p>
     *
     * @param recognizer the parser instance
     * @return the successfully matched {@link Token} instance if single-token
     * deletion successfully recovers from the mismatched input, otherwise
     * {@code null}
     */
    singleTokenDeletion(recognizer) {
        const nextTokenType = recognizer.getTokenStream().LA(2)
        const expecting = this.getExpectedTokens(recognizer)
        if (expecting.contains(nextTokenType)) {
            this.reportUnwantedToken(recognizer);
            // print("recoverFromMismatchedToken deleting " \
            // + str(recognizer.getTokenStream().LT(1)) \
            // + " since " + str(recognizer.getTokenStream().LT(2)) \
            // + " is what we want", file=sys.stderr)
            recognizer.consume(); // simply delete extra token
            // we want to return the token we're actually matching
            const matchedSymbol = recognizer.getCurrentToken()
            this.reportMatch(recognizer); // we know current token is correct
            return matchedSymbol;
        } else {
            return null;
        }
    }

    /**
     * Conjure up a missing token during error recovery.
     *
     * The recognizer attempts to recover from single missing
     * symbols. But, actions might refer to that missing symbol.
     * For example, x=ID {f($x);}. The action clearly assumes
     * that there has been an identifier matched previously and that
     * $x points at that token. If that token is missing, but
     * the next token in the stream is what we want we assume that
     * this token is missing and we keep going. Because we
     * have to return some token to replace the missing token,
     * we have to conjure one up. This method gives the user control
     * over the tokens returned for missing tokens. Mostly,
     * you will want to create something special for identifier
     * tokens. For literals such as '{' and ',', the default
     * action in the parser or tree parser works. It simply creates
     * a CommonToken of the appropriate type. The text will be the token.
     * If you change what tokens must be created by the lexer,
     * override this method to create the appropriate tokens.
     *
     */
    getMissingSymbol(recognizer) {
        const currentSymbol = recognizer.getCurrentToken()
        const expecting = this.getExpectedTokens(recognizer)
        const expectedTokenType = expecting.first() // get any element
        let tokenText
        if (expectedTokenType===Token.EOF) {
            tokenText = "<missing EOF>";
        } else {
            tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
        }
        let current = currentSymbol
        const lookback = recognizer.getTokenStream().LT(-1)
        if (current.type===Token.EOF && lookback !== null) {
            current = lookback;
        }
        return recognizer.getTokenFactory().create(current.source,
            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
            -1, -1, current.line, current.column);
    }

    getExpectedTokens(recognizer) {
        return recognizer.getExpectedTokens();
    }

    /**
     * How should a token be displayed in an error message? The default
     * is to display just the text, but during development you might
     * want to have a lot of information spit out. Override in that case
     * to use t.toString() (which, for CommonToken, dumps everything about
     * the token). This is better than forcing you to override a method in
     * your token objects because you don't have to go modify your lexer
     * so that it creates a new Java type.
     */
    getTokenErrorDisplay(t) {
        if (t === null) {
            return "<no token>";
        }
        let s = t.text
        if (s === null) {
            if (t.type===Token.EOF) {
                s = "<EOF>";
            } else {
                s = "<" + t.type + ">";
            }
        }
        return this.escapeWSAndQuote(s);
    }

    escapeWSAndQuote(s) {
        s = s.replace(/\n/g,"\\n");
        s = s.replace(/\r/g,"\\r");
        s = s.replace(/\t/g,"\\t");
        return "'" + s + "'";
    }

    /**
     * Compute the error recovery set for the current rule. During
     * rule invocation, the parser pushes the set of tokens that can
     * follow that rule reference on the stack; this amounts to
     * computing FIRST of what follows the rule reference in the
     * enclosing rule. See LinearApproximator.FIRST().
     * This local follow set only includes tokens
     * from within the rule; i.e., the FIRST computation done by
     * ANTLR stops at the end of a rule.
     *
     * EXAMPLE
     *
     * When you find a "no viable alt exception", the input is not
     * consistent with any of the alternatives for rule r. The best
     * thing to do is to consume tokens until you see something that
     * can legally follow a call to r//or* any rule that called r.
     * You don't want the exact set of viable next tokens because the
     * input might just be missing a token--you might consume the
     * rest of the input looking for one of the missing tokens.
     *
     * Consider grammar:
     *
     * a : '[' b ']'
     * | '(' b ')'
     * ;
     * b : c '^' INT ;
     * c : ID
     * | INT
     * ;
     *
     * At each rule invocation, the set of tokens that could follow
     * that rule is pushed on a stack. Here are the various
     * context-sensitive follow sets:
     *
     * FOLLOW(b1_in_a) = FIRST(']') = ']'
     * FOLLOW(b2_in_a) = FIRST(')') = ')'
     * FOLLOW(c_in_b) = FIRST('^') = '^'
     *
     * Upon erroneous input "[]", the call chain is
     *
     * a -> b -> c
     *
     * and, hence, the follow context stack is:
     *
     * depth follow set start of rule execution
     * 0 <EOF> a (from main())
     * 1 ']' b
     * 2 '^' c
     *
     * Notice that ')' is not included, because b would have to have
     * been called from a different context in rule a for ')' to be
     * included.
     *
     * For error recovery, we cannot consider FOLLOW(c)
     * (context-sensitive or otherwise). We need the combined set of
     * all context-sensitive FOLLOW sets--the set of all tokens that
     * could follow any reference in the call chain. We need to
     * resync to one of those tokens. Note that FOLLOW(c)='^' and if
     * we resync'd to that token, we'd consume until EOF. We need to
     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
     * In this case, for input "[]", LA(1) is ']' and in the set, so we would
     * not consume anything. After printing an error, rule c would
     * return normally. Rule b would not find the required '^' though.
     * At this point, it gets a mismatched token error and throws an
     * exception (since LA(1) is not in the viable following token
     * set). The rule exception handler tries to recover, but finds
     * the same recovery set and doesn't consume anything. Rule b
     * exits normally returning to rule a. Now it finds the ']' (and
     * with the successful match exits errorRecovery mode).
     *
     * So, you can see that the parser walks up the call chain looking
     * for the token that was a member of the recovery set.
     *
     * Errors are not generated in errorRecovery mode.
     *
     * ANTLR's error recovery mechanism is based upon original ideas:
     *
     * "Algorithms + Data Structures = Programs" by Niklaus Wirth
     *
     * and
     *
     * "A note on error recovery in recursive descent parsers":
     * http://portal.acm.org/citation.cfm?id=947902.947905
     *
     * Later, Josef Grosch had some good ideas:
     *
     * "Efficient and Comfortable Error Recovery in Recursive Descent
     * Parsers":
     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
     *
     * Like Grosch I implement context-sensitive FOLLOW sets that are combined
     * at run-time upon error to avoid overhead during parsing.
     */
    getErrorRecoverySet(recognizer) {
        const atn = recognizer._interp.atn
        let ctx = recognizer._ctx
        const recoverSet = new IntervalSet()
        while (ctx !== null && ctx.invokingState>=0) {
            // compute what follows who invoked us
            const invokingState = atn.states[ctx.invokingState]
            const rt = invokingState.transitions[0]
            const follow = atn.nextTokens(rt.followState)
            recoverSet.addSet(follow);
            ctx = ctx.parentCtx;
        }
        recoverSet.removeOne(Token.EPSILON);
        return recoverSet;
    }

// Consume tokens until one matches the given token set.//
    consumeUntil(recognizer, set) {
        let ttype = recognizer.getTokenStream().LA(1)
        while( ttype !== Token.EOF && !set.contains(ttype)) {
            recognizer.consume();
            ttype = recognizer.getTokenStream().LA(1);
        }
    }
}


/**
 * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
 * by immediately canceling the parse operation with a
 * {@link ParseCancellationException}. The implementation ensures that the
 * {@link ParserRuleContext//exception} field is set for all parse tree nodes
 * that were not completed prior to encountering the error.
 *
 * <p>
 * This error strategy is useful in the following scenarios.</p>
 *
 * <ul>
 * <li><strong>Two-stage parsing:</strong> This error strategy allows the first
 * stage of two-stage parsing to immediately terminate if an error is
 * encountered, and immediately fall back to the second stage. In addition to
 * avoiding wasted work by attempting to recover from errors here, the empty
 * implementation of {@link BailErrorStrategy//sync} improves the performance of
 * the first stage.</li>
 * <li><strong>Silent validation:</strong> When syntax errors are not being
 * reported or logged, and the parse result is simply ignored if errors occur,
 * the {@link BailErrorStrategy} avoids wasting work on recovering from errors
 * when the result will be ignored either way.</li>
 * </ul>
 *
 * <p>
 * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
 *
 * @see Parser//setErrorHandler(ANTLRErrorStrategy)
 * */
class BailErrorStrategy extends DefaultErrorStrategy {
    constructor() {
        super();
    }

    /**
     * Instead of recovering from exception {@code e}, re-throw it wrapped
     * in a {@link ParseCancellationException} so it is not caught by the
     * rule function catches. Use {@link Exception//getCause()} to get the
     * original {@link RecognitionException}.
     */
    recover(recognizer, e) {
        let context = recognizer._ctx
        while (context !== null) {
            context.exception = e;
            context = context.parentCtx;
        }
        throw new ParseCancellationException(e);
    }

    /**
     * Make sure we don't attempt to recover inline; if the parser
     * successfully recovers, it won't throw an exception.
     */
    recoverInline(recognizer) {
        this.recover(recognizer, new InputMismatchException(recognizer));
    }

// Make sure we don't attempt to recover from problems in subrules.//
    sync(recognizer) {
        // pass
    }
}


module.exports = {BailErrorStrategy, DefaultErrorStrategy};


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/Errors.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/Errors.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
 *  3 kinds of errors: prediction errors, failed predicate errors, and
 *  mismatched input errors. In each case, the parser knows where it is
 *  in the input, where it is in the ATN, the rule invocation stack,
 *  and what kind of problem occurred.
 */

const {PredicateTransition} = __webpack_require__(/*! ./../atn/Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js");
const {Interval} = (__webpack_require__(/*! ../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js").Interval);

class RecognitionException extends Error {
    constructor(params) {
        super(params.message);
        if (!!Error.captureStackTrace) {
            Error.captureStackTrace(this, RecognitionException);
        } else {
            var stack = new Error().stack;
        }
        this.message = params.message;
        this.recognizer = params.recognizer;
        this.input = params.input;
        this.ctx = params.ctx;
        /**
         * The current {@link Token} when an error occurred. Since not all streams
         * support accessing symbols by index, we have to track the {@link Token}
         * instance itself
        */
        this.offendingToken = null;
        /**
         * Get the ATN state number the parser was in at the time the error
         * occurred. For {@link NoViableAltException} and
         * {@link LexerNoViableAltException} exceptions, this is the
         * {@link DecisionState} number. For others, it is the state whose outgoing
         * edge we couldn't match.
         */
        this.offendingState = -1;
        if (this.recognizer!==null) {
            this.offendingState = this.recognizer.state;
        }
    }

    /**
     * Gets the set of input symbols which could potentially follow the
     * previously matched symbol at the time this exception was thrown.
     *
     * <p>If the set of expected tokens is not known and could not be computed,
     * this method returns {@code null}.</p>
     *
     * @return The set of token types that could potentially follow the current
     * state in the ATN, or {@code null} if the information is not available.
     */
    getExpectedTokens() {
        if (this.recognizer!==null) {
            return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
        } else {
            return null;
        }
    }

    // <p>If the state number is not known, this method returns -1.</p>
    toString() {
        return this.message;
    }
}

class LexerNoViableAltException extends RecognitionException {
    constructor(lexer, input, startIndex, deadEndConfigs) {
        super({message: "", recognizer: lexer, input: input, ctx: null});
        this.startIndex = startIndex;
        this.deadEndConfigs = deadEndConfigs;
    }

    toString() {
        let symbol = "";
        if (this.startIndex >= 0 && this.startIndex < this.input.size) {
            symbol = this.input.getText(new Interval(this.startIndex,this.startIndex));
        }
        return "LexerNoViableAltException" + symbol;
    }
}


/**
 * Indicates that the parser could not decide which of two or more paths
 * to take based upon the remaining input. It tracks the starting token
 * of the offending input and also knows where the parser was
 * in the various paths when the error. Reported by reportNoViableAlternative()
 */
class NoViableAltException extends RecognitionException {
    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
        ctx = ctx || recognizer._ctx;
        offendingToken = offendingToken || recognizer.getCurrentToken();
        startToken = startToken || recognizer.getCurrentToken();
        input = input || recognizer.getInputStream();
        super({message: "", recognizer: recognizer, input: input, ctx: ctx});
        // Which configurations did we try at input.index() that couldn't match
        // input.LT(1)?//
        this.deadEndConfigs = deadEndConfigs;
        // The token object at the start index; the input stream might
        // not be buffering tokens so get a reference to it. (At the
        // time the error occurred, of course the stream needs to keep a
        // buffer all of the tokens but later we might not have access to those.)
        this.startToken = startToken;
        this.offendingToken = offendingToken;
    }
}

/**
 * This signifies any kind of mismatched input exceptions such as
 * when the current input does not match the expected token.
*/
class InputMismatchException extends RecognitionException {
    constructor(recognizer) {
        super({message: "", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});
        this.offendingToken = recognizer.getCurrentToken();
    }
}

function formatMessage(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
}

/**
 * A semantic predicate failed during validation. Validation of predicates
 * occurs when normally parsing the alternative just like matching a token.
 * Disambiguating predicate evaluation occurs when we test a predicate during
 * prediction.
*/
class FailedPredicateException extends RecognitionException {
    constructor(recognizer, predicate, message) {
        super({
            message: formatMessage(predicate, message || null), recognizer: recognizer,
            input: recognizer.getInputStream(), ctx: recognizer._ctx
        });
        const s = recognizer._interp.atn.states[recognizer.state]
        const trans = s.transitions[0]
        if (trans instanceof PredicateTransition) {
            this.ruleIndex = trans.ruleIndex;
            this.predicateIndex = trans.predIndex;
        } else {
            this.ruleIndex = 0;
            this.predicateIndex = 0;
        }
        this.predicate = predicate;
        this.offendingToken = recognizer.getCurrentToken();
    }
}


class ParseCancellationException extends Error{
    constructor() {
        super()
        Error.captureStackTrace(this, ParseCancellationException);
    }
}

module.exports = {
    RecognitionException,
    NoViableAltException,
    LexerNoViableAltException,
    InputMismatchException,
    FailedPredicateException,
    ParseCancellationException
};


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

module.exports.RecognitionException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").RecognitionException;
module.exports.NoViableAltException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").NoViableAltException;
module.exports.LexerNoViableAltException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").LexerNoViableAltException;
module.exports.InputMismatchException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").InputMismatchException;
module.exports.FailedPredicateException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").FailedPredicateException;
module.exports.DiagnosticErrorListener = __webpack_require__(/*! ./DiagnosticErrorListener */ "./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js");
module.exports.BailErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js").BailErrorStrategy;
module.exports.DefaultErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js").DefaultErrorStrategy;
module.exports.ErrorListener = __webpack_require__(/*! ./ErrorListener */ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js").ErrorListener;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/index.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = __webpack_require__(/*! ./atn/index */ "./node_modules/antlr4/src/antlr4/atn/index.js");
exports.codepointat = __webpack_require__(/*! ./polyfills/codepointat */ "./node_modules/antlr4/src/antlr4/polyfills/codepointat.js");
exports.dfa = __webpack_require__(/*! ./dfa/index */ "./node_modules/antlr4/src/antlr4/dfa/index.js");
exports.fromcodepoint = __webpack_require__(/*! ./polyfills/fromcodepoint */ "./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js");
exports.tree = __webpack_require__(/*! ./tree/index */ "./node_modules/antlr4/src/antlr4/tree/index.js");
exports.error = __webpack_require__(/*! ./error/index */ "./node_modules/antlr4/src/antlr4/error/index.js");
exports.Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js").Token;
exports.CharStreams = __webpack_require__(/*! ./CharStreams */ "./node_modules/antlr4/src/antlr4/CharStreams.js");
exports.CommonToken = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js").CommonToken;
exports.InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/src/antlr4/InputStream.js");
exports.FileStream = __webpack_require__(/*! ./FileStream */ "./node_modules/antlr4/src/antlr4/FileStream.js");
exports.CommonTokenStream = __webpack_require__(/*! ./CommonTokenStream */ "./node_modules/antlr4/src/antlr4/CommonTokenStream.js");
exports.Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/src/antlr4/Lexer.js");
exports.Parser = __webpack_require__(/*! ./Parser */ "./node_modules/antlr4/src/antlr4/Parser.js");
var pc = __webpack_require__(/*! ./PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = __webpack_require__(/*! ./ParserRuleContext */ "./node_modules/antlr4/src/antlr4/ParserRuleContext.js");
exports.Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js").Interval;
exports.IntervalSet = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js").IntervalSet;
exports.Utils = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
exports.LL1Analyzer = __webpack_require__(/*! ./LL1Analyzer */ "./node_modules/antlr4/src/antlr4/LL1Analyzer.js").LL1Analyzer;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/polyfills/codepointat.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/polyfills/codepointat.js ***!
  \*****************************************************************/
/***/ (() => {

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			let result;
			try {
				const object = {};
				const $defineProperty = Object.defineProperty;
				result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {
			}
			return result;
		}());
		const codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			const string = String(this);
			const size = string.length;
			// `ToInteger`
			let index = position ? Number(position) : 0;
			if (index !== index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			const first = string.charCodeAt(index);
			let second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js ***!
  \*******************************************************************/
/***/ (() => {

/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		const defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			let result;
			try {
				const object = {};
				const $defineProperty = Object.defineProperty;
				result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		const stringFromCharCode = String.fromCharCode;
		const floor = Math.floor;
		const fromCodePoint = function(_) {
			const MAX_SIZE = 0x4000;
			const codeUnits = [];
			let highSurrogate;
			let lowSurrogate;
			let index = -1;
			const length = arguments.length;
			if (!length) {
				return '';
			}
			let result = '';
			while (++index < length) {
				let codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) !== codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 === length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/Tree.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/Tree.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {Interval} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const INVALID_INTERVAL = new Interval(-1, -2);

/**
 * The basic notion of a tree has a parent, a payload, and a list of children.
 * It is the most abstract interface for all the trees used by ANTLR.
 */
class Tree {}

class SyntaxTree extends Tree {
	constructor() {
		super();
	}
}

class ParseTree extends SyntaxTree {
	constructor() {
		super();
	}
}

class RuleNode extends ParseTree {
	constructor() {
		super();
	}

	getRuleContext(){
		throw new Error("missing interface implementation")
	}
}

class TerminalNode extends ParseTree {
	constructor() {
		super();
	}
}

class ErrorNode extends TerminalNode {
	constructor() {
		super();
	}
}

class ParseTreeVisitor {
	visit(ctx) {
		 if (Array.isArray(ctx)) {
			return ctx.map(function(child) {
				return child.accept(this);
			}, this);
		} else {
			return ctx.accept(this);
		}
	}

	visitChildren(ctx) {
		if (ctx.children) {
			return this.visit(ctx.children);
		} else {
			return null;
		}
	}

	visitTerminal(node) {
	}

	visitErrorNode(node) {
	}
}

class ParseTreeListener {
	visitTerminal(node) {
	}

	visitErrorNode(node) {
	}

	enterEveryRule(node) {
	}

	exitEveryRule(node) {
	}
}

class TerminalNodeImpl extends TerminalNode {
	constructor(symbol) {
		super();
		this.parentCtx = null;
		this.symbol = symbol;
	}

	getChild(i) {
		return null;
	}

	getSymbol() {
		return this.symbol;
	}

	getParent() {
		return this.parentCtx;
	}

	getPayload() {
		return this.symbol;
	}

	getSourceInterval() {
		if (this.symbol === null) {
			return INVALID_INTERVAL;
		}
		const tokenIndex = this.symbol.tokenIndex;
		return new Interval(tokenIndex, tokenIndex);
	}

	getChildCount() {
		return 0;
	}

	accept(visitor) {
		return visitor.visitTerminal(this);
	}

	getText() {
		return this.symbol.text;
	}

	toString() {
		if (this.symbol.type === Token.EOF) {
			return "<EOF>";
		} else {
			return this.symbol.text;
		}
	}
}


/**
 * Represents a token that was consumed during resynchronization
 * rather than during a valid match operation. For example,
 * we will create this kind of a node during single token insertion
 * and deletion as well as during "consume until error recovery set"
 * upon no viable alternative exceptions.
 */
class ErrorNodeImpl extends TerminalNodeImpl {
	constructor(token) {
		super(token);
	}

	isErrorNode() {
		return true;
	}

	accept(visitor) {
		return visitor.visitErrorNode(this);
	}
}

class ParseTreeWalker {

	/**
	 * Performs a walk on the given parse tree starting at the root and going down recursively
	 * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before
	 * recursively walking down into child nodes, then
	 * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.
	 * @param listener The listener used by the walker to process grammar rules
	 * @param t The parse tree to be walked on
	 */
	walk(listener, t) {
		const errorNode = t instanceof ErrorNode ||
				(t.isErrorNode !== undefined && t.isErrorNode());
		if (errorNode) {
			listener.visitErrorNode(t);
		} else if (t instanceof TerminalNode) {
			listener.visitTerminal(t);
		} else {
			this.enterRule(listener, t);
			for (let i = 0; i < t.getChildCount(); i++) {
				const child = t.getChild(i);
				this.walk(listener, child);
			}
			this.exitRule(listener, t);
		}
	}

	/**
	 * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}
	 * then by triggering the event specific to the given parse tree node
	 * @param listener The listener responding to the trigger events
	 * @param r The grammar rule containing the rule context
	 */
	enterRule(listener, r) {
		const ctx = r.getRuleContext();
		listener.enterEveryRule(ctx);
		ctx.enterRule(listener);
	}

	/**
	 * Exits a grammar rule by first triggering the event specific to the given parse tree node
	 * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}
	 * @param listener The listener responding to the trigger events
	 * @param r The grammar rule containing the rule context
	 */
	exitRule(listener, r) {
		const ctx = r.getRuleContext();
		ctx.exitRule(listener);
		listener.exitEveryRule(ctx);
	}
}

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

module.exports = {
	RuleNode,
	ErrorNode,
	TerminalNode,
	ErrorNodeImpl,
	TerminalNodeImpl,
	ParseTreeListener,
	ParseTreeVisitor,
	ParseTreeWalker,
	INVALID_INTERVAL
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/Trees.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/Trees.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {ErrorNode, TerminalNode, RuleNode} = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");

/** A set of utility routines useful for all kinds of ANTLR trees. */
const Trees = {
    /**
     * Print out a whole tree in LISP form. {@link //getNodeText} is used on the
     *  node payloads to get the text for the nodes.  Detect
     *  parse trees and extract data appropriately.
     */
    toStringTree: function(tree, ruleNames, recog) {
        ruleNames = ruleNames || null;
        recog = recog || null;
        if(recog!==null) {
            ruleNames = recog.ruleNames;
        }
        let s = Trees.getNodeText(tree, ruleNames);
        s = Utils.escapeWhitespace(s, false);
        const c = tree.getChildCount();
        if(c===0) {
            return s;
        }
        let res = "(" + s + ' ';
        if(c>0) {
            s = Trees.toStringTree(tree.getChild(0), ruleNames);
            res = res.concat(s);
        }
        for(let i=1;i<c;i++) {
            s = Trees.toStringTree(tree.getChild(i), ruleNames);
            res = res.concat(' ' + s);
        }
        res = res.concat(")");
        return res;
    },

    getNodeText: function(t, ruleNames, recog) {
        ruleNames = ruleNames || null;
        recog = recog || null;
        if(recog!==null) {
            ruleNames = recog.ruleNames;
        }
        if(ruleNames!==null) {
            if (t instanceof RuleNode) {
                const context = t.getRuleContext()
                const altNumber = context.getAltNumber();
                // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
                if ( altNumber != 0 ) {
                    return ruleNames[t.ruleIndex]+":"+altNumber;
                }
                return ruleNames[t.ruleIndex];
            } else if ( t instanceof ErrorNode) {
                return t.toString();
            } else if(t instanceof TerminalNode) {
                if(t.symbol!==null) {
                    return t.symbol.text;
                }
            }
        }
        // no recog for rule names
        const payload = t.getPayload();
        if (payload instanceof Token ) {
            return payload.text;
        }
        return t.getPayload().toString();
    },

    /**
     * Return ordered list of all children of this node
     */
    getChildren: function(t) {
        const list = [];
        for(let i=0;i<t.getChildCount();i++) {
            list.push(t.getChild(i));
        }
        return list;
    },

    /**
     * Return a list of all ancestors of this node.  The first node of
     * list is the root and the last is the parent of this node.
     */
    getAncestors: function(t) {
        let ancestors = [];
        t = t.getParent();
        while(t!==null) {
            ancestors = [t].concat(ancestors);
            t = t.getParent();
        }
        return ancestors;
    },

    findAllTokenNodes: function(t, ttype) {
        return Trees.findAllNodes(t, ttype, true);
    },

    findAllRuleNodes: function(t, ruleIndex) {
        return Trees.findAllNodes(t, ruleIndex, false);
    },

    findAllNodes: function(t, index, findTokens) {
        const nodes = [];
        Trees._findAllNodes(t, index, findTokens, nodes);
        return nodes;
    },

    _findAllNodes: function(t, index, findTokens, nodes) {
        // check this node (the root) first
        if(findTokens && (t instanceof TerminalNode)) {
            if(t.symbol.type===index) {
                nodes.push(t);
            }
        } else if(!findTokens && (t instanceof RuleNode)) {
            if(t.ruleIndex===index) {
                nodes.push(t);
            }
        }
        // check children
        for(let i=0;i<t.getChildCount();i++) {
            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
        }
    },

    descendants: function(t) {
        let nodes = [t];
        for(let i=0;i<t.getChildCount();i++) {
            nodes = nodes.concat(Trees.descendants(t.getChild(i)));
        }
        return nodes;
    }
}

module.exports = Trees;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/index.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Tree = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const Trees = __webpack_require__(/*! ./Trees */ "./node_modules/antlr4/src/antlr4/tree/Trees.js");
module.exports = {...Tree, Trees}


/***/ }),

/***/ "./src/compiler/anylasis/IRRepresentation.ts":
/*!***************************************************!*\
  !*** ./src/compiler/anylasis/IRRepresentation.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IRRepresentation": () => (/* binding */ IRRepresentation)
/* harmony export */ });
/* harmony import */ var _SSAFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SSAFunction */ "./src/compiler/anylasis/SSAFunction.ts");

class IRRepresentation {
    constructor(prog) {
        this.funcs = (0,_SSAFunction__WEBPACK_IMPORTED_MODULE_0__.make_IRFunctions)(prog.funcs);
    }
}


/***/ }),

/***/ "./src/compiler/anylasis/Operation.ts":
/*!********************************************!*\
  !*** ./src/compiler/anylasis/Operation.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Operation": () => (/* binding */ Operation),
/* harmony export */   "make_binary_op": () => (/* binding */ make_binary_op)
/* harmony export */ });
/* harmony import */ var _instructions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../instructions */ "./src/compiler/instructions.ts");

class Operation {
    constructor(type, args, code) {
        this.type = type;
        this.args = args;
        this.code = code;
    }
    ;
}
const binary_op_table = [
    { o: "+", l: "i32", r: "i32", v: new Operation("i32", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.add) },
    { o: "-", l: "i32", r: "i32", v: new Operation("i32", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.sub) },
    { o: "*", l: "i32", r: "i32", v: new Operation("i32", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.mul) },
    { o: "/", l: "i32", r: "i32", v: new Operation("i32", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.div_s) },
    { o: "%", l: "i32", r: "i32", v: new Operation("i32", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.rem_s) },
    { o: "==", l: "i32", r: "i32", v: new Operation("bool", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.eq) },
    { o: "!=", l: "i32", r: "i32", v: new Operation("bool", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.ne) },
    { o: "<", l: "i32", r: "i32", v: new Operation("bool", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.lt_s) },
    { o: "<=", l: "i32", r: "i32", v: new Operation("bool", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.le_s) },
    { o: ">", l: "i32", r: "i32", v: new Operation("bool", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.gt_s) },
    { o: ">=", l: "i32", r: "i32", v: new Operation("bool", ["i32", "i32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i32.ge_s) },
    { o: "+", l: "i64", r: "i64", v: new Operation("i64", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.add) },
    { o: "-", l: "i64", r: "i64", v: new Operation("i64", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.sub) },
    { o: "*", l: "i64", r: "i64", v: new Operation("i64", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.mul) },
    { o: "/", l: "i64", r: "i64", v: new Operation("i64", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.div_s) },
    { o: "%", l: "i64", r: "i64", v: new Operation("i64", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.rem_s) },
    { o: "==", l: "i64", r: "i64", v: new Operation("bool", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.eq) },
    { o: "!=", l: "i64", r: "i64", v: new Operation("bool", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.ne) },
    { o: "<", l: "i64", r: "i64", v: new Operation("bool", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.lt_s) },
    { o: "<=", l: "i64", r: "i64", v: new Operation("bool", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.le_s) },
    { o: ">", l: "i64", r: "i64", v: new Operation("bool", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.gt_s) },
    { o: ">=", l: "i64", r: "i64", v: new Operation("bool", ["i64", "i64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.i64.ge_s) },
    { o: "+", l: "f32", r: "f32", v: new Operation("f32", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.add) },
    { o: "-", l: "f32", r: "f32", v: new Operation("f32", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.sub) },
    { o: "*", l: "f32", r: "f32", v: new Operation("f32", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.mul) },
    { o: "/", l: "f32", r: "f32", v: new Operation("f32", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.div) },
    { o: "==", l: "f32", r: "f32", v: new Operation("bool", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.eq) },
    { o: "!=", l: "f32", r: "f32", v: new Operation("bool", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.ne) },
    { o: "<", l: "f32", r: "f32", v: new Operation("bool", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.lt) },
    { o: "<=", l: "f32", r: "f32", v: new Operation("bool", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.le) },
    { o: ">", l: "f32", r: "f32", v: new Operation("bool", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.gt) },
    { o: ">=", l: "f32", r: "f32", v: new Operation("bool", ["f32", "f32"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f32.ge) },
    { o: "+", l: "f64", r: "f64", v: new Operation("f64", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.add) },
    { o: "-", l: "f64", r: "f64", v: new Operation("f64", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.sub) },
    { o: "*", l: "f64", r: "f64", v: new Operation("f64", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.mul) },
    { o: "/", l: "f64", r: "f64", v: new Operation("f64", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.div) },
    { o: "==", l: "f64", r: "f64", v: new Operation("bool", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.eq) },
    { o: "!=", l: "f64", r: "f64", v: new Operation("bool", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.ne) },
    { o: "<", l: "f64", r: "f64", v: new Operation("bool", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.lt) },
    { o: "<=", l: "f64", r: "f64", v: new Operation("bool", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.le) },
    { o: ">", l: "f64", r: "f64", v: new Operation("bool", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.gt) },
    { o: ">=", l: "f64", r: "f64", v: new Operation("bool", ["f64", "f64"], _instructions__WEBPACK_IMPORTED_MODULE_0__.f64.ge) },
];
function make_binary_op(left, op, right) {
    for (const operation of binary_op_table) {
        if (operation.o == op && operation.l == left && operation.r == right) {
            return operation.v;
        }
    }
    throw `no binary operation "${op}" exists between types "${left}" and "${right}"`;
}


/***/ }),

/***/ "./src/compiler/anylasis/SSA.ts":
/*!**************************************!*\
  !*** ./src/compiler/anylasis/SSA.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Constant": () => (/* binding */ Constant),
/* harmony export */   "LocalIdentifier": () => (/* binding */ LocalIdentifier),
/* harmony export */   "ArgIdentifier": () => (/* binding */ ArgIdentifier),
/* harmony export */   "FunctionIdentifier": () => (/* binding */ FunctionIdentifier),
/* harmony export */   "Operation": () => (/* binding */ Operation),
/* harmony export */   "IfBranch": () => (/* binding */ IfBranch)
/* harmony export */ });
class Constant {
    constructor(idx, val, type) {
        this.idx = idx;
        this.val = val;
        this.type = type;
    }
}
class LocalIdentifier {
    constructor(idx, src_idx, type) {
        this.idx = idx;
        this.src_idx = src_idx;
        this.type = type;
    }
}
class ArgIdentifier {
    constructor(idx, src_idx, type) {
        this.idx = idx;
        this.src_idx = src_idx;
        this.type = type;
    }
}
class FunctionIdentifier {
    constructor(idx, func, args, type) {
        this.idx = idx;
        this.func = func;
        this.args = args;
        this.type = type;
    }
}
class Operation {
    constructor(idx, sources, op, type) {
        this.idx = idx;
        this.sources = sources;
        this.op = op;
        this.type = type;
    }
}
class IfBranch {
    constructor(idx, pred_idx, then_idx, else_idx, type) {
        this.idx = idx;
        this.pred_idx = pred_idx;
        this.then_idx = then_idx;
        this.else_idx = else_idx;
        this.type = type;
    }
}


/***/ }),

/***/ "./src/compiler/anylasis/SSAFunction.ts":
/*!**********************************************!*\
  !*** ./src/compiler/anylasis/SSAFunction.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "make_IRFunctions": () => (/* binding */ make_IRFunctions),
/* harmony export */   "IRFunction": () => (/* binding */ IRFunction)
/* harmony export */ });
/* harmony import */ var _TypedFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TypedFunction */ "./src/compiler/anylasis/TypedFunction.ts");
/* harmony import */ var _SSA__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SSA */ "./src/compiler/anylasis/SSA.ts");
/* harmony import */ var _codegen_primitiveTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../codegen/primitiveTypes */ "./src/compiler/codegen/primitiveTypes.ts");



class FunctionSymbol {
    constructor(func) {
        this.name = func.name;
        this.args = func.args;
        this.return_type = func.type;
    }
}
class ValueSymbol {
    constructor(name, ssa_index, type) {
        this.name = name;
        this.ssa_index = ssa_index;
        this.type = type;
    }
}
class ArgSymbol {
    constructor(arg, idx) {
        this.name = arg.name;
        this.type = arg.type;
        this.arg_idx = idx;
    }
}
class SymbolLookupTable {
    constructor(parent) {
        this.symbols = new Map();
        this.parent = parent;
    }
    add_symbol(s) {
        if (this.symbols.has(s.name.name))
            throw "already added symbol";
        this.symbols.set(s.name.name, s);
    }
    get_symbol(i) {
        const symbol = this.symbols.get(i.name);
        if (!symbol && this.parent) {
            return this.parent.get_symbol(i);
        }
        else {
            return symbol;
        }
    }
}
function make_IRFunctions(parser_functions) {
    const lookup = new SymbolLookupTable(null);
    for (const func of parser_functions) {
        lookup.add_symbol(new FunctionSymbol(func));
    }
    return parser_functions.map(func => make_IRFunction(func, lookup));
}
function make_ir(expressions, expr, sym_lookup) {
    if (expr instanceof _TypedFunction__WEBPACK_IMPORTED_MODULE_0__.BinaryOp) {
        const left = make_ir(expressions, expr.left, sym_lookup);
        const op = expr.op;
        const right = make_ir(expressions, expr.right, sym_lookup);
        expressions.push(new _SSA__WEBPACK_IMPORTED_MODULE_1__.Operation(expressions.length, [left, right], expr.op, (0,_codegen_primitiveTypes__WEBPACK_IMPORTED_MODULE_2__.get_primitive_type)(op.type)));
    }
    else if (expr instanceof _TypedFunction__WEBPACK_IMPORTED_MODULE_0__.IntConstant) {
        expressions.push(new _SSA__WEBPACK_IMPORTED_MODULE_1__.Constant(expressions.length, expr.val, (0,_codegen_primitiveTypes__WEBPACK_IMPORTED_MODULE_2__.get_primitive_type)("i32")));
    }
    else if (expr instanceof _TypedFunction__WEBPACK_IMPORTED_MODULE_0__.Value) {
        const sym = sym_lookup.get_symbol(expr.name);
        if (!sym) {
            throw "can't find symbol: " + expr.name;
        }
        if (sym instanceof ArgSymbol) {
            expressions.push(new _SSA__WEBPACK_IMPORTED_MODULE_1__.ArgIdentifier(expressions.length, sym.arg_idx, (0,_codegen_primitiveTypes__WEBPACK_IMPORTED_MODULE_2__.get_primitive_type)(sym.type)));
        }
        else if (sym instanceof ValueSymbol) {
            expressions.push(new _SSA__WEBPACK_IMPORTED_MODULE_1__.LocalIdentifier(expressions.length, sym.ssa_index, (0,_codegen_primitiveTypes__WEBPACK_IMPORTED_MODULE_2__.get_primitive_type)(sym.type)));
        }
        else {
            throw "unexpected symbol type, expected value";
        }
    }
    else if (expr instanceof _TypedFunction__WEBPACK_IMPORTED_MODULE_0__.FunctionCall) {
        const args = expr.args.map(a => make_ir(expressions, a, sym_lookup));
        expressions.push(new _SSA__WEBPACK_IMPORTED_MODULE_1__.FunctionIdentifier(expressions.length, expr.name, args, (0,_codegen_primitiveTypes__WEBPACK_IMPORTED_MODULE_2__.get_primitive_type)(expr.type)));
    }
    else if (expr instanceof _TypedFunction__WEBPACK_IMPORTED_MODULE_0__.IfExpression) {
        const pred_idx = make_ir(expressions, expr.pred, sym_lookup);
        const then_idx = make_IrBody(expressions, expr.then_body, sym_lookup);
        const else_idx = make_IrBody(expressions, expr.else_body, sym_lookup);
        expressions.push(new _SSA__WEBPACK_IMPORTED_MODULE_1__.IfBranch(expressions.length, pred_idx, then_idx, else_idx, (0,_codegen_primitiveTypes__WEBPACK_IMPORTED_MODULE_2__.get_primitive_type)(expr.type)));
    }
    else {
        throw "unexpected expression type";
    }
    return expressions.length - 1;
}
function make_IrBody(expressions, statements, sym_lookup) {
    const scoped_lookup = new SymbolLookupTable(sym_lookup);
    let idx = 0;
    statements.forEach(s => {
        idx = make_ir(expressions, s.expr, scoped_lookup);
        if (s instanceof _TypedFunction__WEBPACK_IMPORTED_MODULE_0__.LetStatement) {
            scoped_lookup.add_symbol(new ValueSymbol(s.name.name, idx, s.expr.type));
        }
    });
    return idx;
}
function make_IRFunction(func, sym_lookup) {
    const lookup = new SymbolLookupTable(sym_lookup);
    func.args.forEach((arg, idx) => {
        lookup.add_symbol(new ArgSymbol(arg, idx));
    });
    let expressions = [];
    make_IrBody(expressions, func.body, lookup);
    return new IRFunction(func.name, func.args.map(a => a.type), func.type, expressions);
}
class IRFunction {
    constructor(name, args, return_type, SSA) {
        this.name = name;
        this.args = args;
        this.return_type = return_type;
        this.SSA = SSA;
    }
    ;
}


/***/ }),

/***/ "./src/compiler/anylasis/TypedFunction.ts":
/*!************************************************!*\
  !*** ./src/compiler/anylasis/TypedFunction.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ValueIdentifier": () => (/* binding */ ValueIdentifier),
/* harmony export */   "Value": () => (/* binding */ Value),
/* harmony export */   "FunctionIdentifier": () => (/* binding */ FunctionIdentifier),
/* harmony export */   "IntConstant": () => (/* binding */ IntConstant),
/* harmony export */   "BinaryOp": () => (/* binding */ BinaryOp),
/* harmony export */   "FunctionCall": () => (/* binding */ FunctionCall),
/* harmony export */   "IfExpression": () => (/* binding */ IfExpression),
/* harmony export */   "LetStatement": () => (/* binding */ LetStatement),
/* harmony export */   "ReturnStatement": () => (/* binding */ ReturnStatement),
/* harmony export */   "Function": () => (/* binding */ Function),
/* harmony export */   "TypedProgram": () => (/* binding */ TypedProgram)
/* harmony export */ });
/* harmony import */ var _parse_expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse/expression */ "./src/compiler/parse/expression.ts");
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type */ "./src/compiler/type.ts");
/* harmony import */ var _parse_statment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parse/statment */ "./src/compiler/parse/statment.ts");
/* harmony import */ var _Operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Operation */ "./src/compiler/anylasis/Operation.ts");




class ValueIdentifier {
    constructor(type, name) {
        this.type = type;
        this.name = name;
    }
    ;
}
class Value {
    constructor(type, name) {
        this.type = type;
        this.name = name;
    }
    ;
}
class FunctionIdentifier {
    constructor(type, name, args) {
        this.type = type;
        this.name = name;
        this.args = args;
    }
    ;
}
class IntConstant {
    constructor(type, val) {
        this.type = type;
        this.val = val;
    }
    ;
}
class BinaryOp {
    constructor(type, left, op, right) {
        this.type = type;
        this.left = left;
        this.op = op;
        this.right = right;
    }
}
class FunctionCall {
    constructor(type, name, args) {
        this.type = type;
        this.name = name;
        this.args = args;
    }
    ;
}
class IfExpression {
    constructor(type, pred, then_body, else_body) {
        this.type = type;
        this.pred = pred;
        this.then_body = then_body;
        this.else_body = else_body;
    }
    ;
}
class LetStatement {
    constructor(name, expr) {
        this.name = name;
        this.expr = expr;
    }
    ;
}
class ReturnStatement {
    constructor(expr) {
        this.expr = expr;
    }
    ;
}
class Function {
    constructor(name, args, type, body) {
        this.name = name;
        this.args = args;
        this.type = type;
        this.body = body;
    }
}
function get_return_type(statements) {
    if (statements.length == 0)
        throw "no return statment";
    for (const statement of statements) {
        const is_end = (statement == statements[statements.length - 1]);
        const is_return = (statement instanceof ReturnStatement);
        if (is_end != is_return) {
            throw "return statment not at end of function";
        }
    }
    return statements[statements.length - 1].expr.type;
}
class IdentifierLookupTable {
    constructor(parent) {
        this.symbols = new Map();
        this.parent = parent;
    }
    add_symbol(s) {
        if (this.symbols.has(s.name.name))
            throw "already added identifier";
        this.symbols.set(s.name.name, s);
    }
    get_symbol(i) {
        const identifier = this.symbols.get(i.name);
        if (!identifier && this.parent) {
            return this.parent.get_symbol(i);
        }
        else {
            return identifier;
        }
    }
}
function make_typed_expression(expr, lookup) {
    if (expr instanceof _parse_expression__WEBPACK_IMPORTED_MODULE_0__.Constant) {
        return new IntConstant("i32", expr.val);
    }
    else if (expr instanceof _type__WEBPACK_IMPORTED_MODULE_1__.Identifier) {
        const symbol = lookup.get_symbol(expr);
        if (!symbol)
            throw "symbol not found: " + expr.name;
        if (!(symbol instanceof ValueIdentifier))
            throw `symbol ${expr.name} is a ${symbol} expected a ValueIdentifier`;
        return new Value(symbol.type, expr);
    }
    else if (expr instanceof _parse_expression__WEBPACK_IMPORTED_MODULE_0__.FunctionCall) {
        const symbol = lookup.get_symbol(expr.name);
        if (!symbol)
            throw "symbol not found: " + expr.name.name;
        if (!(symbol instanceof FunctionIdentifier))
            throw `symbol ${expr.name} is a ${symbol} expected a "func"`;
        const args = expr.args.map(a => make_typed_expression(a, lookup));
        if (args.length != symbol.args.length) {
            throw `number of arguments to function "${expr.name.name}" don't match the function definition`;
        }
        for (let i = 0; i < args.length; i++) {
            const func_type = symbol.args[i];
            const real_type = args[i].type;
            if (func_type != real_type) {
                throw `argument of function "${expr.name.name}" at position ${i} has wrong type: Got "${real_type}" expected "${func_type}"`;
            }
        }
        return new FunctionCall(symbol.type, expr.name, args);
    }
    else if (expr instanceof _parse_expression__WEBPACK_IMPORTED_MODULE_0__.BinaryOp) {
        const left = make_typed_expression(expr.left, lookup);
        const right = make_typed_expression(expr.right, lookup);
        const op = (0,_Operation__WEBPACK_IMPORTED_MODULE_3__.make_binary_op)(left.type, expr.op, right.type);
        return new BinaryOp(op.type, left, op, right);
    }
    else if (expr instanceof _parse_expression__WEBPACK_IMPORTED_MODULE_0__.IfExpression) {
        const pred = make_typed_expression(expr.pred, lookup);
        const then_body = make_typed_body(expr.then_body, lookup);
        const else_body = make_typed_body(expr.else_body, lookup);
        const then_return = get_return_type(then_body);
        const else_return = get_return_type(else_body);
        if (pred.type != "bool")
            throw `predicate to if statment has type ${pred.type} expected type "bool"`;
        if (then_return != else_return)
            throw `if expression type mismatch: ${then_return} != ${else_return}`;
        return new IfExpression(then_return, pred, then_body, else_body);
    }
    else {
        throw "unexpected expression type";
    }
}
function make_typed_statement(statement, lookup) {
    if (statement instanceof _parse_statment__WEBPACK_IMPORTED_MODULE_2__.LetStatment) {
        const expr = make_typed_expression(statement.expr, lookup);
        const id = new ValueIdentifier(expr.type, statement.name);
        lookup.add_symbol(id);
        return new LetStatement(id, expr);
    }
    else if (statement instanceof _parse_statment__WEBPACK_IMPORTED_MODULE_2__.ReturnStatement) {
        return new ReturnStatement(make_typed_expression(statement.expr, lookup));
    }
    else {
        throw "unexpected statement type";
    }
}
function make_typed_body(statements, lookup) {
    let scoped_lookup = new IdentifierLookupTable(lookup);
    return statements.map(s => make_typed_statement(s, scoped_lookup));
}
function make_typed_function(func, func_lookup) {
    const name = func.name;
    const args = func.args;
    const type = func.return_type;
    const lookup = new IdentifierLookupTable(func_lookup);
    for (const arg of func.args) {
        lookup.add_symbol(new ValueIdentifier(arg.type, arg.name));
    }
    const body = make_typed_body(func.body, lookup);
    return new Function(name, args, type, body);
}
class TypedProgram {
    constructor(funcs, builtins) {
        let lookup = new IdentifierLookupTable(null);
        for (const func of builtins) {
            lookup.add_symbol(new FunctionIdentifier(func.type, func.name, func.args));
        }
        for (const func of funcs) {
            lookup.add_symbol(new FunctionIdentifier(func.return_type, func.name, func.args.map(arg => arg.type)));
        }
        this.funcs = funcs.map(f => make_typed_function(f, lookup));
        this.func_map = new Map();
        for (const func of this.funcs) {
            this.func_map.set(func.name.name, func);
        }
    }
}


/***/ }),

/***/ "./src/compiler/codegen/codegen.ts":
/*!*****************************************!*\
  !*** ./src/compiler/codegen/codegen.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WasmFunction": () => (/* binding */ WasmFunction),
/* harmony export */   "WasmOutput": () => (/* binding */ WasmOutput)
/* harmony export */ });
/* harmony import */ var _leb_leb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./leb/leb */ "./src/compiler/codegen/leb/leb.ts");
/* harmony import */ var _anylasis_SSA__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../anylasis/SSA */ "./src/compiler/anylasis/SSA.ts");
/* harmony import */ var _instructions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../instructions */ "./src/compiler/instructions.ts");
/* harmony import */ var _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./primitiveTypes */ "./src/compiler/codegen/primitiveTypes.ts");




function encodeF32(f) {
    return new Uint8Array(new Float32Array([f]).buffer);
}
function encodeF64(f) {
    return new Uint8Array(new Float64Array([f]).buffer);
}
function merge_buffers(buffers) {
    const length = buffers.reduce((a, b) => a + b.byteLength, 0);
    const merged = new Uint8Array(length);
    let idx = 0;
    for (const buffer of buffers) {
        merged.set(buffer, idx);
        idx += buffer.byteLength;
    }
    return merged;
}
function make_lenth_encoding(buffers) {
    const length = buffers.reduce((a, b) => a + b.byteLength, 0);
    return merge_buffers([(0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(length), ...buffers]);
}
function make_vec(buffers) {
    return merge_buffers([(0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(buffers.length), ...buffers]);
}
function make_sized_vec(buffers) {
    const length_buffers = buffers.reduce((a, b) => a + b.byteLength, 0);
    const count = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(buffers.length);
    const length = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(length_buffers + count.length);
    return merge_buffers([length, count, ...buffers]);
}
function make_constant(constant) {
    switch (constant.type) {
        case _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.i32:
            return [_instructions__WEBPACK_IMPORTED_MODULE_2__.i32["const"], (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(constant.val)];
        case _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.f32:
            return [_instructions__WEBPACK_IMPORTED_MODULE_2__.f32["const"], encodeF32(constant.val)];
        case _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.i64:
            return [_instructions__WEBPACK_IMPORTED_MODULE_2__.i64["const"], (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt64)(constant.val)];
        case _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.f64:
            return [_instructions__WEBPACK_IMPORTED_MODULE_2__.f64["const"], encodeF64(constant.val)];
        default:
            throw "no known constant scheme for type: " + constant.type;
    }
}
function gen_if(code, expr, function_map, depth) {
    return [
        ...gen_code(code, expr.pred_idx, function_map, depth),
        _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.branch_if_else, _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.i32,
        ...gen_code(code, expr.then_idx, function_map, depth + 1),
        _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.branch_else,
        ...gen_code(code, expr.else_idx, function_map, depth + 1),
        _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.branch_end,
    ];
}
function gen_code(code, idx, function_map, depth) {
    const expr = code[idx];
    if (expr instanceof _anylasis_SSA__WEBPACK_IMPORTED_MODULE_1__.Constant) {
        return make_constant(expr);
    }
    else if (expr instanceof _anylasis_SSA__WEBPACK_IMPORTED_MODULE_1__.ArgIdentifier) {
        return [_instructions__WEBPACK_IMPORTED_MODULE_2__.local.get, (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(expr.src_idx)];
    }
    else if (expr instanceof _anylasis_SSA__WEBPACK_IMPORTED_MODULE_1__.LocalIdentifier) {
        return gen_code(code, expr.src_idx, function_map, depth);
    }
    else if (expr instanceof _anylasis_SSA__WEBPACK_IMPORTED_MODULE_1__.FunctionIdentifier) {
        return [...expr.args.flatMap(n => gen_code(code, n, function_map, depth)), _instructions__WEBPACK_IMPORTED_MODULE_2__.call, (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(function_map.get(expr.func.name))];
    }
    else if (expr instanceof _anylasis_SSA__WEBPACK_IMPORTED_MODULE_1__.Operation) {
        return [...expr.sources.flatMap(s => gen_code(code, s, function_map, depth)), expr.op.code];
    }
    else if (expr instanceof _anylasis_SSA__WEBPACK_IMPORTED_MODULE_1__.IfBranch) {
        return gen_if(code, expr, function_map, depth);
    }
    else {
        throw "unexpected ssa expression";
    }
}
function get_primitve_type_or_void(t) {
    if (t == "void")
        return 0;
    return (0,_primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.get_primitive_type)(t);
}
function make_wasm_function(func, function_map) {
    let code = gen_code(func.SSA, func.SSA.length - 1, function_map, 0);
    code.push(_instructions__WEBPACK_IMPORTED_MODULE_2__.end_func);
    return new WasmFunction(func.name.name, func.args.map(_primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.get_primitive_type), get_primitve_type_or_void(func.return_type), merge_buffers(code), []);
}
class WasmFunction {
    constructor(name, inputs, output, code, locals) {
        this.name = name;
        this.inputs = inputs;
        this.output = output;
        this.code = code;
        this.locals = locals;
    }
    encodeType() {
        const func_type = _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.func;
        const num_inputs = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(this.inputs.length);
        const num_outputs = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)((this.output != 0) ? 1 : 0);
        const output = this.output || new Uint8Array(0);
        return merge_buffers([func_type, num_inputs, ...this.inputs, num_outputs, output]);
    }
    encodeCode() {
        const local_declarations = make_vec(this.locals);
        return make_lenth_encoding([local_declarations, this.code]);
    }
}
class TypeSection {
    constructor(functions) {
        this.functions = functions;
    }
    encode() {
        const id = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(1);
        const type_encodings = this.functions.map(f => f.encodeType());
        return merge_buffers([id, make_sized_vec(type_encodings)]);
    }
}
class FunctionSection {
    constructor(functions) {
        this.functions = functions;
    }
    encode() {
        const id = _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.function_section;
        const index_functions = this.functions.map((_, i) => (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(i));
        return merge_buffers([id, make_sized_vec(index_functions)]);
    }
}
class FunctionExport {
    constructor(func, exportIndex) {
        this.func = func;
        this.exportIndex = exportIndex;
    }
    encode() {
        const encoder = new TextEncoder();
        const name = encoder.encode(this.func.name);
        const name_size = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(name.length);
        const index = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(this.exportIndex);
        return merge_buffers([name_size, name, _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.export_func, index]);
    }
}
class MemoryExport {
    constructor(name) {
        this.name = name;
    }
    encode() {
        const encoder = new TextEncoder();
        const name = encoder.encode(this.name);
        const name_size = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(name.length);
        const index = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(0);
        return merge_buffers([name_size, name, _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.export_mem, index]);
    }
}
class ExportSection {
    constructor(exports) {
        this.exports = exports;
    }
    encode() {
        const id = _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.export_section;
        const exports = this.exports.map(e => e.encode());
        return merge_buffers([id, make_sized_vec(exports)]);
    }
}
class CodeSection {
    constructor(functions) {
        this.functions = functions;
    }
    encode() {
        const id = _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.code_section;
        const funcs = this.functions.map(f => f.encodeCode());
        return merge_buffers([id, make_sized_vec(funcs)]);
    }
}
class Memory {
    constructor(min, max) {
        this.min = min;
        this.max = max;
    }
    encode() {
        if (this.max != undefined) {
            const min = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(this.min);
            const max = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(this.max);
            return merge_buffers([_primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.limit_min_max, min, max]);
        }
        else {
            const min = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(this.min);
            return merge_buffers([_primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.limit_min, min]);
        }
    }
}
class MemorySection {
    encode() {
        const id = _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.memory_section;
        const mem = new Memory(1, undefined).encode();
        return merge_buffers([id, make_sized_vec([mem])]);
    }
}
class DataSection {
    constructor(static_data) {
        this.static_data = static_data;
    }
    encode() {
        const id = _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.data_section;
        const len = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(this.static_data.length);
        return merge_buffers([id, len, this.static_data]);
    }
}
class DataCountSection {
    constructor(data_count) {
        this.data_count = data_count;
    }
    encode() {
        const id = _primitiveTypes__WEBPACK_IMPORTED_MODULE_3__.T.data_count_section;
        const data = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(this.data_count);
        const len = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.encodeInt32)(data.length);
        return merge_buffers([id, len, data]);
    }
}
class WasmOutput {
    constructor(funcs, builtins, data_count, static_data) {
        this.funcs = funcs;
        this.builtins = builtins;
        this.data_count = data_count;
        this.static_data = static_data;
    }
    encode() {
        const encoder = new TextEncoder();
        const header = encoder.encode("\0asm");
        const binary_version = new Uint8Array(new Uint32Array([1]).buffer);
        let func_map = new Map();
        this.builtins.forEach((f, i) => func_map.set(f.name.name, i));
        this.funcs.forEach((f, i) => func_map.set(f.name.name, i + this.builtins.length));
        const funcs = [...this.builtins.map(b => b.wasm), ...this.funcs.map(f => make_wasm_function(f, func_map))];
        const type_data = new TypeSection(funcs).encode();
        const function_data = new FunctionSection(funcs).encode();
        const export_data = new ExportSection([...funcs.map((f, i) => new FunctionExport(f, i)), new MemoryExport("memory")]).encode();
        const code_data = new CodeSection(funcs).encode();
        const memory_data = new MemorySection().encode();
        const static_data = new DataSection(this.static_data).encode();
        const data_count_data = new DataCountSection(this.data_count).encode();
        return merge_buffers([header, binary_version, type_data, function_data, memory_data, export_data, data_count_data, code_data, static_data]);
    }
}


/***/ }),

/***/ "./src/compiler/codegen/decompile.ts":
/*!*******************************************!*\
  !*** ./src/compiler/codegen/decompile.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BuiltinFunction": () => (/* binding */ BuiltinFunction),
/* harmony export */   "decompile": () => (/* binding */ decompile)
/* harmony export */ });
/* harmony import */ var _leb_leb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./leb/leb */ "./src/compiler/codegen/leb/leb.ts");
/* harmony import */ var _codegen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codegen */ "./src/compiler/codegen/codegen.ts");
/* harmony import */ var _primitiveTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./primitiveTypes */ "./src/compiler/codegen/primitiveTypes.ts");
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../type */ "./src/compiler/type.ts");




class BuiltinFunction {
    constructor(name, type, args, wasm) {
        this.name = name;
        this.type = type;
        this.args = args;
        this.wasm = wasm;
    }
}
const builtins = [
    { name: "stack_alloc", args: ["i32"], type: "i32" },
    { name: "reset_alloc", args: [], type: "void" },
    { name: "square", args: ["i32"], type: "i32" },
];
async function decompile(path) {
    const bin = await (await fetch(path)).arrayBuffer();
    const arr = new Uint8Array(bin);
    const encoder = new TextEncoder();
    const header = encoder.encode("\0asm");
    const { value: header_match, nextIndex: version_idx } = match(arr, 0, header);
    if (!header_match)
        throw "bad magic number";
    const wasm_version = new Uint32Array(arr.buffer, 4, 4)[0];
    const { value: types, nextIndex: import_idx } = decompile_types(arr, 8);
    const { nextIndex: function_idx } = decompile_imports(arr, import_idx);
    const { value: func_ids, nextIndex: datacount_idx } = decompile_functions(arr, function_idx);
    const { datacount, nextIndex: code_idx } = decompile_datacount(arr, datacount_idx);
    const { functions, nextIndex: data_idx } = decompile_code(arr, code_idx);
    const { value: data, nextIndex: _ } = decompile_data(arr, data_idx);
    let wasm_functions = [];
    if (func_ids.length != functions.length) {
        throw "mismatched function ids";
    }
    if (func_ids.length != builtins.length) {
        throw "wrong number of function names";
    }
    for (let i = 0; i < func_ids.length; i++) {
        const args = types[func_ids[i]].args;
        const type = types[func_ids[i]].type;
        const wasm_func = new _codegen__WEBPACK_IMPORTED_MODULE_1__.WasmFunction(builtins[i].name, args, type, functions[i].code, functions[i].locals);
        wasm_functions.push(new BuiltinFunction(new _type__WEBPACK_IMPORTED_MODULE_3__.Identifier(builtins[i].name), builtins[i].type, builtins[i].args, wasm_func));
    }
    return { functions: wasm_functions, data_count: datacount, static_data: data };
}
class FuncType {
    constructor(args, type) {
        this.args = args;
        this.type = type;
    }
    ;
}
function decompile_data(arr, start_idx) {
    const { value: id, nextIndex: size_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, start_idx);
    if (id != 11)
        throw "not a data section";
    const { value: section_size, nextIndex: data_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, size_idx);
    return { value: arr.subarray(data_idx, data_idx + section_size), nextIndex: data_idx + section_size };
}
function match(arr, start_idx, dest) {
    if (arr.length < dest.length + start_idx)
        return { value: false, nextIndex: start_idx + dest.length };
    for (let i = 0; i < dest.length; i++) {
        if (dest[i] != arr[i + start_idx])
            return { value: false, nextIndex: start_idx + dest.length };
    }
    return { value: true, nextIndex: start_idx + dest.length };
}
function decompile_locals(arr, start_idx) {
    const { value: count, nextIndex: locals_start } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, start_idx);
    let locals = [];
    for (let i = 0; i < count; i++) {
        locals.push(new Uint8Array([arr[locals_start + i]]));
    }
    return { locals, nextIndex: locals_start + count };
}
function decompile_code(arr, start_idx) {
    const { value: id, nextIndex: size_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, start_idx);
    if (id != 10)
        throw "not a code section";
    const { value: section_size, nextIndex: code_vec_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, size_idx);
    const { value: code_count, nextIndex: vec_start_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, code_vec_idx);
    let funcs = [];
    let next_vec_idx = vec_start_idx;
    for (let i = 0; i < code_count; i++) {
        const { value: code_len, nextIndex: locals_start } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeUInt32)(arr, next_vec_idx);
        const { locals: locals, nextIndex: code_start } = decompile_locals(arr, locals_start);
        funcs.push({ locals, code: arr.subarray(code_start, code_start + code_len - locals.length - 1) });
        next_vec_idx = locals_start + code_len;
    }
    return { functions: funcs, nextIndex: section_size + code_vec_idx };
}
function decompile_datacount(arr, start_idx) {
    const { value: id, nextIndex: size_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, start_idx);
    if (id != 12)
        return { datacount: -1, nextIndex: start_idx };
    const { value: section_size, nextIndex: datacount_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, size_idx);
    const { value: datacount, nextIndex: end_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, datacount_idx);
    return { datacount: datacount, nextIndex: end_idx };
}
function decompile_imports(arr, start_idx) {
    const { value: id, nextIndex: length_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, start_idx);
    if (id != 2)
        throw "not a import section";
    const { value: length, nextIndex: idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, length_idx);
    const end_idx = length + idx;
    return { nextIndex: end_idx };
}
function decompile_functions(arr, start_idx) {
    const { value: id, nextIndex: length_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, start_idx);
    if (id != 3)
        throw "not a function section";
    const { value: length, nextIndex: idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, length_idx);
    const end_idx = length + idx;
    const { value: func_count, nextIndex: vec_start_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, idx);
    let func_ids = [];
    let next_vec_idx = vec_start_idx;
    for (let i = 0; i < func_count; i++) {
        const { value: id, nextIndex: next_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeUInt32)(arr, next_vec_idx);
        next_vec_idx = next_idx;
        func_ids.push(id);
    }
    return { value: func_ids, nextIndex: end_idx };
}
function decompile_types(arr, start_idx) {
    const { value: id, nextIndex: length_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, start_idx);
    if (id != 1)
        throw "not a type section";
    const { value: length, nextIndex: idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, length_idx);
    const end_idx = idx + length;
    const { value: type_count, nextIndex: vec_start_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, idx);
    let types = [];
    let next_vec_idx = vec_start_idx;
    for (let i = 0; i < type_count; i++) {
        const { value: type, nextIndex: next_idx } = decompile_type(arr, next_vec_idx);
        next_vec_idx = next_idx;
        types.push(type);
    }
    return { value: types, nextIndex: end_idx };
}
function decode_type(arr, start_idx) {
    return new Uint8Array([arr[start_idx]]);
}
function decompile_type(arr, start_idx) {
    const { value: is_func, nextIndex: inputs_idx } = match(arr, start_idx, _primitiveTypes__WEBPACK_IMPORTED_MODULE_2__.T.func);
    if (!is_func)
        throw "only function types allowed";
    const { value: num_inputs, nextIndex: input_vec_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, inputs_idx);
    let args = [];
    for (let i = 0; i < num_inputs; i++) {
        args.push(decode_type(arr, input_vec_idx + i));
    }
    const { value: num_outpus, nextIndex: output_vec_idx } = (0,_leb_leb__WEBPACK_IMPORTED_MODULE_0__.decodeInt32)(arr, input_vec_idx + num_inputs);
    if (num_outpus > 1)
        throw "too many outputs";
    let return_types = [];
    for (let i = 0; i < num_outpus; i++) {
        return_types.push(decode_type(arr, output_vec_idx + i));
    }
    let return_type = return_types.length ? return_types[0] : new Uint8Array(0);
    return { value: new FuncType(args, return_type), nextIndex: output_vec_idx + num_outpus };
}


/***/ }),

/***/ "./src/compiler/codegen/leb/leb.ts":
/*!*****************************************!*\
  !*** ./src/compiler/codegen/leb/leb.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "encodeInt32": () => (/* binding */ encodeInt32),
/* harmony export */   "decodeInt32": () => (/* binding */ decodeInt32),
/* harmony export */   "encodeInt64": () => (/* binding */ encodeInt64),
/* harmony export */   "decodeInt64": () => (/* binding */ decodeInt64),
/* harmony export */   "encodeUInt32": () => (/* binding */ encodeUInt32),
/* harmony export */   "decodeUInt32": () => (/* binding */ decodeUInt32),
/* harmony export */   "encodeUInt64": () => (/* binding */ encodeUInt64),
/* harmony export */   "decodeUInt64": () => (/* binding */ decodeUInt64)
/* harmony export */ });

var bits = __webpack_require__(/*! ./bits */ "./src/compiler/codegen/leb/bits.js");
var bufs = __webpack_require__(/*! ./bufs */ "./src/compiler/codegen/leb/bufs.js");
var MIN_INT32 = -0x80000000;
var MAX_INT32 = 0x7fffffff;
var MAX_UINT32 = 0xffffffff;
var MIN_INT64 = -0x8000000000000000;
var MAX_INT64 = 0x7ffffffffffffc00;
var MAX_UINT64 = 0xfffffffffffff800;
function signedBitCount(buffer) {
    return bits.highOrder(bits.getSign(buffer) ^ 1, buffer) + 2;
}
function unsignedBitCount(buffer) {
    var result = bits.highOrder(1, buffer) + 1;
    return result ? result : 1;
}
function encodeBufferCommon(buffer, signed) {
    var signBit;
    var bitCount;
    if (signed) {
        signBit = bits.getSign(buffer);
        bitCount = signedBitCount(buffer);
    }
    else {
        signBit = 0;
        bitCount = unsignedBitCount(buffer);
    }
    var byteCount = Math.ceil(bitCount / 7);
    var result = bufs.alloc(byteCount);
    for (var i = 0; i < byteCount; i++) {
        var payload = bits.extract(buffer, i * 7, 7, signBit);
        result[i] = payload | 0x80;
    }
    result[byteCount - 1] &= 0x7f;
    return result;
}
function encodedLength(encodedBuffer, index) {
    var result = 0;
    while (encodedBuffer[index + result] >= 0x80) {
        result++;
    }
    result++;
    if ((index + result) > encodedBuffer.length) {
        throw new Error("Bogus encoding");
    }
    return result;
}
function decodeBufferCommon(encodedBuffer, index, signed) {
    index = (index === undefined) ? 0 : index;
    var length = encodedLength(encodedBuffer, index);
    var bitLength = length * 7;
    var byteLength = Math.ceil(bitLength / 8);
    var result = bufs.alloc(byteLength);
    var outIndex = 0;
    while (length > 0) {
        bits.inject(result, outIndex, 7, encodedBuffer[index]);
        outIndex += 7;
        index++;
        length--;
    }
    var signBit;
    var signByte;
    if (signed) {
        var lastByte = result[byteLength - 1];
        var endBit = outIndex % 8;
        if (endBit !== 0) {
            var shift = 32 - endBit;
            lastByte = result[byteLength - 1] = ((lastByte << shift) >> shift) & 0xff;
        }
        signBit = lastByte >> 7;
        signByte = signBit * 0xff;
    }
    else {
        signBit = 0;
        signByte = 0;
    }
    while ((byteLength > 1) &&
        (result[byteLength - 1] === signByte) &&
        (!signed || ((result[byteLength - 2] >> 7) === signBit))) {
        byteLength--;
    }
    result = bufs.resize(result, byteLength);
    return { value: result, nextIndex: index };
}
function encodeIntBuffer(buffer) {
    return encodeBufferCommon(buffer, true);
}
function decodeIntBuffer(encodedBuffer, index) {
    return decodeBufferCommon(encodedBuffer, index, true);
}
function encodeInt32(num) {
    if (num >= 0 && num < 128)
        return new Uint8Array([num]);
    const buf = new Uint8Array(new Int32Array([num]).buffer);
    var result = encodeIntBuffer(buf);
    return result;
}
function decodeInt32(encodedBuffer, index) {
    var result = decodeIntBuffer(encodedBuffer, index);
    var parsed = bufs.readInt(result.value);
    var value = parsed.value;
    bufs.free(result.value);
    if ((value < MIN_INT32) || (value > MAX_INT32)) {
        throw new Error("Result out of range");
    }
    return { value: value, nextIndex: result.nextIndex };
}
function encodeInt64(num) {
    const buf = new Uint8Array(new BigInt64Array([BigInt(num)]).buffer);
    var result = encodeIntBuffer(buf);
    return result;
}
function decodeInt64(encodedBuffer, index) {
    var result = decodeIntBuffer(encodedBuffer, index);
    var parsed = bufs.readInt(result.value);
    var value = parsed.value;
    bufs.free(result.value);
    if ((value < MIN_INT64) || (value > MAX_INT64)) {
        throw new Error("Result out of range");
    }
    return { value: value, nextIndex: result.nextIndex, lossy: parsed.lossy };
}
function encodeUIntBuffer(buffer) {
    return encodeBufferCommon(buffer, false);
}
function decodeUIntBuffer(encodedBuffer, index) {
    return decodeBufferCommon(encodedBuffer, index, false);
}
function encodeUInt32(num) {
    const buf = new Uint8Array(new Uint32Array([num]).buffer);
    var result = encodeUIntBuffer(buf);
    bufs.free(buf);
    return result;
}
function decodeUInt32(encodedBuffer, index) {
    var result = decodeUIntBuffer(encodedBuffer, index);
    var parsed = bufs.readUInt(result.value);
    var value = parsed.value;
    bufs.free(result.value);
    if (value > MAX_UINT32) {
        throw new Error("Result out of range");
    }
    return { value: value, nextIndex: result.nextIndex };
}
function encodeUInt64(num) {
    const buf = new Uint8Array(new BigUint64Array([BigInt(num)]).buffer);
    var result = encodeUIntBuffer(buf);
    return result;
}
function decodeUInt64(encodedBuffer, index) {
    var result = decodeUIntBuffer(encodedBuffer, index);
    var parsed = bufs.readUInt(result.value);
    var value = parsed.value;
    bufs.free(result.value);
    if (value > MAX_UINT64) {
        throw new Error("Result out of range");
    }
    return { value: value, nextIndex: result.nextIndex, lossy: parsed.lossy };
}


/***/ }),

/***/ "./src/compiler/codegen/primitiveTypes.ts":
/*!************************************************!*\
  !*** ./src/compiler/codegen/primitiveTypes.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": () => (/* binding */ T),
/* harmony export */   "get_primitive_type": () => (/* binding */ get_primitive_type)
/* harmony export */ });
var T;
(function (T) {
    T.type_section = new Uint8Array([0x01]);
    T.import_section = new Uint8Array([0x02]);
    T.function_section = new Uint8Array([0x03]);
    T.table_section = new Uint8Array([0x04]);
    T.memory_section = new Uint8Array([0x05]);
    T.global_section = new Uint8Array([0x06]);
    T.export_section = new Uint8Array([0x07]);
    T.start_section = new Uint8Array([0x08]);
    T.element_section = new Uint8Array([0x09]);
    T.code_section = new Uint8Array([0x0a]);
    T.data_section = new Uint8Array([0x0b]);
    T.data_count_section = new Uint8Array([0x0c]);
    T.func = new Uint8Array([0x60]);
    T.i32 = new Uint8Array([0x7f]);
    T.i64 = new Uint8Array([0x7e]);
    T.f32 = new Uint8Array([0x7d]);
    T.f64 = new Uint8Array([0x7c]);
    T.export_func = new Uint8Array([0x00]);
    T.export_table = new Uint8Array([0x01]);
    T.export_mem = new Uint8Array([0x02]);
    T.export_global = new Uint8Array([0x03]);
    T.limit_min = new Uint8Array([0x00]);
    T.limit_min_max = new Uint8Array([0x01]);
    T.branch_if_else = new Uint8Array([0x04]);
    T.branch_else = new Uint8Array([0x05]);
    T.branch_end = new Uint8Array([0x0B]);
})(T || (T = {}));
function get_primitive_type(t) {
    if (t == "void")
        throw "void has no primitive type";
    return {
        "i32": T.i32,
        "i64": T.i64,
        "f32": T.f32,
        "f64": T.f64,
        "bool": T.i32,
    }[t];
}


/***/ }),

/***/ "./src/compiler/compiler.ts":
/*!**********************************!*\
  !*** ./src/compiler/compiler.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Compiler": () => (/* binding */ Compiler)
/* harmony export */ });
/* harmony import */ var _parse_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse/parser */ "./src/compiler/parse/parser.ts");
/* harmony import */ var _codegen_codegen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codegen/codegen */ "./src/compiler/codegen/codegen.ts");
/* harmony import */ var _anylasis_IRRepresentation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./anylasis/IRRepresentation */ "./src/compiler/anylasis/IRRepresentation.ts");
/* harmony import */ var _anylasis_TypedFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./anylasis/TypedFunction */ "./src/compiler/anylasis/TypedFunction.ts");




class Compiler {
    constructor(builtins, data_count, static_data) {
        this.builtins = builtins;
        this.data_count = data_count;
        this.static_data = static_data;
    }
    ;
    compile(input) {
        const parsed = new _parse_parser__WEBPACK_IMPORTED_MODULE_0__.Parser().parse(input);
        const typed = new _anylasis_TypedFunction__WEBPACK_IMPORTED_MODULE_3__.TypedProgram(parsed, this.builtins);
        const IR = new _anylasis_IRRepresentation__WEBPACK_IMPORTED_MODULE_2__.IRRepresentation(typed);
        const output = new _codegen_codegen__WEBPACK_IMPORTED_MODULE_1__.WasmOutput(IR.funcs, this.builtins, this.data_count, this.static_data).encode();
        return output;
    }
}


/***/ }),

/***/ "./src/compiler/instructions.ts":
/*!**************************************!*\
  !*** ./src/compiler/instructions.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i32": () => (/* binding */ i32),
/* harmony export */   "i64": () => (/* binding */ i64),
/* harmony export */   "f32": () => (/* binding */ f32),
/* harmony export */   "f64": () => (/* binding */ f64),
/* harmony export */   "memory": () => (/* binding */ memory),
/* harmony export */   "local": () => (/* binding */ local),
/* harmony export */   "global": () => (/* binding */ global),
/* harmony export */   "call": () => (/* binding */ call),
/* harmony export */   "call_inderect": () => (/* binding */ call_inderect),
/* harmony export */   "drop": () => (/* binding */ drop),
/* harmony export */   "select": () => (/* binding */ select),
/* harmony export */   "_return": () => (/* binding */ _return),
/* harmony export */   "end_func": () => (/* binding */ end_func)
/* harmony export */ });
const i32 = {
    const: new Uint8Array([0x41]),
    load: new Uint8Array([0x28]),
    store: new Uint8Array([0x36]),
    eqz: new Uint8Array([0x45]),
    eq: new Uint8Array([0x46]),
    ne: new Uint8Array([0x47]),
    lt_s: new Uint8Array([0x48]),
    lt_u: new Uint8Array([0x49]),
    gt_s: new Uint8Array([0x4A]),
    gt_u: new Uint8Array([0x4B]),
    le_s: new Uint8Array([0x4C]),
    le_u: new Uint8Array([0x4D]),
    ge_s: new Uint8Array([0x4E]),
    ge_u: new Uint8Array([0x4F]),
    clz: new Uint8Array([0x67]),
    ctz: new Uint8Array([0x68]),
    popcnt: new Uint8Array([0x69]),
    add: new Uint8Array([0x6A]),
    sub: new Uint8Array([0x6B]),
    mul: new Uint8Array([0x6C]),
    div_s: new Uint8Array([0x6D]),
    div_u: new Uint8Array([0x6E]),
    rem_s: new Uint8Array([0x6F]),
    rem_u: new Uint8Array([0x70]),
    and: new Uint8Array([0x71]),
    or: new Uint8Array([0x72]),
    xor: new Uint8Array([0x73]),
    shl: new Uint8Array([0x74]),
    shr_s: new Uint8Array([0x75]),
    shr_u: new Uint8Array([0x76]),
    rotl: new Uint8Array([0x77]),
    rotr: new Uint8Array([0x78]),
};
const i64 = {
    const: new Uint8Array([0x41]),
    load: new Uint8Array([0x28]),
    store: new Uint8Array([0x36]),
    eqz: new Uint8Array([0x50]),
    eq: new Uint8Array([0x51]),
    ne: new Uint8Array([0x52]),
    lt_s: new Uint8Array([0x53]),
    lt_u: new Uint8Array([0x54]),
    gt_s: new Uint8Array([0x55]),
    gt_u: new Uint8Array([0x56]),
    le_s: new Uint8Array([0x57]),
    le_u: new Uint8Array([0x58]),
    ge_s: new Uint8Array([0x59]),
    ge_u: new Uint8Array([0x5A]),
    clz: new Uint8Array([0x79]),
    ctz: new Uint8Array([0x7A]),
    popcnt: new Uint8Array([0x7B]),
    add: new Uint8Array([0x7C]),
    sub: new Uint8Array([0x7D]),
    mul: new Uint8Array([0x7E]),
    div_s: new Uint8Array([0x7F]),
    div_u: new Uint8Array([0x80]),
    rem_s: new Uint8Array([0x81]),
    rem_u: new Uint8Array([0x82]),
    and: new Uint8Array([0x83]),
    or: new Uint8Array([0x84]),
    xor: new Uint8Array([0x85]),
    shl: new Uint8Array([0x86]),
    shr_s: new Uint8Array([0x87]),
    shr_u: new Uint8Array([0x88]),
    rotl: new Uint8Array([0x89]),
    rotr: new Uint8Array([0x8A]),
};
const f32 = {
    const: new Uint8Array([0x43]),
    eq: new Uint8Array([0x5B]),
    ne: new Uint8Array([0x5C]),
    lt: new Uint8Array([0x5D]),
    gt: new Uint8Array([0x5E]),
    le: new Uint8Array([0x5F]),
    ge: new Uint8Array([0x60]),
    abs: new Uint8Array([0x8B]),
    neg: new Uint8Array([0x8C]),
    ceil: new Uint8Array([0x8D]),
    floor: new Uint8Array([0x8E]),
    trunc: new Uint8Array([0x8F]),
    nearest: new Uint8Array([0x90]),
    sqrt: new Uint8Array([0x91]),
    add: new Uint8Array([0x92]),
    sub: new Uint8Array([0x93]),
    mul: new Uint8Array([0x94]),
    div: new Uint8Array([0x95]),
    min: new Uint8Array([0x96]),
    max: new Uint8Array([0x97]),
    copysign: new Uint8Array([0x98]),
};
const f64 = {
    const: new Uint8Array([0x44]),
    eq: new Uint8Array([0x61]),
    ne: new Uint8Array([0x62]),
    lt: new Uint8Array([0x63]),
    gt: new Uint8Array([0x64]),
    le: new Uint8Array([0x65]),
    ge: new Uint8Array([0x66]),
    abs: new Uint8Array([0x99]),
    neg: new Uint8Array([0x9A]),
    ceil: new Uint8Array([0x9B]),
    floor: new Uint8Array([0x9C]),
    trunc: new Uint8Array([0x9D]),
    nearest: new Uint8Array([0x9E]),
    sqrt: new Uint8Array([0x9F]),
    add: new Uint8Array([0xA0]),
    sub: new Uint8Array([0xA1]),
    mul: new Uint8Array([0xA2]),
    div: new Uint8Array([0xA3]),
    min: new Uint8Array([0xA4]),
    max: new Uint8Array([0xA5]),
    copysign: new Uint8Array([0xA6]),
};
const memory = {
    grow: new Uint8Array([0x40, 0x00]),
    size: new Uint8Array([0x3f, 0x00])
};
const local = {
    get: new Uint8Array([0x20]),
    set: new Uint8Array([0x21]),
    tee: new Uint8Array([0x22])
};
const global = {
    get: new Uint8Array([0x23]),
    set: new Uint8Array([0x24])
};
const call = new Uint8Array([0x10]);
const call_inderect = new Uint8Array([0x11]);
const drop = new Uint8Array([0x1A]);
const select = new Uint8Array([0x1B]);
const _return = new Uint8Array([0x0f]);
const end_func = new Uint8Array([0x0b]);


/***/ }),

/***/ "./src/compiler/parse/expression.ts":
/*!******************************************!*\
  !*** ./src/compiler/parse/expression.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Constant": () => (/* binding */ Constant),
/* harmony export */   "OP": () => (/* binding */ OP),
/* harmony export */   "BinaryOp": () => (/* binding */ BinaryOp),
/* harmony export */   "FunctionCall": () => (/* binding */ FunctionCall),
/* harmony export */   "IfExpression": () => (/* binding */ IfExpression),
/* harmony export */   "parse_function": () => (/* binding */ parse_function),
/* harmony export */   "parse_expression": () => (/* binding */ parse_expression)
/* harmony export */ });
/* harmony import */ var _statment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statment */ "./src/compiler/parse/statment.ts");
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type */ "./src/compiler/type.ts");
/* harmony import */ var _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse/LayoutLangParser */ "./src/compiler/parse/parse/LayoutLangParser.js");



class Constant {
    constructor(val) {
        this.val = val;
    }
}
var OP;
(function (OP) {
    OP.operations = ["*", "/", "+", "-", "%", "<", ">", "<=", ">=", "&&", "||", "==", "!="];
    function from(str) {
        if (!OP.operations.find(s => s == str)) {
            throw `operation ${str} not recognized`;
        }
        return str;
    }
    OP.from = from;
})(OP || (OP = {}));
class BinaryOp {
    constructor(left, op, right) {
        this.left = left;
        this.op = op;
        this.right = right;
    }
}
class FunctionCall {
    constructor(name, args) {
        this.name = name;
        this.args = args;
    }
    ;
}
class IfExpression {
    constructor(pred, then_body, else_body) {
        this.pred = pred;
        this.then_body = then_body;
        this.else_body = else_body;
    }
    ;
}
function parse_arg(ctx) {
    return new _type__WEBPACK_IMPORTED_MODULE_1__.Argument(new _type__WEBPACK_IMPORTED_MODULE_1__.Identifier(ctx.name.text), ctx.type_decl.getText());
}
function parse_body(ctx) {
    if (!(ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].FuncBodyContext))
        throw "Expected FunctionBody";
    return ctx.statements.map(_statment__WEBPACK_IMPORTED_MODULE_0__.parse_statement);
}
function parse_args(ctx) {
    if (!(ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].ArgsContext))
        throw "Expected Args";
    return ctx.argList.map(parse_arg);
}
function parse_function(ctx) {
    if (!(ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].FuncContext))
        throw "Expected FunctionContext";
    return new _statment__WEBPACK_IMPORTED_MODULE_0__.ParserFunction(new _type__WEBPACK_IMPORTED_MODULE_1__.Identifier(ctx.name.text), parse_args(ctx.arguments), ctx.type_decl.getText(), parse_body(ctx.func_body));
}
function parse_expression(ctx) {
    if (ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].IntegerContext) {
        return new Constant(parseInt(ctx.getText()));
    }
    else if (ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].IdentifierContext) {
        return new _type__WEBPACK_IMPORTED_MODULE_1__.Identifier(ctx.getText());
    }
    else if (ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].ParenExprContext) {
        return parse_expression(ctx.children[1]);
    }
    else if (ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].FuncCallContext) {
        return new FunctionCall(new _type__WEBPACK_IMPORTED_MODULE_1__.Identifier(ctx.name.text), ctx.argList.argList.map(parse_expression));
    }
    else if (ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].IfExprContext) {
        return new IfExpression(parse_expression(ctx.pred), parse_body(ctx.then_body), parse_body(ctx.else_body));
    }
    else if (ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].ExprContext) {
        if (ctx.children.length == 3) {
            const left = parse_expression(ctx.children[0]);
            const op = OP.from(ctx.children[1].getText());
            const right = parse_expression(ctx.children[2]);
            return new BinaryOp(left, op, right);
        }
        else {
            return parse_expression(ctx.children[0]);
        }
    }
    else {
        throw "unrecognized expression form";
    }
}


/***/ }),

/***/ "./src/compiler/parse/parser.ts":
/*!**************************************!*\
  !*** ./src/compiler/parse/parser.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Parser": () => (/* binding */ Parser)
/* harmony export */ });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
/* harmony import */ var _parse_LayoutLangLexer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse/LayoutLangLexer */ "./src/compiler/parse/parse/LayoutLangLexer.js");
/* harmony import */ var _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse/LayoutLangParser */ "./src/compiler/parse/parse/LayoutLangParser.js");
/* harmony import */ var _expression__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./expression */ "./src/compiler/parse/expression.ts");




class Parser {
    parse(input) {
        this.funcs = [];
        const chars = new antlr4__WEBPACK_IMPORTED_MODULE_0__.InputStream(input);
        const lexer = new _parse_LayoutLangLexer__WEBPACK_IMPORTED_MODULE_1__["default"](chars);
        const tokens = new antlr4__WEBPACK_IMPORTED_MODULE_0__.CommonTokenStream(lexer);
        const parser = new _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"](tokens);
        parser.buildParseTrees = true;
        const tree = parser.body();
        return tree.functions.map(_expression__WEBPACK_IMPORTED_MODULE_3__.parse_function);
    }
}


/***/ }),

/***/ "./src/compiler/parse/statment.ts":
/*!****************************************!*\
  !*** ./src/compiler/parse/statment.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReturnStatement": () => (/* binding */ ReturnStatement),
/* harmony export */   "LetStatment": () => (/* binding */ LetStatment),
/* harmony export */   "ParserFunction": () => (/* binding */ ParserFunction),
/* harmony export */   "parse_statement": () => (/* binding */ parse_statement)
/* harmony export */ });
/* harmony import */ var _expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./expression */ "./src/compiler/parse/expression.ts");
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type */ "./src/compiler/type.ts");
/* harmony import */ var _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse/LayoutLangParser */ "./src/compiler/parse/parse/LayoutLangParser.js");



class ReturnStatement {
    constructor(expr) {
        this.expr = expr;
    }
}
class LetStatment {
    constructor(name, expr) {
        this.name = name;
        this.expr = expr;
    }
}
class ParserFunction {
    constructor(name, args, return_type, body) {
        this.name = name;
        this.args = args;
        this.return_type = return_type;
        this.body = body;
    }
}
function parse_let_statement(ctx) {
    const [_1, name, _2, expr, _3] = ctx.children;
    return new LetStatment(new _type__WEBPACK_IMPORTED_MODULE_1__.Identifier(name.getText()), (0,_expression__WEBPACK_IMPORTED_MODULE_0__.parse_expression)(expr));
}
function parse_return_statement(ctx) {
    const [_1, expr, _2] = ctx.children;
    return new ReturnStatement((0,_expression__WEBPACK_IMPORTED_MODULE_0__.parse_expression)(expr));
}
function parse_statement(ctx) {
    if (!(ctx instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].StatementContext))
        throw "Expected Statment";
    let statement = ctx.children[0];
    if (statement instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].ReturnStatementContext) {
        return parse_return_statement(statement);
    }
    else if (statement instanceof _parse_LayoutLangParser__WEBPACK_IMPORTED_MODULE_2__["default"].LetStatementContext) {
        return parse_let_statement(statement);
    }
    throw "unrecognized statement";
}


/***/ }),

/***/ "./src/compiler/type.ts":
/*!******************************!*\
  !*** ./src/compiler/type.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Identifier": () => (/* binding */ Identifier),
/* harmony export */   "Argument": () => (/* binding */ Argument)
/* harmony export */ });
class Identifier {
    constructor(name) {
        this.name = name;
    }
    ;
}
class Argument {
    constructor(name, type) {
        this.name = name;
        this.type = type;
    }
    ;
}


/***/ }),

/***/ "./src/compiler/codegen/leb/bits.js":
/*!******************************************!*\
  !*** ./src/compiler/codegen/leb/bits.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";
// Copyright 2012 The Obvious Corporation.

/*
 * bits: Bitwise buffer utilities. The utilities here treat a buffer
 * as a little-endian bigint, so the lowest-order bit is bit #0 of
 * `buffer[0]`, and the highest-order bit is bit #7 of
 * `buffer[buffer.length - 1]`.
 */


/*
 * Modules used
 */




/*
 * Exported bindings
 */

/**
 * Extracts the given number of bits from the buffer at the indicated
 * index, returning a simple number as the result. If bits are requested
 * that aren't covered by the buffer, the `defaultBit` is used as their
 * value.
 *
 * The `bitLength` must be no more than 32. The `defaultBit` if not
 * specified is taken to be `0`.
 */
function extract(buffer, bitIndex, bitLength, defaultBit) {
  if ((bitLength < 0) || (bitLength > 32)) {
    throw new Error("Bad value for bitLength.");
  }

  if (defaultBit === undefined) {
    defaultBit = 0;
  } else if ((defaultBit !== 0) && (defaultBit !== 1)) {
    throw new Error("Bad value for defaultBit.");
  }

  var defaultByte = defaultBit * 0xff;
  var result = 0;

  // All starts are inclusive. The {endByte, endBit} pair is exclusive, but
  // if endBit !== 0, then endByte is inclusive.
  var lastBit = bitIndex + bitLength;
  var startByte = Math.floor(bitIndex / 8);
  var startBit = bitIndex % 8;
  var endByte = Math.floor(lastBit / 8);
  var endBit = lastBit % 8;

  if (endBit !== 0) {
    // `(1 << endBit) - 1` is the mask of all bits up to but not including
    // the endBit.
    result = get(endByte) & ((1 << endBit) - 1);
  }

  while (endByte > startByte) {
    endByte--;
    result = (result << 8) | get(endByte);
  }

  result >>>= startBit;
  return result;

  function get(index) {
    var result = buffer[index];
    return (result === undefined) ? defaultByte : result;
  }
}

/**
 * Injects the given bits into the given buffer at the given index. Any
 * bits in the value beyond the length to set are ignored.
 */
function inject(buffer, bitIndex, bitLength, value) {
  if ((bitLength < 0) || (bitLength > 32)) {
    throw new Error("Bad value for bitLength.");
  }

  var lastByte = Math.floor((bitIndex + bitLength - 1) / 8);
  if ((bitIndex < 0) || (lastByte >= buffer.length)) {
    throw new Error("Index out of range.");
  }

  // Just keeping it simple, until / unless profiling shows that this
  // is a problem.

  var atByte = Math.floor(bitIndex / 8);
  var atBit = bitIndex % 8;

  while (bitLength > 0) {
    if (value & 1) {
      buffer[atByte] |= (1 << atBit);
    } else {
      buffer[atByte] &= ~(1 << atBit);
    }

    value >>= 1;
    bitLength--;

    atBit = (atBit + 1) % 8;
    if (atBit === 0) {
      atByte++;
    }
  }
}

/**
 * Gets the sign bit of the given buffer.
 */
function getSign(buffer) {
  return buffer[buffer.length - 1] >>> 7;
}

/**
 * Gets the zero-based bit number of the highest-order bit with the
 * given value in the given buffer.
 *
 * If the buffer consists entirely of the other bit value, then this returns
 * `-1`.
 */
function highOrder(bit, buffer) {
  var length = buffer.length;
  var fullyWrongByte = (bit^1) * 0xff; // the other-bit extended to a full byte

  while ((length > 0) && (buffer[length - 1] === fullyWrongByte)) {
    length--;
  }

  if (length === 0) {
    // Degenerate case. The buffer consists entirely of ~bit.
    return -1;
  }

  var byteToCheck = buffer[length - 1];
  var result = length * 8 - 1;

  for (var i = 7; i > 0; i--) {
    if (((byteToCheck >> i) & 1) === bit) {
      break;
    }
    result--;
  }

  return result;
}

module.exports = {
  extract: extract,
  inject: inject,
  getSign: getSign,
  highOrder: highOrder
};


/***/ }),

/***/ "./src/compiler/codegen/leb/bufs.js":
/*!******************************************!*\
  !*** ./src/compiler/codegen/leb/bufs.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";
// Copyright 2012 The Obvious Corporation.

/*
 * bufs: Buffer utilities.
 */


/*
 * Modules used
 */




/*
 * Module variables
 */

/** Pool of buffers, where `bufPool[x].length === x`. */
var bufPool = [];

/** Maximum length of kept temporary buffers. */
var TEMP_BUF_MAXIMUM_LENGTH = 20;

/** Minimum exactly-representable 64-bit int. */
var MIN_EXACT_INT64 = -0x8000000000000000;

/** Maximum exactly-representable 64-bit int. */
var MAX_EXACT_INT64 = 0x7ffffffffffffc00;

/** Maximum exactly-representable 64-bit uint. */
var MAX_EXACT_UINT64 = 0xfffffffffffff800;

/**
 * The int value consisting just of a 1 in bit #32 (that is, one more
 * than the maximum 32-bit unsigned value).
 */
var BIT_32 = 0x100000000;

/**
 * The int value consisting just of a 1 in bit #64 (that is, one more
 * than the maximum 64-bit unsigned value).
 */
var BIT_64 = 0x10000000000000000;


/*
 * Helper functions
 */

/**
 * Masks off all but the lowest bit set of the given number.
 */
function lowestBit(num) {
  return num & -num;
}

/**
 * Gets whether trying to add the second number to the first is lossy
 * (inexact). The first number is meant to be an accumulated result.
 */
function isLossyToAdd(accum, num) {
  if (num === 0) {
    return false;
  }

  var lowBit = lowestBit(num);
  var added = accum + lowBit;

  if (added === accum) {
    return true;
  }

  if ((added - lowBit) !== accum) {
    return true;
  }

  return false;
}


/*
 * Exported functions
 */

/**
 * Allocates a buffer of the given length, which is initialized
 * with all zeroes. This returns a buffer from the pool if it is
 * available, or a freshly-allocated buffer if not.
 */
function alloc(length) {
  return new Uint8Array(length);
}

/**
 * Releases a buffer back to the pool.
 */
function free(buffer) {

}

/**
 * Resizes a buffer, returning a new buffer. Returns the argument if
 * the length wouldn't actually change. This function is only safe to
 * use if the given buffer was allocated within this module (since
 * otherwise the buffer might possibly be shared externally).
 */
function resize(buffer, length) {
  return new Uint8Array(buffer, 0, length);
  if (length === buffer.length) {
    return buffer;
  }

  var newBuf = alloc(length);

  let a = new Uint8Array()
  newBuf.set(buffer);
  // buffer.copy(newBuf);
  free(buffer);
  return newBuf;
}

/**
 * Reads an arbitrary signed int from a buffer.
 */
function readInt(buffer) {
  var length = buffer.length;
  var positive = buffer[length - 1] < 0x80;
  var result = positive ? 0 : -1;
  var lossy = false;

  // Note: We can't use bit manipulation here, since that stops
  // working if the result won't fit in a 32-bit int.

  if (length < 7) {
    // Common case which can't possibly be lossy (because the result has
    // no more than 48 bits, and loss only happens with 54 or more).
    for (var i = length - 1; i >= 0; i--) {
      result = (result * 0x100) + buffer[i];
    }
  } else {
    for (var i = length - 1; i >= 0; i--) {
      var one = buffer[i];
      result *= 0x100;
      if (isLossyToAdd(result, one)) {
        lossy = true;
      }
      result += one;
    }
  }
  
  return { value: result, lossy: lossy };
}

/**
 * Reads an arbitrary unsigned int from a buffer.
 */
function readUInt(buffer) {
  var length = buffer.length;
  var result = 0;
  var lossy = false;

  // Note: See above in re bit manipulation.

  if (length < 7) {
    // Common case which can't possibly be lossy (see above).
    for (var i = length - 1; i >= 0; i--) {
      result = (result * 0x100) + buffer[i];
    }
  } else {
    for (var i = length - 1; i >= 0; i--) {
      var one = buffer[i];
      result *= 0x100;
      if (isLossyToAdd(result, one)) {
        lossy = true;
      }
      result += one;
    }
  }
  
  return { value: result, lossy: lossy };
}

/**
 * Writes a little-endian 64-bit signed int into a buffer.
 */
function writeInt64(value, buffer) {
  if ((value < MIN_EXACT_INT64) || (value > MAX_EXACT_INT64)) {
    throw new Error("Value out of range.");
  }

  if (value < 0) {
    value += BIT_64;
  }

  writeUInt64(value, buffer);
}

/**
 * Writes a little-endian 64-bit unsigned int into a buffer.
 */
function writeUInt64(value, buffer) {
  if ((value < 0) || (value > MAX_EXACT_UINT64)) {
    throw new Error("Value out of range.");
  }

  var lowWord = value % BIT_32;
  var highWord = Math.floor(value / BIT_32);

  buffer.writeUInt32LE(lowWord, 0);
  buffer.writeUInt32LE(highWord, 4);
}

module.exports = {
  alloc: alloc,
  free: free,
  readInt: readInt,
  readUInt: readUInt,
  resize: resize,
  writeInt64: writeInt64,
  writeUInt64: writeUInt64
};


/***/ }),

/***/ "./src/compiler/parse/parse/LayoutLangLexer.js":
/*!*****************************************************!*\
  !*** ./src/compiler/parse/parse/LayoutLangLexer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayoutLangLexer)
/* harmony export */ });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
// Generated from LayoutLang.g4 by ANTLR 4.9
// jshint ignore: start




const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\u0014y\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003",
    "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007",
    "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "b\n\u0010\u0003\u0011\u0005\u0011e\n\u0011\u0003\u0011\u0006\u0011h",
    "\n\u0011\r\u0011\u000e\u0011i\u0003\u0012\u0003\u0012\u0007\u0012n\n",
    "\u0012\f\u0012\u000e\u0012q\u000b\u0012\u0003\u0013\u0006\u0013t\n\u0013",
    "\r\u0013\u000e\u0013u\u0003\u0013\u0003\u0013\u0002\u0002\u0014\u0003",
    "\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011",
    "\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f",
    "\u0011!\u0012#\u0013%\u0014\u0003\u0002\b\b\u0002\'\',-//11>>@@\u0003",
    "\u0002//\u0003\u00022;\u0004\u0002C\\c|\u0006\u00022;C\\aac|\u0005\u0002",
    "\u000b\f\u000f\u000f\"\"\u0002\u0084\u0002\u0003\u0003\u0002\u0002\u0002",
    "\u0002\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002",
    "\u0002\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002",
    "\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002",
    "\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002",
    "\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002",
    "\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002",
    "\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002",
    "\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002",
    "%\u0003\u0002\u0002\u0002\u0003\'\u0003\u0002\u0002\u0002\u0005*\u0003",
    "\u0002\u0002\u0002\u0007,\u0003\u0002\u0002\u0002\t.\u0003\u0002\u0002",
    "\u0002\u000b1\u0003\u0002\u0002\u0002\r3\u0003\u0002\u0002\u0002\u000f",
    "5\u0003\u0002\u0002\u0002\u0011<\u0003\u0002\u0002\u0002\u0013>\u0003",
    "\u0002\u0002\u0002\u0015B\u0003\u0002\u0002\u0002\u0017D\u0003\u0002",
    "\u0002\u0002\u0019F\u0003\u0002\u0002\u0002\u001bH\u0003\u0002\u0002",
    "\u0002\u001dK\u0003\u0002\u0002\u0002\u001fa\u0003\u0002\u0002\u0002",
    "!d\u0003\u0002\u0002\u0002#k\u0003\u0002\u0002\u0002%s\u0003\u0002\u0002",
    "\u0002\'(\u0007h\u0002\u0002()\u0007p\u0002\u0002)\u0004\u0003\u0002",
    "\u0002\u0002*+\u0007*\u0002\u0002+\u0006\u0003\u0002\u0002\u0002,-\u0007",
    "+\u0002\u0002-\b\u0003\u0002\u0002\u0002./\u0007/\u0002\u0002/0\u0007",
    "@\u0002\u00020\n\u0003\u0002\u0002\u000212\u0007}\u0002\u00022\f\u0003",
    "\u0002\u0002\u000234\u0007\u007f\u0002\u00024\u000e\u0003\u0002\u0002",
    "\u000256\u0007t\u0002\u000267\u0007g\u0002\u000278\u0007v\u0002\u0002",
    "89\u0007w\u0002\u00029:\u0007t\u0002\u0002:;\u0007p\u0002\u0002;\u0010",
    "\u0003\u0002\u0002\u0002<=\u0007=\u0002\u0002=\u0012\u0003\u0002\u0002",
    "\u0002>?\u0007n\u0002\u0002?@\u0007g\u0002\u0002@A\u0007v\u0002\u0002",
    "A\u0014\u0003\u0002\u0002\u0002BC\u0007?\u0002\u0002C\u0016\u0003\u0002",
    "\u0002\u0002DE\u0007.\u0002\u0002E\u0018\u0003\u0002\u0002\u0002FG\u0007",
    "<\u0002\u0002G\u001a\u0003\u0002\u0002\u0002HI\u0007k\u0002\u0002IJ",
    "\u0007h\u0002\u0002J\u001c\u0003\u0002\u0002\u0002KL\u0007g\u0002\u0002",
    "LM\u0007n\u0002\u0002MN\u0007u\u0002\u0002NO\u0007g\u0002\u0002O\u001e",
    "\u0003\u0002\u0002\u0002Pb\t\u0002\u0002\u0002QR\u0007@\u0002\u0002",
    "Rb\u0007?\u0002\u0002ST\u0007>\u0002\u0002Tb\u0007?\u0002\u0002UV\u0007",
    "~\u0002\u0002Vb\u0007~\u0002\u0002WX\u0007(\u0002\u0002Xb\u0007(\u0002",
    "\u0002YZ\u0007?\u0002\u0002Zb\u0007?\u0002\u0002[\\\u0007#\u0002\u0002",
    "\\b\u0007?\u0002\u0002]^\u0007>\u0002\u0002^b\u0007>\u0002\u0002_`\u0007",
    "@\u0002\u0002`b\u0007@\u0002\u0002aP\u0003\u0002\u0002\u0002aQ\u0003",
    "\u0002\u0002\u0002aS\u0003\u0002\u0002\u0002aU\u0003\u0002\u0002\u0002",
    "aW\u0003\u0002\u0002\u0002aY\u0003\u0002\u0002\u0002a[\u0003\u0002\u0002",
    "\u0002a]\u0003\u0002\u0002\u0002a_\u0003\u0002\u0002\u0002b \u0003\u0002",
    "\u0002\u0002ce\t\u0003\u0002\u0002dc\u0003\u0002\u0002\u0002de\u0003",
    "\u0002\u0002\u0002eg\u0003\u0002\u0002\u0002fh\t\u0004\u0002\u0002g",
    "f\u0003\u0002\u0002\u0002hi\u0003\u0002\u0002\u0002ig\u0003\u0002\u0002",
    "\u0002ij\u0003\u0002\u0002\u0002j\"\u0003\u0002\u0002\u0002ko\t\u0005",
    "\u0002\u0002ln\t\u0006\u0002\u0002ml\u0003\u0002\u0002\u0002nq\u0003",
    "\u0002\u0002\u0002om\u0003\u0002\u0002\u0002op\u0003\u0002\u0002\u0002",
    "p$\u0003\u0002\u0002\u0002qo\u0003\u0002\u0002\u0002rt\t\u0007\u0002",
    "\u0002sr\u0003\u0002\u0002\u0002tu\u0003\u0002\u0002\u0002us\u0003\u0002",
    "\u0002\u0002uv\u0003\u0002\u0002\u0002vw\u0003\u0002\u0002\u0002wx\b",
    "\u0013\u0002\u0002x&\u0003\u0002\u0002\u0002\b\u0002adiou\u0003\b\u0002",
    "\u0002"].join("");


const atn = new antlr4__WEBPACK_IMPORTED_MODULE_0__.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4__WEBPACK_IMPORTED_MODULE_0__.dfa.DFA(ds, index) );

class LayoutLangLexer extends antlr4__WEBPACK_IMPORTED_MODULE_0__.Lexer {

    static grammarFileName = "LayoutLang.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'fn'", "'('", "')'", "'->'", "'{'", "'}'", 
                         "'return'", "';'", "'let'", "'='", "','", "':'", 
                         "'if'", "'else'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, "BINARYOP", 
                          "INT", "IDENTIFIER", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "BINARYOP", "INT", "IDENTIFIER", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4__WEBPACK_IMPORTED_MODULE_0__.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4__WEBPACK_IMPORTED_MODULE_0__.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

LayoutLangLexer.EOF = antlr4__WEBPACK_IMPORTED_MODULE_0__.Token.EOF;
LayoutLangLexer.T__0 = 1;
LayoutLangLexer.T__1 = 2;
LayoutLangLexer.T__2 = 3;
LayoutLangLexer.T__3 = 4;
LayoutLangLexer.T__4 = 5;
LayoutLangLexer.T__5 = 6;
LayoutLangLexer.T__6 = 7;
LayoutLangLexer.T__7 = 8;
LayoutLangLexer.T__8 = 9;
LayoutLangLexer.T__9 = 10;
LayoutLangLexer.T__10 = 11;
LayoutLangLexer.T__11 = 12;
LayoutLangLexer.T__12 = 13;
LayoutLangLexer.T__13 = 14;
LayoutLangLexer.BINARYOP = 15;
LayoutLangLexer.INT = 16;
LayoutLangLexer.IDENTIFIER = 17;
LayoutLangLexer.WS = 18;





/***/ }),

/***/ "./src/compiler/parse/parse/LayoutLangListener.js":
/*!********************************************************!*\
  !*** ./src/compiler/parse/parse/LayoutLangListener.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayoutLangListener)
/* harmony export */ });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
// Generated from LayoutLang.g4 by ANTLR 4.9
// jshint ignore: start


// This class defines a complete listener for a parse tree produced by LayoutLangParser.
class LayoutLangListener extends antlr4__WEBPACK_IMPORTED_MODULE_0__.tree.ParseTreeListener {

	// Enter a parse tree produced by LayoutLangParser#body.
	enterBody(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#body.
	exitBody(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#func.
	enterFunc(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#func.
	exitFunc(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#funcBody.
	enterFuncBody(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#funcBody.
	exitFuncBody(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#statement.
	enterStatement(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#statement.
	exitStatement(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#returnStatement.
	enterReturnStatement(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#returnStatement.
	exitReturnStatement(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#letStatement.
	enterLetStatement(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#letStatement.
	exitLetStatement(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#type.
	enterType(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#type.
	exitType(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#args.
	enterArgs(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#args.
	exitArgs(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#arg.
	enterArg(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#arg.
	exitArg(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#expr.
	enterExpr(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#expr.
	exitExpr(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#exprList.
	enterExprList(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#exprList.
	exitExprList(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#ifExpr.
	enterIfExpr(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#ifExpr.
	exitIfExpr(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#funcCall.
	enterFuncCall(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#funcCall.
	exitFuncCall(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#parenExpr.
	enterParenExpr(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#parenExpr.
	exitParenExpr(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#binaryop.
	enterBinaryop(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#binaryop.
	exitBinaryop(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#identifier.
	enterIdentifier(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#identifier.
	exitIdentifier(ctx) {
	}


	// Enter a parse tree produced by LayoutLangParser#integer.
	enterInteger(ctx) {
	}

	// Exit a parse tree produced by LayoutLangParser#integer.
	exitInteger(ctx) {
	}



}

/***/ }),

/***/ "./src/compiler/parse/parse/LayoutLangParser.js":
/*!******************************************************!*\
  !*** ./src/compiler/parse/parse/LayoutLangParser.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayoutLangParser)
/* harmony export */ });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
/* harmony import */ var _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LayoutLangListener.js */ "./src/compiler/parse/parse/LayoutLangListener.js");
// Generated from LayoutLang.g4 by ANTLR 4.9
// jshint ignore: start



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0014\u0092\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0003\u0002\u0007\u0002",
    "&\n\u0002\f\u0002\u000e\u0002)\u000b\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0007\u00047\n\u0004\f\u0004",
    "\u000e\u0004:\u000b\u0004\u0003\u0005\u0003\u0005\u0005\u0005>\n\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0007\tP\n\t\f\t\u000e\tS\u000b\t\u0005\t",
    "U\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000ba\n\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000bg\n\u000b\f\u000b",
    "\u000e\u000bj\u000b\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0007\fp\n",
    "\f\f\f\u000e\fs\u000b\f\u0005\fu\n\f\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0002\u0003\u0014\u0013\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"\u0002\u0002\u0002\u008c\u0002\'\u0003\u0002\u0002\u0002\u0004*\u0003",
    "\u0002\u0002\u0002\u00068\u0003\u0002\u0002\u0002\b=\u0003\u0002\u0002",
    "\u0002\n?\u0003\u0002\u0002\u0002\fC\u0003\u0002\u0002\u0002\u000eI",
    "\u0003\u0002\u0002\u0002\u0010T\u0003\u0002\u0002\u0002\u0012V\u0003",
    "\u0002\u0002\u0002\u0014`\u0003\u0002\u0002\u0002\u0016t\u0003\u0002",
    "\u0002\u0002\u0018v\u0003\u0002\u0002\u0002\u001a\u0082\u0003\u0002",
    "\u0002\u0002\u001c\u0087\u0003\u0002\u0002\u0002\u001e\u008b\u0003\u0002",
    "\u0002\u0002 \u008d\u0003\u0002\u0002\u0002\"\u008f\u0003\u0002\u0002",
    "\u0002$&\u0005\u0004\u0003\u0002%$\u0003\u0002\u0002\u0002&)\u0003\u0002",
    "\u0002\u0002\'%\u0003\u0002\u0002\u0002\'(\u0003\u0002\u0002\u0002(",
    "\u0003\u0003\u0002\u0002\u0002)\'\u0003\u0002\u0002\u0002*+\u0007\u0003",
    "\u0002\u0002+,\u0007\u0013\u0002\u0002,-\u0007\u0004\u0002\u0002-.\u0005",
    "\u0010\t\u0002./\u0007\u0005\u0002\u0002/0\u0007\u0006\u0002\u00020",
    "1\u0005\u000e\b\u000212\u0007\u0007\u0002\u000223\u0005\u0006\u0004",
    "\u000234\u0007\b\u0002\u00024\u0005\u0003\u0002\u0002\u000257\u0005",
    "\b\u0005\u000265\u0003\u0002\u0002\u00027:\u0003\u0002\u0002\u00028",
    "6\u0003\u0002\u0002\u000289\u0003\u0002\u0002\u00029\u0007\u0003\u0002",
    "\u0002\u0002:8\u0003\u0002\u0002\u0002;>\u0005\n\u0006\u0002<>\u0005",
    "\f\u0007\u0002=;\u0003\u0002\u0002\u0002=<\u0003\u0002\u0002\u0002>",
    "\t\u0003\u0002\u0002\u0002?@\u0007\t\u0002\u0002@A\u0005\u0014\u000b",
    "\u0002AB\u0007\n\u0002\u0002B\u000b\u0003\u0002\u0002\u0002CD\u0007",
    "\u000b\u0002\u0002DE\u0007\u0013\u0002\u0002EF\u0007\f\u0002\u0002F",
    "G\u0005\u0014\u000b\u0002GH\u0007\n\u0002\u0002H\r\u0003\u0002\u0002",
    "\u0002IJ\u0007\u0013\u0002\u0002J\u000f\u0003\u0002\u0002\u0002KU\u0003",
    "\u0002\u0002\u0002LQ\u0005\u0012\n\u0002MN\u0007\r\u0002\u0002NP\u0005",
    "\u0012\n\u0002OM\u0003\u0002\u0002\u0002PS\u0003\u0002\u0002\u0002Q",
    "O\u0003\u0002\u0002\u0002QR\u0003\u0002\u0002\u0002RU\u0003\u0002\u0002",
    "\u0002SQ\u0003\u0002\u0002\u0002TK\u0003\u0002\u0002\u0002TL\u0003\u0002",
    "\u0002\u0002U\u0011\u0003\u0002\u0002\u0002VW\u0007\u0013\u0002\u0002",
    "WX\u0007\u000e\u0002\u0002XY\u0005\u000e\b\u0002Y\u0013\u0003\u0002",
    "\u0002\u0002Z[\b\u000b\u0001\u0002[a\u0005\u0018\r\u0002\\a\u0005\u001a",
    "\u000e\u0002]a\u0005\u001c\u000f\u0002^a\u0005 \u0011\u0002_a\u0005",
    "\"\u0012\u0002`Z\u0003\u0002\u0002\u0002`\\\u0003\u0002\u0002\u0002",
    "`]\u0003\u0002\u0002\u0002`^\u0003\u0002\u0002\u0002`_\u0003\u0002\u0002",
    "\u0002ah\u0003\u0002\u0002\u0002bc\f\u0005\u0002\u0002cd\u0005\u001e",
    "\u0010\u0002de\u0005\u0014\u000b\u0006eg\u0003\u0002\u0002\u0002fb\u0003",
    "\u0002\u0002\u0002gj\u0003\u0002\u0002\u0002hf\u0003\u0002\u0002\u0002",
    "hi\u0003\u0002\u0002\u0002i\u0015\u0003\u0002\u0002\u0002jh\u0003\u0002",
    "\u0002\u0002ku\u0003\u0002\u0002\u0002lq\u0005\u0014\u000b\u0002mn\u0007",
    "\r\u0002\u0002np\u0005\u0014\u000b\u0002om\u0003\u0002\u0002\u0002p",
    "s\u0003\u0002\u0002\u0002qo\u0003\u0002\u0002\u0002qr\u0003\u0002\u0002",
    "\u0002ru\u0003\u0002\u0002\u0002sq\u0003\u0002\u0002\u0002tk\u0003\u0002",
    "\u0002\u0002tl\u0003\u0002\u0002\u0002u\u0017\u0003\u0002\u0002\u0002",
    "vw\u0007\u000f\u0002\u0002wx\u0007\u0004\u0002\u0002xy\u0005\u0014\u000b",
    "\u0002yz\u0007\u0005\u0002\u0002z{\u0007\u0007\u0002\u0002{|\u0005\u0006",
    "\u0004\u0002|}\u0007\b\u0002\u0002}~\u0007\u0010\u0002\u0002~\u007f",
    "\u0007\u0007\u0002\u0002\u007f\u0080\u0005\u0006\u0004\u0002\u0080\u0081",
    "\u0007\b\u0002\u0002\u0081\u0019\u0003\u0002\u0002\u0002\u0082\u0083",
    "\u0007\u0013\u0002\u0002\u0083\u0084\u0007\u0004\u0002\u0002\u0084\u0085",
    "\u0005\u0016\f\u0002\u0085\u0086\u0007\u0005\u0002\u0002\u0086\u001b",
    "\u0003\u0002\u0002\u0002\u0087\u0088\u0007\u0004\u0002\u0002\u0088\u0089",
    "\u0005\u0014\u000b\u0002\u0089\u008a\u0007\u0005\u0002\u0002\u008a\u001d",
    "\u0003\u0002\u0002\u0002\u008b\u008c\u0007\u0011\u0002\u0002\u008c\u001f",
    "\u0003\u0002\u0002\u0002\u008d\u008e\u0007\u0013\u0002\u0002\u008e!",
    "\u0003\u0002\u0002\u0002\u008f\u0090\u0007\u0012\u0002\u0002\u0090#",
    "\u0003\u0002\u0002\u0002\u000b\'8=QT`hqt"].join("");


const atn = new antlr4__WEBPACK_IMPORTED_MODULE_0__.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4__WEBPACK_IMPORTED_MODULE_0__.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4__WEBPACK_IMPORTED_MODULE_0__.PredictionContextCache();

class LayoutLangParser extends antlr4__WEBPACK_IMPORTED_MODULE_0__.Parser {

    static grammarFileName = "LayoutLang.g4";
    static literalNames = [ null, "'fn'", "'('", "')'", "'->'", "'{'", "'}'", 
                            "'return'", "';'", "'let'", "'='", "','", "':'", 
                            "'if'", "'else'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, "BINARYOP", 
                             "INT", "IDENTIFIER", "WS" ];
    static ruleNames = [ "body", "func", "funcBody", "statement", "returnStatement", 
                         "letStatement", "type", "args", "arg", "expr", 
                         "exprList", "ifExpr", "funcCall", "parenExpr", 
                         "binaryop", "identifier", "integer" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4__WEBPACK_IMPORTED_MODULE_0__.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = LayoutLangParser.ruleNames;
        this.literalNames = LayoutLangParser.literalNames;
        this.symbolicNames = LayoutLangParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 9:
    	    		return this.expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	body() {
	    let localctx = new BodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, LayoutLangParser.RULE_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 37;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===LayoutLangParser.T__0) {
	            this.state = 34;
	            localctx._func = this.func();
	            localctx.functions.push(localctx._func);
	            this.state = 39;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func() {
	    let localctx = new FuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, LayoutLangParser.RULE_func);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 40;
	        this.match(LayoutLangParser.T__0);
	        this.state = 41;
	        localctx.name = this.match(LayoutLangParser.IDENTIFIER);
	        this.state = 42;
	        this.match(LayoutLangParser.T__1);
	        this.state = 43;
	        localctx.arguments = this.args();
	        this.state = 44;
	        this.match(LayoutLangParser.T__2);
	        this.state = 45;
	        this.match(LayoutLangParser.T__3);
	        this.state = 46;
	        localctx.type_decl = this.type();
	        this.state = 47;
	        this.match(LayoutLangParser.T__4);
	        this.state = 48;
	        localctx.func_body = this.funcBody();
	        this.state = 49;
	        this.match(LayoutLangParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcBody() {
	    let localctx = new FuncBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, LayoutLangParser.RULE_funcBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 54;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===LayoutLangParser.T__6 || _la===LayoutLangParser.T__8) {
	            this.state = 51;
	            localctx._statement = this.statement();
	            localctx.statements.push(localctx._statement);
	            this.state = 56;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, LayoutLangParser.RULE_statement);
	    try {
	        this.state = 59;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LayoutLangParser.T__6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 57;
	            this.returnStatement();
	            break;
	        case LayoutLangParser.T__8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 58;
	            this.letStatement();
	            break;
	        default:
	            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, LayoutLangParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 61;
	        this.match(LayoutLangParser.T__6);
	        this.state = 62;
	        localctx.expression = this.expr(0);
	        this.state = 63;
	        this.match(LayoutLangParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatement() {
	    let localctx = new LetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, LayoutLangParser.RULE_letStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 65;
	        this.match(LayoutLangParser.T__8);
	        this.state = 66;
	        localctx.name = this.match(LayoutLangParser.IDENTIFIER);
	        this.state = 67;
	        this.match(LayoutLangParser.T__9);
	        this.state = 68;
	        localctx.expression = this.expr(0);
	        this.state = 69;
	        this.match(LayoutLangParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, LayoutLangParser.RULE_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 71;
	        this.match(LayoutLangParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	args() {
	    let localctx = new ArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, LayoutLangParser.RULE_args);
	    var _la = 0; // Token type
	    try {
	        this.state = 82;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LayoutLangParser.T__2:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case LayoutLangParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 74;
	            localctx._arg = this.arg();
	            localctx.argList.push(localctx._arg);
	            this.state = 79;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===LayoutLangParser.T__10) {
	                this.state = 75;
	                this.match(LayoutLangParser.T__10);
	                this.state = 76;
	                localctx._arg = this.arg();
	                localctx.argList.push(localctx._arg);
	                this.state = 81;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg() {
	    let localctx = new ArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, LayoutLangParser.RULE_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 84;
	        localctx.name = this.match(LayoutLangParser.IDENTIFIER);
	        this.state = 85;
	        this.match(LayoutLangParser.T__11);
	        this.state = 86;
	        localctx.type_decl = this.type();
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 18;
	    this.enterRecursionRule(localctx, 18, LayoutLangParser.RULE_expr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 94;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 89;
	            this.ifExpr();
	            break;

	        case 2:
	            this.state = 90;
	            this.funcCall();
	            break;

	        case 3:
	            this.state = 91;
	            this.parenExpr();
	            break;

	        case 4:
	            this.state = 92;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 93;
	            this.integer();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 102;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4__WEBPACK_IMPORTED_MODULE_0__.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, LayoutLangParser.RULE_expr);
	                this.state = 96;
	                if (!( this.precpred(this._ctx, 3))) {
	                    throw new antlr4__WEBPACK_IMPORTED_MODULE_0__.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                }
	                this.state = 97;
	                this.binaryop();
	                this.state = 98;
	                this.expr(4); 
	            }
	            this.state = 104;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	exprList() {
	    let localctx = new ExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, LayoutLangParser.RULE_exprList);
	    var _la = 0; // Token type
	    try {
	        this.state = 114;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case LayoutLangParser.T__2:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case LayoutLangParser.T__1:
	        case LayoutLangParser.T__12:
	        case LayoutLangParser.INT:
	        case LayoutLangParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 106;
	            localctx._expr = this.expr(0);
	            localctx.argList.push(localctx._expr);
	            this.state = 111;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===LayoutLangParser.T__10) {
	                this.state = 107;
	                this.match(LayoutLangParser.T__10);
	                this.state = 108;
	                localctx._expr = this.expr(0);
	                localctx.argList.push(localctx._expr);
	                this.state = 113;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExpr() {
	    let localctx = new IfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, LayoutLangParser.RULE_ifExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 116;
	        this.match(LayoutLangParser.T__12);
	        this.state = 117;
	        this.match(LayoutLangParser.T__1);
	        this.state = 118;
	        localctx.pred = this.expr(0);
	        this.state = 119;
	        this.match(LayoutLangParser.T__2);
	        this.state = 120;
	        this.match(LayoutLangParser.T__4);
	        this.state = 121;
	        localctx.then_body = this.funcBody();
	        this.state = 122;
	        this.match(LayoutLangParser.T__5);
	        this.state = 123;
	        this.match(LayoutLangParser.T__13);
	        this.state = 124;
	        this.match(LayoutLangParser.T__4);
	        this.state = 125;
	        localctx.else_body = this.funcBody();
	        this.state = 126;
	        this.match(LayoutLangParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcCall() {
	    let localctx = new FuncCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, LayoutLangParser.RULE_funcCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 128;
	        localctx.name = this.match(LayoutLangParser.IDENTIFIER);
	        this.state = 129;
	        this.match(LayoutLangParser.T__1);
	        this.state = 130;
	        localctx.argList = this.exprList();
	        this.state = 131;
	        this.match(LayoutLangParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenExpr() {
	    let localctx = new ParenExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, LayoutLangParser.RULE_parenExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 133;
	        this.match(LayoutLangParser.T__1);
	        this.state = 134;
	        localctx.expression = this.expr(0);
	        this.state = 135;
	        this.match(LayoutLangParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryop() {
	    let localctx = new BinaryopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, LayoutLangParser.RULE_binaryop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 137;
	        localctx.op = this.match(LayoutLangParser.BINARYOP);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, LayoutLangParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 139;
	        localctx.name = this.match(LayoutLangParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, LayoutLangParser.RULE_integer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 141;
	        localctx.value = this.match(LayoutLangParser.INT);
	    } catch (re) {
	    	if(re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

LayoutLangParser.EOF = antlr4__WEBPACK_IMPORTED_MODULE_0__.Token.EOF;
LayoutLangParser.T__0 = 1;
LayoutLangParser.T__1 = 2;
LayoutLangParser.T__2 = 3;
LayoutLangParser.T__3 = 4;
LayoutLangParser.T__4 = 5;
LayoutLangParser.T__5 = 6;
LayoutLangParser.T__6 = 7;
LayoutLangParser.T__7 = 8;
LayoutLangParser.T__8 = 9;
LayoutLangParser.T__9 = 10;
LayoutLangParser.T__10 = 11;
LayoutLangParser.T__11 = 12;
LayoutLangParser.T__12 = 13;
LayoutLangParser.T__13 = 14;
LayoutLangParser.BINARYOP = 15;
LayoutLangParser.INT = 16;
LayoutLangParser.IDENTIFIER = 17;
LayoutLangParser.WS = 18;

LayoutLangParser.RULE_body = 0;
LayoutLangParser.RULE_func = 1;
LayoutLangParser.RULE_funcBody = 2;
LayoutLangParser.RULE_statement = 3;
LayoutLangParser.RULE_returnStatement = 4;
LayoutLangParser.RULE_letStatement = 5;
LayoutLangParser.RULE_type = 6;
LayoutLangParser.RULE_args = 7;
LayoutLangParser.RULE_arg = 8;
LayoutLangParser.RULE_expr = 9;
LayoutLangParser.RULE_exprList = 10;
LayoutLangParser.RULE_ifExpr = 11;
LayoutLangParser.RULE_funcCall = 12;
LayoutLangParser.RULE_parenExpr = 13;
LayoutLangParser.RULE_binaryop = 14;
LayoutLangParser.RULE_identifier = 15;
LayoutLangParser.RULE_integer = 16;

class BodyContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_body;
        this._func = null; // FuncContext
        this.functions = []; // of FuncContexts
    }

	func = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FuncContext);
	    } else {
	        return this.getTypedRuleContext(FuncContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitBody(this);
		}
	}


}



class FuncContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_func;
        this.name = null; // Token
        this.arguments = null; // ArgsContext
        this.type_decl = null; // TypeContext
        this.func_body = null; // FuncBodyContext
    }

	IDENTIFIER() {
	    return this.getToken(LayoutLangParser.IDENTIFIER, 0);
	};

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	funcBody() {
	    return this.getTypedRuleContext(FuncBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitFunc(this);
		}
	}


}



class FuncBodyContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_funcBody;
        this._statement = null; // StatementContext
        this.statements = []; // of StatementContexts
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterFuncBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitFuncBody(this);
		}
	}


}



class StatementContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_statement;
    }

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	letStatement() {
	    return this.getTypedRuleContext(LetStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_returnStatement;
        this.expression = null; // ExprContext
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class LetStatementContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_letStatement;
        this.name = null; // Token
        this.expression = null; // ExprContext
    }

	IDENTIFIER() {
	    return this.getToken(LayoutLangParser.IDENTIFIER, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterLetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitLetStatement(this);
		}
	}


}



class TypeContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_type;
    }

	IDENTIFIER() {
	    return this.getToken(LayoutLangParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitType(this);
		}
	}


}



class ArgsContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_args;
        this._arg = null; // ArgContext
        this.argList = []; // of ArgContexts
    }

	arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgContext);
	    } else {
	        return this.getTypedRuleContext(ArgContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitArgs(this);
		}
	}


}



class ArgContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_arg;
        this.name = null; // Token
        this.type_decl = null; // TypeContext
    }

	IDENTIFIER() {
	    return this.getToken(LayoutLangParser.IDENTIFIER, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitArg(this);
		}
	}


}



class ExprContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_expr;
    }

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	funcCall() {
	    return this.getTypedRuleContext(FuncCallContext,0);
	};

	parenExpr() {
	    return this.getTypedRuleContext(ParenExprContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	binaryop() {
	    return this.getTypedRuleContext(BinaryopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitExpr(this);
		}
	}


}



class ExprListContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_exprList;
        this._expr = null; // ExprContext
        this.argList = []; // of ExprContexts
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitExprList(this);
		}
	}


}



class IfExprContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_ifExpr;
        this.pred = null; // ExprContext
        this.then_body = null; // FuncBodyContext
        this.else_body = null; // FuncBodyContext
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	funcBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FuncBodyContext);
	    } else {
	        return this.getTypedRuleContext(FuncBodyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterIfExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitIfExpr(this);
		}
	}


}



class FuncCallContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_funcCall;
        this.name = null; // Token
        this.argList = null; // ExprListContext
    }

	IDENTIFIER() {
	    return this.getToken(LayoutLangParser.IDENTIFIER, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterFuncCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitFuncCall(this);
		}
	}


}



class ParenExprContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_parenExpr;
        this.expression = null; // ExprContext
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterParenExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitParenExpr(this);
		}
	}


}



class BinaryopContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_binaryop;
        this.op = null; // Token
    }

	BINARYOP() {
	    return this.getToken(LayoutLangParser.BINARYOP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterBinaryop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitBinaryop(this);
		}
	}


}



class IdentifierContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_identifier;
        this.name = null; // Token
    }

	IDENTIFIER() {
	    return this.getToken(LayoutLangParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitIdentifier(this);
		}
	}


}



class IntegerContext extends antlr4__WEBPACK_IMPORTED_MODULE_0__.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LayoutLangParser.RULE_integer;
        this.value = null; // Token
    }

	INT() {
	    return this.getToken(LayoutLangParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.enterInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof _LayoutLangListener_js__WEBPACK_IMPORTED_MODULE_1__["default"] ) {
	        listener.exitInteger(this);
		}
	}


}




LayoutLangParser.BodyContext = BodyContext; 
LayoutLangParser.FuncContext = FuncContext; 
LayoutLangParser.FuncBodyContext = FuncBodyContext; 
LayoutLangParser.StatementContext = StatementContext; 
LayoutLangParser.ReturnStatementContext = ReturnStatementContext; 
LayoutLangParser.LetStatementContext = LetStatementContext; 
LayoutLangParser.TypeContext = TypeContext; 
LayoutLangParser.ArgsContext = ArgsContext; 
LayoutLangParser.ArgContext = ArgContext; 
LayoutLangParser.ExprContext = ExprContext; 
LayoutLangParser.ExprListContext = ExprListContext; 
LayoutLangParser.IfExprContext = IfExprContext; 
LayoutLangParser.FuncCallContext = FuncCallContext; 
LayoutLangParser.ParenExprContext = ParenExprContext; 
LayoutLangParser.BinaryopContext = BinaryopContext; 
LayoutLangParser.IdentifierContext = IdentifierContext; 
LayoutLangParser.IntegerContext = IntegerContext; 


/***/ }),

/***/ "?1ac6":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _compiler_codegen_decompile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compiler/codegen/decompile */ "./src/compiler/codegen/decompile.ts");
/* harmony import */ var _compiler_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compiler/compiler */ "./src/compiler/compiler.ts");


const code_area = document.getElementById("code-area");
const console_area = document.getElementById("console-area");
const starting_code = `
fn if_func(a: i32) -> i32{
    return if(a < 2){
        return if(a < -10){
            return 0;
        } else {
            return a + 2;
        };
    } else {
        return a * 100;
    };
}

`;
let builtins = null;
window.onload = async () => {
    builtins = await (0,_compiler_codegen_decompile__WEBPACK_IMPORTED_MODULE_0__.decompile)("../cppsrc/stack_alloc.wasm");
    code_area.editor.setValue(starting_code);
    setInterval(update, 16);
};
async function update() {
    const input = code_area.editor.getValue();
    try {
        const binary = new _compiler_compiler__WEBPACK_IMPORTED_MODULE_1__.Compiler(builtins.functions, builtins.data_count, builtins.static_data).compile(input);
        const { instance } = await WebAssembly.instantiate(binary);
        const result = instance.exports.main();
        console.log(result);
        console_area.innerHTML = result;
    }
    catch (e) {
        console.log(e.toString());
        console_area.innerHTML = e.toString();
    }
}

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FB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QTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsS0FBSztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBOzs7Ozs7Ozs7OztBQzFxQkE7QUFDQTtBQUNBO0FB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RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHVCQUF1QjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWYsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTs7QUFF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O0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFdBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFFBQVEsTUFBTSxZQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxRQUFRLE1BQU0sU0FBUztBQUMvQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQsVUFBVTtBQUNW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LEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLG9EQUFXLENBQUMsRUFBQztJQUNsRixFQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsaURBQVEsQ0FBQyxFQUFDO0lBQ2pGLEVBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxpREFBUSxDQUFDLEVBQUM7SUFDakYsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLG1EQUFVLENBQUMsRUFBQztJQUNsRixFQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsbURBQVUsQ0FBQyxFQUFDO0lBQ25GLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxtREFBVSxDQUFDLEVBQUM7SUFDbEYsRUFBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLG1EQUFVLENBQUMsRUFBQztJQUVuRixFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsa0RBQVMsQ0FBQyxFQUFDO0lBQ2hGLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxrREFBUyxDQUFDLEVBQUM7SUFDaEYsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGtEQUFTLENBQUMsRUFBQztJQUNoRixFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsb0RBQVcsQ0FBQyxFQUFDO0lBQ2xGLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxvREFBVyxDQUFDLEVBQUM7SUFDbEYsRUFBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGlEQUFRLENBQUMsRUFBQztJQUNqRixFQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsaURBQVEsQ0FBQyxFQUFDO0lBQ2pGLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxtREFBVSxDQUFDLEVBQUM7SUFDbEYsRUFBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLG1EQUFVLENBQUMsRUFBQztJQUNuRixFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsbURBQVUsQ0FBQyxFQUFDO0lBQ2xGLEVBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxtREFBVSxDQUFDLEVBQUM7SUFFbkYsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGtEQUFTLENBQUMsRUFBQztJQUNoRixFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsa0RBQVMsQ0FBQyxFQUFDO0lBQ2hGLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxrREFBUyxDQUFDLEVBQUM7SUFDaEYsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGtEQUFTLENBQUMsRUFBQztJQUNoRixFQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsaURBQVEsQ0FBQyxFQUFDO0lBQ2pGLEVBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxpREFBUSxDQUFDLEVBQUM7SUFDakYsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGlEQUFRLENBQUMsRUFBQztJQUNoRixFQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsaURBQVEsQ0FBQyxFQUFDO0lBQ2pGLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxpREFBUSxDQUFDLEVBQUM7SUFDaEYsRUFBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGlEQUFRLENBQUMsRUFBQztJQUVqRixFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsa0RBQVMsQ0FBQyxFQUFDO0lBQ2hGLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxrREFBUyxDQUFDLEVBQUM7SUFDaEYsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGtEQUFTLENBQUMsRUFBQztJQUNoRixFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsa0RBQVMsQ0FBQyxFQUFDO0lBQ2hGLEVBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxpREFBUSxDQUFDLEVBQUM7SUFDakYsRUFBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGlEQUFRLENBQUMsRUFBQztJQUNqRixFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsaURBQVEsQ0FBQyxFQUFDO0lBQ2hGLEVBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFD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RUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLE1BQU0sRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQy9CO0FBRU0sTUFBTSxHQUFHLEdBQUc7SUFDZixLQUFLLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixLQUFLLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixFQUFFLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixFQUFFLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixNQUFNLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixLQUFLLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixLQUFLLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixLQUFLLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixLQUFLLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixFQUFFLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixHQUFHLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixLQUFLLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixLQUFLLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUMvQjtBQUVNLE1BQU0sR0FBRyxHQUFHO0lBQ2YsS0FBSyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsRUFBRSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsRUFBRSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsRUFBRSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsRUFBRSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsRUFBRSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsRUFBRSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsS0FBSyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsS0FBSyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsT0FBTyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsR0FBRyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsUUFBUSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FHbkM7QUFFTSxNQUFNLEdBQUcsR0FBRztJQUNmLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLE9BQU8sRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLFFBQVEsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ25DO0FBRU0sTUFBTSxNQUFNLEdBQUc7SUFDbEIsSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xDLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztDQUNyQztBQUVNLE1BQU0sS0FBSyxHQUFHO0lBQ2pCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcs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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0NBQW9DLGlCQUFpQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qzs7QUFFdkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLE9BQU87QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDMUpBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVhOzs7QUFHYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBLElBQUk7QUFDSiw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3TkE7QUFDQTtBQUM0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwrQkFBK0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVEQUEwQjtBQUMxQztBQUNBLG1FQUFtRSwyQ0FBYztBQUNqRjtBQUNlLDhCQUE4Qix5Q0FBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxPQUFPO0FBQ3ZFLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix5REFBNEIsZ0NBQWdDLDBEQUE2QjtBQUNwSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2Q0FBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3BJQTtBQUNBO0FBQzRCO0FBQzVCO0FBQ0E7QUFDZSxpQ0FBaUMsMERBQTZCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqS0E7QUFDQTtBQUM0QjtBQUM2QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyx5QkFBeUI7QUFDaEUsbUJBQW1CLHFCQUFxQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdURBQTBCO0FBQzFDO0FBQ0EsbUVBQW1FLDJDQUFjO0FBQ2pGO0FBQ0EsK0JBQStCLDBEQUE2QjtBQUM1RDtBQUNlLCtCQUErQiwwQ0FBYTtBQUMzRDtBQUNBO0FBQ0EsbUVBQW1FLE9BQU87QUFDMUUsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMERBQTZCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsdUJBQXVCLDhEQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDhEQUFpQztBQUN4RDtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHVCQUF1Qiw4REFBaUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDhEQUFpQztBQUN4RDtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDhEQUFpQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQXFDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsNkJBQTZCLDhEQUFpQztBQUM5RDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw4REFBaUM7QUFDeEQ7QUFDQSxPQUFPO0FBQ1AsdUJBQXVCLDhEQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsdUJBQXVCLDhEQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsdUJBQXVCLDhEQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHVCQUF1Qiw4REFBaUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx1QkFBdUIsOERBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsdUJBQXVCLDhEQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZDQUFnQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxREFBd0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIscURBQXdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixxREFBd0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IscURBQXdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMscURBQXdCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxxREFBd0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFEQUF3QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxREFBd0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIscURBQXdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxREFBd0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFEQUF3QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxREFBd0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscURBQXdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixxREFBd0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFEQUF3QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MscURBQXdCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOERBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixxREFBd0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy8rQ0E7Ozs7OztVQ0FBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDdEJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0E7Ozs7O1dDUEE7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0EsdURBQXVELGlCQUFpQjtXQUN4RTtXQUNBLGdEQUFnRCxhQUFhO1dBQzdEOzs7Ozs7Ozs7Ozs7OztBQ055RDtBQUNWO0FBQy9DLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQW1CN0QsTUFBTSxhQUFhLEdBQ25COzs7Ozs7Ozs7Ozs7O0NBYUM7QUFDRCxJQUFJLFFBQVEsR0FBUSxJQUFJLENBQUM7QUFFekIsTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLElBQUcsRUFBRTtJQUN0QixRQUFRLEdBQUcsTUFBTSxzRUFBUyxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDeEQsU0FBaUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xELFdBQVcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELEtBQUssVUFBVSxNQUFNO0lBQ2pCLE1BQU0sS0FBSyxHQUFJLFNBQWlCLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25ELElBQUk7UUFDQSxNQUFNLE1BQU0sR0FBRyxJQUFJLHdEQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUcsTUFBTSxFQUFDLFFBQVEsRUFBQyxHQUFHLE1BQU0sV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6RCxNQUFNLE1BQU0sR0FBSSxRQUFRLENBQUMsT0FBZSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEIsWUFBWSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7S0FDbkM7SUFBQyxPQUFNLENBQUMsRUFBQztRQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDMUIsWUFBWSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDekM7QUFDTCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvQnVmZmVyZWRUb2tlblN0cmVhbS5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9DaGFyU3RyZWFtcy5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9Db21tb25Ub2tlbkZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvQ29tbW9uVG9rZW5TdHJlYW0uanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvRmlsZVN0cmVhbS5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9JbnB1dFN0cmVhbS5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9JbnRlcnZhbFNldC5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9MTDFBbmFseXplci5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9MZXhlci5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9QYXJzZXIuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvUGFyc2VyUnVsZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvUHJlZGljdGlvbkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvUmVjb2duaXplci5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9SdWxlQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9Ub2tlbi5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9VdGlscy5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vQVROLmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2F0bi9BVE5Db25maWcuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0FUTkNvbmZpZ1NldC5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vQVRORGVzZXJpYWxpemVyLmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2F0bi9BVE5TaW11bGF0b3IuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0FUTlN0YXRlLmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2F0bi9BVE5UeXBlLmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2F0bi9MZXhlckFUTlNpbXVsYXRvci5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vTGV4ZXJBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0xleGVyQWN0aW9uRXhlY3V0b3IuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL1BhcnNlckFUTlNpbXVsYXRvci5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vUHJlZGljdGlvbk1vZGUuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL1NlbWFudGljQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZGZhL0RGQS5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9kZmEvREZBU2VyaWFsaXplci5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9kZmEvREZBU3RhdGUuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZGZhL2luZGV4LmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2Vycm9yL0RpYWdub3N0aWNFcnJvckxpc3RlbmVyLmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2Vycm9yL0Vycm9yTGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZXJyb3IvRXJyb3JTdHJhdGVneS5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9lcnJvci9FcnJvcnMuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZXJyb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvcG9seWZpbGxzL2NvZGVwb2ludGF0LmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L3BvbHlmaWxscy9mcm9tY29kZXBvaW50LmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L3RyZWUvVHJlZS5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC90cmVlL1RyZWVzLmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L3RyZWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9zcmMvY29tcGlsZXIvYW55bGFzaXMvSVJSZXByZXNlbnRhdGlvbi50cyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL3NyYy9jb21waWxlci9hbnlsYXNpcy9PcGVyYXRpb24udHMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9zcmMvY29tcGlsZXIvYW55bGFzaXMvU1NBLnRzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL2FueWxhc2lzL1NTQUZ1bmN0aW9uLnRzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL2FueWxhc2lzL1R5cGVkRnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9zcmMvY29tcGlsZXIvY29kZWdlbi9jb2RlZ2VuLnRzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL2NvZGVnZW4vZGVjb21waWxlLnRzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL2NvZGVnZW4vbGViL2xlYi50cyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL3NyYy9jb21waWxlci9jb2RlZ2VuL3ByaW1pdGl2ZVR5cGVzLnRzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL2NvbXBpbGVyLnRzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL2luc3RydWN0aW9ucy50cyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL3NyYy9jb21waWxlci9wYXJzZS9leHByZXNzaW9uLnRzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL3BhcnNlL3BhcnNlci50cyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL3NyYy9jb21waWxlci9wYXJzZS9zdGF0bWVudC50cyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL3NyYy9jb21waWxlci90eXBlLnRzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL2NvZGVnZW4vbGViL2JpdHMuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9zcmMvY29tcGlsZXIvY29kZWdlbi9sZWIvYnVmcy5qcyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy8uL3NyYy9jb21waWxlci9wYXJzZS9wYXJzZS9MYXlvdXRMYW5nTGV4ZXIuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9zcmMvY29tcGlsZXIvcGFyc2UvcGFyc2UvTGF5b3V0TGFuZ0xpc3RlbmVyLmpzIiwid2VicGFjazovL2xheW91dF9sYW5nLy4vc3JjL2NvbXBpbGVyL3BhcnNlL3BhcnNlL0xheW91dExhbmdQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvaWdub3JlZHxDOlxcVXNlcnNcXDE2MTgyXFxEb2N1bWVudHNcXEpTXFxMYXlvdXRfTGFuZ1xcbm9kZV9tb2R1bGVzXFxhbnRscjRcXHNyY1xcYW50bHI0fGZzIiwid2VicGFjazovL2xheW91dF9sYW5nL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2xheW91dF9sYW5nL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9sYXlvdXRfbGFuZy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2xheW91dF9sYW5nL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbGF5b3V0X2xhbmcvLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuL1Rva2VuJyk7XG5jb25zdCBMZXhlciA9IHJlcXVpcmUoJy4vTGV4ZXInKTtcbmNvbnN0IHtJbnRlcnZhbH0gPSByZXF1aXJlKCcuL0ludGVydmFsU2V0Jyk7XG5cbi8vIHRoaXMgaXMganVzdCB0byBrZWVwIG1lYW5pbmdmdWwgcGFyYW1ldGVyIHR5cGVzIHRvIFBhcnNlclxuY2xhc3MgVG9rZW5TdHJlYW0ge31cblxuLyoqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBUb2tlblN0cmVhbX0gbG9hZHMgdG9rZW5zIGZyb20gYVxuICoge0BsaW5rIFRva2VuU291cmNlfSBvbi1kZW1hbmQsIGFuZCBwbGFjZXMgdGhlIHRva2VucyBpbiBhIGJ1ZmZlciB0byBwcm92aWRlXG4gKiBhY2Nlc3MgdG8gYW55IHByZXZpb3VzIHRva2VuIGJ5IGluZGV4LlxuICpcbiAqIDxwPlxuICogVGhpcyB0b2tlbiBzdHJlYW0gaWdub3JlcyB0aGUgdmFsdWUgb2Yge0BsaW5rIFRva2VuLy9nZXRDaGFubmVsfS4gSWYgeW91clxuICogcGFyc2VyIHJlcXVpcmVzIHRoZSB0b2tlbiBzdHJlYW0gZmlsdGVyIHRva2VucyB0byBvbmx5IHRob3NlIG9uIGEgcGFydGljdWxhclxuICogY2hhbm5lbCwgc3VjaCBhcyB7QGxpbmsgVG9rZW4vL0RFRkFVTFRfQ0hBTk5FTH0gb3JcbiAqIHtAbGluayBUb2tlbi8vSElEREVOX0NIQU5ORUx9LCB1c2UgYSBmaWx0ZXJpbmcgdG9rZW4gc3RyZWFtIHN1Y2ggYVxuICoge0BsaW5rIENvbW1vblRva2VuU3RyZWFtfS48L3A+XG4gKi9cbmNsYXNzIEJ1ZmZlcmVkVG9rZW5TdHJlYW0gZXh0ZW5kcyBUb2tlblN0cmVhbSB7XG5cdGNvbnN0cnVjdG9yKHRva2VuU291cmNlKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdC8vIFRoZSB7QGxpbmsgVG9rZW5Tb3VyY2V9IGZyb20gd2hpY2ggdG9rZW5zIGZvciB0aGlzIHN0cmVhbSBhcmUgZmV0Y2hlZC5cblx0XHR0aGlzLnRva2VuU291cmNlID0gdG9rZW5Tb3VyY2U7XG5cdFx0LyoqXG5cdFx0ICogQSBjb2xsZWN0aW9uIG9mIGFsbCB0b2tlbnMgZmV0Y2hlZCBmcm9tIHRoZSB0b2tlbiBzb3VyY2UuIFRoZSBsaXN0IGlzXG5cdFx0ICogY29uc2lkZXJlZCBhIGNvbXBsZXRlIHZpZXcgb2YgdGhlIGlucHV0IG9uY2Uge0BsaW5rIC8vZmV0Y2hlZEVPRn0gaXMgc2V0XG5cdFx0ICogdG8ge0Bjb2RlIHRydWV9LlxuXHRcdCAqL1xuXHRcdHRoaXMudG9rZW5zID0gW107XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW5kZXggaW50byB7QGxpbmsgLy90b2tlbnN9IG9mIHRoZSBjdXJyZW50IHRva2VuIChuZXh0IHRva2VuIHRvXG5cdFx0ICoge0BsaW5rIC8vY29uc3VtZX0pLiB7QGxpbmsgLy90b2tlbnN9e0Bjb2RlIFt9e0BsaW5rIC8vcH17QGNvZGUgXX0gc2hvdWxkXG5cdFx0ICogYmVcblx0XHQgKiB7QGxpbmsgLy9MVCBMVCgxKX0uXG5cdFx0ICpcblx0XHQgKiA8cD5UaGlzIGZpZWxkIGlzIHNldCB0byAtMSB3aGVuIHRoZSBzdHJlYW0gaXMgZmlyc3QgY29uc3RydWN0ZWQgb3Igd2hlblxuXHRcdCAqIHtAbGluayAvL3NldFRva2VuU291cmNlfSBpcyBjYWxsZWQsIGluZGljYXRpbmcgdGhhdCB0aGUgZmlyc3QgdG9rZW4gaGFzXG5cdFx0ICogbm90IHlldCBiZWVuIGZldGNoZWQgZnJvbSB0aGUgdG9rZW4gc291cmNlLiBGb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbixcblx0XHQgKiBzZWUgdGhlIGRvY3VtZW50YXRpb24gb2Yge0BsaW5rIEludFN0cmVhbX0gZm9yIGEgZGVzY3JpcHRpb24gb2Zcblx0XHQgKiBJbml0aWFsaXppbmcgTWV0aG9kcy48L3A+XG5cdFx0ICovXG5cdFx0dGhpcy5pbmRleCA9IC0xO1xuXG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHtAbGluayBUb2tlbi8vRU9GfSB0b2tlbiBoYXMgYmVlbiBmZXRjaGVkIGZyb21cblx0XHQgKiB7QGxpbmsgLy90b2tlblNvdXJjZX0gYW5kIGFkZGVkIHRvIHtAbGluayAvL3Rva2Vuc30uIFRoaXMgZmllbGQgaW1wcm92ZXNcblx0XHQgKiBwZXJmb3JtYW5jZSBmb3IgdGhlIGZvbGxvd2luZyBjYXNlczpcblx0XHQgKlxuXHRcdCAqIDx1bD5cblx0XHQgKiA8bGk+e0BsaW5rIC8vY29uc3VtZX06IFRoZSBsb29rYWhlYWQgY2hlY2sgaW4ge0BsaW5rIC8vY29uc3VtZX0gdG9cblx0XHQgKiBwcmV2ZW50XG5cdFx0ICogY29uc3VtaW5nIHRoZSBFT0Ygc3ltYm9sIGlzIG9wdGltaXplZCBieSBjaGVja2luZyB0aGUgdmFsdWVzIG9mXG5cdFx0ICoge0BsaW5rIC8vZmV0Y2hlZEVPRn0gYW5kIHtAbGluayAvL3B9IGluc3RlYWQgb2YgY2FsbGluZyB7QGxpbmtcblx0XHQgKiAvL0xBfS48L2xpPlxuXHRcdCAqIDxsaT57QGxpbmsgLy9mZXRjaH06IFRoZSBjaGVjayB0byBwcmV2ZW50IGFkZGluZyBtdWx0aXBsZSBFT0Ygc3ltYm9sc1xuXHRcdCAqIGludG9cblx0XHQgKiB7QGxpbmsgLy90b2tlbnN9IGlzIHRyaXZpYWwgd2l0aCB0aGlzIGZpZWxkLjwvbGk+XG5cdFx0ICogPHVsPlxuXHRcdCAqL1xuXHRcdHRoaXMuZmV0Y2hlZEVPRiA9IGZhbHNlO1xuXHR9XG5cblx0bWFyaygpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdHJlbGVhc2UobWFya2VyKSB7XG5cdFx0Ly8gbm8gcmVzb3VyY2VzIHRvIHJlbGVhc2Vcblx0fVxuXG5cdHJlc2V0KCkge1xuXHRcdHRoaXMuc2VlaygwKTtcblx0fVxuXG5cdHNlZWsoaW5kZXgpIHtcblx0XHR0aGlzLmxhenlJbml0KCk7XG5cdFx0dGhpcy5pbmRleCA9IHRoaXMuYWRqdXN0U2Vla0luZGV4KGluZGV4KTtcblx0fVxuXG5cdGdldChpbmRleCkge1xuXHRcdHRoaXMubGF6eUluaXQoKTtcblx0XHRyZXR1cm4gdGhpcy50b2tlbnNbaW5kZXhdO1xuXHR9XG5cblx0Y29uc3VtZSgpIHtcblx0XHRsZXQgc2tpcEVvZkNoZWNrID0gZmFsc2U7XG5cdFx0aWYgKHRoaXMuaW5kZXggPj0gMCkge1xuXHRcdFx0aWYgKHRoaXMuZmV0Y2hlZEVPRikge1xuXHRcdFx0XHQvLyB0aGUgbGFzdCB0b2tlbiBpbiB0b2tlbnMgaXMgRU9GLiBza2lwIGNoZWNrIGlmIHAgaW5kZXhlcyBhbnlcblx0XHRcdFx0Ly8gZmV0Y2hlZCB0b2tlbiBleGNlcHQgdGhlIGxhc3QuXG5cdFx0XHRcdHNraXBFb2ZDaGVjayA9IHRoaXMuaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGggLSAxO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gbm8gRU9GIHRva2VuIGluIHRva2Vucy4gc2tpcCBjaGVjayBpZiBwIGluZGV4ZXMgYSBmZXRjaGVkIHRva2VuLlxuXHRcdFx0XHRza2lwRW9mQ2hlY2sgPSB0aGlzLmluZGV4IDwgdGhpcy50b2tlbnMubGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBub3QgeWV0IGluaXRpYWxpemVkXG5cdFx0XHRza2lwRW9mQ2hlY2sgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCFza2lwRW9mQ2hlY2sgJiYgdGhpcy5MQSgxKSA9PT0gVG9rZW4uRU9GKSB7XG5cdFx0XHR0aHJvdyBcImNhbm5vdCBjb25zdW1lIEVPRlwiO1xuXHRcdH1cblx0XHRpZiAodGhpcy5zeW5jKHRoaXMuaW5kZXggKyAxKSkge1xuXHRcdFx0dGhpcy5pbmRleCA9IHRoaXMuYWRqdXN0U2Vla0luZGV4KHRoaXMuaW5kZXggKyAxKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWFrZSBzdXJlIGluZGV4IHtAY29kZSBpfSBpbiB0b2tlbnMgaGFzIGEgdG9rZW4uXG5cdCAqXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IHtAY29kZSB0cnVlfSBpZiBhIHRva2VuIGlzIGxvY2F0ZWQgYXQgaW5kZXgge0Bjb2RlIGl9LCBvdGhlcndpc2Vcblx0ICoge0Bjb2RlIGZhbHNlfS5cblx0ICogQHNlZSAvL2dldChpbnQgaSlcblx0ICovXG5cdHN5bmMoaSkge1xuXHRcdGNvbnN0IG4gPSBpIC0gdGhpcy50b2tlbnMubGVuZ3RoICsgMTsgLy8gaG93IG1hbnkgbW9yZSBlbGVtZW50cyB3ZSBuZWVkP1xuXHRcdGlmIChuID4gMCkge1xuXHRcdFx0Y29uc3QgZmV0Y2hlZCA9IHRoaXMuZmV0Y2gobik7XG5cdFx0XHRyZXR1cm4gZmV0Y2hlZCA+PSBuO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGQge0Bjb2RlIG59IGVsZW1lbnRzIHRvIGJ1ZmZlci5cblx0ICpcblx0ICogQHJldHVybiB7TnVtYmVyfSBUaGUgYWN0dWFsIG51bWJlciBvZiBlbGVtZW50cyBhZGRlZCB0byB0aGUgYnVmZmVyLlxuXHQgKi9cblx0ZmV0Y2gobikge1xuXHRcdGlmICh0aGlzLmZldGNoZWRFT0YpIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuXHRcdFx0Y29uc3QgdCA9IHRoaXMudG9rZW5Tb3VyY2UubmV4dFRva2VuKCk7XG5cdFx0XHR0LnRva2VuSW5kZXggPSB0aGlzLnRva2Vucy5sZW5ndGg7XG5cdFx0XHR0aGlzLnRva2Vucy5wdXNoKHQpO1xuXHRcdFx0aWYgKHQudHlwZSA9PT0gVG9rZW4uRU9GKSB7XG5cdFx0XHRcdHRoaXMuZmV0Y2hlZEVPRiA9IHRydWU7XG5cdFx0XHRcdHJldHVybiBpICsgMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG47XG5cdH1cblxuLy8gR2V0IGFsbCB0b2tlbnMgZnJvbSBzdGFydC4uc3RvcCBpbmNsdXNpdmVseS8vL1xuXHRnZXRUb2tlbnMoc3RhcnQsIHN0b3AsIHR5cGVzKSB7XG5cdFx0aWYgKHR5cGVzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHR5cGVzID0gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHN0YXJ0IDwgMCB8fCBzdG9wIDwgMCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdHRoaXMubGF6eUluaXQoKTtcblx0XHRjb25zdCBzdWJzZXQgPSBbXTtcblx0XHRpZiAoc3RvcCA+PSB0aGlzLnRva2Vucy5sZW5ndGgpIHtcblx0XHRcdHN0b3AgPSB0aGlzLnRva2Vucy5sZW5ndGggLSAxO1xuXHRcdH1cblx0XHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdG9wOyBpKyspIHtcblx0XHRcdGNvbnN0IHQgPSB0aGlzLnRva2Vuc1tpXTtcblx0XHRcdGlmICh0LnR5cGUgPT09IFRva2VuLkVPRikge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlcyA9PT0gbnVsbCB8fCB0eXBlcy5jb250YWlucyh0LnR5cGUpKSB7XG5cdFx0XHRcdHN1YnNldC5wdXNoKHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc3Vic2V0O1xuXHR9XG5cblx0TEEoaSkge1xuXHRcdHJldHVybiB0aGlzLkxUKGkpLnR5cGU7XG5cdH1cblxuXHRMQihrKSB7XG5cdFx0aWYgKHRoaXMuaW5kZXggLSBrIDwgMCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnRva2Vuc1t0aGlzLmluZGV4IC0ga107XG5cdH1cblxuXHRMVChrKSB7XG5cdFx0dGhpcy5sYXp5SW5pdCgpO1xuXHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0aWYgKGsgPCAwKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5MQigtayk7XG5cdFx0fVxuXHRcdGNvbnN0IGkgPSB0aGlzLmluZGV4ICsgayAtIDE7XG5cdFx0dGhpcy5zeW5jKGkpO1xuXHRcdGlmIChpID49IHRoaXMudG9rZW5zLmxlbmd0aCkgeyAvLyByZXR1cm4gRU9GIHRva2VuXG5cdFx0XHQvLyBFT0YgbXVzdCBiZSBsYXN0IHRva2VuXG5cdFx0XHRyZXR1cm4gdGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoIC0gMV07XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnRva2Vuc1tpXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBbGxvd2VkIGRlcml2ZWQgY2xhc3NlcyB0byBtb2RpZnkgdGhlIGJlaGF2aW9yIG9mIG9wZXJhdGlvbnMgd2hpY2ggY2hhbmdlXG5cdCAqIHRoZSBjdXJyZW50IHN0cmVhbSBwb3NpdGlvbiBieSBhZGp1c3RpbmcgdGhlIHRhcmdldCB0b2tlbiBpbmRleCBvZiBhIHNlZWtcblx0ICogb3BlcmF0aW9uLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgcmV0dXJucyB7QGNvZGUgaX0uIElmIGFuXG5cdCAqIGV4Y2VwdGlvbiBpcyB0aHJvd24gaW4gdGhpcyBtZXRob2QsIHRoZSBjdXJyZW50IHN0cmVhbSBpbmRleCBzaG91bGQgbm90IGJlXG5cdCAqIGNoYW5nZWQuXG5cdCAqXG5cdCAqIDxwPkZvciBleGFtcGxlLCB7QGxpbmsgQ29tbW9uVG9rZW5TdHJlYW19IG92ZXJyaWRlcyB0aGlzIG1ldGhvZCB0byBlbnN1cmVcblx0ICogdGhhdFxuXHQgKiB0aGUgc2VlayB0YXJnZXQgaXMgYWx3YXlzIGFuIG9uLWNoYW5uZWwgdG9rZW4uPC9wPlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gaSBUaGUgdGFyZ2V0IHRva2VuIGluZGV4LlxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBhZGp1c3RlZCB0YXJnZXQgdG9rZW4gaW5kZXguXG5cdCAqL1xuXHRhZGp1c3RTZWVrSW5kZXgoaSkge1xuXHRcdHJldHVybiBpO1xuXHR9XG5cblx0bGF6eUluaXQoKSB7XG5cdFx0aWYgKHRoaXMuaW5kZXggPT09IC0xKSB7XG5cdFx0XHR0aGlzLnNldHVwKCk7XG5cdFx0fVxuXHR9XG5cblx0c2V0dXAoKSB7XG5cdFx0dGhpcy5zeW5jKDApO1xuXHRcdHRoaXMuaW5kZXggPSB0aGlzLmFkanVzdFNlZWtJbmRleCgwKTtcblx0fVxuXG4vLyBSZXNldCB0aGlzIHRva2VuIHN0cmVhbSBieSBzZXR0aW5nIGl0cyB0b2tlbiBzb3VyY2UuLy8vXG5cdHNldFRva2VuU291cmNlKHRva2VuU291cmNlKSB7XG5cdFx0dGhpcy50b2tlblNvdXJjZSA9IHRva2VuU291cmNlO1xuXHRcdHRoaXMudG9rZW5zID0gW107XG5cdFx0dGhpcy5pbmRleCA9IC0xO1xuXHRcdHRoaXMuZmV0Y2hlZEVPRiA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdpdmVuIGEgc3RhcnRpbmcgaW5kZXgsIHJldHVybiB0aGUgaW5kZXggb2YgdGhlIG5leHQgdG9rZW4gb24gY2hhbm5lbC5cblx0ICogUmV0dXJuIGkgaWYgdG9rZW5zW2ldIGlzIG9uIGNoYW5uZWwuIFJldHVybiAtMSBpZiB0aGVyZSBhcmUgbm8gdG9rZW5zXG5cdCAqIG9uIGNoYW5uZWwgYmV0d2VlbiBpIGFuZCBFT0YuXG5cdCAqL1xuXHRuZXh0VG9rZW5PbkNoYW5uZWwoaSwgY2hhbm5lbCkge1xuXHRcdHRoaXMuc3luYyhpKTtcblx0XHRpZiAoaSA+PSB0aGlzLnRva2Vucy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiAtMTtcblx0XHR9XG5cdFx0bGV0IHRva2VuID0gdGhpcy50b2tlbnNbaV07XG5cdFx0d2hpbGUgKHRva2VuLmNoYW5uZWwgIT09IHRoaXMuY2hhbm5lbCkge1xuXHRcdFx0aWYgKHRva2VuLnR5cGUgPT09IFRva2VuLkVPRikge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpICs9IDE7XG5cdFx0XHR0aGlzLnN5bmMoaSk7XG5cdFx0XHR0b2tlbiA9IHRoaXMudG9rZW5zW2ldO1xuXHRcdH1cblx0XHRyZXR1cm4gaTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHaXZlbiBhIHN0YXJ0aW5nIGluZGV4LCByZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBwcmV2aW91cyB0b2tlbiBvbiBjaGFubmVsLlxuXHQgKiBSZXR1cm4gaSBpZiB0b2tlbnNbaV0gaXMgb24gY2hhbm5lbC4gUmV0dXJuIC0xIGlmIHRoZXJlIGFyZSBubyB0b2tlbnNcblx0ICogb24gY2hhbm5lbCBiZXR3ZWVuIGkgYW5kIDAuXG5cdCAqL1xuXHRwcmV2aW91c1Rva2VuT25DaGFubmVsKGksIGNoYW5uZWwpIHtcblx0XHR3aGlsZSAoaSA+PSAwICYmIHRoaXMudG9rZW5zW2ldLmNoYW5uZWwgIT09IGNoYW5uZWwpIHtcblx0XHRcdGkgLT0gMTtcblx0XHR9XG5cdFx0cmV0dXJuIGk7XG5cdH1cblxuXHQvKipcblx0ICogQ29sbGVjdCBhbGwgdG9rZW5zIG9uIHNwZWNpZmllZCBjaGFubmVsIHRvIHRoZSByaWdodCBvZlxuXHQgKiB0aGUgY3VycmVudCB0b2tlbiB1cCB1bnRpbCB3ZSBzZWUgYSB0b2tlbiBvbiBERUZBVUxUX1RPS0VOX0NIQU5ORUwgb3Jcblx0ICogRU9GLiBJZiBjaGFubmVsIGlzIC0xLCBmaW5kIGFueSBub24gZGVmYXVsdCBjaGFubmVsIHRva2VuLlxuXHQgKi9cblx0Z2V0SGlkZGVuVG9rZW5zVG9SaWdodCh0b2tlbkluZGV4LFxuXHRcdFx0Y2hhbm5lbCkge1xuXHRcdGlmIChjaGFubmVsID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNoYW5uZWwgPSAtMTtcblx0XHR9XG5cdFx0dGhpcy5sYXp5SW5pdCgpO1xuXHRcdGlmICh0b2tlbkluZGV4IDwgMCB8fCB0b2tlbkluZGV4ID49IHRoaXMudG9rZW5zLmxlbmd0aCkge1xuXHRcdFx0dGhyb3cgXCJcIiArIHRva2VuSW5kZXggKyBcIiBub3QgaW4gMC4uXCIgKyB0aGlzLnRva2Vucy5sZW5ndGggLSAxO1xuXHRcdH1cblx0XHRjb25zdCBuZXh0T25DaGFubmVsID0gdGhpcy5uZXh0VG9rZW5PbkNoYW5uZWwodG9rZW5JbmRleCArIDEsIExleGVyLkRFRkFVTFRfVE9LRU5fQ0hBTk5FTCk7XG5cdFx0Y29uc3QgZnJvbV8gPSB0b2tlbkluZGV4ICsgMTtcblx0XHQvLyBpZiBub25lIG9uY2hhbm5lbCB0byByaWdodCwgbmV4dE9uQ2hhbm5lbD0tMSBzbyBzZXQgdG8gPSBsYXN0IHRva2VuXG5cdFx0Y29uc3QgdG8gPSBuZXh0T25DaGFubmVsID09PSAtMSA/IHRoaXMudG9rZW5zLmxlbmd0aCAtIDEgOiBuZXh0T25DaGFubmVsO1xuXHRcdHJldHVybiB0aGlzLmZpbHRlckZvckNoYW5uZWwoZnJvbV8sIHRvLCBjaGFubmVsKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb2xsZWN0IGFsbCB0b2tlbnMgb24gc3BlY2lmaWVkIGNoYW5uZWwgdG8gdGhlIGxlZnQgb2Zcblx0ICogdGhlIGN1cnJlbnQgdG9rZW4gdXAgdW50aWwgd2Ugc2VlIGEgdG9rZW4gb24gREVGQVVMVF9UT0tFTl9DSEFOTkVMLlxuXHQgKiBJZiBjaGFubmVsIGlzIC0xLCBmaW5kIGFueSBub24gZGVmYXVsdCBjaGFubmVsIHRva2VuLlxuXHQgKi9cblx0Z2V0SGlkZGVuVG9rZW5zVG9MZWZ0KHRva2VuSW5kZXgsXG5cdFx0XHRjaGFubmVsKSB7XG5cdFx0aWYgKGNoYW5uZWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y2hhbm5lbCA9IC0xO1xuXHRcdH1cblx0XHR0aGlzLmxhenlJbml0KCk7XG5cdFx0aWYgKHRva2VuSW5kZXggPCAwIHx8IHRva2VuSW5kZXggPj0gdGhpcy50b2tlbnMubGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBcIlwiICsgdG9rZW5JbmRleCArIFwiIG5vdCBpbiAwLi5cIiArIHRoaXMudG9rZW5zLmxlbmd0aCAtIDE7XG5cdFx0fVxuXHRcdGNvbnN0IHByZXZPbkNoYW5uZWwgPSB0aGlzLnByZXZpb3VzVG9rZW5PbkNoYW5uZWwodG9rZW5JbmRleCAtIDEsIExleGVyLkRFRkFVTFRfVE9LRU5fQ0hBTk5FTCk7XG5cdFx0aWYgKHByZXZPbkNoYW5uZWwgPT09IHRva2VuSW5kZXggLSAxKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0Ly8gaWYgbm9uZSBvbiBjaGFubmVsIHRvIGxlZnQsIHByZXZPbkNoYW5uZWw9LTEgdGhlbiBmcm9tPTBcblx0XHRjb25zdCBmcm9tXyA9IHByZXZPbkNoYW5uZWwgKyAxO1xuXHRcdGNvbnN0IHRvID0gdG9rZW5JbmRleCAtIDE7XG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyRm9yQ2hhbm5lbChmcm9tXywgdG8sIGNoYW5uZWwpO1xuXHR9XG5cblx0ZmlsdGVyRm9yQ2hhbm5lbChsZWZ0LCByaWdodCwgY2hhbm5lbCkge1xuXHRcdGNvbnN0IGhpZGRlbiA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSBsZWZ0OyBpIDwgcmlnaHQgKyAxOyBpKyspIHtcblx0XHRcdGNvbnN0IHQgPSB0aGlzLnRva2Vuc1tpXTtcblx0XHRcdGlmIChjaGFubmVsID09PSAtMSkge1xuXHRcdFx0XHRpZiAodC5jaGFubmVsICE9PSBMZXhlci5ERUZBVUxUX1RPS0VOX0NIQU5ORUwpIHtcblx0XHRcdFx0XHRoaWRkZW4ucHVzaCh0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh0LmNoYW5uZWwgPT09IGNoYW5uZWwpIHtcblx0XHRcdFx0aGlkZGVuLnB1c2godCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChoaWRkZW4ubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIGhpZGRlbjtcblx0fVxuXG5cdGdldFNvdXJjZU5hbWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMudG9rZW5Tb3VyY2UuZ2V0U291cmNlTmFtZSgpO1xuXHR9XG5cbi8vIEdldCB0aGUgdGV4dCBvZiBhbGwgdG9rZW5zIGluIHRoaXMgYnVmZmVyLi8vL1xuXHRnZXRUZXh0KGludGVydmFsKSB7XG5cdFx0dGhpcy5sYXp5SW5pdCgpO1xuXHRcdHRoaXMuZmlsbCgpO1xuXHRcdGlmIChpbnRlcnZhbCA9PT0gdW5kZWZpbmVkIHx8IGludGVydmFsID09PSBudWxsKSB7XG5cdFx0XHRpbnRlcnZhbCA9IG5ldyBJbnRlcnZhbCgwLCB0aGlzLnRva2Vucy5sZW5ndGggLSAxKTtcblx0XHR9XG5cdFx0bGV0IHN0YXJ0ID0gaW50ZXJ2YWwuc3RhcnQ7XG5cdFx0aWYgKHN0YXJ0IGluc3RhbmNlb2YgVG9rZW4pIHtcblx0XHRcdHN0YXJ0ID0gc3RhcnQudG9rZW5JbmRleDtcblx0XHR9XG5cdFx0bGV0IHN0b3AgPSBpbnRlcnZhbC5zdG9wO1xuXHRcdGlmIChzdG9wIGluc3RhbmNlb2YgVG9rZW4pIHtcblx0XHRcdHN0b3AgPSBzdG9wLnRva2VuSW5kZXg7XG5cdFx0fVxuXHRcdGlmIChzdGFydCA9PT0gbnVsbCB8fCBzdG9wID09PSBudWxsIHx8IHN0YXJ0IDwgMCB8fCBzdG9wIDwgMCkge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXHRcdGlmIChzdG9wID49IHRoaXMudG9rZW5zLmxlbmd0aCkge1xuXHRcdFx0c3RvcCA9IHRoaXMudG9rZW5zLmxlbmd0aCAtIDE7XG5cdFx0fVxuXHRcdGxldCBzID0gXCJcIjtcblx0XHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdG9wICsgMTsgaSsrKSB7XG5cdFx0XHRjb25zdCB0ID0gdGhpcy50b2tlbnNbaV07XG5cdFx0XHRpZiAodC50eXBlID09PSBUb2tlbi5FT0YpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRzID0gcyArIHQudGV4dDtcblx0XHR9XG5cdFx0cmV0dXJuIHM7XG5cdH1cblxuLy8gR2V0IGFsbCB0b2tlbnMgZnJvbSBsZXhlciB1bnRpbCBFT0YvLy9cblx0ZmlsbCgpIHtcblx0XHR0aGlzLmxhenlJbml0KCk7XG5cdFx0d2hpbGUgKHRoaXMuZmV0Y2goMTAwMCkgPT09IDEwMDApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0fVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyZWRUb2tlblN0cmVhbTtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3QgSW5wdXRTdHJlYW0gPSByZXF1aXJlKCcuL0lucHV0U3RyZWFtJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyB0byBjcmVhdGUgSW5wdXRTdHJlYW1zIGZyb20gdmFyaW91cyBzb3VyY2VzLlxuICpcbiAqIEFsbCByZXR1cm5lZCBJbnB1dFN0cmVhbXMgc3VwcG9ydCB0aGUgZnVsbCByYW5nZSBvZiBVbmljb2RlXG4gKiB1cCB0byBVKzEwRkZGRiAodGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgSW5wdXRTdHJlYW0gb25seSBzdXBwb3J0c1xuICogY29kZSBwb2ludHMgdXAgdG8gVStGRkZGKS5cbiAqL1xuY29uc3QgQ2hhclN0cmVhbXMgPSB7XG4gIC8vIENyZWF0ZXMgYW4gSW5wdXRTdHJlYW0gZnJvbSBhIHN0cmluZy5cbiAgZnJvbVN0cmluZzogZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIG5ldyBJbnB1dFN0cmVhbShzdHIsIHRydWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBc3luY2hyb25vdXNseSBjcmVhdGVzIGFuIElucHV0U3RyZWFtIGZyb20gYSBibG9iIGdpdmVuIHRoZVxuICAgKiBlbmNvZGluZyBvZiB0aGUgYnl0ZXMgaW4gdGhhdCBibG9iIChkZWZhdWx0cyB0byAndXRmOCcgaWZcbiAgICogZW5jb2RpbmcgaXMgbnVsbCkuXG4gICAqXG4gICAqIEludm9rZXMgb25Mb2FkKHJlc3VsdCkgb24gc3VjY2Vzcywgb25FcnJvcihlcnJvcikgb25cbiAgICogZmFpbHVyZS5cbiAgICovXG4gIGZyb21CbG9iOiBmdW5jdGlvbihibG9iLCBlbmNvZGluZywgb25Mb2FkLCBvbkVycm9yKSB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IHdpbmRvdy5GaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGNvbnN0IGlzID0gbmV3IElucHV0U3RyZWFtKGUudGFyZ2V0LnJlc3VsdCwgdHJ1ZSk7XG4gICAgICBvbkxvYWQoaXMpO1xuICAgIH07XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBvbkVycm9yO1xuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IsIGVuY29kaW5nKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBJbnB1dFN0cmVhbSBmcm9tIGEgQnVmZmVyIGdpdmVuIHRoZVxuICAgKiBlbmNvZGluZyBvZiB0aGUgYnl0ZXMgaW4gdGhhdCBidWZmZXIgKGRlZmF1bHRzIHRvICd1dGY4JyBpZlxuICAgKiBlbmNvZGluZyBpcyBudWxsKS5cbiAgICovXG4gIGZyb21CdWZmZXI6IGZ1bmN0aW9uKGJ1ZmZlciwgZW5jb2RpbmcpIHtcbiAgICByZXR1cm4gbmV3IElucHV0U3RyZWFtKGJ1ZmZlci50b1N0cmluZyhlbmNvZGluZyksIHRydWUpO1xuICB9LFxuXG4gIC8qKiBBc3luY2hyb25vdXNseSBjcmVhdGVzIGFuIElucHV0U3RyZWFtIGZyb20gYSBmaWxlIG9uIGRpc2sgZ2l2ZW5cbiAgICogdGhlIGVuY29kaW5nIG9mIHRoZSBieXRlcyBpbiB0aGF0IGZpbGUgKGRlZmF1bHRzIHRvICd1dGY4JyBpZlxuICAgKiBlbmNvZGluZyBpcyBudWxsKS5cbiAgICpcbiAgICogSW52b2tlcyBjYWxsYmFjayhlcnJvciwgcmVzdWx0KSBvbiBjb21wbGV0aW9uLlxuICAgKi9cbiAgZnJvbVBhdGg6IGZ1bmN0aW9uKHBhdGgsIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIGZzLnJlYWRGaWxlKHBhdGgsIGVuY29kaW5nLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgIGxldCBpcyA9IG51bGw7XG4gICAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICBpcyA9IG5ldyBJbnB1dFN0cmVhbShkYXRhLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKGVyciwgaXMpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTeW5jaHJvbm91c2x5IGNyZWF0ZXMgYW4gSW5wdXRTdHJlYW0gZ2l2ZW4gYSBwYXRoIHRvIGEgZmlsZVxuICAgKiBvbiBkaXNrIGFuZCB0aGUgZW5jb2Rpbmcgb2YgdGhlIGJ5dGVzIGluIHRoYXQgZmlsZSAoZGVmYXVsdHMgdG9cbiAgICogJ3V0ZjgnIGlmIGVuY29kaW5nIGlzIG51bGwpLlxuICAgKi9cbiAgZnJvbVBhdGhTeW5jOiBmdW5jdGlvbihwYXRoLCBlbmNvZGluZykge1xuICAgIGNvbnN0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCwgZW5jb2RpbmcpO1xuICAgIHJldHVybiBuZXcgSW5wdXRTdHJlYW0oZGF0YSwgdHJ1ZSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhclN0cmVhbXM7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IENvbW1vblRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLkNvbW1vblRva2VuO1xuXG5jbGFzcyBUb2tlbkZhY3Rvcnkge31cblxuLyoqXG4gKiBUaGlzIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFRva2VuRmFjdG9yeX0gY3JlYXRlc1xuICoge0BsaW5rIENvbW1vblRva2VufSBvYmplY3RzLlxuICovXG5jbGFzcyBDb21tb25Ub2tlbkZhY3RvcnkgZXh0ZW5kcyBUb2tlbkZhY3Rvcnkge1xuICAgIGNvbnN0cnVjdG9yKGNvcHlUZXh0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB7QGxpbmsgQ29tbW9uVG9rZW4vL3NldFRleHR9IHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXJcbiAgICAgICAgICogY29uc3RydWN0aW5nIHRva2VucyB0byBleHBsaWNpdGx5IHNldCB0aGUgdGV4dC4gVGhpcyBpcyB1c2VmdWwgZm9yIGNhc2VzXG4gICAgICAgICAqIHdoZXJlIHRoZSBpbnB1dCBzdHJlYW0gbWlnaHQgbm90IGJlIGFibGUgdG8gcHJvdmlkZSBhcmJpdHJhcnkgc3Vic3RyaW5nc1xuICAgICAgICAgKiBvZiB0ZXh0IGZyb20gdGhlIGlucHV0IGFmdGVyIHRoZSBsZXhlciBjcmVhdGVzIGEgdG9rZW4gKGUuZy4gdGhlXG4gICAgICAgICAqIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBDaGFyU3RyZWFtLy9nZXRUZXh0fSBpblxuICAgICAgICAgKiB7QGxpbmsgVW5idWZmZXJlZENoYXJTdHJlYW19IHRocm93cyBhblxuICAgICAgICAgKiB7QGxpbmsgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb259KS4gRXhwbGljaXRseSBzZXR0aW5nIHRoZSB0b2tlbiB0ZXh0XG4gICAgICAgICAqIGFsbG93cyB7QGxpbmsgVG9rZW4vL2dldFRleHR9IHRvIGJlIGNhbGxlZCBhdCBhbnkgdGltZSByZWdhcmRsZXNzIG9mIHRoZVxuICAgICAgICAgKiBpbnB1dCBzdHJlYW0gaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIDxwPlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB7QGNvZGUgZmFsc2V9IHRvIGF2b2lkIHRoZSBwZXJmb3JtYW5jZSBhbmQgbWVtb3J5XG4gICAgICAgICAqIG92ZXJoZWFkIG9mIGNvcHlpbmcgdGV4dCBmb3IgZXZlcnkgdG9rZW4gdW5sZXNzIGV4cGxpY2l0bHkgcmVxdWVzdGVkLjwvcD5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29weVRleHQgPSBjb3B5VGV4dD09PXVuZGVmaW5lZCA/IGZhbHNlIDogY29weVRleHQ7XG4gICAgfVxuXG4gICAgY3JlYXRlKHNvdXJjZSwgdHlwZSwgdGV4dCwgY2hhbm5lbCwgc3RhcnQsIHN0b3AsIGxpbmUsIGNvbHVtbikge1xuICAgICAgICBjb25zdCB0ID0gbmV3IENvbW1vblRva2VuKHNvdXJjZSwgdHlwZSwgY2hhbm5lbCwgc3RhcnQsIHN0b3ApO1xuICAgICAgICB0LmxpbmUgPSBsaW5lO1xuICAgICAgICB0LmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgaWYgKHRleHQgIT09bnVsbCkge1xuICAgICAgICAgICAgdC50ZXh0ID0gdGV4dDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvcHlUZXh0ICYmIHNvdXJjZVsxXSAhPT1udWxsKSB7XG4gICAgICAgICAgICB0LnRleHQgPSBzb3VyY2VbMV0uZ2V0VGV4dChzdGFydCxzdG9wKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9XG5cbiAgICBjcmVhdGVUaGluKHR5cGUsIHRleHQpIHtcbiAgICAgICAgY29uc3QgdCA9IG5ldyBDb21tb25Ub2tlbihudWxsLCB0eXBlKTtcbiAgICAgICAgdC50ZXh0ID0gdGV4dDtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHtAbGluayBDb21tb25Ub2tlbkZhY3Rvcnl9IGluc3RhbmNlLlxuICpcbiAqIDxwPlxuICogVGhpcyB0b2tlbiBmYWN0b3J5IGRvZXMgbm90IGV4cGxpY2l0bHkgY29weSB0b2tlbiB0ZXh0IHdoZW4gY29uc3RydWN0aW5nXG4gKiB0b2tlbnMuPC9wPlxuICovXG5Db21tb25Ub2tlbkZhY3RvcnkuREVGQVVMVCA9IG5ldyBDb21tb25Ub2tlbkZhY3RvcnkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21tb25Ub2tlbkZhY3Rvcnk7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cblxuY29uc3QgVG9rZW4gPSByZXF1aXJlKCcuL1Rva2VuJykuVG9rZW47XG5jb25zdCBCdWZmZXJlZFRva2VuU3RyZWFtID0gcmVxdWlyZSgnLi9CdWZmZXJlZFRva2VuU3RyZWFtJyk7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBleHRlbmRzIHtAbGluayBCdWZmZXJlZFRva2VuU3RyZWFtfSB3aXRoIGZ1bmN0aW9uYWxpdHkgdG8gZmlsdGVyXG4gKiB0b2tlbiBzdHJlYW1zIHRvIHRva2VucyBvbiBhIHBhcnRpY3VsYXIgY2hhbm5lbCAodG9rZW5zIHdoZXJlXG4gKiB7QGxpbmsgVG9rZW4vL2dldENoYW5uZWx9IHJldHVybnMgYSBwYXJ0aWN1bGFyIHZhbHVlKS5cbiAqXG4gKiA8cD5cbiAqIFRoaXMgdG9rZW4gc3RyZWFtIHByb3ZpZGVzIGFjY2VzcyB0byBhbGwgdG9rZW5zIGJ5IGluZGV4IG9yIHdoZW4gY2FsbGluZ1xuICogbWV0aG9kcyBsaWtlIHtAbGluayAvL2dldFRleHR9LiBUaGUgY2hhbm5lbCBmaWx0ZXJpbmcgaXMgb25seSB1c2VkIGZvciBjb2RlXG4gKiBhY2Nlc3NpbmcgdG9rZW5zIHZpYSB0aGUgbG9va2FoZWFkIG1ldGhvZHMge0BsaW5rIC8vTEF9LCB7QGxpbmsgLy9MVH0sIGFuZFxuICoge0BsaW5rIC8vTEJ9LjwvcD5cbiAqXG4gKiA8cD5cbiAqIEJ5IGRlZmF1bHQsIHRva2VucyBhcmUgcGxhY2VkIG9uIHRoZSBkZWZhdWx0IGNoYW5uZWxcbiAqICh7QGxpbmsgVG9rZW4vL0RFRkFVTFRfQ0hBTk5FTH0pLCBidXQgbWF5IGJlIHJlYXNzaWduZWQgYnkgdXNpbmcgdGhlXG4gKiB7QGNvZGUgLT5jaGFubmVsKEhJRERFTil9IGxleGVyIGNvbW1hbmQsIG9yIGJ5IHVzaW5nIGFuIGVtYmVkZGVkIGFjdGlvbiB0b1xuICogY2FsbCB7QGxpbmsgTGV4ZXIvL3NldENoYW5uZWx9LlxuICogPC9wPlxuICpcbiAqIDxwPlxuICogTm90ZTogbGV4ZXIgcnVsZXMgd2hpY2ggdXNlIHRoZSB7QGNvZGUgLT5za2lwfSBsZXhlciBjb21tYW5kIG9yIGNhbGxcbiAqIHtAbGluayBMZXhlci8vc2tpcH0gZG8gbm90IHByb2R1Y2UgdG9rZW5zIGF0IGFsbCwgc28gaW5wdXQgdGV4dCBtYXRjaGVkIGJ5XG4gKiBzdWNoIGEgcnVsZSB3aWxsIG5vdCBiZSBhdmFpbGFibGUgYXMgcGFydCBvZiB0aGUgdG9rZW4gc3RyZWFtLCByZWdhcmRsZXNzIG9mXG4gKiBjaGFubmVsLjwvcD5cbiAqL1xuY2xhc3MgQ29tbW9uVG9rZW5TdHJlYW0gZXh0ZW5kcyBCdWZmZXJlZFRva2VuU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihsZXhlciwgY2hhbm5lbCkge1xuICAgICAgICBzdXBlcihsZXhlcik7XG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw9PT11bmRlZmluZWQgPyBUb2tlbi5ERUZBVUxUX0NIQU5ORUwgOiBjaGFubmVsO1xuICAgIH1cblxuICAgIGFkanVzdFNlZWtJbmRleChpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHRUb2tlbk9uQ2hhbm5lbChpLCB0aGlzLmNoYW5uZWwpO1xuICAgIH1cblxuICAgIExCKGspIHtcbiAgICAgICAgaWYgKGs9PT0wIHx8IHRoaXMuaW5kZXgtazwwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaSA9IHRoaXMuaW5kZXg7XG4gICAgICAgIGxldCBuID0gMTtcbiAgICAgICAgLy8gZmluZCBrIGdvb2QgdG9rZW5zIGxvb2tpbmcgYmFja3dhcmRzXG4gICAgICAgIHdoaWxlIChuIDw9IGspIHtcbiAgICAgICAgICAgIC8vIHNraXAgb2ZmLWNoYW5uZWwgdG9rZW5zXG4gICAgICAgICAgICBpID0gdGhpcy5wcmV2aW91c1Rva2VuT25DaGFubmVsKGkgLSAxLCB0aGlzLmNoYW5uZWwpO1xuICAgICAgICAgICAgbiArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5zW2ldO1xuICAgIH1cblxuICAgIExUKGspIHtcbiAgICAgICAgdGhpcy5sYXp5SW5pdCgpO1xuICAgICAgICBpZiAoayA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGsgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5MQigtayk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGkgPSB0aGlzLmluZGV4O1xuICAgICAgICBsZXQgbiA9IDE7IC8vIHdlIGtub3cgdG9rZW5zW3Bvc10gaXMgYSBnb29kIG9uZVxuICAgICAgICAvLyBmaW5kIGsgZ29vZCB0b2tlbnNcbiAgICAgICAgd2hpbGUgKG4gPCBrKSB7XG4gICAgICAgICAgICAvLyBza2lwIG9mZi1jaGFubmVsIHRva2VucywgYnV0IG1ha2Ugc3VyZSB0byBub3QgbG9vayBwYXN0IEVPRlxuICAgICAgICAgICAgaWYgKHRoaXMuc3luYyhpICsgMSkpIHtcbiAgICAgICAgICAgICAgICBpID0gdGhpcy5uZXh0VG9rZW5PbkNoYW5uZWwoaSArIDEsIHRoaXMuY2hhbm5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5zW2ldO1xuICAgIH1cblxuICAgIC8vIENvdW50IEVPRiBqdXN0IG9uY2UuXG4gICAgZ2V0TnVtYmVyT2ZPbkNoYW5uZWxUb2tlbnMoKSB7XG4gICAgICAgIGxldCBuID0gMDtcbiAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICAgIGZvciAobGV0IGkgPTA7IGk8IHRoaXMudG9rZW5zLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnRva2Vuc1tpXTtcbiAgICAgICAgICAgIGlmKCB0LmNoYW5uZWw9PT10aGlzLmNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICBuICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggdC50eXBlPT09VG9rZW4uRU9GKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1vblRva2VuU3RyZWFtO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCBJbnB1dFN0cmVhbSA9IHJlcXVpcmUoJy4vSW5wdXRTdHJlYW0nKTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuXG4vKipcbiAqIFRoaXMgaXMgYW4gSW5wdXRTdHJlYW0gdGhhdCBpcyBsb2FkZWQgZnJvbSBhIGZpbGUgYWxsIGF0IG9uY2VcbiAqIHdoZW4geW91IGNvbnN0cnVjdCB0aGUgb2JqZWN0LlxuICovXG5jbGFzcyBGaWxlU3RyZWFtIGV4dGVuZHMgSW5wdXRTdHJlYW0ge1xuXHRjb25zdHJ1Y3RvcihmaWxlTmFtZSwgZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHRcdGNvbnN0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZU5hbWUsIFwidXRmOFwiKTtcblx0XHRzdXBlcihkYXRhLCBkZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzKTtcblx0XHR0aGlzLmZpbGVOYW1lID0gZmlsZU5hbWU7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlU3RyZWFtXG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuL1Rva2VuJyk7XG5yZXF1aXJlKCcuL3BvbHlmaWxscy9jb2RlcG9pbnRhdCcpO1xucmVxdWlyZSgnLi9wb2x5ZmlsbHMvZnJvbWNvZGVwb2ludCcpO1xuXG4vKipcbiAqIElmIGRlY29kZVRvVW5pY29kZUNvZGVQb2ludHMgaXMgdHJ1ZSwgdGhlIGlucHV0IGlzIHRyZWF0ZWRcbiAqIGFzIGEgc2VyaWVzIG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4gKlxuICogT3RoZXJ3aXNlLCB0aGUgaW5wdXQgaXMgdHJlYXRlZCBhcyBhIHNlcmllcyBvZiAxNi1iaXQgVVRGLTE2IGNvZGVcbiAqIHVuaXRzLlxuICovXG5jbGFzcyBJbnB1dFN0cmVhbSB7XG5cdGNvbnN0cnVjdG9yKGRhdGEsIGRlY29kZVRvVW5pY29kZUNvZGVQb2ludHMpIHtcblx0XHR0aGlzLm5hbWUgPSBcIjxlbXB0eT5cIjtcblx0XHR0aGlzLnN0cmRhdGEgPSBkYXRhO1xuXHRcdHRoaXMuZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cyA9IGRlY29kZVRvVW5pY29kZUNvZGVQb2ludHMgfHwgZmFsc2U7XG5cdFx0Ly8gX2xvYWRTdHJpbmcgLSBWYWN1dW0gYWxsIGlucHV0IGZyb20gYSBzdHJpbmcgYW5kIHRoZW4gdHJlYXQgaXQgbGlrZSBhIGJ1ZmZlci5cblx0XHR0aGlzLl9pbmRleCA9IDA7XG5cdFx0dGhpcy5kYXRhID0gW107XG5cdFx0aWYgKHRoaXMuZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0cmRhdGEubGVuZ3RoOyApIHtcblx0XHRcdFx0Y29uc3QgY29kZVBvaW50ID0gdGhpcy5zdHJkYXRhLmNvZGVQb2ludEF0KGkpO1xuXHRcdFx0XHR0aGlzLmRhdGEucHVzaChjb2RlUG9pbnQpO1xuXHRcdFx0XHRpICs9IGNvZGVQb2ludCA8PSAweEZGRkYgPyAxIDogMjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5kYXRhID0gbmV3IEFycmF5KHRoaXMuc3RyZGF0YS5sZW5ndGgpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0cmRhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y29uc3QgY29kZVVuaXQgPSB0aGlzLnN0cmRhdGEuY2hhckNvZGVBdChpKTtcblx0XHRcdFx0dGhpcy5kYXRhW2ldID0gY29kZVVuaXQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuX3NpemUgPSB0aGlzLmRhdGEubGVuZ3RoO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlc2V0IHRoZSBzdHJlYW0gc28gdGhhdCBpdCdzIGluIHRoZSBzYW1lIHN0YXRlIGl0IHdhc1xuXHQgKiB3aGVuIHRoZSBvYmplY3Qgd2FzIGNyZWF0ZWQgKmV4Y2VwdCogdGhlIGRhdGEgYXJyYXkgaXMgbm90XG5cdCAqIHRvdWNoZWQuXG5cdCAqL1xuXHRyZXNldCgpIHtcblx0XHR0aGlzLl9pbmRleCA9IDA7XG5cdH1cblxuXHRjb25zdW1lKCkge1xuXHRcdGlmICh0aGlzLl9pbmRleCA+PSB0aGlzLl9zaXplKSB7XG5cdFx0XHQvLyBhc3NlcnQgdGhpcy5MQSgxKSA9PSBUb2tlbi5FT0Zcblx0XHRcdHRocm93IChcImNhbm5vdCBjb25zdW1lIEVPRlwiKTtcblx0XHR9XG5cdFx0dGhpcy5faW5kZXggKz0gMTtcblx0fVxuXG5cdExBKG9mZnNldCkge1xuXHRcdGlmIChvZmZzZXQgPT09IDApIHtcblx0XHRcdHJldHVybiAwOyAvLyB1bmRlZmluZWRcblx0XHR9XG5cdFx0aWYgKG9mZnNldCA8IDApIHtcblx0XHRcdG9mZnNldCArPSAxOyAvLyBlLmcuLCB0cmFuc2xhdGUgTEEoLTEpIHRvIHVzZSBvZmZzZXQ9MFxuXHRcdH1cblx0XHRjb25zdCBwb3MgPSB0aGlzLl9pbmRleCArIG9mZnNldCAtIDE7XG5cdFx0aWYgKHBvcyA8IDAgfHwgcG9zID49IHRoaXMuX3NpemUpIHsgLy8gaW52YWxpZFxuXHRcdFx0cmV0dXJuIFRva2VuLkVPRjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZGF0YVtwb3NdO1xuXHR9XG5cblx0TFQob2Zmc2V0KSB7XG5cdFx0cmV0dXJuIHRoaXMuTEEob2Zmc2V0KTtcblx0fVxuXG4vLyBtYXJrL3JlbGVhc2UgZG8gbm90aGluZzsgd2UgaGF2ZSBlbnRpcmUgYnVmZmVyXG5cdG1hcmsoKSB7XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cblx0cmVsZWFzZShtYXJrZXIpIHtcblx0fVxuXG5cdC8qKlxuXHQgKiBjb25zdW1lKCkgYWhlYWQgdW50aWwgcD09X2luZGV4OyBjYW4ndCBqdXN0IHNldCBwPV9pbmRleCBhcyB3ZSBtdXN0XG5cdCAqIHVwZGF0ZSBsaW5lIGFuZCBjb2x1bW4uIElmIHdlIHNlZWsgYmFja3dhcmRzLCBqdXN0IHNldCBwXG5cdCAqL1xuXHRzZWVrKF9pbmRleCkge1xuXHRcdGlmIChfaW5kZXggPD0gdGhpcy5faW5kZXgpIHtcblx0XHRcdHRoaXMuX2luZGV4ID0gX2luZGV4OyAvLyBqdXN0IGp1bXA7IGRvbid0IHVwZGF0ZSBzdHJlYW0gc3RhdGUgKGxpbmUsXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi4pXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIHNlZWsgZm9yd2FyZFxuXHRcdHRoaXMuX2luZGV4ID0gTWF0aC5taW4oX2luZGV4LCB0aGlzLl9zaXplKTtcblx0fVxuXG5cdGdldFRleHQoc3RhcnQsIHN0b3ApIHtcblx0XHRpZiAoc3RvcCA+PSB0aGlzLl9zaXplKSB7XG5cdFx0XHRzdG9wID0gdGhpcy5fc2l6ZSAtIDE7XG5cdFx0fVxuXHRcdGlmIChzdGFydCA+PSB0aGlzLl9zaXplKSB7XG5cdFx0XHRyZXR1cm4gXCJcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHRoaXMuZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHRcdFx0XHRsZXQgcmVzdWx0ID0gXCJcIjtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IHN0YXJ0OyBpIDw9IHN0b3A7IGkrKykge1xuXHRcdFx0XHRcdHJlc3VsdCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludCh0aGlzLmRhdGFbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5zdHJkYXRhLnNsaWNlKHN0YXJ0LCBzdG9wICsgMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc3RyZGF0YTtcblx0fVxuXG5cdGdldCBpbmRleCgpe1xuXHRcdHJldHVybiB0aGlzLl9pbmRleDtcblx0fVxuXG5cdGdldCBzaXplKCl7XG5cdFx0cmV0dXJuIHRoaXMuX3NpemU7XG5cdH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IElucHV0U3RyZWFtO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7VG9rZW59ID0gcmVxdWlyZSgnLi9Ub2tlbicpO1xuXG4vKiBzdG9wIGlzIG5vdCBpbmNsdWRlZCEgKi9cbmNsYXNzIEludGVydmFsIHtcblxuXHRjb25zdHJ1Y3RvcihzdGFydCwgc3RvcCkge1xuXHRcdHRoaXMuc3RhcnQgPSBzdGFydDtcblx0XHR0aGlzLnN0b3AgPSBzdG9wO1xuXHR9XG5cblx0Y2xvbmUoKSB7XG5cdFx0cmV0dXJuIG5ldyBJbnRlcnZhbCh0aGlzLnN0YXJ0LCB0aGlzLnN0b3ApO1xuXHR9XG5cblx0Y29udGFpbnMoaXRlbSkge1xuXHRcdHJldHVybiBpdGVtID49IHRoaXMuc3RhcnQgJiYgaXRlbSA8IHRoaXMuc3RvcDtcblx0fVxuXG5cdHRvU3RyaW5nKCkge1xuXHRcdGlmKHRoaXMuc3RhcnQ9PT10aGlzLnN0b3AtMSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhcnQudG9TdHJpbmcoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhcnQudG9TdHJpbmcoKSArIFwiLi5cIiArICh0aGlzLnN0b3AtMSkudG9TdHJpbmcoKTtcblx0XHR9XG5cdH1cblxuXHRnZXQgbGVuZ3RoKCl7XG5cdFx0cmV0dXJuIHRoaXMuc3RvcCAtIHRoaXMuc3RhcnQ7XG5cdH1cbn1cblxuXG5jbGFzcyBJbnRlcnZhbFNldCB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuaW50ZXJ2YWxzID0gbnVsbDtcblx0XHR0aGlzLnJlYWRPbmx5ID0gZmFsc2U7XG5cdH1cblxuXHRmaXJzdCh2KSB7XG5cdFx0aWYgKHRoaXMuaW50ZXJ2YWxzID09PSBudWxsIHx8IHRoaXMuaW50ZXJ2YWxzLmxlbmd0aD09PTApIHtcblx0XHRcdHJldHVybiBUb2tlbi5JTlZBTElEX1RZUEU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLmludGVydmFsc1swXS5zdGFydDtcblx0XHR9XG5cdH1cblxuXHRhZGRPbmUodikge1xuXHRcdHRoaXMuYWRkSW50ZXJ2YWwobmV3IEludGVydmFsKHYsIHYgKyAxKSk7XG5cdH1cblxuXHRhZGRSYW5nZShsLCBoKSB7XG5cdFx0dGhpcy5hZGRJbnRlcnZhbChuZXcgSW50ZXJ2YWwobCwgaCArIDEpKTtcblx0fVxuXG5cdGFkZEludGVydmFsKHRvQWRkKSB7XG5cdFx0aWYgKHRoaXMuaW50ZXJ2YWxzID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLmludGVydmFscyA9IFtdO1xuXHRcdFx0dGhpcy5pbnRlcnZhbHMucHVzaCh0b0FkZC5jbG9uZSgpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gZmluZCBpbnNlcnQgcG9zXG5cdFx0XHRmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCB0aGlzLmludGVydmFscy5sZW5ndGg7IHBvcysrKSB7XG5cdFx0XHRcdGNvbnN0IGV4aXN0aW5nID0gdGhpcy5pbnRlcnZhbHNbcG9zXTtcblx0XHRcdFx0Ly8gZGlzdGluY3QgcmFuZ2UgLT4gaW5zZXJ0XG5cdFx0XHRcdGlmICh0b0FkZC5zdG9wIDwgZXhpc3Rpbmcuc3RhcnQpIHtcblx0XHRcdFx0XHR0aGlzLmludGVydmFscy5zcGxpY2UocG9zLCAwLCB0b0FkZCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGNvbnRpZ3VvdXMgcmFuZ2UgLT4gYWRqdXN0XG5cdFx0XHRcdGVsc2UgaWYgKHRvQWRkLnN0b3AgPT09IGV4aXN0aW5nLnN0YXJ0KSB7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcnZhbHNbcG9zXSA9IG5ldyBJbnRlcnZhbCh0b0FkZC5zdGFydCwgZXhpc3Rpbmcuc3RvcClcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gb3ZlcmxhcHBpbmcgcmFuZ2UgLT4gYWRqdXN0IGFuZCByZWR1Y2Vcblx0XHRcdFx0ZWxzZSBpZiAodG9BZGQuc3RhcnQgPD0gZXhpc3Rpbmcuc3RvcCkge1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJ2YWxzW3Bvc10gPSBuZXcgSW50ZXJ2YWwoTWF0aC5taW4oZXhpc3Rpbmcuc3RhcnQsIHRvQWRkLnN0YXJ0KSwgTWF0aC5tYXgoZXhpc3Rpbmcuc3RvcCwgdG9BZGQuc3RvcCkpO1xuXHRcdFx0XHRcdHRoaXMucmVkdWNlKHBvcyk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBncmVhdGVyIHRoYW4gYW55IGV4aXN0aW5nXG5cdFx0XHR0aGlzLmludGVydmFscy5wdXNoKHRvQWRkLmNsb25lKCkpO1xuXHRcdH1cblx0fVxuXG5cdGFkZFNldChvdGhlcikge1xuXHRcdGlmIChvdGhlci5pbnRlcnZhbHMgIT09IG51bGwpIHtcblx0XHRcdG90aGVyLmludGVydmFscy5mb3JFYWNoKCB0b0FkZCA9PiB0aGlzLmFkZEludGVydmFsKHRvQWRkKSwgdGhpcyk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cmVkdWNlKHBvcykge1xuXHRcdC8vIG9ubHkgbmVlZCB0byByZWR1Y2UgaWYgcG9zIGlzIG5vdCB0aGUgbGFzdFxuXHRcdGlmIChwb3MgPCB0aGlzLmludGVydmFscy5sZW5ndGggLSAxKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50ID0gdGhpcy5pbnRlcnZhbHNbcG9zXTtcblx0XHRcdGNvbnN0IG5leHQgPSB0aGlzLmludGVydmFsc1twb3MgKyAxXTtcblx0XHRcdC8vIGlmIG5leHQgY29udGFpbmVkIGluIGN1cnJlbnRcblx0XHRcdGlmIChjdXJyZW50LnN0b3AgPj0gbmV4dC5zdG9wKSB7XG5cdFx0XHRcdHRoaXMuaW50ZXJ2YWxzLnNwbGljZShwb3MgKyAxLCAxKTtcblx0XHRcdFx0dGhpcy5yZWR1Y2UocG9zKTtcblx0XHRcdH0gZWxzZSBpZiAoY3VycmVudC5zdG9wID49IG5leHQuc3RhcnQpIHtcblx0XHRcdFx0dGhpcy5pbnRlcnZhbHNbcG9zXSA9IG5ldyBJbnRlcnZhbChjdXJyZW50LnN0YXJ0LCBuZXh0LnN0b3ApO1xuXHRcdFx0XHR0aGlzLmludGVydmFscy5zcGxpY2UocG9zICsgMSwgMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Y29tcGxlbWVudChzdGFydCwgc3RvcCkge1xuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBJbnRlcnZhbFNldCgpO1xuXHRcdHJlc3VsdC5hZGRJbnRlcnZhbChuZXcgSW50ZXJ2YWwoc3RhcnQsIHN0b3AgKyAxKSk7XG5cdFx0aWYodGhpcy5pbnRlcnZhbHMgIT09IG51bGwpXG5cdFx0XHR0aGlzLmludGVydmFscy5mb3JFYWNoKHRvUmVtb3ZlID0+IHJlc3VsdC5yZW1vdmVSYW5nZSh0b1JlbW92ZSkpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRjb250YWlucyhpdGVtKSB7XG5cdFx0aWYgKHRoaXMuaW50ZXJ2YWxzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAobGV0IGsgPSAwOyBrIDwgdGhpcy5pbnRlcnZhbHMubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0aWYodGhpcy5pbnRlcnZhbHNba10uY29udGFpbnMoaXRlbSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJlbW92ZVJhbmdlKHRvUmVtb3ZlKSB7XG5cdFx0aWYodG9SZW1vdmUuc3RhcnQ9PT10b1JlbW92ZS5zdG9wLTEpIHtcblx0XHRcdHRoaXMucmVtb3ZlT25lKHRvUmVtb3ZlLnN0YXJ0KTtcblx0XHR9IGVsc2UgaWYgKHRoaXMuaW50ZXJ2YWxzICE9PSBudWxsKSB7XG5cdFx0XHRsZXQgcG9zID0gMDtcblx0XHRcdGZvcihsZXQgbj0wOyBuPHRoaXMuaW50ZXJ2YWxzLmxlbmd0aDsgbisrKSB7XG5cdFx0XHRcdGNvbnN0IGV4aXN0aW5nID0gdGhpcy5pbnRlcnZhbHNbcG9zXTtcblx0XHRcdFx0Ly8gaW50ZXJ2YWxzIGFyZSBvcmRlcmVkXG5cdFx0XHRcdGlmICh0b1JlbW92ZS5zdG9wPD1leGlzdGluZy5zdGFydCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBjaGVjayBmb3IgaW5jbHVkaW5nIHJhbmdlLCBzcGxpdCBpdFxuXHRcdFx0XHRlbHNlIGlmKHRvUmVtb3ZlLnN0YXJ0PmV4aXN0aW5nLnN0YXJ0ICYmIHRvUmVtb3ZlLnN0b3A8ZXhpc3Rpbmcuc3RvcCkge1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJ2YWxzW3Bvc10gPSBuZXcgSW50ZXJ2YWwoZXhpc3Rpbmcuc3RhcnQsIHRvUmVtb3ZlLnN0YXJ0KTtcblx0XHRcdFx0XHRjb25zdCB4ID0gbmV3IEludGVydmFsKHRvUmVtb3ZlLnN0b3AsIGV4aXN0aW5nLnN0b3ApO1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJ2YWxzLnNwbGljZShwb3MsIDAsIHgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBjaGVjayBmb3IgaW5jbHVkZWQgcmFuZ2UsIHJlbW92ZSBpdFxuXHRcdFx0XHRlbHNlIGlmKHRvUmVtb3ZlLnN0YXJ0PD1leGlzdGluZy5zdGFydCAmJiB0b1JlbW92ZS5zdG9wPj1leGlzdGluZy5zdG9wKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcnZhbHMuc3BsaWNlKHBvcywgMSk7XG5cdFx0XHRcdFx0cG9zID0gcG9zIC0gMTsgLy8gbmVlZCBhbm90aGVyIHBhc3Ncblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBjaGVjayBmb3IgbG93ZXIgYm91bmRhcnlcblx0XHRcdFx0ZWxzZSBpZih0b1JlbW92ZS5zdGFydDxleGlzdGluZy5zdG9wKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcnZhbHNbcG9zXSA9IG5ldyBJbnRlcnZhbChleGlzdGluZy5zdGFydCwgdG9SZW1vdmUuc3RhcnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGNoZWNrIGZvciB1cHBlciBib3VuZGFyeVxuXHRcdFx0XHRlbHNlIGlmKHRvUmVtb3ZlLnN0b3A8ZXhpc3Rpbmcuc3RvcCkge1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJ2YWxzW3Bvc10gPSBuZXcgSW50ZXJ2YWwodG9SZW1vdmUuc3RvcCwgZXhpc3Rpbmcuc3RvcCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cG9zICs9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVtb3ZlT25lKHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuaW50ZXJ2YWxzICE9PSBudWxsKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW50ZXJ2YWxzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IGV4aXN0aW5nID0gdGhpcy5pbnRlcnZhbHNbaV07XG5cdFx0XHRcdC8vIGludGVydmFscyBhcmUgb3JkZXJlZFxuXHRcdFx0XHRpZiAodmFsdWUgPCBleGlzdGluZy5zdGFydCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBjaGVjayBmb3Igc2luZ2xlIHZhbHVlIHJhbmdlXG5cdFx0XHRcdGVsc2UgaWYgKHZhbHVlID09PSBleGlzdGluZy5zdGFydCAmJiB2YWx1ZSA9PT0gZXhpc3Rpbmcuc3RvcCAtIDEpIHtcblx0XHRcdFx0XHR0aGlzLmludGVydmFscy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGNoZWNrIGZvciBsb3dlciBib3VuZGFyeVxuXHRcdFx0XHRlbHNlIGlmICh2YWx1ZSA9PT0gZXhpc3Rpbmcuc3RhcnQpIHtcblx0XHRcdFx0XHR0aGlzLmludGVydmFsc1tpXSA9IG5ldyBJbnRlcnZhbChleGlzdGluZy5zdGFydCArIDEsIGV4aXN0aW5nLnN0b3ApO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBjaGVjayBmb3IgdXBwZXIgYm91bmRhcnlcblx0XHRcdFx0ZWxzZSBpZiAodmFsdWUgPT09IGV4aXN0aW5nLnN0b3AgLSAxKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcnZhbHNbaV0gPSBuZXcgSW50ZXJ2YWwoZXhpc3Rpbmcuc3RhcnQsIGV4aXN0aW5nLnN0b3AgLSAxKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gc3BsaXQgZXhpc3RpbmcgcmFuZ2Vcblx0XHRcdFx0ZWxzZSBpZiAodmFsdWUgPCBleGlzdGluZy5zdG9wIC0gMSkge1xuXHRcdFx0XHRcdGNvbnN0IHJlcGxhY2UgPSBuZXcgSW50ZXJ2YWwoZXhpc3Rpbmcuc3RhcnQsIHZhbHVlKTtcblx0XHRcdFx0XHRleGlzdGluZy5zdGFydCA9IHZhbHVlICsgMTtcblx0XHRcdFx0XHR0aGlzLmludGVydmFscy5zcGxpY2UoaSwgMCwgcmVwbGFjZSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dG9TdHJpbmcobGl0ZXJhbE5hbWVzLCBzeW1ib2xpY05hbWVzLCBlbGVtc0FyZUNoYXIpIHtcblx0XHRsaXRlcmFsTmFtZXMgPSBsaXRlcmFsTmFtZXMgfHwgbnVsbDtcblx0XHRzeW1ib2xpY05hbWVzID0gc3ltYm9saWNOYW1lcyB8fCBudWxsO1xuXHRcdGVsZW1zQXJlQ2hhciA9IGVsZW1zQXJlQ2hhciB8fCBmYWxzZTtcblx0XHRpZiAodGhpcy5pbnRlcnZhbHMgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBcInt9XCI7XG5cdFx0fSBlbHNlIGlmKGxpdGVyYWxOYW1lcyE9PW51bGwgfHwgc3ltYm9saWNOYW1lcyE9PW51bGwpIHtcblx0XHRcdHJldHVybiB0aGlzLnRvVG9rZW5TdHJpbmcobGl0ZXJhbE5hbWVzLCBzeW1ib2xpY05hbWVzKTtcblx0XHR9IGVsc2UgaWYoZWxlbXNBcmVDaGFyKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy50b0NoYXJTdHJpbmcoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMudG9JbmRleFN0cmluZygpO1xuXHRcdH1cblx0fVxuXG5cdHRvQ2hhclN0cmluZygpIHtcblx0XHRjb25zdCBuYW1lcyA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbnRlcnZhbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGV4aXN0aW5nID0gdGhpcy5pbnRlcnZhbHNbaV07XG5cdFx0XHRpZihleGlzdGluZy5zdG9wPT09ZXhpc3Rpbmcuc3RhcnQrMSkge1xuXHRcdFx0XHRpZiAoIGV4aXN0aW5nLnN0YXJ0PT09VG9rZW4uRU9GICkge1xuXHRcdFx0XHRcdG5hbWVzLnB1c2goXCI8RU9GPlwiKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRuYW1lcy5wdXNoKFwiJ1wiICsgU3RyaW5nLmZyb21DaGFyQ29kZShleGlzdGluZy5zdGFydCkgKyBcIidcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5hbWVzLnB1c2goXCInXCIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGV4aXN0aW5nLnN0YXJ0KSArIFwiJy4uJ1wiICsgU3RyaW5nLmZyb21DaGFyQ29kZShleGlzdGluZy5zdG9wLTEpICsgXCInXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAobmFtZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0cmV0dXJuIFwie1wiICsgbmFtZXMuam9pbihcIiwgXCIpICsgXCJ9XCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBuYW1lc1swXTtcblx0XHR9XG5cdH1cblxuXHR0b0luZGV4U3RyaW5nKCkge1xuXHRcdGNvbnN0IG5hbWVzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmludGVydmFscy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgZXhpc3RpbmcgPSB0aGlzLmludGVydmFsc1tpXTtcblx0XHRcdGlmKGV4aXN0aW5nLnN0b3A9PT1leGlzdGluZy5zdGFydCsxKSB7XG5cdFx0XHRcdGlmICggZXhpc3Rpbmcuc3RhcnQ9PT1Ub2tlbi5FT0YgKSB7XG5cdFx0XHRcdFx0bmFtZXMucHVzaChcIjxFT0Y+XCIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG5hbWVzLnB1c2goZXhpc3Rpbmcuc3RhcnQudG9TdHJpbmcoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5hbWVzLnB1c2goZXhpc3Rpbmcuc3RhcnQudG9TdHJpbmcoKSArIFwiLi5cIiArIChleGlzdGluZy5zdG9wLTEpLnRvU3RyaW5nKCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAobmFtZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0cmV0dXJuIFwie1wiICsgbmFtZXMuam9pbihcIiwgXCIpICsgXCJ9XCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBuYW1lc1swXTtcblx0XHR9XG5cdH1cblxuXHR0b1Rva2VuU3RyaW5nKGxpdGVyYWxOYW1lcywgc3ltYm9saWNOYW1lcykge1xuXHRcdGNvbnN0IG5hbWVzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmludGVydmFscy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgZXhpc3RpbmcgPSB0aGlzLmludGVydmFsc1tpXTtcblx0XHRcdGZvciAobGV0IGogPSBleGlzdGluZy5zdGFydDsgaiA8IGV4aXN0aW5nLnN0b3A7IGorKykge1xuXHRcdFx0XHRuYW1lcy5wdXNoKHRoaXMuZWxlbWVudE5hbWUobGl0ZXJhbE5hbWVzLCBzeW1ib2xpY05hbWVzLCBqKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChuYW1lcy5sZW5ndGggPiAxKSB7XG5cdFx0XHRyZXR1cm4gXCJ7XCIgKyBuYW1lcy5qb2luKFwiLCBcIikgKyBcIn1cIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG5hbWVzWzBdO1xuXHRcdH1cblx0fVxuXG5cdGVsZW1lbnROYW1lKGxpdGVyYWxOYW1lcywgc3ltYm9saWNOYW1lcywgdG9rZW4pIHtcblx0XHRpZiAodG9rZW4gPT09IFRva2VuLkVPRikge1xuXHRcdFx0cmV0dXJuIFwiPEVPRj5cIjtcblx0XHR9IGVsc2UgaWYgKHRva2VuID09PSBUb2tlbi5FUFNJTE9OKSB7XG5cdFx0XHRyZXR1cm4gXCI8RVBTSUxPTj5cIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGxpdGVyYWxOYW1lc1t0b2tlbl0gfHwgc3ltYm9saWNOYW1lc1t0b2tlbl07XG5cdFx0fVxuXHR9XG5cblx0Z2V0IGxlbmd0aCgpe1xuXHRcdHJldHVybiB0aGlzLmludGVydmFscy5tYXAoIGludGVydmFsID0+IGludGVydmFsLmxlbmd0aCApLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIHZhbCk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdEludGVydmFsLFxuXHRJbnRlcnZhbFNldFxufTtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge1NldCwgQml0U2V0fSA9IHJlcXVpcmUoJy4vVXRpbHMnKTtcbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuL1Rva2VuJyk7XG5jb25zdCB7QVROQ29uZmlnfSA9IHJlcXVpcmUoJy4vYXRuL0FUTkNvbmZpZycpO1xuY29uc3Qge0ludGVydmFsU2V0fSA9IHJlcXVpcmUoJy4vSW50ZXJ2YWxTZXQnKTtcbmNvbnN0IHtSdWxlU3RvcFN0YXRlfSA9IHJlcXVpcmUoJy4vYXRuL0FUTlN0YXRlJyk7XG5jb25zdCB7UnVsZVRyYW5zaXRpb24sIE5vdFNldFRyYW5zaXRpb24sIFdpbGRjYXJkVHJhbnNpdGlvbiwgQWJzdHJhY3RQcmVkaWNhdGVUcmFuc2l0aW9ufSA9IHJlcXVpcmUoJy4vYXRuL1RyYW5zaXRpb24nKTtcbmNvbnN0IHtwcmVkaWN0aW9uQ29udGV4dEZyb21SdWxlQ29udGV4dCwgUHJlZGljdGlvbkNvbnRleHQsIFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0fSA9IHJlcXVpcmUoJy4vUHJlZGljdGlvbkNvbnRleHQnKTtcblxuY2xhc3MgTEwxQW5hbHl6ZXIge1xuICAgIGNvbnN0cnVjdG9yKGF0bikge1xuICAgICAgICB0aGlzLmF0biA9IGF0bjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBTTEwoMSkgZXhwZWN0ZWQgbG9va2FoZWFkIHNldCBmb3IgZWFjaCBvdXRnb2luZyB0cmFuc2l0aW9uXG4gICAgICogb2YgYW4ge0BsaW5rIEFUTlN0YXRlfS4gVGhlIHJldHVybmVkIGFycmF5IGhhcyBvbmUgZWxlbWVudCBmb3IgZWFjaFxuICAgICAqIG91dGdvaW5nIHRyYW5zaXRpb24gaW4ge0Bjb2RlIHN9LiBJZiB0aGUgY2xvc3VyZSBmcm9tIHRyYW5zaXRpb25cbiAgICAgKiA8ZW0+aTwvZW0+IGxlYWRzIHRvIGEgc2VtYW50aWMgcHJlZGljYXRlIGJlZm9yZSBtYXRjaGluZyBhIHN5bWJvbCwgdGhlXG4gICAgICogZWxlbWVudCBhdCBpbmRleCA8ZW0+aTwvZW0+IG9mIHRoZSByZXN1bHQgd2lsbCBiZSB7QGNvZGUgbnVsbH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcyB0aGUgQVROIHN0YXRlXG4gICAgICogQHJldHVybiB0aGUgZXhwZWN0ZWQgc3ltYm9scyBmb3IgZWFjaCBvdXRnb2luZyB0cmFuc2l0aW9uIG9mIHtAY29kZSBzfS5cbiAgICAgKi9cbiAgICBnZXREZWNpc2lvbkxvb2thaGVhZChzKSB7XG4gICAgICAgIGlmIChzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb3VudCA9IHMudHJhbnNpdGlvbnMubGVuZ3RoO1xuICAgICAgICBjb25zdCBsb29rID0gW107XG4gICAgICAgIGZvcihsZXQgYWx0PTA7IGFsdDwgY291bnQ7IGFsdCsrKSB7XG4gICAgICAgICAgICBsb29rW2FsdF0gPSBuZXcgSW50ZXJ2YWxTZXQoKTtcbiAgICAgICAgICAgIGNvbnN0IGxvb2tCdXN5ID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgY29uc3Qgc2VlVGhydVByZWRzID0gZmFsc2U7IC8vIGZhaWwgdG8gZ2V0IGxvb2thaGVhZCB1cG9uIHByZWRcbiAgICAgICAgICAgIHRoaXMuX0xPT0socy50cmFuc2l0aW9uKGFsdCkudGFyZ2V0LCBudWxsLCBQcmVkaWN0aW9uQ29udGV4dC5FTVBUWSxcbiAgICAgICAgICAgICAgICAgIGxvb2tbYWx0XSwgbG9va0J1c3ksIG5ldyBCaXRTZXQoKSwgc2VlVGhydVByZWRzLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyBXaXBlIG91dCBsb29rYWhlYWQgZm9yIHRoaXMgYWx0ZXJuYXRpdmUgaWYgd2UgZm91bmQgbm90aGluZ1xuICAgICAgICAgICAgLy8gb3Igd2UgaGFkIGEgcHJlZGljYXRlIHdoZW4gd2UgIXNlZVRocnVQcmVkc1xuICAgICAgICAgICAgaWYgKGxvb2tbYWx0XS5sZW5ndGg9PT0wIHx8IGxvb2tbYWx0XS5jb250YWlucyhMTDFBbmFseXplci5ISVRfUFJFRCkpIHtcbiAgICAgICAgICAgICAgICBsb29rW2FsdF0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb29rO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgc2V0IG9mIHRva2VucyB0aGF0IGNhbiBmb2xsb3cge0Bjb2RlIHN9IGluIHRoZSBBVE4gaW4gdGhlXG4gICAgICogc3BlY2lmaWVkIHtAY29kZSBjdHh9LlxuICAgICAqXG4gICAgICogPHA+SWYge0Bjb2RlIGN0eH0gaXMge0Bjb2RlIG51bGx9IGFuZCB0aGUgZW5kIG9mIHRoZSBydWxlIGNvbnRhaW5pbmdcbiAgICAgKiB7QGNvZGUgc30gaXMgcmVhY2hlZCwge0BsaW5rIFRva2VuLy9FUFNJTE9OfSBpcyBhZGRlZCB0byB0aGUgcmVzdWx0IHNldC5cbiAgICAgKiBJZiB7QGNvZGUgY3R4fSBpcyBub3Qge0Bjb2RlIG51bGx9IGFuZCB0aGUgZW5kIG9mIHRoZSBvdXRlcm1vc3QgcnVsZSBpc1xuICAgICAqIHJlYWNoZWQsIHtAbGluayBUb2tlbi8vRU9GfSBpcyBhZGRlZCB0byB0aGUgcmVzdWx0IHNldC48L3A+XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcyB0aGUgQVROIHN0YXRlXG4gICAgICogQHBhcmFtIHN0b3BTdGF0ZSB0aGUgQVROIHN0YXRlIHRvIHN0b3AgYXQuIFRoaXMgY2FuIGJlIGFcbiAgICAgKiB7QGxpbmsgQmxvY2tFbmRTdGF0ZX0gdG8gZGV0ZWN0IGVwc2lsb24gcGF0aHMgdGhyb3VnaCBhIGNsb3N1cmUuXG4gICAgICogQHBhcmFtIGN0eCB0aGUgY29tcGxldGUgcGFyc2VyIGNvbnRleHQsIG9yIHtAY29kZSBudWxsfSBpZiB0aGUgY29udGV4dFxuICAgICAqIHNob3VsZCBiZSBpZ25vcmVkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFRoZSBzZXQgb2YgdG9rZW5zIHRoYXQgY2FuIGZvbGxvdyB7QGNvZGUgc30gaW4gdGhlIEFUTiBpbiB0aGVcbiAgICAgKiBzcGVjaWZpZWQge0Bjb2RlIGN0eH0uXG4gICAgICovXG4gICAgTE9PSyhzLCBzdG9wU3RhdGUsIGN0eCkge1xuICAgICAgICBjb25zdCByID0gbmV3IEludGVydmFsU2V0KCk7XG4gICAgICAgIGNvbnN0IHNlZVRocnVQcmVkcyA9IHRydWU7IC8vIGlnbm9yZSBwcmVkczsgZ2V0IGFsbCBsb29rYWhlYWRcbiAgICAgICAgY3R4ID0gY3R4IHx8IG51bGw7XG4gICAgICAgIGNvbnN0IGxvb2tDb250ZXh0ID0gY3R4IT09bnVsbCA/IHByZWRpY3Rpb25Db250ZXh0RnJvbVJ1bGVDb250ZXh0KHMuYXRuLCBjdHgpIDogbnVsbDtcbiAgICAgICAgdGhpcy5fTE9PSyhzLCBzdG9wU3RhdGUsIGxvb2tDb250ZXh0LCByLCBuZXcgU2V0KCksIG5ldyBCaXRTZXQoKSwgc2VlVGhydVByZWRzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBzZXQgb2YgdG9rZW5zIHRoYXQgY2FuIGZvbGxvdyB7QGNvZGUgc30gaW4gdGhlIEFUTiBpbiB0aGVcbiAgICAgKiBzcGVjaWZpZWQge0Bjb2RlIGN0eH0uXG4gICAgICpcbiAgICAgKiA8cD5JZiB7QGNvZGUgY3R4fSBpcyB7QGNvZGUgbnVsbH0gYW5kIHtAY29kZSBzdG9wU3RhdGV9IG9yIHRoZSBlbmQgb2YgdGhlXG4gICAgICogcnVsZSBjb250YWluaW5nIHtAY29kZSBzfSBpcyByZWFjaGVkLCB7QGxpbmsgVG9rZW4vL0VQU0lMT059IGlzIGFkZGVkIHRvXG4gICAgICogdGhlIHJlc3VsdCBzZXQuIElmIHtAY29kZSBjdHh9IGlzIG5vdCB7QGNvZGUgbnVsbH0gYW5kIHtAY29kZSBhZGRFT0Z9IGlzXG4gICAgICoge0Bjb2RlIHRydWV9IGFuZCB7QGNvZGUgc3RvcFN0YXRlfSBvciB0aGUgZW5kIG9mIHRoZSBvdXRlcm1vc3QgcnVsZSBpc1xuICAgICAqIHJlYWNoZWQsIHtAbGluayBUb2tlbi8vRU9GfSBpcyBhZGRlZCB0byB0aGUgcmVzdWx0IHNldC48L3A+XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcyB0aGUgQVROIHN0YXRlLlxuICAgICAqIEBwYXJhbSBzdG9wU3RhdGUgdGhlIEFUTiBzdGF0ZSB0byBzdG9wIGF0LiBUaGlzIGNhbiBiZSBhXG4gICAgICoge0BsaW5rIEJsb2NrRW5kU3RhdGV9IHRvIGRldGVjdCBlcHNpbG9uIHBhdGhzIHRocm91Z2ggYSBjbG9zdXJlLlxuICAgICAqIEBwYXJhbSBjdHggVGhlIG91dGVyIGNvbnRleHQsIG9yIHtAY29kZSBudWxsfSBpZiB0aGUgb3V0ZXIgY29udGV4dCBzaG91bGRcbiAgICAgKiBub3QgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0gbG9vayBUaGUgcmVzdWx0IGxvb2thaGVhZCBzZXQuXG4gICAgICogQHBhcmFtIGxvb2tCdXN5IEEgc2V0IHVzZWQgZm9yIHByZXZlbnRpbmcgZXBzaWxvbiBjbG9zdXJlcyBpbiB0aGUgQVROXG4gICAgICogZnJvbSBjYXVzaW5nIGEgc3RhY2sgb3ZlcmZsb3cuIE91dHNpZGUgY29kZSBzaG91bGQgcGFzc1xuICAgICAqIHtAY29kZSBuZXcgU2V0PEFUTkNvbmZpZz59IGZvciB0aGlzIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSBjYWxsZWRSdWxlU3RhY2sgQSBzZXQgdXNlZCBmb3IgcHJldmVudGluZyBsZWZ0IHJlY3Vyc2lvbiBpbiB0aGVcbiAgICAgKiBBVE4gZnJvbSBjYXVzaW5nIGEgc3RhY2sgb3ZlcmZsb3cuIE91dHNpZGUgY29kZSBzaG91bGQgcGFzc1xuICAgICAqIHtAY29kZSBuZXcgQml0U2V0KCl9IGZvciB0aGlzIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSBzZWVUaHJ1UHJlZHMge0Bjb2RlIHRydWV9IHRvIHRydWUgc2VtYW50aWMgcHJlZGljYXRlcyBhc1xuICAgICAqIGltcGxpY2l0bHkge0Bjb2RlIHRydWV9IGFuZCBcInNlZSB0aHJvdWdoIHRoZW1cIiwgb3RoZXJ3aXNlIHtAY29kZSBmYWxzZX1cbiAgICAgKiB0byB0cmVhdCBzZW1hbnRpYyBwcmVkaWNhdGVzIGFzIG9wYXF1ZSBhbmQgYWRkIHtAbGluayAvL0hJVF9QUkVEfSB0byB0aGVcbiAgICAgKiByZXN1bHQgaWYgb25lIGlzIGVuY291bnRlcmVkLlxuICAgICAqIEBwYXJhbSBhZGRFT0YgQWRkIHtAbGluayBUb2tlbi8vRU9GfSB0byB0aGUgcmVzdWx0IGlmIHRoZSBlbmQgb2YgdGhlXG4gICAgICogb3V0ZXJtb3N0IGNvbnRleHQgaXMgcmVhY2hlZC4gVGhpcyBwYXJhbWV0ZXIgaGFzIG5vIGVmZmVjdCBpZiB7QGNvZGUgY3R4fVxuICAgICAqIGlzIHtAY29kZSBudWxsfS5cbiAgICAgKi9cbiAgICBfTE9PSyhzLCBzdG9wU3RhdGUgLCBjdHgsIGxvb2ssIGxvb2tCdXN5LCBjYWxsZWRSdWxlU3RhY2ssIHNlZVRocnVQcmVkcywgYWRkRU9GKSB7XG4gICAgICAgIGNvbnN0IGMgPSBuZXcgQVROQ29uZmlnKHtzdGF0ZTpzLCBhbHQ6MCwgY29udGV4dDogY3R4fSwgbnVsbCk7XG4gICAgICAgIGlmIChsb29rQnVzeS5jb250YWlucyhjKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvb2tCdXN5LmFkZChjKTtcbiAgICAgICAgaWYgKHMgPT09IHN0b3BTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKGN0eCA9PT1udWxsKSB7XG4gICAgICAgICAgICAgICAgbG9vay5hZGRPbmUoVG9rZW4uRVBTSUxPTik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdHguaXNFbXB0eSgpICYmIGFkZEVPRikge1xuICAgICAgICAgICAgICAgIGxvb2suYWRkT25lKFRva2VuLkVPRik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzIGluc3RhbmNlb2YgUnVsZVN0b3BTdGF0ZSApIHtcbiAgICAgICAgICAgIGlmIChjdHggPT09bnVsbCkge1xuICAgICAgICAgICAgICAgIGxvb2suYWRkT25lKFRva2VuLkVQU0lMT04pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3R4LmlzRW1wdHkoKSAmJiBhZGRFT0YpIHtcbiAgICAgICAgICAgICAgICBsb29rLmFkZE9uZShUb2tlbi5FT0YpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdHggIT09IFByZWRpY3Rpb25Db250ZXh0LkVNUFRZKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IGNhbGxlZFJ1bGVTdGFjay5jb250YWlucyhzLnJ1bGVJbmRleCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkUnVsZVN0YWNrLnJlbW92ZShzLnJ1bGVJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJ1biB0aHJ1IGFsbCBwb3NzaWJsZSBzdGFjayB0b3BzIGluIGN0eFxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN0eC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0dXJuU3RhdGUgPSB0aGlzLmF0bi5zdGF0ZXNbY3R4LmdldFJldHVyblN0YXRlKGkpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX0xPT0socmV0dXJuU3RhdGUsIHN0b3BTdGF0ZSwgY3R4LmdldFBhcmVudChpKSwgbG9vaywgbG9va0J1c3ksIGNhbGxlZFJ1bGVTdGFjaywgc2VlVGhydVByZWRzLCBhZGRFT0YpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkUnVsZVN0YWNrLmFkZChzLnJ1bGVJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgaj0wOyBqPHMudHJhbnNpdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBzLnRyYW5zaXRpb25zW2pdO1xuICAgICAgICAgICAgaWYgKHQuY29uc3RydWN0b3IgPT09IFJ1bGVUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxlZFJ1bGVTdGFjay5jb250YWlucyh0LnRhcmdldC5ydWxlSW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDb250ZXh0ID0gU2luZ2xldG9uUHJlZGljdGlvbkNvbnRleHQuY3JlYXRlKGN0eCwgdC5mb2xsb3dTdGF0ZS5zdGF0ZU51bWJlcik7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkUnVsZVN0YWNrLmFkZCh0LnRhcmdldC5ydWxlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9MT09LKHQudGFyZ2V0LCBzdG9wU3RhdGUsIG5ld0NvbnRleHQsIGxvb2ssIGxvb2tCdXN5LCBjYWxsZWRSdWxlU3RhY2ssIHNlZVRocnVQcmVkcywgYWRkRU9GKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsZWRSdWxlU3RhY2sucmVtb3ZlKHQudGFyZ2V0LnJ1bGVJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0IGluc3RhbmNlb2YgQWJzdHJhY3RQcmVkaWNhdGVUcmFuc2l0aW9uICkge1xuICAgICAgICAgICAgICAgIGlmIChzZWVUaHJ1UHJlZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fTE9PSyh0LnRhcmdldCwgc3RvcFN0YXRlLCBjdHgsIGxvb2ssIGxvb2tCdXN5LCBjYWxsZWRSdWxlU3RhY2ssIHNlZVRocnVQcmVkcywgYWRkRU9GKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb29rLmFkZE9uZShMTDFBbmFseXplci5ISVRfUFJFRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmKCB0LmlzRXBzaWxvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX0xPT0sodC50YXJnZXQsIHN0b3BTdGF0ZSwgY3R4LCBsb29rLCBsb29rQnVzeSwgY2FsbGVkUnVsZVN0YWNrLCBzZWVUaHJ1UHJlZHMsIGFkZEVPRik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHQuY29uc3RydWN0b3IgPT09IFdpbGRjYXJkVHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICAgIGxvb2suYWRkUmFuZ2UoIFRva2VuLk1JTl9VU0VSX1RPS0VOX1RZUEUsIHRoaXMuYXRuLm1heFRva2VuVHlwZSApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgc2V0ID0gdC5sYWJlbDtcbiAgICAgICAgICAgICAgICBpZiAoc2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgTm90U2V0VHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0ID0gc2V0LmNvbXBsZW1lbnQoVG9rZW4uTUlOX1VTRVJfVE9LRU5fVFlQRSwgdGhpcy5hdG4ubWF4VG9rZW5UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb29rLmFkZFNldChzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBTcGVjaWFsIHZhbHVlIGFkZGVkIHRvIHRoZSBsb29rYWhlYWQgc2V0cyB0byBpbmRpY2F0ZSB0aGF0IHdlIGhpdFxuICogYSBwcmVkaWNhdGUgZHVyaW5nIGFuYWx5c2lzIGlmIHtAY29kZSBzZWVUaHJ1UHJlZHM9PWZhbHNlfS5cbiAqL1xuTEwxQW5hbHl6ZXIuSElUX1BSRUQgPSBUb2tlbi5JTlZBTElEX1RZUEU7XG5cbm1vZHVsZS5leHBvcnRzID0gTEwxQW5hbHl6ZXI7XG5cbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge1Rva2VufSA9IHJlcXVpcmUoJy4vVG9rZW4nKTtcbmNvbnN0IFJlY29nbml6ZXIgPSByZXF1aXJlKCcuL1JlY29nbml6ZXInKTtcbmNvbnN0IENvbW1vblRva2VuRmFjdG9yeSA9IHJlcXVpcmUoJy4vQ29tbW9uVG9rZW5GYWN0b3J5Jyk7XG5jb25zdCB7UmVjb2duaXRpb25FeGNlcHRpb259ID0gcmVxdWlyZSgnLi9lcnJvci9FcnJvcnMnKTtcbmNvbnN0IHtMZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9ufSA9IHJlcXVpcmUoJy4vZXJyb3IvRXJyb3JzJyk7XG5cbmNsYXNzIFRva2VuU291cmNlIHt9XG5cbi8qKlxuICogQSBsZXhlciBpcyByZWNvZ25pemVyIHRoYXQgZHJhd3MgaW5wdXQgc3ltYm9scyBmcm9tIGEgY2hhcmFjdGVyIHN0cmVhbS5cbiAqIGxleGVyIGdyYW1tYXJzIHJlc3VsdCBpbiBhIHN1YmNsYXNzIG9mIHRoaXMgb2JqZWN0LiBBIExleGVyIG9iamVjdFxuICogdXNlcyBzaW1wbGlmaWVkIG1hdGNoKCkgYW5kIGVycm9yIHJlY292ZXJ5IG1lY2hhbmlzbXMgaW4gdGhlIGludGVyZXN0IG9mIHNwZWVkLlxuICovXG5jbGFzcyBMZXhlciBleHRlbmRzIFJlY29nbml6ZXIge1xuXHRjb25zdHJ1Y3RvcihpbnB1dCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5faW5wdXQgPSBpbnB1dDtcblx0XHR0aGlzLl9mYWN0b3J5ID0gQ29tbW9uVG9rZW5GYWN0b3J5LkRFRkFVTFQ7XG5cdFx0dGhpcy5fdG9rZW5GYWN0b3J5U291cmNlUGFpciA9IFsgdGhpcywgaW5wdXQgXTtcblxuXHRcdHRoaXMuX2ludGVycCA9IG51bGw7IC8vIGNoaWxkIGNsYXNzZXMgbXVzdCBwb3B1bGF0ZSB0aGlzXG5cblx0XHQvKipcblx0XHQgKiBUaGUgZ29hbCBvZiBhbGwgbGV4ZXIgcnVsZXMvbWV0aG9kcyBpcyB0byBjcmVhdGUgYSB0b2tlbiBvYmplY3QuXG5cdFx0ICogdGhpcyBpcyBhbiBpbnN0YW5jZSB2YXJpYWJsZSBhcyBtdWx0aXBsZSBydWxlcyBtYXkgY29sbGFib3JhdGUgdG9cblx0XHQgKiBjcmVhdGUgYSBzaW5nbGUgdG9rZW4uIG5leHRUb2tlbiB3aWxsIHJldHVybiB0aGlzIG9iamVjdCBhZnRlclxuXHRcdCAqIG1hdGNoaW5nIGxleGVyIHJ1bGUocykuIElmIHlvdSBzdWJjbGFzcyB0byBhbGxvdyBtdWx0aXBsZSB0b2tlblxuXHRcdCAqIGVtaXNzaW9ucywgdGhlbiBzZXQgdGhpcyB0byB0aGUgbGFzdCB0b2tlbiB0byBiZSBtYXRjaGVkIG9yXG5cdFx0ICogc29tZXRoaW5nIG5vbm51bGwgc28gdGhhdCB0aGUgYXV0byB0b2tlbiBlbWl0IG1lY2hhbmlzbSB3aWxsIG5vdFxuXHRcdCAqIGVtaXQgYW5vdGhlciB0b2tlbi5cblx0XHQgKi9cblx0XHR0aGlzLl90b2tlbiA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBXaGF0IGNoYXJhY3RlciBpbmRleCBpbiB0aGUgc3RyZWFtIGRpZCB0aGUgY3VycmVudCB0b2tlbiBzdGFydCBhdD9cblx0XHQgKiBOZWVkZWQsIGZvciBleGFtcGxlLCB0byBnZXQgdGhlIHRleHQgZm9yIGN1cnJlbnQgdG9rZW4uIFNldCBhdFxuXHRcdCAqIHRoZSBzdGFydCBvZiBuZXh0VG9rZW4uXG5cdFx0ICovXG5cdFx0dGhpcy5fdG9rZW5TdGFydENoYXJJbmRleCA9IC0xO1xuXG5cdFx0Ly8gVGhlIGxpbmUgb24gd2hpY2ggdGhlIGZpcnN0IGNoYXJhY3RlciBvZiB0aGUgdG9rZW4gcmVzaWRlcy8vL1xuXHRcdHRoaXMuX3Rva2VuU3RhcnRMaW5lID0gLTE7XG5cblx0XHQvLyBUaGUgY2hhcmFjdGVyIHBvc2l0aW9uIG9mIGZpcnN0IGNoYXJhY3RlciB3aXRoaW4gdGhlIGxpbmUvLy9cblx0XHR0aGlzLl90b2tlblN0YXJ0Q29sdW1uID0gLTE7XG5cblx0XHQvLyBPbmNlIHdlIHNlZSBFT0Ygb24gY2hhciBzdHJlYW0sIG5leHQgdG9rZW4gd2lsbCBiZSBFT0YuXG5cdFx0Ly8gSWYgeW91IGhhdmUgRE9ORSA6IEVPRiA7IHRoZW4geW91IHNlZSBET05FIEVPRi5cblx0XHR0aGlzLl9oaXRFT0YgPSBmYWxzZTtcblxuXHRcdC8vIFRoZSBjaGFubmVsIG51bWJlciBmb3IgdGhlIGN1cnJlbnQgdG9rZW4vLy9cblx0XHR0aGlzLl9jaGFubmVsID0gVG9rZW4uREVGQVVMVF9DSEFOTkVMO1xuXG5cdFx0Ly8gVGhlIHRva2VuIHR5cGUgZm9yIHRoZSBjdXJyZW50IHRva2VuLy8vXG5cdFx0dGhpcy5fdHlwZSA9IFRva2VuLklOVkFMSURfVFlQRTtcblxuXHRcdHRoaXMuX21vZGVTdGFjayA9IFtdO1xuXHRcdHRoaXMuX21vZGUgPSBMZXhlci5ERUZBVUxUX01PREU7XG5cblx0XHQvKipcblx0XHQgKiBZb3UgY2FuIHNldCB0aGUgdGV4dCBmb3IgdGhlIGN1cnJlbnQgdG9rZW4gdG8gb3ZlcnJpZGUgd2hhdCBpcyBpblxuXHRcdCAqIHRoZSBpbnB1dCBjaGFyIGJ1ZmZlci4gVXNlIHNldFRleHQoKSBvciBjYW4gc2V0IHRoaXMgaW5zdGFuY2UgdmFyLlxuXHRcdCAqL1xuXHRcdHRoaXMuX3RleHQgPSBudWxsO1xuXHR9XG5cblx0cmVzZXQoKSB7XG5cdFx0Ly8gd2FjayBMZXhlciBzdGF0ZSB2YXJpYWJsZXNcblx0XHRpZiAodGhpcy5faW5wdXQgIT09IG51bGwpIHtcblx0XHRcdHRoaXMuX2lucHV0LnNlZWsoMCk7IC8vIHJld2luZCB0aGUgaW5wdXRcblx0XHR9XG5cdFx0dGhpcy5fdG9rZW4gPSBudWxsO1xuXHRcdHRoaXMuX3R5cGUgPSBUb2tlbi5JTlZBTElEX1RZUEU7XG5cdFx0dGhpcy5fY2hhbm5lbCA9IFRva2VuLkRFRkFVTFRfQ0hBTk5FTDtcblx0XHR0aGlzLl90b2tlblN0YXJ0Q2hhckluZGV4ID0gLTE7XG5cdFx0dGhpcy5fdG9rZW5TdGFydENvbHVtbiA9IC0xO1xuXHRcdHRoaXMuX3Rva2VuU3RhcnRMaW5lID0gLTE7XG5cdFx0dGhpcy5fdGV4dCA9IG51bGw7XG5cblx0XHR0aGlzLl9oaXRFT0YgPSBmYWxzZTtcblx0XHR0aGlzLl9tb2RlID0gTGV4ZXIuREVGQVVMVF9NT0RFO1xuXHRcdHRoaXMuX21vZGVTdGFjayA9IFtdO1xuXG5cdFx0dGhpcy5faW50ZXJwLnJlc2V0KCk7XG5cdH1cblxuLy8gUmV0dXJuIGEgdG9rZW4gZnJvbSB0aGlzIHNvdXJjZTsgaS5lLiwgbWF0Y2ggYSB0b2tlbiBvbiB0aGUgY2hhciBzdHJlYW0uXG5cdG5leHRUb2tlbigpIHtcblx0XHRpZiAodGhpcy5faW5wdXQgPT09IG51bGwpIHtcblx0XHRcdHRocm93IFwibmV4dFRva2VuIHJlcXVpcmVzIGEgbm9uLW51bGwgaW5wdXQgc3RyZWFtLlwiO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIE1hcmsgc3RhcnQgbG9jYXRpb24gaW4gY2hhciBzdHJlYW0gc28gdW5idWZmZXJlZCBzdHJlYW1zIGFyZVxuXHRcdCAqIGd1YXJhbnRlZWQgYXQgbGVhc3QgaGF2ZSB0ZXh0IG9mIGN1cnJlbnQgdG9rZW5cblx0XHQgKi9cblx0XHRjb25zdCB0b2tlblN0YXJ0TWFya2VyID0gdGhpcy5faW5wdXQubWFyaygpO1xuXHRcdHRyeSB7XG5cdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRpZiAodGhpcy5faGl0RU9GKSB7XG5cdFx0XHRcdFx0dGhpcy5lbWl0RU9GKCk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuX3Rva2VuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3Rva2VuID0gbnVsbDtcblx0XHRcdFx0dGhpcy5fY2hhbm5lbCA9IFRva2VuLkRFRkFVTFRfQ0hBTk5FTDtcblx0XHRcdFx0dGhpcy5fdG9rZW5TdGFydENoYXJJbmRleCA9IHRoaXMuX2lucHV0LmluZGV4O1xuXHRcdFx0XHR0aGlzLl90b2tlblN0YXJ0Q29sdW1uID0gdGhpcy5faW50ZXJwLmNvbHVtbjtcblx0XHRcdFx0dGhpcy5fdG9rZW5TdGFydExpbmUgPSB0aGlzLl9pbnRlcnAubGluZTtcblx0XHRcdFx0dGhpcy5fdGV4dCA9IG51bGw7XG5cdFx0XHRcdGxldCBjb250aW51ZU91dGVyID0gZmFsc2U7XG5cdFx0XHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHRcdFx0dGhpcy5fdHlwZSA9IFRva2VuLklOVkFMSURfVFlQRTtcblx0XHRcdFx0XHRsZXQgdHR5cGUgPSBMZXhlci5TS0lQO1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHR0dHlwZSA9IHRoaXMuX2ludGVycC5tYXRjaCh0aGlzLl9pbnB1dCwgdGhpcy5fbW9kZSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0aWYoZSBpbnN0YW5jZW9mIFJlY29nbml0aW9uRXhjZXB0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMubm90aWZ5TGlzdGVuZXJzKGUpOyAvLyByZXBvcnQgZXJyb3Jcblx0XHRcdFx0XHRcdFx0dGhpcy5yZWNvdmVyKGUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coZS5zdGFjayk7XG5cdFx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLl9pbnB1dC5MQSgxKSA9PT0gVG9rZW4uRU9GKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9oaXRFT0YgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5fdHlwZSA9PT0gVG9rZW4uSU5WQUxJRF9UWVBFKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90eXBlID0gdHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLl90eXBlID09PSBMZXhlci5TS0lQKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZU91dGVyID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5fdHlwZSAhPT0gTGV4ZXIuTU9SRSkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjb250aW51ZU91dGVyKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRoaXMuX3Rva2VuID09PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhpcy5lbWl0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMuX3Rva2VuO1xuXHRcdFx0fVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHQvLyBtYWtlIHN1cmUgd2UgcmVsZWFzZSBtYXJrZXIgYWZ0ZXIgbWF0Y2ggb3Jcblx0XHRcdC8vIHVuYnVmZmVyZWQgY2hhciBzdHJlYW0gd2lsbCBrZWVwIGJ1ZmZlcmluZ1xuXHRcdFx0dGhpcy5faW5wdXQucmVsZWFzZSh0b2tlblN0YXJ0TWFya2VyKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogSW5zdHJ1Y3QgdGhlIGxleGVyIHRvIHNraXAgY3JlYXRpbmcgYSB0b2tlbiBmb3IgY3VycmVudCBsZXhlciBydWxlXG5cdCAqIGFuZCBsb29rIGZvciBhbm90aGVyIHRva2VuLiBuZXh0VG9rZW4oKSBrbm93cyB0byBrZWVwIGxvb2tpbmcgd2hlblxuXHQgKiBhIGxleGVyIHJ1bGUgZmluaXNoZXMgd2l0aCB0b2tlbiBzZXQgdG8gU0tJUF9UT0tFTi4gUmVjYWxsIHRoYXRcblx0ICogaWYgdG9rZW49PW51bGwgYXQgZW5kIG9mIGFueSB0b2tlbiBydWxlLCBpdCBjcmVhdGVzIG9uZSBmb3IgeW91XG5cdCAqIGFuZCBlbWl0cyBpdC5cblx0ICovXG5cdHNraXAoKSB7XG5cdFx0dGhpcy5fdHlwZSA9IExleGVyLlNLSVA7XG5cdH1cblxuXHRtb3JlKCkge1xuXHRcdHRoaXMuX3R5cGUgPSBMZXhlci5NT1JFO1xuXHR9XG5cblx0bW9kZShtKSB7XG5cdFx0dGhpcy5fbW9kZSA9IG07XG5cdH1cblxuXHRwdXNoTW9kZShtKSB7XG5cdFx0aWYgKHRoaXMuX2ludGVycC5kZWJ1Zykge1xuXHRcdFx0Y29uc29sZS5sb2coXCJwdXNoTW9kZSBcIiArIG0pO1xuXHRcdH1cblx0XHR0aGlzLl9tb2RlU3RhY2sucHVzaCh0aGlzLl9tb2RlKTtcblx0XHR0aGlzLm1vZGUobSk7XG5cdH1cblxuXHRwb3BNb2RlKCkge1xuXHRcdGlmICh0aGlzLl9tb2RlU3RhY2subGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aHJvdyBcIkVtcHR5IFN0YWNrXCI7XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9pbnRlcnAuZGVidWcpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwicG9wTW9kZSBiYWNrIHRvIFwiICsgdGhpcy5fbW9kZVN0YWNrLnNsaWNlKDAsIC0xKSk7XG5cdFx0fVxuXHRcdHRoaXMubW9kZSh0aGlzLl9tb2RlU3RhY2sucG9wKCkpO1xuXHRcdHJldHVybiB0aGlzLl9tb2RlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJ5IGRlZmF1bHQgZG9lcyBub3Qgc3VwcG9ydCBtdWx0aXBsZSBlbWl0cyBwZXIgbmV4dFRva2VuIGludm9jYXRpb25cblx0ICogZm9yIGVmZmljaWVuY3kgcmVhc29ucy4gU3ViY2xhc3MgYW5kIG92ZXJyaWRlIHRoaXMgbWV0aG9kLCBuZXh0VG9rZW4sXG5cdCAqIGFuZCBnZXRUb2tlbiAodG8gcHVzaCB0b2tlbnMgaW50byBhIGxpc3QgYW5kIHB1bGwgZnJvbSB0aGF0IGxpc3Rcblx0ICogcmF0aGVyIHRoYW4gYSBzaW5nbGUgdmFyaWFibGUgYXMgdGhpcyBpbXBsZW1lbnRhdGlvbiBkb2VzKS5cblx0ICovXG5cdGVtaXRUb2tlbih0b2tlbikge1xuXHRcdHRoaXMuX3Rva2VuID0gdG9rZW47XG5cdH1cblxuXHQvKipcblx0ICogVGhlIHN0YW5kYXJkIG1ldGhvZCBjYWxsZWQgdG8gYXV0b21hdGljYWxseSBlbWl0IGEgdG9rZW4gYXQgdGhlXG5cdCAqIG91dGVybW9zdCBsZXhpY2FsIHJ1bGUuIFRoZSB0b2tlbiBvYmplY3Qgc2hvdWxkIHBvaW50IGludG8gdGhlXG5cdCAqIGNoYXIgYnVmZmVyIHN0YXJ0Li5zdG9wLiBJZiB0aGVyZSBpcyBhIHRleHQgb3ZlcnJpZGUgaW4gJ3RleHQnLFxuXHQgKiB1c2UgdGhhdCB0byBzZXQgdGhlIHRva2VuJ3MgdGV4dC4gT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gZW1pdFxuXHQgKiBjdXN0b20gVG9rZW4gb2JqZWN0cyBvciBwcm92aWRlIGEgbmV3IGZhY3RvcnkuXG5cdCAqL1xuXHRlbWl0KCkge1xuXHRcdGNvbnN0IHQgPSB0aGlzLl9mYWN0b3J5LmNyZWF0ZSh0aGlzLl90b2tlbkZhY3RvcnlTb3VyY2VQYWlyLCB0aGlzLl90eXBlLFxuXHRcdFx0XHR0aGlzLl90ZXh0LCB0aGlzLl9jaGFubmVsLCB0aGlzLl90b2tlblN0YXJ0Q2hhckluZGV4LCB0aGlzXG5cdFx0XHRcdFx0XHQuZ2V0Q2hhckluZGV4KCkgLSAxLCB0aGlzLl90b2tlblN0YXJ0TGluZSxcblx0XHRcdFx0dGhpcy5fdG9rZW5TdGFydENvbHVtbik7XG5cdFx0dGhpcy5lbWl0VG9rZW4odCk7XG5cdFx0cmV0dXJuIHQ7XG5cdH1cblxuXHRlbWl0RU9GKCkge1xuXHRcdGNvbnN0IGNwb3MgPSB0aGlzLmNvbHVtbjtcblx0XHRjb25zdCBscG9zID0gdGhpcy5saW5lO1xuXHRcdGNvbnN0IGVvZiA9IHRoaXMuX2ZhY3RvcnkuY3JlYXRlKHRoaXMuX3Rva2VuRmFjdG9yeVNvdXJjZVBhaXIsIFRva2VuLkVPRixcblx0XHRcdFx0bnVsbCwgVG9rZW4uREVGQVVMVF9DSEFOTkVMLCB0aGlzLl9pbnB1dC5pbmRleCxcblx0XHRcdFx0dGhpcy5faW5wdXQuaW5kZXggLSAxLCBscG9zLCBjcG9zKTtcblx0XHR0aGlzLmVtaXRUb2tlbihlb2YpO1xuXHRcdHJldHVybiBlb2Y7XG5cdH1cblxuLy8gV2hhdCBpcyB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIG9mIGxvb2thaGVhZD8vLy9cblx0Z2V0Q2hhckluZGV4KCkge1xuXHRcdHJldHVybiB0aGlzLl9pbnB1dC5pbmRleDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gYSBsaXN0IG9mIGFsbCBUb2tlbiBvYmplY3RzIGluIGlucHV0IGNoYXIgc3RyZWFtLlxuXHQgKiBGb3JjZXMgbG9hZCBvZiBhbGwgdG9rZW5zLiBEb2VzIG5vdCBpbmNsdWRlIEVPRiB0b2tlbi5cblx0ICovXG5cdGdldEFsbFRva2VucygpIHtcblx0XHRjb25zdCB0b2tlbnMgPSBbXTtcblx0XHRsZXQgdCA9IHRoaXMubmV4dFRva2VuKCk7XG5cdFx0d2hpbGUgKHQudHlwZSAhPT0gVG9rZW4uRU9GKSB7XG5cdFx0XHR0b2tlbnMucHVzaCh0KTtcblx0XHRcdHQgPSB0aGlzLm5leHRUb2tlbigpO1xuXHRcdH1cblx0XHRyZXR1cm4gdG9rZW5zO1xuXHR9XG5cblx0bm90aWZ5TGlzdGVuZXJzKGUpIHtcblx0XHRjb25zdCBzdGFydCA9IHRoaXMuX3Rva2VuU3RhcnRDaGFySW5kZXg7XG5cdFx0Y29uc3Qgc3RvcCA9IHRoaXMuX2lucHV0LmluZGV4O1xuXHRcdGNvbnN0IHRleHQgPSB0aGlzLl9pbnB1dC5nZXRUZXh0KHN0YXJ0LCBzdG9wKTtcblx0XHRjb25zdCBtc2cgPSBcInRva2VuIHJlY29nbml0aW9uIGVycm9yIGF0OiAnXCIgKyB0aGlzLmdldEVycm9yRGlzcGxheSh0ZXh0KSArIFwiJ1wiO1xuXHRcdGNvbnN0IGxpc3RlbmVyID0gdGhpcy5nZXRFcnJvckxpc3RlbmVyRGlzcGF0Y2goKTtcblx0XHRsaXN0ZW5lci5zeW50YXhFcnJvcih0aGlzLCBudWxsLCB0aGlzLl90b2tlblN0YXJ0TGluZSxcblx0XHRcdFx0dGhpcy5fdG9rZW5TdGFydENvbHVtbiwgbXNnLCBlKTtcblx0fVxuXG5cdGdldEVycm9yRGlzcGxheShzKSB7XG5cdFx0Y29uc3QgZCA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0ZC5wdXNoKHNbaV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gZC5qb2luKCcnKTtcblx0fVxuXG5cdGdldEVycm9yRGlzcGxheUZvckNoYXIoYykge1xuXHRcdGlmIChjLmNoYXJDb2RlQXQoMCkgPT09IFRva2VuLkVPRikge1xuXHRcdFx0cmV0dXJuIFwiPEVPRj5cIjtcblx0XHR9IGVsc2UgaWYgKGMgPT09ICdcXG4nKSB7XG5cdFx0XHRyZXR1cm4gXCJcXFxcblwiO1xuXHRcdH0gZWxzZSBpZiAoYyA9PT0gJ1xcdCcpIHtcblx0XHRcdHJldHVybiBcIlxcXFx0XCI7XG5cdFx0fSBlbHNlIGlmIChjID09PSAnXFxyJykge1xuXHRcdFx0cmV0dXJuIFwiXFxcXHJcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGM7XG5cdFx0fVxuXHR9XG5cblx0Z2V0Q2hhckVycm9yRGlzcGxheShjKSB7XG5cdFx0cmV0dXJuIFwiJ1wiICsgdGhpcy5nZXRFcnJvckRpc3BsYXlGb3JDaGFyKGMpICsgXCInXCI7XG5cdH1cblxuXHQvKipcblx0ICogTGV4ZXJzIGNhbiBub3JtYWxseSBtYXRjaCBhbnkgY2hhciBpbiBpdCdzIHZvY2FidWxhcnkgYWZ0ZXIgbWF0Y2hpbmdcblx0ICogYSB0b2tlbiwgc28gZG8gdGhlIGVhc3kgdGhpbmcgYW5kIGp1c3Qga2lsbCBhIGNoYXJhY3RlciBhbmQgaG9wZVxuXHQgKiBpdCBhbGwgd29ya3Mgb3V0LiBZb3UgY2FuIGluc3RlYWQgdXNlIHRoZSBydWxlIGludm9jYXRpb24gc3RhY2tcblx0ICogdG8gZG8gc29waGlzdGljYXRlZCBlcnJvciByZWNvdmVyeSBpZiB5b3UgYXJlIGluIGEgZnJhZ21lbnQgcnVsZS5cblx0ICovXG5cdHJlY292ZXIocmUpIHtcblx0XHRpZiAodGhpcy5faW5wdXQuTEEoMSkgIT09IFRva2VuLkVPRikge1xuXHRcdFx0aWYgKHJlIGluc3RhbmNlb2YgTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbikge1xuXHRcdFx0XHQvLyBza2lwIGEgY2hhciBhbmQgdHJ5IGFnYWluXG5cdFx0XHRcdHRoaXMuX2ludGVycC5jb25zdW1lKHRoaXMuX2lucHV0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFRPRE86IERvIHdlIGxvc2UgY2hhcmFjdGVyIG9yIGxpbmUgcG9zaXRpb24gaW5mb3JtYXRpb24/XG5cdFx0XHRcdHRoaXMuX2lucHV0LmNvbnN1bWUoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXQgaW5wdXRTdHJlYW0oKXtcblx0XHRyZXR1cm4gdGhpcy5faW5wdXQ7XG5cdH1cblxuXHRzZXQgaW5wdXRTdHJlYW0oaW5wdXQpIHtcblx0XHR0aGlzLl9pbnB1dCA9IG51bGw7XG5cdFx0dGhpcy5fdG9rZW5GYWN0b3J5U291cmNlUGFpciA9IFsgdGhpcywgdGhpcy5faW5wdXQgXTtcblx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0dGhpcy5faW5wdXQgPSBpbnB1dDtcblx0XHR0aGlzLl90b2tlbkZhY3RvcnlTb3VyY2VQYWlyID0gWyB0aGlzLCB0aGlzLl9pbnB1dCBdO1xuXHR9XG5cblx0Z2V0IHNvdXJjZU5hbWUoKXtcblx0XHRyZXR1cm4gdGhpcy5faW5wdXQuc291cmNlTmFtZTtcblx0fVxuXG5cdGdldCB0eXBlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX3R5cGU7XG5cdH1cblxuXHRzZXQgdHlwZSh0eXBlKSB7XG5cdFx0dGhpcy5fdHlwZSA9IHR5cGU7XG5cdH1cblxuXHRnZXQgbGluZSgpe1xuXHRcdHJldHVybiB0aGlzLl9pbnRlcnAubGluZTtcblx0fVxuXG5cdHNldCBsaW5lKGxpbmUpIHtcblx0XHR0aGlzLl9pbnRlcnAubGluZSA9IGxpbmU7XG5cdH1cblxuXHRnZXQgY29sdW1uKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2ludGVycC5jb2x1bW47XG5cdH1cblxuXHRzZXQgY29sdW1uKGNvbHVtbikge1xuXHRcdHRoaXMuX2ludGVycC5jb2x1bW4gPSBjb2x1bW47XG5cdH1cblxuXHRnZXQgdGV4dCgpe1xuXHRcdGlmICh0aGlzLl90ZXh0ICE9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdGV4dDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2ludGVycC5nZXRUZXh0KHRoaXMuX2lucHV0KTtcblx0XHR9XG5cdH1cblxuXHRzZXQgdGV4dCh0ZXh0KSB7XG5cdFx0dGhpcy5fdGV4dCA9IHRleHQ7XG5cdH1cbn1cblxuXG5cblxuTGV4ZXIuREVGQVVMVF9NT0RFID0gMDtcbkxleGVyLk1PUkUgPSAtMjtcbkxleGVyLlNLSVAgPSAtMztcblxuTGV4ZXIuREVGQVVMVF9UT0tFTl9DSEFOTkVMID0gVG9rZW4uREVGQVVMVF9DSEFOTkVMO1xuTGV4ZXIuSElEREVOID0gVG9rZW4uSElEREVOX0NIQU5ORUw7XG5MZXhlci5NSU5fQ0hBUl9WQUxVRSA9IDB4MDAwMDtcbkxleGVyLk1BWF9DSEFSX1ZBTFVFID0gMHgxMEZGRkY7XG5cbi8vIFNldCB0aGUgY2hhciBzdHJlYW0gYW5kIHJlc2V0IHRoZSBsZXhlclxuXG5cbm1vZHVsZS5leHBvcnRzID0gTGV4ZXI7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuL1Rva2VuJyk7XG5jb25zdCB7UGFyc2VUcmVlTGlzdGVuZXIsIFRlcm1pbmFsTm9kZSwgRXJyb3JOb2RlfSA9IHJlcXVpcmUoJy4vdHJlZS9UcmVlJyk7XG5jb25zdCBSZWNvZ25pemVyID0gcmVxdWlyZSgnLi9SZWNvZ25pemVyJyk7XG5jb25zdCB7RGVmYXVsdEVycm9yU3RyYXRlZ3l9ID0gcmVxdWlyZSgnLi9lcnJvci9FcnJvclN0cmF0ZWd5Jyk7XG5jb25zdCBBVE5EZXNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL2F0bi9BVE5EZXNlcmlhbGl6ZXInKTtcbmNvbnN0IEFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMgPSByZXF1aXJlKCcuL2F0bi9BVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zJyk7XG5jb25zdCBMZXhlciA9IHJlcXVpcmUoJy4vTGV4ZXInKTtcblxuY2xhc3MgVHJhY2VMaXN0ZW5lciBleHRlbmRzIFBhcnNlVHJlZUxpc3RlbmVyIHtcblx0Y29uc3RydWN0b3IocGFyc2VyKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnBhcnNlciA9IHBhcnNlcjtcblx0fVxuXG5cdGVudGVyRXZlcnlSdWxlKGN0eCkge1xuXHRcdGNvbnNvbGUubG9nKFwiZW50ZXIgICBcIiArIHRoaXMucGFyc2VyLnJ1bGVOYW1lc1tjdHgucnVsZUluZGV4XSArIFwiLCBMVCgxKT1cIiArIHRoaXMucGFyc2VyLl9pbnB1dC5MVCgxKS50ZXh0KTtcblx0fVxuXG5cdHZpc2l0VGVybWluYWwobm9kZSkge1xuXHRcdGNvbnNvbGUubG9nKFwiY29uc3VtZSBcIiArIG5vZGUuc3ltYm9sICsgXCIgcnVsZSBcIiArIHRoaXMucGFyc2VyLnJ1bGVOYW1lc1t0aGlzLnBhcnNlci5fY3R4LnJ1bGVJbmRleF0pO1xuXHR9XG5cblx0ZXhpdEV2ZXJ5UnVsZShjdHgpIHtcblx0XHRjb25zb2xlLmxvZyhcImV4aXQgICAgXCIgKyB0aGlzLnBhcnNlci5ydWxlTmFtZXNbY3R4LnJ1bGVJbmRleF0gKyBcIiwgTFQoMSk9XCIgKyB0aGlzLnBhcnNlci5faW5wdXQuTFQoMSkudGV4dCk7XG5cdH1cbn1cblxuY2xhc3MgUGFyc2VyIGV4dGVuZHMgUmVjb2duaXplciB7XG5cdC8qKlxuXHQgKiB0aGlzIGlzIGFsbCB0aGUgcGFyc2luZyBzdXBwb3J0IGNvZGUgZXNzZW50aWFsbHk7IG1vc3Qgb2YgaXQgaXMgZXJyb3Jcblx0ICogcmVjb3Zlcnkgc3R1ZmYuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihpbnB1dCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0Ly8gVGhlIGlucHV0IHN0cmVhbS5cblx0XHR0aGlzLl9pbnB1dCA9IG51bGw7XG5cdFx0LyoqXG5cdFx0ICogVGhlIGVycm9yIGhhbmRsaW5nIHN0cmF0ZWd5IGZvciB0aGUgcGFyc2VyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhIG5ld1xuXHRcdCAqIGluc3RhbmNlIG9mIHtAbGluayBEZWZhdWx0RXJyb3JTdHJhdGVneX0uXG5cdFx0ICovXG5cdFx0dGhpcy5fZXJySGFuZGxlciA9IG5ldyBEZWZhdWx0RXJyb3JTdHJhdGVneSgpO1xuXHRcdHRoaXMuX3ByZWNlZGVuY2VTdGFjayA9IFtdO1xuXHRcdHRoaXMuX3ByZWNlZGVuY2VTdGFjay5wdXNoKDApO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSB7QGxpbmsgUGFyc2VyUnVsZUNvbnRleHR9IG9iamVjdCBmb3IgdGhlIGN1cnJlbnRseSBleGVjdXRpbmcgcnVsZS5cblx0XHQgKiB0aGlzIGlzIGFsd2F5cyBub24tbnVsbCBkdXJpbmcgdGhlIHBhcnNpbmcgcHJvY2Vzcy5cblx0XHQgKi9cblx0XHR0aGlzLl9jdHggPSBudWxsO1xuXHRcdC8qKlxuXHRcdCAqIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGUgcGFyc2VyIHNob3VsZCBjb25zdHJ1Y3QgYSBwYXJzZSB0cmVlIGR1cmluZ1xuXHRcdCAqIHRoZSBwYXJzaW5nIHByb2Nlc3MuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHtAY29kZSB0cnVlfS5cblx0XHQgKi9cblx0XHR0aGlzLmJ1aWxkUGFyc2VUcmVlcyA9IHRydWU7XG5cdFx0LyoqXG5cdFx0ICogV2hlbiB7QGxpbmsgLy9zZXRUcmFjZX17QGNvZGUgKHRydWUpfSBpcyBjYWxsZWQsIGEgcmVmZXJlbmNlIHRvIHRoZVxuXHRcdCAqIHtAbGluayBUcmFjZUxpc3RlbmVyfSBpcyBzdG9yZWQgaGVyZSBzbyBpdCBjYW4gYmUgZWFzaWx5IHJlbW92ZWQgaW4gYVxuXHRcdCAqIGxhdGVyIGNhbGwgdG8ge0BsaW5rIC8vc2V0VHJhY2V9e0Bjb2RlIChmYWxzZSl9LiBUaGUgbGlzdGVuZXIgaXRzZWxmIGlzXG5cdFx0ICogaW1wbGVtZW50ZWQgYXMgYSBwYXJzZXIgbGlzdGVuZXIgc28gdGhpcyBmaWVsZCBpcyBub3QgZGlyZWN0bHkgdXNlZCBieVxuXHRcdCAqIG90aGVyIHBhcnNlciBtZXRob2RzLlxuXHRcdCAqL1xuXHRcdHRoaXMuX3RyYWNlciA9IG51bGw7XG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpc3Qgb2Yge0BsaW5rIFBhcnNlVHJlZUxpc3RlbmVyfSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCB0byByZWNlaXZlXG5cdFx0ICogZXZlbnRzIGR1cmluZyB0aGUgcGFyc2UuXG5cdFx0ICovXG5cdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMgPSBudWxsO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBudW1iZXIgb2Ygc3ludGF4IGVycm9ycyByZXBvcnRlZCBkdXJpbmcgcGFyc2luZy4gdGhpcyB2YWx1ZSBpc1xuXHRcdCAqIGluY3JlbWVudGVkIGVhY2ggdGltZSB7QGxpbmsgLy9ub3RpZnlFcnJvckxpc3RlbmVyc30gaXMgY2FsbGVkLlxuXHRcdCAqL1xuXHRcdHRoaXMuX3N5bnRheEVycm9ycyA9IDA7XG5cdFx0dGhpcy5zZXRJbnB1dFN0cmVhbShpbnB1dCk7XG5cdH1cblxuXHQvLyByZXNldCB0aGUgcGFyc2VyJ3Mgc3RhdGVcblx0cmVzZXQoKSB7XG5cdFx0aWYgKHRoaXMuX2lucHV0ICE9PSBudWxsKSB7XG5cdFx0XHR0aGlzLl9pbnB1dC5zZWVrKDApO1xuXHRcdH1cblx0XHR0aGlzLl9lcnJIYW5kbGVyLnJlc2V0KHRoaXMpO1xuXHRcdHRoaXMuX2N0eCA9IG51bGw7XG5cdFx0dGhpcy5fc3ludGF4RXJyb3JzID0gMDtcblx0XHR0aGlzLnNldFRyYWNlKGZhbHNlKTtcblx0XHR0aGlzLl9wcmVjZWRlbmNlU3RhY2sgPSBbXTtcblx0XHR0aGlzLl9wcmVjZWRlbmNlU3RhY2sucHVzaCgwKTtcblx0XHRpZiAodGhpcy5faW50ZXJwICE9PSBudWxsKSB7XG5cdFx0XHR0aGlzLl9pbnRlcnAucmVzZXQoKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWF0Y2ggY3VycmVudCBpbnB1dCBzeW1ib2wgYWdhaW5zdCB7QGNvZGUgdHR5cGV9LiBJZiB0aGUgc3ltYm9sIHR5cGVcblx0ICogbWF0Y2hlcywge0BsaW5rIEFOVExSRXJyb3JTdHJhdGVneS8vcmVwb3J0TWF0Y2h9IGFuZCB7QGxpbmsgLy9jb25zdW1lfSBhcmVcblx0ICogY2FsbGVkIHRvIGNvbXBsZXRlIHRoZSBtYXRjaCBwcm9jZXNzLlxuXHQgKlxuXHQgKiA8cD5JZiB0aGUgc3ltYm9sIHR5cGUgZG9lcyBub3QgbWF0Y2gsXG5cdCAqIHtAbGluayBBTlRMUkVycm9yU3RyYXRlZ3kvL3JlY292ZXJJbmxpbmV9IGlzIGNhbGxlZCBvbiB0aGUgY3VycmVudCBlcnJvclxuXHQgKiBzdHJhdGVneSB0byBhdHRlbXB0IHJlY292ZXJ5LiBJZiB7QGxpbmsgLy9nZXRCdWlsZFBhcnNlVHJlZX0gaXNcblx0ICoge0Bjb2RlIHRydWV9IGFuZCB0aGUgdG9rZW4gaW5kZXggb2YgdGhlIHN5bWJvbCByZXR1cm5lZCBieVxuXHQgKiB7QGxpbmsgQU5UTFJFcnJvclN0cmF0ZWd5Ly9yZWNvdmVySW5saW5lfSBpcyAtMSwgdGhlIHN5bWJvbCBpcyBhZGRlZCB0b1xuXHQgKiB0aGUgcGFyc2UgdHJlZSBieSBjYWxsaW5nIHtAbGluayBQYXJzZXJSdWxlQ29udGV4dC8vYWRkRXJyb3JOb2RlfS48L3A+XG5cdCAqXG5cdCAqIEBwYXJhbSB0dHlwZSB0aGUgdG9rZW4gdHlwZSB0byBtYXRjaFxuXHQgKiBAcmV0dXJuIHRoZSBtYXRjaGVkIHN5bWJvbFxuXHQgKiBAdGhyb3dzIFJlY29nbml0aW9uRXhjZXB0aW9uIGlmIHRoZSBjdXJyZW50IGlucHV0IHN5bWJvbCBkaWQgbm90IG1hdGNoXG5cdCAqIHtAY29kZSB0dHlwZX0gYW5kIHRoZSBlcnJvciBzdHJhdGVneSBjb3VsZCBub3QgcmVjb3ZlciBmcm9tIHRoZVxuXHQgKiBtaXNtYXRjaGVkIHN5bWJvbFxuXHQgKi9cblx0bWF0Y2godHR5cGUpIHtcblx0XHRsZXQgdCA9IHRoaXMuZ2V0Q3VycmVudFRva2VuKCk7XG5cdFx0aWYgKHQudHlwZSA9PT0gdHR5cGUpIHtcblx0XHRcdHRoaXMuX2VyckhhbmRsZXIucmVwb3J0TWF0Y2godGhpcyk7XG5cdFx0XHR0aGlzLmNvbnN1bWUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dCA9IHRoaXMuX2VyckhhbmRsZXIucmVjb3ZlcklubGluZSh0aGlzKTtcblx0XHRcdGlmICh0aGlzLmJ1aWxkUGFyc2VUcmVlcyAmJiB0LnRva2VuSW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdC8vIHdlIG11c3QgaGF2ZSBjb25qdXJlZCB1cCBhIG5ldyB0b2tlbiBkdXJpbmcgc2luZ2xlIHRva2VuXG5cdFx0XHRcdC8vIGluc2VydGlvblxuXHRcdFx0XHQvLyBpZiBpdCdzIG5vdCB0aGUgY3VycmVudCBzeW1ib2xcblx0XHRcdFx0dGhpcy5fY3R4LmFkZEVycm9yTm9kZSh0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHQ7XG5cdH1cblxuXHQvKipcblx0ICogTWF0Y2ggY3VycmVudCBpbnB1dCBzeW1ib2wgYXMgYSB3aWxkY2FyZC4gSWYgdGhlIHN5bWJvbCB0eXBlIG1hdGNoZXNcblx0ICogKGkuZS4gaGFzIGEgdmFsdWUgZ3JlYXRlciB0aGFuIDApLCB7QGxpbmsgQU5UTFJFcnJvclN0cmF0ZWd5Ly9yZXBvcnRNYXRjaH1cblx0ICogYW5kIHtAbGluayAvL2NvbnN1bWV9IGFyZSBjYWxsZWQgdG8gY29tcGxldGUgdGhlIG1hdGNoIHByb2Nlc3MuXG5cdCAqXG5cdCAqIDxwPklmIHRoZSBzeW1ib2wgdHlwZSBkb2VzIG5vdCBtYXRjaCxcblx0ICoge0BsaW5rIEFOVExSRXJyb3JTdHJhdGVneS8vcmVjb3ZlcklubGluZX0gaXMgY2FsbGVkIG9uIHRoZSBjdXJyZW50IGVycm9yXG5cdCAqIHN0cmF0ZWd5IHRvIGF0dGVtcHQgcmVjb3ZlcnkuIElmIHtAbGluayAvL2dldEJ1aWxkUGFyc2VUcmVlfSBpc1xuXHQgKiB7QGNvZGUgdHJ1ZX0gYW5kIHRoZSB0b2tlbiBpbmRleCBvZiB0aGUgc3ltYm9sIHJldHVybmVkIGJ5XG5cdCAqIHtAbGluayBBTlRMUkVycm9yU3RyYXRlZ3kvL3JlY292ZXJJbmxpbmV9IGlzIC0xLCB0aGUgc3ltYm9sIGlzIGFkZGVkIHRvXG5cdCAqIHRoZSBwYXJzZSB0cmVlIGJ5IGNhbGxpbmcge0BsaW5rIFBhcnNlclJ1bGVDb250ZXh0Ly9hZGRFcnJvck5vZGV9LjwvcD5cblx0ICpcblx0ICogQHJldHVybiB0aGUgbWF0Y2hlZCBzeW1ib2xcblx0ICogQHRocm93cyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiBpZiB0aGUgY3VycmVudCBpbnB1dCBzeW1ib2wgZGlkIG5vdCBtYXRjaFxuXHQgKiBhIHdpbGRjYXJkIGFuZCB0aGUgZXJyb3Igc3RyYXRlZ3kgY291bGQgbm90IHJlY292ZXIgZnJvbSB0aGUgbWlzbWF0Y2hlZFxuXHQgKiBzeW1ib2xcblx0ICovXG5cdG1hdGNoV2lsZGNhcmQoKSB7XG5cdFx0bGV0IHQgPSB0aGlzLmdldEN1cnJlbnRUb2tlbigpO1xuXHRcdGlmICh0LnR5cGUgPiAwKSB7XG5cdFx0XHR0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydE1hdGNoKHRoaXMpO1xuXHRcdFx0dGhpcy5jb25zdW1lKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHQgPSB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXJJbmxpbmUodGhpcyk7XG5cdFx0XHRpZiAodGhpcy5fYnVpbGRQYXJzZVRyZWVzICYmIHQudG9rZW5JbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0Ly8gd2UgbXVzdCBoYXZlIGNvbmp1cmVkIHVwIGEgbmV3IHRva2VuIGR1cmluZyBzaW5nbGUgdG9rZW5cblx0XHRcdFx0Ly8gaW5zZXJ0aW9uXG5cdFx0XHRcdC8vIGlmIGl0J3Mgbm90IHRoZSBjdXJyZW50IHN5bWJvbFxuXHRcdFx0XHR0aGlzLl9jdHguYWRkRXJyb3JOb2RlKHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdDtcblx0fVxuXG5cdGdldFBhcnNlTGlzdGVuZXJzKCkge1xuXHRcdHJldHVybiB0aGlzLl9wYXJzZUxpc3RlbmVycyB8fCBbXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMge0Bjb2RlIGxpc3RlbmVyfSB0byByZWNlaXZlIGV2ZW50cyBkdXJpbmcgdGhlIHBhcnNpbmcgcHJvY2Vzcy5cblx0ICpcblx0ICogPHA+VG8gc3VwcG9ydCBvdXRwdXQtcHJlc2VydmluZyBncmFtbWFyIHRyYW5zZm9ybWF0aW9ucyAoaW5jbHVkaW5nIGJ1dCBub3Rcblx0ICogbGltaXRlZCB0byBsZWZ0LXJlY3Vyc2lvbiByZW1vdmFsLCBhdXRvbWF0ZWQgbGVmdC1mYWN0b3JpbmcsIGFuZFxuXHQgKiBvcHRpbWl6ZWQgY29kZSBnZW5lcmF0aW9uKSwgY2FsbHMgdG8gbGlzdGVuZXIgbWV0aG9kcyBkdXJpbmcgdGhlIHBhcnNlXG5cdCAqIG1heSBkaWZmZXIgc3Vic3RhbnRpYWxseSBmcm9tIGNhbGxzIG1hZGUgYnlcblx0ICoge0BsaW5rIFBhcnNlVHJlZVdhbGtlci8vREVGQVVMVH0gdXNlZCBhZnRlciB0aGUgcGFyc2UgaXMgY29tcGxldGUuIEluXG5cdCAqIHBhcnRpY3VsYXIsIHJ1bGUgZW50cnkgYW5kIGV4aXQgZXZlbnRzIG1heSBvY2N1ciBpbiBhIGRpZmZlcmVudCBvcmRlclxuXHQgKiBkdXJpbmcgdGhlIHBhcnNlIHRoYW4gYWZ0ZXIgdGhlIHBhcnNlci4gSW4gYWRkaXRpb24sIGNhbGxzIHRvIGNlcnRhaW5cblx0ICogcnVsZSBlbnRyeSBtZXRob2RzIG1heSBiZSBvbWl0dGVkLjwvcD5cblx0ICpcblx0ICogPHA+V2l0aCB0aGUgZm9sbG93aW5nIHNwZWNpZmljIGV4Y2VwdGlvbnMsIGNhbGxzIHRvIGxpc3RlbmVyIGV2ZW50cyBhcmVcblx0ICogPGVtPmRldGVybWluaXN0aWM8L2VtPiwgaS5lLiBmb3IgaWRlbnRpY2FsIGlucHV0IHRoZSBjYWxscyB0byBsaXN0ZW5lclxuXHQgKiBtZXRob2RzIHdpbGwgYmUgdGhlIHNhbWUuPC9wPlxuXHQgKlxuXHQgKiA8dWw+XG5cdCAqIDxsaT5BbHRlcmF0aW9ucyB0byB0aGUgZ3JhbW1hciB1c2VkIHRvIGdlbmVyYXRlIGNvZGUgbWF5IGNoYW5nZSB0aGVcblx0ICogYmVoYXZpb3Igb2YgdGhlIGxpc3RlbmVyIGNhbGxzLjwvbGk+XG5cdCAqIDxsaT5BbHRlcmF0aW9ucyB0byB0aGUgY29tbWFuZCBsaW5lIG9wdGlvbnMgcGFzc2VkIHRvIEFOVExSIDQgd2hlblxuXHQgKiBnZW5lcmF0aW5nIHRoZSBwYXJzZXIgbWF5IGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgdGhlIGxpc3RlbmVyIGNhbGxzLjwvbGk+XG5cdCAqIDxsaT5DaGFuZ2luZyB0aGUgdmVyc2lvbiBvZiB0aGUgQU5UTFIgVG9vbCB1c2VkIHRvIGdlbmVyYXRlIHRoZSBwYXJzZXJcblx0ICogbWF5IGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgdGhlIGxpc3RlbmVyIGNhbGxzLjwvbGk+XG5cdCAqIDwvdWw+XG5cdCAqXG5cdCAqIEBwYXJhbSBsaXN0ZW5lciB0aGUgbGlzdGVuZXIgdG8gYWRkXG5cdCAqXG5cdCAqIEB0aHJvd3MgTnVsbFBvaW50ZXJFeGNlcHRpb24gaWYge0Bjb2RlfSBsaXN0ZW5lciBpcyB7QGNvZGUgbnVsbH1cblx0ICovXG5cdGFkZFBhcnNlTGlzdGVuZXIobGlzdGVuZXIpIHtcblx0XHRpZiAobGlzdGVuZXIgPT09IG51bGwpIHtcblx0XHRcdHRocm93IFwibGlzdGVuZXJcIjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX3BhcnNlTGlzdGVuZXJzID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLl9wYXJzZUxpc3RlbmVycyA9IFtdO1xuXHRcdH1cblx0XHR0aGlzLl9wYXJzZUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmUge0Bjb2RlIGxpc3RlbmVyfSBmcm9tIHRoZSBsaXN0IG9mIHBhcnNlIGxpc3RlbmVycy5cblx0ICpcblx0ICogPHA+SWYge0Bjb2RlIGxpc3RlbmVyfSBpcyB7QGNvZGUgbnVsbH0gb3IgaGFzIG5vdCBiZWVuIGFkZGVkIGFzIGEgcGFyc2Vcblx0ICogbGlzdGVuZXIsIHRoaXMgbWV0aG9kIGRvZXMgbm90aGluZy48L3A+XG5cdCAqIEBwYXJhbSBsaXN0ZW5lciB0aGUgbGlzdGVuZXIgdG8gcmVtb3ZlXG5cdCAqL1xuXHRyZW1vdmVQYXJzZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG5cdFx0aWYgKHRoaXMuX3BhcnNlTGlzdGVuZXJzICE9PSBudWxsKSB7XG5cdFx0XHRjb25zdCBpZHggPSB0aGlzLl9wYXJzZUxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcblx0XHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0XHR0aGlzLl9wYXJzZUxpc3RlbmVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9wYXJzZUxpc3RlbmVycy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSBhbGwgcGFyc2UgbGlzdGVuZXJzLlxuXHRyZW1vdmVQYXJzZUxpc3RlbmVycygpIHtcblx0XHR0aGlzLl9wYXJzZUxpc3RlbmVycyA9IG51bGw7XG5cdH1cblxuXHQvLyBOb3RpZnkgYW55IHBhcnNlIGxpc3RlbmVycyBvZiBhbiBlbnRlciBydWxlIGV2ZW50LlxuXHR0cmlnZ2VyRW50ZXJSdWxlRXZlbnQoKSB7XG5cdFx0aWYgKHRoaXMuX3BhcnNlTGlzdGVuZXJzICE9PSBudWxsKSB7XG5cdFx0XHRjb25zdCBjdHggPSB0aGlzLl9jdHg7XG5cdFx0XHR0aGlzLl9wYXJzZUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG5cdFx0XHRcdGxpc3RlbmVyLmVudGVyRXZlcnlSdWxlKGN0eCk7XG5cdFx0XHRcdGN0eC5lbnRlclJ1bGUobGlzdGVuZXIpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIE5vdGlmeSBhbnkgcGFyc2UgbGlzdGVuZXJzIG9mIGFuIGV4aXQgcnVsZSBldmVudC5cblx0ICogQHNlZSAvL2FkZFBhcnNlTGlzdGVuZXJcblx0ICovXG5cdHRyaWdnZXJFeGl0UnVsZUV2ZW50KCkge1xuXHRcdGlmICh0aGlzLl9wYXJzZUxpc3RlbmVycyAhPT0gbnVsbCkge1xuXHRcdFx0Ly8gcmV2ZXJzZSBvcmRlciB3YWxrIG9mIGxpc3RlbmVyc1xuXHRcdFx0Y29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuXHRcdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMuc2xpY2UoMCkucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24obGlzdGVuZXIpIHtcblx0XHRcdFx0Y3R4LmV4aXRSdWxlKGxpc3RlbmVyKTtcblx0XHRcdFx0bGlzdGVuZXIuZXhpdEV2ZXJ5UnVsZShjdHgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0VG9rZW5GYWN0b3J5KCkge1xuXHRcdHJldHVybiB0aGlzLl9pbnB1dC50b2tlblNvdXJjZS5fZmFjdG9yeTtcblx0fVxuXG5cdC8vIFRlbGwgb3VyIHRva2VuIHNvdXJjZSBhbmQgZXJyb3Igc3RyYXRlZ3kgYWJvdXQgYSBuZXcgd2F5IHRvIGNyZWF0ZSB0b2tlbnMuXG5cdHNldFRva2VuRmFjdG9yeShmYWN0b3J5KSB7XG5cdFx0dGhpcy5faW5wdXQudG9rZW5Tb3VyY2UuX2ZhY3RvcnkgPSBmYWN0b3J5O1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBBVE4gd2l0aCBieXBhc3MgYWx0ZXJuYXRpdmVzIGlzIGV4cGVuc2l2ZSB0byBjcmVhdGUgc28gd2UgY3JlYXRlIGl0XG5cdCAqIGxhemlseS5cblx0ICpcblx0ICogQHRocm93cyBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbiBpZiB0aGUgY3VycmVudCBwYXJzZXIgZG9lcyBub3Rcblx0ICogaW1wbGVtZW50IHRoZSB7QGxpbmsgLy9nZXRTZXJpYWxpemVkQVROKCl9IG1ldGhvZC5cblx0ICovXG5cdGdldEFUTldpdGhCeXBhc3NBbHRzKCkge1xuXHRcdGNvbnN0IHNlcmlhbGl6ZWRBdG4gPSB0aGlzLmdldFNlcmlhbGl6ZWRBVE4oKTtcblx0XHRpZiAoc2VyaWFsaXplZEF0biA9PT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgXCJUaGUgY3VycmVudCBwYXJzZXIgZG9lcyBub3Qgc3VwcG9ydCBhbiBBVE4gd2l0aCBieXBhc3MgYWx0ZXJuYXRpdmVzLlwiO1xuXHRcdH1cblx0XHRsZXQgcmVzdWx0ID0gdGhpcy5ieXBhc3NBbHRzQXRuQ2FjaGVbc2VyaWFsaXplZEF0bl07XG5cdFx0aWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuXHRcdFx0Y29uc3QgZGVzZXJpYWxpemF0aW9uT3B0aW9ucyA9IG5ldyBBVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zKCk7XG5cdFx0XHRkZXNlcmlhbGl6YXRpb25PcHRpb25zLmdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb25zID0gdHJ1ZTtcblx0XHRcdHJlc3VsdCA9IG5ldyBBVE5EZXNlcmlhbGl6ZXIoZGVzZXJpYWxpemF0aW9uT3B0aW9ucylcblx0XHRcdFx0XHQuZGVzZXJpYWxpemUoc2VyaWFsaXplZEF0bik7XG5cdFx0XHR0aGlzLmJ5cGFzc0FsdHNBdG5DYWNoZVtzZXJpYWxpemVkQXRuXSA9IHJlc3VsdDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgcHJlZmVycmVkIG1ldGhvZCBvZiBnZXR0aW5nIGEgdHJlZSBwYXR0ZXJuLiBGb3IgZXhhbXBsZSwgaGVyZSdzIGFcblx0ICogc2FtcGxlIHVzZTpcblx0ICpcblx0ICogPHByZT5cblx0ICogUGFyc2VUcmVlIHQgPSBwYXJzZXIuZXhwcigpO1xuXHQgKiBQYXJzZVRyZWVQYXR0ZXJuIHAgPSBwYXJzZXIuY29tcGlsZVBhcnNlVHJlZVBhdHRlcm4oXCImbHQ7SUQmZ3Q7KzBcIixcblx0ICogTXlQYXJzZXIuUlVMRV9leHByKTtcblx0ICogUGFyc2VUcmVlTWF0Y2ggbSA9IHAubWF0Y2godCk7XG5cdCAqIFN0cmluZyBpZCA9IG0uZ2V0KFwiSURcIik7XG5cdCAqIDwvcHJlPlxuXHQgKi9cblx0Y29tcGlsZVBhcnNlVHJlZVBhdHRlcm4ocGF0dGVybiwgcGF0dGVyblJ1bGVJbmRleCwgbGV4ZXIpIHtcblx0XHRsZXhlciA9IGxleGVyIHx8IG51bGw7XG5cdFx0aWYgKGxleGVyID09PSBudWxsKSB7XG5cdFx0XHRpZiAodGhpcy5nZXRUb2tlblN0cmVhbSgpICE9PSBudWxsKSB7XG5cdFx0XHRcdGNvbnN0IHRva2VuU291cmNlID0gdGhpcy5nZXRUb2tlblN0cmVhbSgpLnRva2VuU291cmNlO1xuXHRcdFx0XHRpZiAodG9rZW5Tb3VyY2UgaW5zdGFuY2VvZiBMZXhlcikge1xuXHRcdFx0XHRcdGxleGVyID0gdG9rZW5Tb3VyY2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGxleGVyID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBcIlBhcnNlciBjYW4ndCBkaXNjb3ZlciBhIGxleGVyIHRvIHVzZVwiO1xuXHRcdH1cblx0XHRjb25zdCBtID0gbmV3IFBhcnNlVHJlZVBhdHRlcm5NYXRjaGVyKGxleGVyLCB0aGlzKTtcblx0XHRyZXR1cm4gbS5jb21waWxlKHBhdHRlcm4sIHBhdHRlcm5SdWxlSW5kZXgpO1xuXHR9XG5cblx0Z2V0SW5wdXRTdHJlYW0oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VG9rZW5TdHJlYW0oKTtcblx0fVxuXG5cdHNldElucHV0U3RyZWFtKGlucHV0KSB7XG5cdFx0dGhpcy5zZXRUb2tlblN0cmVhbShpbnB1dCk7XG5cdH1cblxuXHRnZXRUb2tlblN0cmVhbSgpIHtcblx0XHRyZXR1cm4gdGhpcy5faW5wdXQ7XG5cdH1cblxuXHQvLyBTZXQgdGhlIHRva2VuIHN0cmVhbSBhbmQgcmVzZXQgdGhlIHBhcnNlci5cblx0c2V0VG9rZW5TdHJlYW0oaW5wdXQpIHtcblx0XHR0aGlzLl9pbnB1dCA9IG51bGw7XG5cdFx0dGhpcy5yZXNldCgpO1xuXHRcdHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cdH1cblxuXHQvKipcblx0ICogTWF0Y2ggbmVlZHMgdG8gcmV0dXJuIHRoZSBjdXJyZW50IGlucHV0IHN5bWJvbCwgd2hpY2ggZ2V0cyBwdXRcblx0ICogaW50byB0aGUgbGFiZWwgZm9yIHRoZSBhc3NvY2lhdGVkIHRva2VuIHJlZjsgZS5nLiwgeD1JRC5cblx0ICovXG5cdGdldEN1cnJlbnRUb2tlbigpIHtcblx0XHRyZXR1cm4gdGhpcy5faW5wdXQuTFQoMSk7XG5cdH1cblxuXHRub3RpZnlFcnJvckxpc3RlbmVycyhtc2csIG9mZmVuZGluZ1Rva2VuLCBlcnIpIHtcblx0XHRvZmZlbmRpbmdUb2tlbiA9IG9mZmVuZGluZ1Rva2VuIHx8IG51bGw7XG5cdFx0ZXJyID0gZXJyIHx8IG51bGw7XG5cdFx0aWYgKG9mZmVuZGluZ1Rva2VuID09PSBudWxsKSB7XG5cdFx0XHRvZmZlbmRpbmdUb2tlbiA9IHRoaXMuZ2V0Q3VycmVudFRva2VuKCk7XG5cdFx0fVxuXHRcdHRoaXMuX3N5bnRheEVycm9ycyArPSAxO1xuXHRcdGNvbnN0IGxpbmUgPSBvZmZlbmRpbmdUb2tlbi5saW5lO1xuXHRcdGNvbnN0IGNvbHVtbiA9IG9mZmVuZGluZ1Rva2VuLmNvbHVtbjtcblx0XHRjb25zdCBsaXN0ZW5lciA9IHRoaXMuZ2V0RXJyb3JMaXN0ZW5lckRpc3BhdGNoKCk7XG5cdFx0bGlzdGVuZXIuc3ludGF4RXJyb3IodGhpcywgb2ZmZW5kaW5nVG9rZW4sIGxpbmUsIGNvbHVtbiwgbXNnLCBlcnIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN1bWUgYW5kIHJldHVybiB0aGUge0BsaW5rcGxhaW4gLy9nZXRDdXJyZW50VG9rZW4gY3VycmVudCBzeW1ib2x9LlxuXHQgKlxuXHQgKiA8cD5FLmcuLCBnaXZlbiB0aGUgZm9sbG93aW5nIGlucHV0IHdpdGgge0Bjb2RlIEF9IGJlaW5nIHRoZSBjdXJyZW50XG5cdCAqIGxvb2thaGVhZCBzeW1ib2wsIHRoaXMgZnVuY3Rpb24gbW92ZXMgdGhlIGN1cnNvciB0byB7QGNvZGUgQn0gYW5kIHJldHVybnNcblx0ICoge0Bjb2RlIEF9LjwvcD5cblx0ICpcblx0ICogPHByZT5cblx0ICogQSBCXG5cdCAqIF5cblx0ICogPC9wcmU+XG5cdCAqXG5cdCAqIElmIHRoZSBwYXJzZXIgaXMgbm90IGluIGVycm9yIHJlY292ZXJ5IG1vZGUsIHRoZSBjb25zdW1lZCBzeW1ib2wgaXMgYWRkZWRcblx0ICogdG8gdGhlIHBhcnNlIHRyZWUgdXNpbmcge0BsaW5rIFBhcnNlclJ1bGVDb250ZXh0Ly9hZGRDaGlsZChUb2tlbil9LCBhbmRcblx0ICoge0BsaW5rIFBhcnNlVHJlZUxpc3RlbmVyLy92aXNpdFRlcm1pbmFsfSBpcyBjYWxsZWQgb24gYW55IHBhcnNlIGxpc3RlbmVycy5cblx0ICogSWYgdGhlIHBhcnNlciA8ZW0+aXM8L2VtPiBpbiBlcnJvciByZWNvdmVyeSBtb2RlLCB0aGUgY29uc3VtZWQgc3ltYm9sIGlzXG5cdCAqIGFkZGVkIHRvIHRoZSBwYXJzZSB0cmVlIHVzaW5nXG5cdCAqIHtAbGluayBQYXJzZXJSdWxlQ29udGV4dC8vYWRkRXJyb3JOb2RlKFRva2VuKX0sIGFuZFxuXHQgKiB7QGxpbmsgUGFyc2VUcmVlTGlzdGVuZXIvL3Zpc2l0RXJyb3JOb2RlfSBpcyBjYWxsZWQgb24gYW55IHBhcnNlXG5cdCAqIGxpc3RlbmVycy5cblx0ICovXG5cdGNvbnN1bWUoKSB7XG5cdFx0Y29uc3QgbyA9IHRoaXMuZ2V0Q3VycmVudFRva2VuKCk7XG5cdFx0aWYgKG8udHlwZSAhPT0gVG9rZW4uRU9GKSB7XG5cdFx0XHR0aGlzLmdldElucHV0U3RyZWFtKCkuY29uc3VtZSgpO1xuXHRcdH1cblx0XHRjb25zdCBoYXNMaXN0ZW5lciA9IHRoaXMuX3BhcnNlTGlzdGVuZXJzICE9PSBudWxsICYmIHRoaXMuX3BhcnNlTGlzdGVuZXJzLmxlbmd0aCA+IDA7XG5cdFx0aWYgKHRoaXMuYnVpbGRQYXJzZVRyZWVzIHx8IGhhc0xpc3RlbmVyKSB7XG5cdFx0XHRsZXQgbm9kZTtcblx0XHRcdGlmICh0aGlzLl9lcnJIYW5kbGVyLmluRXJyb3JSZWNvdmVyeU1vZGUodGhpcykpIHtcblx0XHRcdFx0bm9kZSA9IHRoaXMuX2N0eC5hZGRFcnJvck5vZGUobyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub2RlID0gdGhpcy5fY3R4LmFkZFRva2VuTm9kZShvKTtcblx0XHRcdH1cblx0XHRcdG5vZGUuaW52b2tpbmdTdGF0ZSA9IHRoaXMuc3RhdGU7XG5cdFx0XHRpZiAoaGFzTGlzdGVuZXIpIHtcblx0XHRcdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihsaXN0ZW5lcikge1xuXHRcdFx0XHRcdGlmIChub2RlIGluc3RhbmNlb2YgRXJyb3JOb2RlIHx8IChub2RlLmlzRXJyb3JOb2RlICE9PSB1bmRlZmluZWQgJiYgbm9kZS5pc0Vycm9yTm9kZSgpKSkge1xuXHRcdFx0XHRcdFx0bGlzdGVuZXIudmlzaXRFcnJvck5vZGUobm9kZSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgVGVybWluYWxOb2RlKSB7XG5cdFx0XHRcdFx0XHRsaXN0ZW5lci52aXNpdFRlcm1pbmFsKG5vZGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0YWRkQ29udGV4dFRvUGFyc2VUcmVlKCkge1xuXHRcdC8vIGFkZCBjdXJyZW50IGNvbnRleHQgdG8gcGFyZW50IGlmIHdlIGhhdmUgYSBwYXJlbnRcblx0XHRpZiAodGhpcy5fY3R4LnBhcmVudEN0eCAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fY3R4LnBhcmVudEN0eC5hZGRDaGlsZCh0aGlzLl9jdHgpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBBbHdheXMgY2FsbGVkIGJ5IGdlbmVyYXRlZCBwYXJzZXJzIHVwb24gZW50cnkgdG8gYSBydWxlLiBBY2Nlc3MgZmllbGRcblx0ICoge0BsaW5rIC8vX2N0eH0gZ2V0IHRoZSBjdXJyZW50IGNvbnRleHQuXG5cdCAqL1xuXHRlbnRlclJ1bGUobG9jYWxjdHgsIHN0YXRlLCBydWxlSW5kZXgpIHtcblx0XHR0aGlzLnN0YXRlID0gc3RhdGU7XG5cdFx0dGhpcy5fY3R4ID0gbG9jYWxjdHg7XG5cdFx0dGhpcy5fY3R4LnN0YXJ0ID0gdGhpcy5faW5wdXQuTFQoMSk7XG5cdFx0aWYgKHRoaXMuYnVpbGRQYXJzZVRyZWVzKSB7XG5cdFx0XHR0aGlzLmFkZENvbnRleHRUb1BhcnNlVHJlZSgpO1xuXHRcdH1cblx0XHR0aGlzLnRyaWdnZXJFbnRlclJ1bGVFdmVudCgpO1xuXHR9XG5cblx0ZXhpdFJ1bGUoKSB7XG5cdFx0dGhpcy5fY3R4LnN0b3AgPSB0aGlzLl9pbnB1dC5MVCgtMSk7XG5cdFx0Ly8gdHJpZ2dlciBldmVudCBvbiBfY3R4LCBiZWZvcmUgaXQgcmV2ZXJ0cyB0byBwYXJlbnRcblx0XHR0aGlzLnRyaWdnZXJFeGl0UnVsZUV2ZW50KCk7XG5cdFx0dGhpcy5zdGF0ZSA9IHRoaXMuX2N0eC5pbnZva2luZ1N0YXRlO1xuXHRcdHRoaXMuX2N0eCA9IHRoaXMuX2N0eC5wYXJlbnRDdHg7XG5cdH1cblxuXHRlbnRlck91dGVyQWx0KGxvY2FsY3R4LCBhbHROdW0pIHtcblx0XHRsb2NhbGN0eC5zZXRBbHROdW1iZXIoYWx0TnVtKTtcblx0XHQvLyBpZiB3ZSBoYXZlIG5ldyBsb2NhbGN0eCwgbWFrZSBzdXJlIHdlIHJlcGxhY2UgZXhpc3RpbmcgY3R4XG5cdFx0Ly8gdGhhdCBpcyBwcmV2aW91cyBjaGlsZCBvZiBwYXJzZSB0cmVlXG5cdFx0aWYgKHRoaXMuYnVpbGRQYXJzZVRyZWVzICYmIHRoaXMuX2N0eCAhPT0gbG9jYWxjdHgpIHtcblx0XHRcdGlmICh0aGlzLl9jdHgucGFyZW50Q3R4ICE9PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuX2N0eC5wYXJlbnRDdHgucmVtb3ZlTGFzdENoaWxkKCk7XG5cdFx0XHRcdHRoaXMuX2N0eC5wYXJlbnRDdHguYWRkQ2hpbGQobG9jYWxjdHgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl9jdHggPSBsb2NhbGN0eDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIHByZWNlZGVuY2UgbGV2ZWwgZm9yIHRoZSB0b3AtbW9zdCBwcmVjZWRlbmNlIHJ1bGUuXG5cdCAqXG5cdCAqIEByZXR1cm4gVGhlIHByZWNlZGVuY2UgbGV2ZWwgZm9yIHRoZSB0b3AtbW9zdCBwcmVjZWRlbmNlIHJ1bGUsIG9yIC0xIGlmXG5cdCAqIHRoZSBwYXJzZXIgY29udGV4dCBpcyBub3QgbmVzdGVkIHdpdGhpbiBhIHByZWNlZGVuY2UgcnVsZS5cblx0ICovXG5cdGdldFByZWNlZGVuY2UoKSB7XG5cdFx0aWYgKHRoaXMuX3ByZWNlZGVuY2VTdGFjay5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiAtMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3ByZWNlZGVuY2VTdGFja1t0aGlzLl9wcmVjZWRlbmNlU3RhY2subGVuZ3RoLTFdO1xuXHRcdH1cblx0fVxuXG5cdGVudGVyUmVjdXJzaW9uUnVsZShsb2NhbGN0eCwgc3RhdGUsIHJ1bGVJbmRleCwgcHJlY2VkZW5jZSkge1xuXHQgICB0aGlzLnN0YXRlID0gc3RhdGU7XG5cdCAgIHRoaXMuX3ByZWNlZGVuY2VTdGFjay5wdXNoKHByZWNlZGVuY2UpO1xuXHQgICB0aGlzLl9jdHggPSBsb2NhbGN0eDtcblx0ICAgdGhpcy5fY3R4LnN0YXJ0ID0gdGhpcy5faW5wdXQuTFQoMSk7XG5cdCAgIHRoaXMudHJpZ2dlckVudGVyUnVsZUV2ZW50KCk7IC8vIHNpbXVsYXRlcyBydWxlIGVudHJ5IGZvciBsZWZ0LXJlY3Vyc2l2ZSBydWxlc1xuICAgfVxuXG5cdC8vIExpa2Uge0BsaW5rIC8vZW50ZXJSdWxlfSBidXQgZm9yIHJlY3Vyc2l2ZSBydWxlcy5cblx0cHVzaE5ld1JlY3Vyc2lvbkNvbnRleHQobG9jYWxjdHgsIHN0YXRlLCBydWxlSW5kZXgpIHtcblx0XHRjb25zdCBwcmV2aW91cyA9IHRoaXMuX2N0eDtcblx0XHRwcmV2aW91cy5wYXJlbnRDdHggPSBsb2NhbGN0eDtcblx0XHRwcmV2aW91cy5pbnZva2luZ1N0YXRlID0gc3RhdGU7XG5cdFx0cHJldmlvdXMuc3RvcCA9IHRoaXMuX2lucHV0LkxUKC0xKTtcblxuXHRcdHRoaXMuX2N0eCA9IGxvY2FsY3R4O1xuXHRcdHRoaXMuX2N0eC5zdGFydCA9IHByZXZpb3VzLnN0YXJ0O1xuXHRcdGlmICh0aGlzLmJ1aWxkUGFyc2VUcmVlcykge1xuXHRcdFx0dGhpcy5fY3R4LmFkZENoaWxkKHByZXZpb3VzKTtcblx0XHR9XG5cdFx0dGhpcy50cmlnZ2VyRW50ZXJSdWxlRXZlbnQoKTsgLy8gc2ltdWxhdGVzIHJ1bGUgZW50cnkgZm9yIGxlZnQtcmVjdXJzaXZlIHJ1bGVzXG5cdH1cblxuXHR1bnJvbGxSZWN1cnNpb25Db250ZXh0cyhwYXJlbnRDdHgpIHtcblx0XHR0aGlzLl9wcmVjZWRlbmNlU3RhY2sucG9wKCk7XG5cdFx0dGhpcy5fY3R4LnN0b3AgPSB0aGlzLl9pbnB1dC5MVCgtMSk7XG5cdFx0Y29uc3QgcmV0Q3R4ID0gdGhpcy5fY3R4OyAvLyBzYXZlIGN1cnJlbnQgY3R4IChyZXR1cm4gdmFsdWUpXG5cdFx0Ly8gdW5yb2xsIHNvIF9jdHggaXMgYXMgaXQgd2FzIGJlZm9yZSBjYWxsIHRvIHJlY3Vyc2l2ZSBtZXRob2Rcblx0XHRjb25zdCBwYXJzZUxpc3RlbmVycyA9IHRoaXMuZ2V0UGFyc2VMaXN0ZW5lcnMoKTtcblx0XHRpZiAocGFyc2VMaXN0ZW5lcnMgIT09IG51bGwgJiYgcGFyc2VMaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuXHRcdFx0d2hpbGUgKHRoaXMuX2N0eCAhPT0gcGFyZW50Q3R4KSB7XG5cdFx0XHRcdHRoaXMudHJpZ2dlckV4aXRSdWxlRXZlbnQoKTtcblx0XHRcdFx0dGhpcy5fY3R4ID0gdGhpcy5fY3R4LnBhcmVudEN0eDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fY3R4ID0gcGFyZW50Q3R4O1xuXHRcdH1cblx0XHQvLyBob29rIGludG8gdHJlZVxuXHRcdHJldEN0eC5wYXJlbnRDdHggPSBwYXJlbnRDdHg7XG5cdFx0aWYgKHRoaXMuYnVpbGRQYXJzZVRyZWVzICYmIHBhcmVudEN0eCAhPT0gbnVsbCkge1xuXHRcdFx0Ly8gYWRkIHJldHVybiBjdHggaW50byBpbnZva2luZyBydWxlJ3MgdHJlZVxuXHRcdFx0cGFyZW50Q3R4LmFkZENoaWxkKHJldEN0eCk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0SW52b2tpbmdDb250ZXh0KHJ1bGVJbmRleCkge1xuXHRcdGxldCBjdHggPSB0aGlzLl9jdHg7XG5cdFx0d2hpbGUgKGN0eCAhPT0gbnVsbCkge1xuXHRcdFx0aWYgKGN0eC5ydWxlSW5kZXggPT09IHJ1bGVJbmRleCkge1xuXHRcdFx0XHRyZXR1cm4gY3R4O1xuXHRcdFx0fVxuXHRcdFx0Y3R4ID0gY3R4LnBhcmVudEN0eDtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRwcmVjcHJlZChsb2NhbGN0eCwgcHJlY2VkZW5jZSkge1xuXHRcdHJldHVybiBwcmVjZWRlbmNlID49IHRoaXMuX3ByZWNlZGVuY2VTdGFja1t0aGlzLl9wcmVjZWRlbmNlU3RhY2subGVuZ3RoLTFdO1xuXHR9XG5cblx0aW5Db250ZXh0KGNvbnRleHQpIHtcblx0XHQvLyBUT0RPOiB1c2VmdWwgaW4gcGFyc2VyP1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3Mgd2hldGhlciBvciBub3Qge0Bjb2RlIHN5bWJvbH0gY2FuIGZvbGxvdyB0aGUgY3VycmVudCBzdGF0ZSBpbiB0aGVcblx0ICogQVROLiBUaGUgYmVoYXZpb3Igb2YgdGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byB0aGUgZm9sbG93aW5nLCBidXQgaXNcblx0ICogaW1wbGVtZW50ZWQgc3VjaCB0aGF0IHRoZSBjb21wbGV0ZSBjb250ZXh0LXNlbnNpdGl2ZSBmb2xsb3cgc2V0IGRvZXMgbm90XG5cdCAqIG5lZWQgdG8gYmUgZXhwbGljaXRseSBjb25zdHJ1Y3RlZC5cblx0ICpcblx0ICogPHByZT5cblx0ICogcmV0dXJuIGdldEV4cGVjdGVkVG9rZW5zKCkuY29udGFpbnMoc3ltYm9sKTtcblx0ICogPC9wcmU+XG5cdCAqXG5cdCAqIEBwYXJhbSBzeW1ib2wgdGhlIHN5bWJvbCB0eXBlIHRvIGNoZWNrXG5cdCAqIEByZXR1cm4ge0Bjb2RlIHRydWV9IGlmIHtAY29kZSBzeW1ib2x9IGNhbiBmb2xsb3cgdGhlIGN1cnJlbnQgc3RhdGUgaW5cblx0ICogdGhlIEFUTiwgb3RoZXJ3aXNlIHtAY29kZSBmYWxzZX0uXG5cdCAqL1xuXHRpc0V4cGVjdGVkVG9rZW4oc3ltYm9sKSB7XG5cdFx0Y29uc3QgYXRuID0gdGhpcy5faW50ZXJwLmF0bjtcblx0XHRsZXQgY3R4ID0gdGhpcy5fY3R4O1xuXHRcdGNvbnN0IHMgPSBhdG4uc3RhdGVzW3RoaXMuc3RhdGVdO1xuXHRcdGxldCBmb2xsb3dpbmcgPSBhdG4ubmV4dFRva2VucyhzKTtcblx0XHRpZiAoZm9sbG93aW5nLmNvbnRhaW5zKHN5bWJvbCkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAoIWZvbGxvd2luZy5jb250YWlucyhUb2tlbi5FUFNJTE9OKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR3aGlsZSAoY3R4ICE9PSBudWxsICYmIGN0eC5pbnZva2luZ1N0YXRlID49IDAgJiYgZm9sbG93aW5nLmNvbnRhaW5zKFRva2VuLkVQU0lMT04pKSB7XG5cdFx0XHRjb25zdCBpbnZva2luZ1N0YXRlID0gYXRuLnN0YXRlc1tjdHguaW52b2tpbmdTdGF0ZV07XG5cdFx0XHRjb25zdCBydCA9IGludm9raW5nU3RhdGUudHJhbnNpdGlvbnNbMF07XG5cdFx0XHRmb2xsb3dpbmcgPSBhdG4ubmV4dFRva2VucyhydC5mb2xsb3dTdGF0ZSk7XG5cdFx0XHRpZiAoZm9sbG93aW5nLmNvbnRhaW5zKHN5bWJvbCkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRjdHggPSBjdHgucGFyZW50Q3R4O1xuXHRcdH1cblx0XHRpZiAoZm9sbG93aW5nLmNvbnRhaW5zKFRva2VuLkVQU0lMT04pICYmIHN5bWJvbCA9PT0gVG9rZW4uRU9GKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgc2V0IG9mIGlucHV0IHN5bWJvbHMgd2hpY2ggY291bGQgZm9sbG93IHRoZSBjdXJyZW50IHBhcnNlclxuXHQgKiBzdGF0ZSBhbmQgY29udGV4dCwgYXMgZ2l2ZW4gYnkge0BsaW5rIC8vZ2V0U3RhdGV9IGFuZCB7QGxpbmsgLy9nZXRDb250ZXh0fSxcblx0ICogcmVzcGVjdGl2ZWx5LlxuXHQgKlxuXHQgKiBAc2VlIEFUTi8vZ2V0RXhwZWN0ZWRUb2tlbnMoaW50LCBSdWxlQ29udGV4dClcblx0ICovXG5cdGdldEV4cGVjdGVkVG9rZW5zKCkge1xuXHRcdHJldHVybiB0aGlzLl9pbnRlcnAuYXRuLmdldEV4cGVjdGVkVG9rZW5zKHRoaXMuc3RhdGUsIHRoaXMuX2N0eCk7XG5cdH1cblxuXHRnZXRFeHBlY3RlZFRva2Vuc1dpdGhpbkN1cnJlbnRSdWxlKCkge1xuXHRcdGNvbnN0IGF0biA9IHRoaXMuX2ludGVycC5hdG47XG5cdFx0Y29uc3QgcyA9IGF0bi5zdGF0ZXNbdGhpcy5zdGF0ZV07XG5cdFx0cmV0dXJuIGF0bi5uZXh0VG9rZW5zKHMpO1xuXHR9XG5cblx0Ly8gR2V0IGEgcnVsZSdzIGluZGV4IChpLmUuLCB7QGNvZGUgUlVMRV9ydWxlTmFtZX0gZmllbGQpIG9yIC0xIGlmIG5vdCBmb3VuZC5cblx0Z2V0UnVsZUluZGV4KHJ1bGVOYW1lKSB7XG5cdFx0Y29uc3QgcnVsZUluZGV4ID0gdGhpcy5nZXRSdWxlSW5kZXhNYXAoKVtydWxlTmFtZV07XG5cdFx0aWYgKHJ1bGVJbmRleCAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHJ1bGVJbmRleDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gTGlzdCZsdDtTdHJpbmcmZ3Q7IG9mIHRoZSBydWxlIG5hbWVzIGluIHlvdXIgcGFyc2VyIGluc3RhbmNlXG5cdCAqIGxlYWRpbmcgdXAgdG8gYSBjYWxsIHRvIHRoZSBjdXJyZW50IHJ1bGUuIFlvdSBjb3VsZCBvdmVycmlkZSBpZlxuXHQgKiB5b3Ugd2FudCBtb3JlIGRldGFpbHMgc3VjaCBhcyB0aGUgZmlsZS9saW5lIGluZm8gb2Ygd2hlcmVcblx0ICogaW4gdGhlIEFUTiBhIHJ1bGUgaXMgaW52b2tlZC5cblx0ICpcblx0ICogdGhpcyBpcyB2ZXJ5IHVzZWZ1bCBmb3IgZXJyb3IgbWVzc2FnZXMuXG5cdCAqL1xuXHRnZXRSdWxlSW52b2NhdGlvblN0YWNrKHApIHtcblx0XHRwID0gcCB8fCBudWxsO1xuXHRcdGlmIChwID09PSBudWxsKSB7XG5cdFx0XHRwID0gdGhpcy5fY3R4O1xuXHRcdH1cblx0XHRjb25zdCBzdGFjayA9IFtdO1xuXHRcdHdoaWxlIChwICE9PSBudWxsKSB7XG5cdFx0XHQvLyBjb21wdXRlIHdoYXQgZm9sbG93cyB3aG8gaW52b2tlZCB1c1xuXHRcdFx0Y29uc3QgcnVsZUluZGV4ID0gcC5ydWxlSW5kZXg7XG5cdFx0XHRpZiAocnVsZUluZGV4IDwgMCkge1xuXHRcdFx0XHRzdGFjay5wdXNoKFwibi9hXCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3RhY2sucHVzaCh0aGlzLnJ1bGVOYW1lc1tydWxlSW5kZXhdKTtcblx0XHRcdH1cblx0XHRcdHAgPSBwLnBhcmVudEN0eDtcblx0XHR9XG5cdFx0cmV0dXJuIHN0YWNrO1xuXHR9XG5cblx0Ly8gRm9yIGRlYnVnZ2luZyBhbmQgb3RoZXIgcHVycG9zZXMuXG5cdGdldERGQVN0cmluZ3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2ludGVycC5kZWNpc2lvblRvREZBLnRvU3RyaW5nKCk7XG5cdH1cblxuXHQvLyBGb3IgZGVidWdnaW5nIGFuZCBvdGhlciBwdXJwb3Nlcy5cblx0ZHVtcERGQSgpIHtcblx0XHRsZXQgc2Vlbk9uZSA9IGZhbHNlO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faW50ZXJwLmRlY2lzaW9uVG9ERkEubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGRmYSA9IHRoaXMuX2ludGVycC5kZWNpc2lvblRvREZBW2ldO1xuXHRcdFx0aWYgKGRmYS5zdGF0ZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRpZiAoc2Vlbk9uZSkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5wcmludGVyLnByaW50bG4oXCJEZWNpc2lvbiBcIiArIGRmYS5kZWNpc2lvbiArIFwiOlwiKTtcblx0XHRcdFx0dGhpcy5wcmludGVyLnByaW50KGRmYS50b1N0cmluZyh0aGlzLmxpdGVyYWxOYW1lcywgdGhpcy5zeW1ib2xpY05hbWVzKSk7XG5cdFx0XHRcdHNlZW5PbmUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qXG5cdFx0XCJcdFx0XHRwcmludGVyID0gZnVuY3Rpb24oKSB7XFxyXFxuXCIgK1xuXHRcdFwiXHRcdFx0XHR0aGlzLnByaW50bG4gPSBmdW5jdGlvbihzKSB7IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdXRwdXQnKSArPSBzICsgJ1xcXFxuJzsgfVxcclxcblwiICtcblx0XHRcIlx0XHRcdFx0dGhpcy5wcmludCA9IGZ1bmN0aW9uKHMpIHsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ291dHB1dCcpICs9IHM7IH1cXHJcXG5cIiArXG5cdFx0XCJcdFx0XHR9O1xcclxcblwiICtcblx0XHQqL1xuXHRnZXRTb3VyY2VOYW1lKCkge1xuXHRcdHJldHVybiB0aGlzLl9pbnB1dC5zb3VyY2VOYW1lO1xuXHR9XG5cblx0LyoqXG5cdCAqIER1cmluZyBhIHBhcnNlIGlzIHNvbWV0aW1lcyB1c2VmdWwgdG8gbGlzdGVuIGluIG9uIHRoZSBydWxlIGVudHJ5IGFuZCBleGl0XG5cdCAqIGV2ZW50cyBhcyB3ZWxsIGFzIHRva2VuIG1hdGNoZXMuIHRoaXMgaXMgZm9yIHF1aWNrIGFuZCBkaXJ0eSBkZWJ1Z2dpbmcuXG5cdCAqL1xuXHRzZXRUcmFjZSh0cmFjZSkge1xuXHRcdGlmICghdHJhY2UpIHtcblx0XHRcdHRoaXMucmVtb3ZlUGFyc2VMaXN0ZW5lcih0aGlzLl90cmFjZXIpO1xuXHRcdFx0dGhpcy5fdHJhY2VyID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHRoaXMuX3RyYWNlciAhPT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnJlbW92ZVBhcnNlTGlzdGVuZXIodGhpcy5fdHJhY2VyKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3RyYWNlciA9IG5ldyBUcmFjZUxpc3RlbmVyKHRoaXMpO1xuXHRcdFx0dGhpcy5hZGRQYXJzZUxpc3RlbmVyKHRoaXMuX3RyYWNlcik7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogdGhpcyBmaWVsZCBtYXBzIGZyb20gdGhlIHNlcmlhbGl6ZWQgQVROIHN0cmluZyB0byB0aGUgZGVzZXJpYWxpemVkIHtAbGlua1xuICogQVROfSB3aXRoXG4gKiBieXBhc3MgYWx0ZXJuYXRpdmVzLlxuICpcbiAqIEBzZWUgQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy8vaXNHZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9ucygpXG4gKi9cblBhcnNlci5ieXBhc3NBbHRzQXRuQ2FjaGUgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXI7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IFJ1bGVDb250ZXh0ID0gcmVxdWlyZSgnLi9SdWxlQ29udGV4dCcpO1xuY29uc3QgVHJlZSA9IHJlcXVpcmUoJy4vdHJlZS9UcmVlJyk7XG5jb25zdCBJTlZBTElEX0lOVEVSVkFMID0gVHJlZS5JTlZBTElEX0lOVEVSVkFMO1xuY29uc3QgVGVybWluYWxOb2RlID0gVHJlZS5UZXJtaW5hbE5vZGU7XG5jb25zdCBUZXJtaW5hbE5vZGVJbXBsID0gVHJlZS5UZXJtaW5hbE5vZGVJbXBsO1xuY29uc3QgRXJyb3JOb2RlSW1wbCA9IFRyZWUuRXJyb3JOb2RlSW1wbDtcbmNvbnN0IEludGVydmFsID0gcmVxdWlyZShcIi4vSW50ZXJ2YWxTZXRcIikuSW50ZXJ2YWw7XG5cbi8qKlxuICogQSBydWxlIGludm9jYXRpb24gcmVjb3JkIGZvciBwYXJzaW5nLlxuICpcbiAqICBDb250YWlucyBhbGwgb2YgdGhlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IHJ1bGUgbm90IHN0b3JlZCBpbiB0aGVcbiAqICBSdWxlQ29udGV4dC4gSXQgaGFuZGxlcyBwYXJzZSB0cmVlIGNoaWxkcmVuIGxpc3QsIEFueSBBVE4gc3RhdGVcbiAqICB0cmFjaW5nLCBhbmQgdGhlIGRlZmF1bHQgdmFsdWVzIGF2YWlsYWJsZSBmb3IgcnVsZSBpbmRpY2F0aW9uczpcbiAqICBzdGFydCwgc3RvcCwgcnVsZSBpbmRleCwgY3VycmVudCBhbHQgbnVtYmVyLCBjdXJyZW50XG4gKiAgQVROIHN0YXRlLlxuICpcbiAqICBTdWJjbGFzc2VzIG1hZGUgZm9yIGVhY2ggcnVsZSBhbmQgZ3JhbW1hciB0cmFjayB0aGUgcGFyYW1ldGVycyxcbiAqICByZXR1cm4gdmFsdWVzLCBsb2NhbHMsIGFuZCBsYWJlbHMgc3BlY2lmaWMgdG8gdGhhdCBydWxlLiBUaGVzZVxuICogIGFyZSB0aGUgb2JqZWN0cyB0aGF0IGFyZSByZXR1cm5lZCBmcm9tIHJ1bGVzLlxuICpcbiAqICBOb3RlIHRleHQgaXMgbm90IGFuIGFjdHVhbCBmaWVsZCBvZiBhIHJ1bGUgcmV0dXJuIHZhbHVlOyBpdCBpcyBjb21wdXRlZFxuICogIGZyb20gc3RhcnQgYW5kIHN0b3AgdXNpbmcgdGhlIGlucHV0IHN0cmVhbSdzIHRvU3RyaW5nKCkgbWV0aG9kLiAgSVxuICogIGNvdWxkIGFkZCBhIGN0b3IgdG8gdGhpcyBzbyB0aGF0IHdlIGNhbiBwYXNzIGluIGFuZCBzdG9yZSB0aGUgaW5wdXRcbiAqICBzdHJlYW0sIGJ1dCBJJ20gbm90IHN1cmUgd2Ugd2FudCB0byBkbyB0aGF0LiAgSXQgd291bGQgc2VlbSB0byBiZSB1bmRlZmluZWRcbiAqICB0byBnZXQgdGhlIC50ZXh0IHByb3BlcnR5IGFueXdheSBpZiB0aGUgcnVsZSBtYXRjaGVzIHRva2VucyBmcm9tIG11bHRpcGxlXG4gKiAgaW5wdXQgc3RyZWFtcy5cbiAqXG4gKiAgSSBkbyBub3QgdXNlIGdldHRlcnMgZm9yIGZpZWxkcyBvZiBvYmplY3RzIHRoYXQgYXJlIHVzZWQgc2ltcGx5IHRvXG4gKiAgZ3JvdXAgdmFsdWVzIHN1Y2ggYXMgdGhpcyBhZ2dyZWdhdGUuICBUaGUgZ2V0dGVycy9zZXR0ZXJzIGFyZSB0aGVyZSB0b1xuICogIHNhdGlzZnkgdGhlIHN1cGVyY2xhc3MgaW50ZXJmYWNlLlxuICovXG5jbGFzcyBQYXJzZXJSdWxlQ29udGV4dCBleHRlbmRzIFJ1bGVDb250ZXh0IHtcblx0Y29uc3RydWN0b3IocGFyZW50LCBpbnZva2luZ1N0YXRlTnVtYmVyKSB7XG5cdFx0cGFyZW50ID0gcGFyZW50IHx8IG51bGw7XG5cdFx0aW52b2tpbmdTdGF0ZU51bWJlciA9IGludm9raW5nU3RhdGVOdW1iZXIgfHwgbnVsbDtcblx0XHRzdXBlcihwYXJlbnQsIGludm9raW5nU3RhdGVOdW1iZXIpO1xuXHRcdHRoaXMucnVsZUluZGV4ID0gLTE7XG5cdFx0LyoqXG5cdFx0ICogSWYgd2UgYXJlIGRlYnVnZ2luZyBvciBidWlsZGluZyBhIHBhcnNlIHRyZWUgZm9yIGEgdmlzaXRvcixcblx0XHQgKiB3ZSBuZWVkIHRvIHRyYWNrIGFsbCBvZiB0aGUgdG9rZW5zIGFuZCBydWxlIGludm9jYXRpb25zIGFzc29jaWF0ZWRcblx0XHQgKiB3aXRoIHRoaXMgcnVsZSdzIGNvbnRleHQuIFRoaXMgaXMgZW1wdHkgZm9yIHBhcnNpbmcgdy9vIHRyZWUgY29uc3RyLlxuXHRcdCAqIG9wZXJhdGlvbiBiZWNhdXNlIHdlIGRvbid0IHRoZSBuZWVkIHRvIHRyYWNrIHRoZSBkZXRhaWxzIGFib3V0XG5cdFx0ICogaG93IHdlIHBhcnNlIHRoaXMgcnVsZS5cblx0XHQgKi9cblx0XHR0aGlzLmNoaWxkcmVuID0gbnVsbDtcblx0XHR0aGlzLnN0YXJ0ID0gbnVsbDtcblx0XHR0aGlzLnN0b3AgPSBudWxsO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBleGNlcHRpb24gdGhhdCBmb3JjZWQgdGhpcyBydWxlIHRvIHJldHVybi4gSWYgdGhlIHJ1bGUgc3VjY2Vzc2Z1bGx5XG5cdFx0ICogY29tcGxldGVkLCB0aGlzIGlzIHtAY29kZSBudWxsfS5cblx0XHQgKi9cblx0XHR0aGlzLmV4Y2VwdGlvbiA9IG51bGw7XG5cdH1cblxuXHQvLyBDT1BZIGEgY3R4IChJJ20gZGVsaWJlcmF0ZWx5IG5vdCB1c2luZyBjb3B5IGNvbnN0cnVjdG9yKVxuXHRjb3B5RnJvbShjdHgpIHtcblx0XHQvLyBmcm9tIFJ1bGVDb250ZXh0XG5cdFx0dGhpcy5wYXJlbnRDdHggPSBjdHgucGFyZW50Q3R4O1xuXHRcdHRoaXMuaW52b2tpbmdTdGF0ZSA9IGN0eC5pbnZva2luZ1N0YXRlO1xuXHRcdHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuXHRcdHRoaXMuc3RhcnQgPSBjdHguc3RhcnQ7XG5cdFx0dGhpcy5zdG9wID0gY3R4LnN0b3A7XG5cdFx0Ly8gY29weSBhbnkgZXJyb3Igbm9kZXMgdG8gYWx0IGxhYmVsIG5vZGVcblx0XHRpZihjdHguY2hpbGRyZW4pIHtcblx0XHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcblx0XHRcdC8vIHJlc2V0IHBhcmVudCBwb2ludGVyIGZvciBhbnkgZXJyb3Igbm9kZXNcblx0XHRcdGN0eC5jaGlsZHJlbi5tYXAoZnVuY3Rpb24oY2hpbGQpIHtcblx0XHRcdFx0aWYgKGNoaWxkIGluc3RhbmNlb2YgRXJyb3JOb2RlSW1wbCkge1xuXHRcdFx0XHRcdHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cdFx0XHRcdFx0Y2hpbGQucGFyZW50Q3R4ID0gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gRG91YmxlIGRpc3BhdGNoIG1ldGhvZHMgZm9yIGxpc3RlbmVyc1xuXHRlbnRlclJ1bGUobGlzdGVuZXIpIHtcblx0fVxuXG5cdGV4aXRSdWxlKGxpc3RlbmVyKSB7XG5cdH1cblxuXHQvLyBEb2VzIG5vdCBzZXQgcGFyZW50IGxpbms7IG90aGVyIGFkZCBtZXRob2RzIGRvIHRoYXRcblx0YWRkQ2hpbGQoY2hpbGQpIHtcblx0XHRpZiAodGhpcy5jaGlsZHJlbiA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5jaGlsZHJlbiA9IFtdO1xuXHRcdH1cblx0XHR0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuXHRcdHJldHVybiBjaGlsZDtcblx0fVxuXG5cdC8qKiBVc2VkIGJ5IGVudGVyT3V0ZXJBbHQgdG8gdG9zcyBvdXQgYSBSdWxlQ29udGV4dCBwcmV2aW91c2x5IGFkZGVkIGFzXG5cdCAqIHdlIGVudGVyZWQgYSBydWxlLiBJZiB3ZSBoYXZlIC8vIGxhYmVsLCB3ZSB3aWxsIG5lZWQgdG8gcmVtb3ZlXG5cdCAqIGdlbmVyaWMgcnVsZUNvbnRleHQgb2JqZWN0LlxuXHQgKi9cblx0cmVtb3ZlTGFzdENoaWxkKCkge1xuXHRcdGlmICh0aGlzLmNoaWxkcmVuICE9PSBudWxsKSB7XG5cdFx0XHR0aGlzLmNoaWxkcmVuLnBvcCgpO1xuXHRcdH1cblx0fVxuXG5cdGFkZFRva2VuTm9kZSh0b2tlbikge1xuXHRcdGNvbnN0IG5vZGUgPSBuZXcgVGVybWluYWxOb2RlSW1wbCh0b2tlbik7XG5cdFx0dGhpcy5hZGRDaGlsZChub2RlKTtcblx0XHRub2RlLnBhcmVudEN0eCA9IHRoaXM7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cblxuXHRhZGRFcnJvck5vZGUoYmFkVG9rZW4pIHtcblx0XHRjb25zdCBub2RlID0gbmV3IEVycm9yTm9kZUltcGwoYmFkVG9rZW4pO1xuXHRcdHRoaXMuYWRkQ2hpbGQobm9kZSk7XG5cdFx0bm9kZS5wYXJlbnRDdHggPSB0aGlzO1xuXHRcdHJldHVybiBub2RlO1xuXHR9XG5cblx0Z2V0Q2hpbGQoaSwgdHlwZSkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IG51bGw7XG5cdFx0aWYgKHRoaXMuY2hpbGRyZW4gPT09IG51bGwgfHwgaSA8IDAgfHwgaSA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGlmICh0eXBlID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jaGlsZHJlbltpXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yKGxldCBqPTA7IGo8dGhpcy5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bal07XG5cdFx0XHRcdGlmKGNoaWxkIGluc3RhbmNlb2YgdHlwZSkge1xuXHRcdFx0XHRcdGlmKGk9PT0wKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY2hpbGQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGkgLT0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cdGdldFRva2VuKHR0eXBlLCBpKSB7XG5cdFx0aWYgKHRoaXMuY2hpbGRyZW4gPT09IG51bGwgfHwgaSA8IDAgfHwgaSA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGZvcihsZXQgaj0wOyBqPHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcblx0XHRcdGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltqXTtcblx0XHRcdGlmIChjaGlsZCBpbnN0YW5jZW9mIFRlcm1pbmFsTm9kZSkge1xuXHRcdFx0XHRpZiAoY2hpbGQuc3ltYm9sLnR5cGUgPT09IHR0eXBlKSB7XG5cdFx0XHRcdFx0aWYoaT09PTApIHtcblx0XHRcdFx0XHRcdHJldHVybiBjaGlsZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aSAtPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGdldFRva2Vucyh0dHlwZSApIHtcblx0XHRpZiAodGhpcy5jaGlsZHJlbj09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IHRva2VucyA9IFtdO1xuXHRcdFx0Zm9yKGxldCBqPTA7IGo8dGhpcy5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bal07XG5cdFx0XHRcdGlmIChjaGlsZCBpbnN0YW5jZW9mIFRlcm1pbmFsTm9kZSkge1xuXHRcdFx0XHRcdGlmIChjaGlsZC5zeW1ib2wudHlwZSA9PT0gdHR5cGUpIHtcblx0XHRcdFx0XHRcdHRva2Vucy5wdXNoKGNoaWxkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0b2tlbnM7XG5cdFx0fVxuXHR9XG5cblx0Z2V0VHlwZWRSdWxlQ29udGV4dChjdHhUeXBlLCBpKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2hpbGQoaSwgY3R4VHlwZSk7XG5cdH1cblxuXHRnZXRUeXBlZFJ1bGVDb250ZXh0cyhjdHhUeXBlKSB7XG5cdFx0aWYgKHRoaXMuY2hpbGRyZW49PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBjb250ZXh0cyA9IFtdO1xuXHRcdFx0Zm9yKGxldCBqPTA7IGo8dGhpcy5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bal07XG5cdFx0XHRcdGlmIChjaGlsZCBpbnN0YW5jZW9mIGN0eFR5cGUpIHtcblx0XHRcdFx0XHRjb250ZXh0cy5wdXNoKGNoaWxkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNvbnRleHRzO1xuXHRcdH1cblx0fVxuXG5cdGdldENoaWxkQ291bnQoKSB7XG5cdFx0aWYgKHRoaXMuY2hpbGRyZW49PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcblx0XHR9XG5cdH1cblxuXHRnZXRTb3VyY2VJbnRlcnZhbCgpIHtcblx0XHRpZiggdGhpcy5zdGFydCA9PT0gbnVsbCB8fCB0aGlzLnN0b3AgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBJTlZBTElEX0lOVEVSVkFMO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbmV3IEludGVydmFsKHRoaXMuc3RhcnQudG9rZW5JbmRleCwgdGhpcy5zdG9wLnRva2VuSW5kZXgpO1xuXHRcdH1cblx0fVxufVxuXG5SdWxlQ29udGV4dC5FTVBUWSA9IG5ldyBQYXJzZXJSdWxlQ29udGV4dCgpO1xuXG5jbGFzcyBJbnRlcnByZXRlclJ1bGVDb250ZXh0IGV4dGVuZHMgUGFyc2VyUnVsZUNvbnRleHQge1xuXHRjb25zdHJ1Y3RvcihwYXJlbnQsIGludm9raW5nU3RhdGVOdW1iZXIsIHJ1bGVJbmRleCkge1xuXHRcdHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZU51bWJlcik7XG5cdFx0dGhpcy5ydWxlSW5kZXggPSBydWxlSW5kZXg7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXJSdWxlQ29udGV4dDtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3QgUnVsZUNvbnRleHQgPSByZXF1aXJlKCcuL1J1bGVDb250ZXh0Jyk7XG5jb25zdCB7SGFzaCwgTWFwLCBlcXVhbEFycmF5c30gPSByZXF1aXJlKCcuL1V0aWxzJyk7XG5cbmNsYXNzIFByZWRpY3Rpb25Db250ZXh0IHtcblxuXHRjb25zdHJ1Y3RvcihjYWNoZWRIYXNoQ29kZSkge1xuXHRcdHRoaXMuY2FjaGVkSGFzaENvZGUgPSBjYWNoZWRIYXNoQ29kZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTdG9yZXMgdGhlIGNvbXB1dGVkIGhhc2ggY29kZSBvZiB0aGlzIHtAbGluayBQcmVkaWN0aW9uQ29udGV4dH0uIFRoZSBoYXNoXG5cdCAqIGNvZGUgaXMgY29tcHV0ZWQgaW4gcGFydHMgdG8gbWF0Y2ggdGhlIGZvbGxvd2luZyByZWZlcmVuY2UgYWxnb3JpdGhtLlxuXHQgKlxuXHQgKiA8cHJlPlxuXHQgKiBwcml2YXRlIGludCByZWZlcmVuY2VIYXNoQ29kZSgpIHtcblx0ICogaW50IGhhc2ggPSB7QGxpbmsgTXVybXVySGFzaC8vaW5pdGlhbGl6ZSBNdXJtdXJIYXNoLmluaXRpYWxpemV9KHtAbGlua1xuXHQgKiAvL0lOSVRJQUxfSEFTSH0pO1xuXHQgKlxuXHQgKiBmb3IgKGludCBpID0gMDsgaSAmbHQ7IHtAbGluayAvL3NpemUoKX07IGkrKykge1xuXHQgKiBoYXNoID0ge0BsaW5rIE11cm11ckhhc2gvL3VwZGF0ZSBNdXJtdXJIYXNoLnVwZGF0ZX0oaGFzaCwge0BsaW5rIC8vZ2V0UGFyZW50XG5cdCAqIGdldFBhcmVudH0oaSkpO1xuXHQgKiB9XG5cdCAqXG5cdCAqIGZvciAoaW50IGkgPSAwOyBpICZsdDsge0BsaW5rIC8vc2l6ZSgpfTsgaSsrKSB7XG5cdCAqIGhhc2ggPSB7QGxpbmsgTXVybXVySGFzaC8vdXBkYXRlIE11cm11ckhhc2gudXBkYXRlfShoYXNoLCB7QGxpbmtcblx0ICogLy9nZXRSZXR1cm5TdGF0ZSBnZXRSZXR1cm5TdGF0ZX0oaSkpO1xuXHQgKiB9XG5cdCAqXG5cdCAqIGhhc2ggPSB7QGxpbmsgTXVybXVySGFzaC8vZmluaXNoIE11cm11ckhhc2guZmluaXNofShoYXNoLCAyLy8ge0BsaW5rXG5cdCAqIC8vc2l6ZSgpfSk7XG5cdCAqIHJldHVybiBoYXNoO1xuXHQgKiB9XG5cdCAqIDwvcHJlPlxuXHQgKiBUaGlzIG1lYW5zIG9ubHkgdGhlIHtAbGluayAvL0VNUFRZfSBjb250ZXh0IGlzIGluIHNldC5cblx0ICovXG5cdGlzRW1wdHkoKSB7XG5cdFx0cmV0dXJuIHRoaXMgPT09IFByZWRpY3Rpb25Db250ZXh0LkVNUFRZO1xuXHR9XG5cblx0aGFzRW1wdHlQYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFJldHVyblN0YXRlKHRoaXMubGVuZ3RoIC0gMSkgPT09IFByZWRpY3Rpb25Db250ZXh0LkVNUFRZX1JFVFVSTl9TVEFURTtcblx0fVxuXG5cdGhhc2hDb2RlKCkge1xuXHRcdHJldHVybiB0aGlzLmNhY2hlZEhhc2hDb2RlO1xuXHR9XG5cblx0dXBkYXRlSGFzaENvZGUoaGFzaCkge1xuXHRcdGhhc2gudXBkYXRlKHRoaXMuY2FjaGVkSGFzaENvZGUpO1xuXHR9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB7QGNvZGUgJH0gaW4gbG9jYWwgY29udGV4dCBwcmVkaWN0aW9uLCB3aGljaCBtZWFucyB3aWxkY2FyZC5cbiAqIHtAY29kZS8vK3ggPS8vfS5cbiAqL1xuUHJlZGljdGlvbkNvbnRleHQuRU1QVFkgPSBudWxsO1xuXG4vKipcbiAqIFJlcHJlc2VudHMge0Bjb2RlICR9IGluIGFuIGFycmF5IGluIGZ1bGwgY29udGV4dCBtb2RlLCB3aGVuIHtAY29kZSAkfVxuICogZG9lc24ndCBtZWFuIHdpbGRjYXJkOiB7QGNvZGUgJCArIHggPSBbJCx4XX0uIEhlcmUsXG4gKiB7QGNvZGUgJH0gPSB7QGxpbmsgLy9FTVBUWV9SRVRVUk5fU1RBVEV9LlxuICovXG5QcmVkaWN0aW9uQ29udGV4dC5FTVBUWV9SRVRVUk5fU1RBVEUgPSAweDdGRkZGRkZGO1xuXG5QcmVkaWN0aW9uQ29udGV4dC5nbG9iYWxOb2RlQ291bnQgPSAxO1xuUHJlZGljdGlvbkNvbnRleHQuaWQgPSBQcmVkaWN0aW9uQ29udGV4dC5nbG9iYWxOb2RlQ291bnQ7XG5cblxuLypcbmZ1bmN0aW9uIGNhbGN1bGF0ZUhhc2hTdHJpbmcocGFyZW50LCByZXR1cm5TdGF0ZSkge1xuXHRyZXR1cm4gXCJcIiArIHBhcmVudCArIHJldHVyblN0YXRlO1xufVxuKi9cblxuLyoqXG4gKiBVc2VkIHRvIGNhY2hlIHtAbGluayBQcmVkaWN0aW9uQ29udGV4dH0gb2JqZWN0cy4gSXRzIHVzZWQgZm9yIHRoZSBzaGFyZWRcbiAqIGNvbnRleHQgY2FzaCBhc3NvY2lhdGVkIHdpdGggY29udGV4dHMgaW4gREZBIHN0YXRlcy4gVGhpcyBjYWNoZVxuICogY2FuIGJlIHVzZWQgZm9yIGJvdGggbGV4ZXJzIGFuZCBwYXJzZXJzLlxuICovXG5jbGFzcyBQcmVkaWN0aW9uQ29udGV4dENhY2hlIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZCBhIGNvbnRleHQgdG8gdGhlIGNhY2hlIGFuZCByZXR1cm4gaXQuIElmIHRoZSBjb250ZXh0IGFscmVhZHkgZXhpc3RzLFxuXHQgKiByZXR1cm4gdGhhdCBvbmUgaW5zdGVhZCBhbmQgZG8gbm90IGFkZCBhIG5ldyBjb250ZXh0IHRvIHRoZSBjYWNoZS5cblx0ICogUHJvdGVjdCBzaGFyZWQgY2FjaGUgZnJvbSB1bnNhZmUgdGhyZWFkIGFjY2Vzcy5cblx0ICovXG5cdGFkZChjdHgpIHtcblx0XHRpZiAoY3R4ID09PSBQcmVkaWN0aW9uQ29udGV4dC5FTVBUWSkge1xuXHRcdFx0cmV0dXJuIFByZWRpY3Rpb25Db250ZXh0LkVNUFRZO1xuXHRcdH1cblx0XHRjb25zdCBleGlzdGluZyA9IHRoaXMuY2FjaGUuZ2V0KGN0eCkgfHwgbnVsbDtcblx0XHRpZiAoZXhpc3RpbmcgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiBleGlzdGluZztcblx0XHR9XG5cdFx0dGhpcy5jYWNoZS5wdXQoY3R4LCBjdHgpO1xuXHRcdHJldHVybiBjdHg7XG5cdH1cblxuXHRnZXQoY3R4KSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGN0eCkgfHwgbnVsbDtcblx0fVxuXG5cdGdldCBsZW5ndGgoKXtcblx0XHRyZXR1cm4gdGhpcy5jYWNoZS5sZW5ndGg7XG5cdH1cbn1cblxuXG5jbGFzcyBTaW5nbGV0b25QcmVkaWN0aW9uQ29udGV4dCBleHRlbmRzIFByZWRpY3Rpb25Db250ZXh0IHtcblxuXHRjb25zdHJ1Y3RvcihwYXJlbnQsIHJldHVyblN0YXRlKSB7XG5cdFx0bGV0IGhhc2hDb2RlID0gMDtcblx0XHRjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcblx0XHRpZihwYXJlbnQgIT09IG51bGwpIHtcblx0XHRcdGhhc2gudXBkYXRlKHBhcmVudCwgcmV0dXJuU3RhdGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRoYXNoLnVwZGF0ZSgxKTtcblx0XHR9XG5cdFx0aGFzaENvZGUgPSBoYXNoLmZpbmlzaCgpO1xuXHRcdHN1cGVyKGhhc2hDb2RlKTtcblx0XHR0aGlzLnBhcmVudEN0eCA9IHBhcmVudDtcblx0XHR0aGlzLnJldHVyblN0YXRlID0gcmV0dXJuU3RhdGU7XG5cdH1cblxuXHRnZXRQYXJlbnQoaW5kZXgpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnRDdHg7XG5cdH1cblxuXHRnZXRSZXR1cm5TdGF0ZShpbmRleCkge1xuXHRcdHJldHVybiB0aGlzLnJldHVyblN0YXRlO1xuXHR9XG5cblx0ZXF1YWxzKG90aGVyKSB7XG5cdFx0aWYgKHRoaXMgPT09IG90aGVyKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBTaW5nbGV0b25QcmVkaWN0aW9uQ29udGV4dCkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2UgaWYgKHRoaXMuaGFzaENvZGUoKSAhPT0gb3RoZXIuaGFzaENvZGUoKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBjYW4ndCBiZSBzYW1lIGlmIGhhc2ggaXMgZGlmZmVyZW50XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKHRoaXMucmV0dXJuU3RhdGUgIT09IG90aGVyLnJldHVyblN0YXRlKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRlbHNlIGlmKHRoaXMucGFyZW50Q3R4PT1udWxsKVxuXHRcdFx0XHRyZXR1cm4gb3RoZXIucGFyZW50Q3R4PT1udWxsXG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiB0aGlzLnBhcmVudEN0eC5lcXVhbHMob3RoZXIucGFyZW50Q3R4KTtcblx0XHR9XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRjb25zdCB1cCA9IHRoaXMucGFyZW50Q3R4ID09PSBudWxsID8gXCJcIiA6IHRoaXMucGFyZW50Q3R4LnRvU3RyaW5nKCk7XG5cdFx0aWYgKHVwLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0aWYgKHRoaXMucmV0dXJuU3RhdGUgPT09IFByZWRpY3Rpb25Db250ZXh0LkVNUFRZX1JFVFVSTl9TVEFURSkge1xuXHRcdFx0XHRyZXR1cm4gXCIkXCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gXCJcIiArIHRoaXMucmV0dXJuU3RhdGU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBcIlwiICsgdGhpcy5yZXR1cm5TdGF0ZSArIFwiIFwiICsgdXA7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IGxlbmd0aCgpe1xuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZShwYXJlbnQsIHJldHVyblN0YXRlKSB7XG5cdFx0aWYgKHJldHVyblN0YXRlID09PSBQcmVkaWN0aW9uQ29udGV4dC5FTVBUWV9SRVRVUk5fU1RBVEUgJiYgcGFyZW50ID09PSBudWxsKSB7XG5cdFx0XHQvLyBzb21lb25lIGNhbiBwYXNzIGluIHRoZSBiaXRzIG9mIGFuIGFycmF5IGN0eCB0aGF0IG1lYW4gJFxuXHRcdFx0cmV0dXJuIFByZWRpY3Rpb25Db250ZXh0LkVNUFRZO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbmV3IFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0KHBhcmVudCwgcmV0dXJuU3RhdGUpO1xuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBFbXB0eVByZWRpY3Rpb25Db250ZXh0IGV4dGVuZHMgU2luZ2xldG9uUHJlZGljdGlvbkNvbnRleHQge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKG51bGwsIFByZWRpY3Rpb25Db250ZXh0LkVNUFRZX1JFVFVSTl9TVEFURSk7XG5cdH1cblxuXHRpc0VtcHR5KCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Z2V0UGFyZW50KGluZGV4KSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRnZXRSZXR1cm5TdGF0ZShpbmRleCkge1xuXHRcdHJldHVybiB0aGlzLnJldHVyblN0YXRlO1xuXHR9XG5cblx0ZXF1YWxzKG90aGVyKSB7XG5cdFx0cmV0dXJuIHRoaXMgPT09IG90aGVyO1xuXHR9XG5cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIFwiJFwiO1xuXHR9XG59XG5cblxuUHJlZGljdGlvbkNvbnRleHQuRU1QVFkgPSBuZXcgRW1wdHlQcmVkaWN0aW9uQ29udGV4dCgpO1xuXG5jbGFzcyBBcnJheVByZWRpY3Rpb25Db250ZXh0IGV4dGVuZHMgUHJlZGljdGlvbkNvbnRleHQge1xuXG5cdGNvbnN0cnVjdG9yKHBhcmVudHMsIHJldHVyblN0YXRlcykge1xuXHRcdC8qKlxuXHRcdCAqIFBhcmVudCBjYW4gYmUgbnVsbCBvbmx5IGlmIGZ1bGwgY3R4IG1vZGUgYW5kIHdlIG1ha2UgYW4gYXJyYXlcblx0XHQgKiBmcm9tIHtAbGluayAvL0VNUFRZfSBhbmQgbm9uLWVtcHR5LiBXZSBtZXJnZSB7QGxpbmsgLy9FTVBUWX0gYnkgdXNpbmdcblx0XHQgKiBudWxsIHBhcmVudCBhbmRcblx0XHQgKiByZXR1cm5TdGF0ZSA9PSB7QGxpbmsgLy9FTVBUWV9SRVRVUk5fU1RBVEV9LlxuXHRcdCAqL1xuXHRcdGNvbnN0IGggPSBuZXcgSGFzaCgpO1xuXHRcdGgudXBkYXRlKHBhcmVudHMsIHJldHVyblN0YXRlcyk7XG5cdFx0Y29uc3QgaGFzaENvZGUgPSBoLmZpbmlzaCgpO1xuXHRcdHN1cGVyKGhhc2hDb2RlKTtcblx0XHR0aGlzLnBhcmVudHMgPSBwYXJlbnRzO1xuXHRcdHRoaXMucmV0dXJuU3RhdGVzID0gcmV0dXJuU3RhdGVzO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0aXNFbXB0eSgpIHtcblx0XHQvLyBzaW5jZSBFTVBUWV9SRVRVUk5fU1RBVEUgY2FuIG9ubHkgYXBwZWFyIGluIHRoZSBsYXN0IHBvc2l0aW9uLCB3ZVxuXHRcdC8vIGRvbid0IG5lZWQgdG8gdmVyaWZ5IHRoYXQgc2l6ZT09MVxuXHRcdHJldHVybiB0aGlzLnJldHVyblN0YXRlc1swXSA9PT0gUHJlZGljdGlvbkNvbnRleHQuRU1QVFlfUkVUVVJOX1NUQVRFO1xuXHR9XG5cblx0Z2V0UGFyZW50KGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50c1tpbmRleF07XG5cdH1cblxuXHRnZXRSZXR1cm5TdGF0ZShpbmRleCkge1xuXHRcdHJldHVybiB0aGlzLnJldHVyblN0YXRlc1tpbmRleF07XG5cdH1cblxuXHRlcXVhbHMob3RoZXIpIHtcblx0XHRpZiAodGhpcyA9PT0gb3RoZXIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSBpZiAoIShvdGhlciBpbnN0YW5jZW9mIEFycmF5UHJlZGljdGlvbkNvbnRleHQpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmhhc2hDb2RlKCkgIT09IG90aGVyLmhhc2hDb2RlKCkpIHtcblx0XHRcdHJldHVybiBmYWxzZTsgLy8gY2FuJ3QgYmUgc2FtZSBpZiBoYXNoIGlzIGRpZmZlcmVudFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxBcnJheXModGhpcy5yZXR1cm5TdGF0ZXMsIG90aGVyLnJldHVyblN0YXRlcykgJiZcblx0XHRcdFx0ZXF1YWxBcnJheXModGhpcy5wYXJlbnRzLCBvdGhlci5wYXJlbnRzKTtcblx0XHR9XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRpZiAodGhpcy5pc0VtcHR5KCkpIHtcblx0XHRcdHJldHVybiBcIltdXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCBzID0gXCJbXCI7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucmV0dXJuU3RhdGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdHMgPSBzICsgXCIsIFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLnJldHVyblN0YXRlc1tpXSA9PT0gUHJlZGljdGlvbkNvbnRleHQuRU1QVFlfUkVUVVJOX1NUQVRFKSB7XG5cdFx0XHRcdFx0cyA9IHMgKyBcIiRcIjtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzID0gcyArIHRoaXMucmV0dXJuU3RhdGVzW2ldO1xuXHRcdFx0XHRpZiAodGhpcy5wYXJlbnRzW2ldICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0cyA9IHMgKyBcIiBcIiArIHRoaXMucGFyZW50c1tpXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzID0gcyArIFwibnVsbFwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcyArIFwiXVwiO1xuXHRcdH1cblx0fVxuXG5cdGdldCBsZW5ndGgoKXtcblx0XHRyZXR1cm4gdGhpcy5yZXR1cm5TdGF0ZXMubGVuZ3RoO1xuXHR9XG59XG5cblxuLyoqXG4gKiBDb252ZXJ0IGEge0BsaW5rIFJ1bGVDb250ZXh0fSB0cmVlIHRvIGEge0BsaW5rIFByZWRpY3Rpb25Db250ZXh0fSBncmFwaC5cbiAqIFJldHVybiB7QGxpbmsgLy9FTVBUWX0gaWYge0Bjb2RlIG91dGVyQ29udGV4dH0gaXMgZW1wdHkgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gcHJlZGljdGlvbkNvbnRleHRGcm9tUnVsZUNvbnRleHQoYXRuLCBvdXRlckNvbnRleHQpIHtcblx0aWYgKG91dGVyQ29udGV4dCA9PT0gdW5kZWZpbmVkIHx8IG91dGVyQ29udGV4dCA9PT0gbnVsbCkge1xuXHRcdG91dGVyQ29udGV4dCA9IFJ1bGVDb250ZXh0LkVNUFRZO1xuXHR9XG5cdC8vIGlmIHdlIGFyZSBpbiBSdWxlQ29udGV4dCBvZiBzdGFydCBydWxlLCBzLCB0aGVuIFByZWRpY3Rpb25Db250ZXh0XG5cdC8vIGlzIEVNUFRZLiBOb2JvZHkgY2FsbGVkIHVzLiAoaWYgd2UgYXJlIGVtcHR5LCByZXR1cm4gZW1wdHkpXG5cdGlmIChvdXRlckNvbnRleHQucGFyZW50Q3R4ID09PSBudWxsIHx8IG91dGVyQ29udGV4dCA9PT0gUnVsZUNvbnRleHQuRU1QVFkpIHtcblx0XHRyZXR1cm4gUHJlZGljdGlvbkNvbnRleHQuRU1QVFk7XG5cdH1cblx0Ly8gSWYgd2UgaGF2ZSBhIHBhcmVudCwgY29udmVydCBpdCB0byBhIFByZWRpY3Rpb25Db250ZXh0IGdyYXBoXG5cdGNvbnN0IHBhcmVudCA9IHByZWRpY3Rpb25Db250ZXh0RnJvbVJ1bGVDb250ZXh0KGF0biwgb3V0ZXJDb250ZXh0LnBhcmVudEN0eCk7XG5cdGNvbnN0IHN0YXRlID0gYXRuLnN0YXRlc1tvdXRlckNvbnRleHQuaW52b2tpbmdTdGF0ZV07XG5cdGNvbnN0IHRyYW5zaXRpb24gPSBzdGF0ZS50cmFuc2l0aW9uc1swXTtcblx0cmV0dXJuIFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0LmNyZWF0ZShwYXJlbnQsIHRyYW5zaXRpb24uZm9sbG93U3RhdGUuc3RhdGVOdW1iZXIpO1xufVxuLypcbmZ1bmN0aW9uIGNhbGN1bGF0ZUxpc3RzSGFzaFN0cmluZyhwYXJlbnRzLCByZXR1cm5TdGF0ZXMpIHtcblx0Y29uc3QgcyA9IFwiXCI7XG5cdHBhcmVudHMubWFwKGZ1bmN0aW9uKHApIHtcblx0XHRzID0gcyArIHA7XG5cdH0pO1xuXHRyZXR1cm5TdGF0ZXMubWFwKGZ1bmN0aW9uKHIpIHtcblx0XHRzID0gcyArIHI7XG5cdH0pO1xuXHRyZXR1cm4gcztcbn1cbiovXG5mdW5jdGlvbiBtZXJnZShhLCBiLCByb290SXNXaWxkY2FyZCwgbWVyZ2VDYWNoZSkge1xuXHQvLyBzaGFyZSBzYW1lIGdyYXBoIGlmIGJvdGggc2FtZVxuXHRpZiAoYSA9PT0gYikge1xuXHRcdHJldHVybiBhO1xuXHR9XG5cdGlmIChhIGluc3RhbmNlb2YgU2luZ2xldG9uUHJlZGljdGlvbkNvbnRleHQgJiYgYiBpbnN0YW5jZW9mIFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0KSB7XG5cdFx0cmV0dXJuIG1lcmdlU2luZ2xldG9ucyhhLCBiLCByb290SXNXaWxkY2FyZCwgbWVyZ2VDYWNoZSk7XG5cdH1cblx0Ly8gQXQgbGVhc3Qgb25lIG9mIGEgb3IgYiBpcyBhcnJheVxuXHQvLyBJZiBvbmUgaXMgJCBhbmQgcm9vdElzV2lsZGNhcmQsIHJldHVybiAkIGFzLy8gd2lsZGNhcmRcblx0aWYgKHJvb3RJc1dpbGRjYXJkKSB7XG5cdFx0aWYgKGEgaW5zdGFuY2VvZiBFbXB0eVByZWRpY3Rpb25Db250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9XG5cdFx0aWYgKGIgaW5zdGFuY2VvZiBFbXB0eVByZWRpY3Rpb25Db250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gYjtcblx0XHR9XG5cdH1cblx0Ly8gY29udmVydCBzaW5nbGV0b24gc28gYm90aCBhcmUgYXJyYXlzIHRvIG5vcm1hbGl6ZVxuXHRpZiAoYSBpbnN0YW5jZW9mIFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0KSB7XG5cdFx0YSA9IG5ldyBBcnJheVByZWRpY3Rpb25Db250ZXh0KFthLmdldFBhcmVudCgpXSwgW2EucmV0dXJuU3RhdGVdKTtcblx0fVxuXHRpZiAoYiBpbnN0YW5jZW9mIFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0KSB7XG5cdFx0YiA9IG5ldyBBcnJheVByZWRpY3Rpb25Db250ZXh0KFtiLmdldFBhcmVudCgpXSwgW2IucmV0dXJuU3RhdGVdKTtcblx0fVxuXHRyZXR1cm4gbWVyZ2VBcnJheXMoYSwgYiwgcm9vdElzV2lsZGNhcmQsIG1lcmdlQ2FjaGUpO1xufVxuXG4vKipcbiAqIE1lcmdlIHR3byB7QGxpbmsgU2luZ2xldG9uUHJlZGljdGlvbkNvbnRleHR9IGluc3RhbmNlcy5cbiAqXG4gKiA8cD5TdGFjayB0b3BzIGVxdWFsLCBwYXJlbnRzIG1lcmdlIGlzIHNhbWU7IHJldHVybiBsZWZ0IGdyYXBoLjxicj5cbiAqIDxlbWJlZCBzcmM9XCJpbWFnZXMvU2luZ2xldG9uTWVyZ2VfU2FtZVJvb3RTYW1lUGFyLnN2Z1wiXG4gKiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz48L3A+XG4gKlxuICogPHA+U2FtZSBzdGFjayB0b3AsIHBhcmVudHMgZGlmZmVyOyBtZXJnZSBwYXJlbnRzIGdpdmluZyBhcnJheSBub2RlLCB0aGVuXG4gKiByZW1haW5kZXJzIG9mIHRob3NlIGdyYXBocy4gQSBuZXcgcm9vdCBub2RlIGlzIGNyZWF0ZWQgdG8gcG9pbnQgdG8gdGhlXG4gKiBtZXJnZWQgcGFyZW50cy48YnI+XG4gKiA8ZW1iZWQgc3JjPVwiaW1hZ2VzL1NpbmdsZXRvbk1lcmdlX1NhbWVSb290RGlmZlBhci5zdmdcIlxuICogdHlwZT1cImltYWdlL3N2Zyt4bWxcIi8+PC9wPlxuICpcbiAqIDxwPkRpZmZlcmVudCBzdGFjayB0b3BzIHBvaW50aW5nIHRvIHNhbWUgcGFyZW50LiBNYWtlIGFycmF5IG5vZGUgZm9yIHRoZVxuICogcm9vdCB3aGVyZSBib3RoIGVsZW1lbnQgaW4gdGhlIHJvb3QgcG9pbnQgdG8gdGhlIHNhbWUgKG9yaWdpbmFsKVxuICogcGFyZW50Ljxicj5cbiAqIDxlbWJlZCBzcmM9XCJpbWFnZXMvU2luZ2xldG9uTWVyZ2VfRGlmZlJvb3RTYW1lUGFyLnN2Z1wiXG4gKiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz48L3A+XG4gKlxuICogPHA+RGlmZmVyZW50IHN0YWNrIHRvcHMgcG9pbnRpbmcgdG8gZGlmZmVyZW50IHBhcmVudHMuIE1ha2UgYXJyYXkgbm9kZSBmb3JcbiAqIHRoZSByb290IHdoZXJlIGVhY2ggZWxlbWVudCBwb2ludHMgdG8gdGhlIGNvcnJlc3BvbmRpbmcgb3JpZ2luYWxcbiAqIHBhcmVudC48YnI+XG4gKiA8ZW1iZWQgc3JjPVwiaW1hZ2VzL1NpbmdsZXRvbk1lcmdlX0RpZmZSb290RGlmZlBhci5zdmdcIlxuICogdHlwZT1cImltYWdlL3N2Zyt4bWxcIi8+PC9wPlxuICpcbiAqIEBwYXJhbSBhIHRoZSBmaXJzdCB7QGxpbmsgU2luZ2xldG9uUHJlZGljdGlvbkNvbnRleHR9XG4gKiBAcGFyYW0gYiB0aGUgc2Vjb25kIHtAbGluayBTaW5nbGV0b25QcmVkaWN0aW9uQ29udGV4dH1cbiAqIEBwYXJhbSByb290SXNXaWxkY2FyZCB7QGNvZGUgdHJ1ZX0gaWYgdGhpcyBpcyBhIGxvY2FsLWNvbnRleHQgbWVyZ2UsXG4gKiBvdGhlcndpc2UgZmFsc2UgdG8gaW5kaWNhdGUgYSBmdWxsLWNvbnRleHQgbWVyZ2VcbiAqIEBwYXJhbSBtZXJnZUNhY2hlXG4gKi9cbmZ1bmN0aW9uIG1lcmdlU2luZ2xldG9ucyhhLCBiLCByb290SXNXaWxkY2FyZCwgbWVyZ2VDYWNoZSkge1xuXHRpZiAobWVyZ2VDYWNoZSAhPT0gbnVsbCkge1xuXHRcdGxldCBwcmV2aW91cyA9IG1lcmdlQ2FjaGUuZ2V0KGEsIGIpO1xuXHRcdGlmIChwcmV2aW91cyAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHByZXZpb3VzO1xuXHRcdH1cblx0XHRwcmV2aW91cyA9IG1lcmdlQ2FjaGUuZ2V0KGIsIGEpO1xuXHRcdGlmIChwcmV2aW91cyAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHByZXZpb3VzO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IHJvb3RNZXJnZSA9IG1lcmdlUm9vdChhLCBiLCByb290SXNXaWxkY2FyZCk7XG5cdGlmIChyb290TWVyZ2UgIT09IG51bGwpIHtcblx0XHRpZiAobWVyZ2VDYWNoZSAhPT0gbnVsbCkge1xuXHRcdFx0bWVyZ2VDYWNoZS5zZXQoYSwgYiwgcm9vdE1lcmdlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJvb3RNZXJnZTtcblx0fVxuXHRpZiAoYS5yZXR1cm5TdGF0ZSA9PT0gYi5yZXR1cm5TdGF0ZSkge1xuXHRcdGNvbnN0IHBhcmVudCA9IG1lcmdlKGEucGFyZW50Q3R4LCBiLnBhcmVudEN0eCwgcm9vdElzV2lsZGNhcmQsIG1lcmdlQ2FjaGUpO1xuXHRcdC8vIGlmIHBhcmVudCBpcyBzYW1lIGFzIGV4aXN0aW5nIGEgb3IgYiBwYXJlbnQgb3IgcmVkdWNlZCB0byBhIHBhcmVudCxcblx0XHQvLyByZXR1cm4gaXRcblx0XHRpZiAocGFyZW50ID09PSBhLnBhcmVudEN0eCkge1xuXHRcdFx0cmV0dXJuIGE7IC8vIGF4ICsgYnggPSBheCwgaWYgYT1iXG5cdFx0fVxuXHRcdGlmIChwYXJlbnQgPT09IGIucGFyZW50Q3R4KSB7XG5cdFx0XHRyZXR1cm4gYjsgLy8gYXggKyBieCA9IGJ4LCBpZiBhPWJcblx0XHR9XG5cdFx0Ly8gZWxzZTogYXggKyBheSA9IGEnW3gseV1cblx0XHQvLyBtZXJnZSBwYXJlbnRzIHggYW5kIHksIGdpdmluZyBhcnJheSBub2RlIHdpdGggeCx5IHRoZW4gcmVtYWluZGVyc1xuXHRcdC8vIG9mIHRob3NlIGdyYXBocy4gZHVwIGEsIGEnIHBvaW50cyBhdCBtZXJnZWQgYXJyYXlcblx0XHQvLyBuZXcgam9pbmVkIHBhcmVudCBzbyBjcmVhdGUgbmV3IHNpbmdsZXRvbiBwb2ludGluZyB0byBpdCwgYSdcblx0XHRjb25zdCBzcGMgPSBTaW5nbGV0b25QcmVkaWN0aW9uQ29udGV4dC5jcmVhdGUocGFyZW50LCBhLnJldHVyblN0YXRlKTtcblx0XHRpZiAobWVyZ2VDYWNoZSAhPT0gbnVsbCkge1xuXHRcdFx0bWVyZ2VDYWNoZS5zZXQoYSwgYiwgc3BjKTtcblx0XHR9XG5cdFx0cmV0dXJuIHNwYztcblx0fSBlbHNlIHsgLy8gYSAhPSBiIHBheWxvYWRzIGRpZmZlclxuXHRcdC8vIHNlZSBpZiB3ZSBjYW4gY29sbGFwc2UgcGFyZW50cyBkdWUgdG8gJCt4IHBhcmVudHMgaWYgbG9jYWwgY3R4XG5cdFx0bGV0IHNpbmdsZVBhcmVudCA9IG51bGw7XG5cdFx0aWYgKGEgPT09IGIgfHwgKGEucGFyZW50Q3R4ICE9PSBudWxsICYmIGEucGFyZW50Q3R4ID09PSBiLnBhcmVudEN0eCkpIHsgLy8gYXggK1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGJ4ID1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBbYSxiXXhcblx0XHRcdHNpbmdsZVBhcmVudCA9IGEucGFyZW50Q3R4O1xuXHRcdH1cblx0XHRpZiAoc2luZ2xlUGFyZW50ICE9PSBudWxsKSB7IC8vIHBhcmVudHMgYXJlIHNhbWVcblx0XHRcdC8vIHNvcnQgcGF5bG9hZHMgYW5kIHVzZSBzYW1lIHBhcmVudFxuXHRcdFx0Y29uc3QgcGF5bG9hZHMgPSBbIGEucmV0dXJuU3RhdGUsIGIucmV0dXJuU3RhdGUgXTtcblx0XHRcdGlmIChhLnJldHVyblN0YXRlID4gYi5yZXR1cm5TdGF0ZSkge1xuXHRcdFx0XHRwYXlsb2Fkc1swXSA9IGIucmV0dXJuU3RhdGU7XG5cdFx0XHRcdHBheWxvYWRzWzFdID0gYS5yZXR1cm5TdGF0ZTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHBhcmVudHMgPSBbIHNpbmdsZVBhcmVudCwgc2luZ2xlUGFyZW50IF07XG5cdFx0XHRjb25zdCBhcGMgPSBuZXcgQXJyYXlQcmVkaWN0aW9uQ29udGV4dChwYXJlbnRzLCBwYXlsb2Fkcyk7XG5cdFx0XHRpZiAobWVyZ2VDYWNoZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRtZXJnZUNhY2hlLnNldChhLCBiLCBhcGMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFwYztcblx0XHR9XG5cdFx0Ly8gcGFyZW50cyBkaWZmZXIgYW5kIGNhbid0IG1lcmdlIHRoZW0uIEp1c3QgcGFjayB0b2dldGhlclxuXHRcdC8vIGludG8gYXJyYXk7IGNhbid0IG1lcmdlLlxuXHRcdC8vIGF4ICsgYnkgPSBbYXgsYnldXG5cdFx0Y29uc3QgcGF5bG9hZHMgPSBbIGEucmV0dXJuU3RhdGUsIGIucmV0dXJuU3RhdGUgXTtcblx0XHRsZXQgcGFyZW50cyA9IFsgYS5wYXJlbnRDdHgsIGIucGFyZW50Q3R4IF07XG5cdFx0aWYgKGEucmV0dXJuU3RhdGUgPiBiLnJldHVyblN0YXRlKSB7IC8vIHNvcnQgYnkgcGF5bG9hZFxuXHRcdFx0cGF5bG9hZHNbMF0gPSBiLnJldHVyblN0YXRlO1xuXHRcdFx0cGF5bG9hZHNbMV0gPSBhLnJldHVyblN0YXRlO1xuXHRcdFx0cGFyZW50cyA9IFsgYi5wYXJlbnRDdHgsIGEucGFyZW50Q3R4IF07XG5cdFx0fVxuXHRcdGNvbnN0IGFfID0gbmV3IEFycmF5UHJlZGljdGlvbkNvbnRleHQocGFyZW50cywgcGF5bG9hZHMpO1xuXHRcdGlmIChtZXJnZUNhY2hlICE9PSBudWxsKSB7XG5cdFx0XHRtZXJnZUNhY2hlLnNldChhLCBiLCBhXyk7XG5cdFx0fVxuXHRcdHJldHVybiBhXztcblx0fVxufVxuXG4vKipcbiAqIEhhbmRsZSBjYXNlIHdoZXJlIGF0IGxlYXN0IG9uZSBvZiB7QGNvZGUgYX0gb3Ige0Bjb2RlIGJ9IGlzXG4gKiB7QGxpbmsgLy9FTVBUWX0uIEluIHRoZSBmb2xsb3dpbmcgZGlhZ3JhbXMsIHRoZSBzeW1ib2wge0Bjb2RlICR9IGlzIHVzZWRcbiAqIHRvIHJlcHJlc2VudCB7QGxpbmsgLy9FTVBUWX0uXG4gKlxuICogPGgyPkxvY2FsLUNvbnRleHQgTWVyZ2VzPC9oMj5cbiAqXG4gKiA8cD5UaGVzZSBsb2NhbC1jb250ZXh0IG1lcmdlIG9wZXJhdGlvbnMgYXJlIHVzZWQgd2hlbiB7QGNvZGUgcm9vdElzV2lsZGNhcmR9XG4gKiBpcyB0cnVlLjwvcD5cbiAqXG4gKiA8cD57QGxpbmsgLy9FTVBUWX0gaXMgc3VwZXJzZXQgb2YgYW55IGdyYXBoOyByZXR1cm4ge0BsaW5rIC8vRU1QVFl9Ljxicj5cbiAqIDxlbWJlZCBzcmM9XCJpbWFnZXMvTG9jYWxNZXJnZV9FbXB0eVJvb3Quc3ZnXCIgdHlwZT1cImltYWdlL3N2Zyt4bWxcIi8+PC9wPlxuICpcbiAqIDxwPntAbGluayAvL0VNUFRZfSBhbmQgYW55dGhpbmcgaXMge0Bjb2RlIC8vRU1QVFl9LCBzbyBtZXJnZWQgcGFyZW50IGlzXG4gKiB7QGNvZGUgLy9FTVBUWX07IHJldHVybiBsZWZ0IGdyYXBoLjxicj5cbiAqIDxlbWJlZCBzcmM9XCJpbWFnZXMvTG9jYWxNZXJnZV9FbXB0eVBhcmVudC5zdmdcIiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz48L3A+XG4gKlxuICogPHA+U3BlY2lhbCBjYXNlIG9mIGxhc3QgbWVyZ2UgaWYgbG9jYWwgY29udGV4dC48YnI+XG4gKiA8ZW1iZWQgc3JjPVwiaW1hZ2VzL0xvY2FsTWVyZ2VfRGlmZlJvb3RzLnN2Z1wiIHR5cGU9XCJpbWFnZS9zdmcreG1sXCIvPjwvcD5cbiAqXG4gKiA8aDI+RnVsbC1Db250ZXh0IE1lcmdlczwvaDI+XG4gKlxuICogPHA+VGhlc2UgZnVsbC1jb250ZXh0IG1lcmdlIG9wZXJhdGlvbnMgYXJlIHVzZWQgd2hlbiB7QGNvZGUgcm9vdElzV2lsZGNhcmR9XG4gKiBpcyBmYWxzZS48L3A+XG4gKlxuICogPHA+PGVtYmVkIHNyYz1cImltYWdlcy9GdWxsTWVyZ2VfRW1wdHlSb290cy5zdmdcIiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz48L3A+XG4gKlxuICogPHA+TXVzdCBrZWVwIGFsbCBjb250ZXh0czsge0BsaW5rIC8vRU1QVFl9IGluIGFycmF5IGlzIGEgc3BlY2lhbCB2YWx1ZSAoYW5kXG4gKiBudWxsIHBhcmVudCkuPGJyPlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9GdWxsTWVyZ2VfRW1wdHlSb290LnN2Z1wiIHR5cGU9XCJpbWFnZS9zdmcreG1sXCIvPjwvcD5cbiAqXG4gKiA8cD48ZW1iZWQgc3JjPVwiaW1hZ2VzL0Z1bGxNZXJnZV9TYW1lUm9vdC5zdmdcIiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz48L3A+XG4gKlxuICogQHBhcmFtIGEgdGhlIGZpcnN0IHtAbGluayBTaW5nbGV0b25QcmVkaWN0aW9uQ29udGV4dH1cbiAqIEBwYXJhbSBiIHRoZSBzZWNvbmQge0BsaW5rIFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0fVxuICogQHBhcmFtIHJvb3RJc1dpbGRjYXJkIHtAY29kZSB0cnVlfSBpZiB0aGlzIGlzIGEgbG9jYWwtY29udGV4dCBtZXJnZSxcbiAqIG90aGVyd2lzZSBmYWxzZSB0byBpbmRpY2F0ZSBhIGZ1bGwtY29udGV4dCBtZXJnZVxuICovXG5mdW5jdGlvbiBtZXJnZVJvb3QoYSwgYiwgcm9vdElzV2lsZGNhcmQpIHtcblx0aWYgKHJvb3RJc1dpbGRjYXJkKSB7XG5cdFx0aWYgKGEgPT09IFByZWRpY3Rpb25Db250ZXh0LkVNUFRZKSB7XG5cdFx0XHRyZXR1cm4gUHJlZGljdGlvbkNvbnRleHQuRU1QVFk7IC8vIC8vICsgYiA9Ly9cblx0XHR9XG5cdFx0aWYgKGIgPT09IFByZWRpY3Rpb25Db250ZXh0LkVNUFRZKSB7XG5cdFx0XHRyZXR1cm4gUHJlZGljdGlvbkNvbnRleHQuRU1QVFk7IC8vIGEgKy8vID0vL1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRpZiAoYSA9PT0gUHJlZGljdGlvbkNvbnRleHQuRU1QVFkgJiYgYiA9PT0gUHJlZGljdGlvbkNvbnRleHQuRU1QVFkpIHtcblx0XHRcdHJldHVybiBQcmVkaWN0aW9uQ29udGV4dC5FTVBUWTsgLy8gJCArICQgPSAkXG5cdFx0fSBlbHNlIGlmIChhID09PSBQcmVkaWN0aW9uQ29udGV4dC5FTVBUWSkgeyAvLyAkICsgeCA9IFskLHhdXG5cdFx0XHRjb25zdCBwYXlsb2FkcyA9IFsgYi5yZXR1cm5TdGF0ZSxcblx0XHRcdFx0XHRQcmVkaWN0aW9uQ29udGV4dC5FTVBUWV9SRVRVUk5fU1RBVEUgXTtcblx0XHRcdGNvbnN0IHBhcmVudHMgPSBbIGIucGFyZW50Q3R4LCBudWxsIF07XG5cdFx0XHRyZXR1cm4gbmV3IEFycmF5UHJlZGljdGlvbkNvbnRleHQocGFyZW50cywgcGF5bG9hZHMpO1xuXHRcdH0gZWxzZSBpZiAoYiA9PT0gUHJlZGljdGlvbkNvbnRleHQuRU1QVFkpIHsgLy8geCArICQgPSBbJCx4XSAoJCBpcyBhbHdheXMgZmlyc3QgaWYgcHJlc2VudClcblx0XHRcdGNvbnN0IHBheWxvYWRzID0gWyBhLnJldHVyblN0YXRlLCBQcmVkaWN0aW9uQ29udGV4dC5FTVBUWV9SRVRVUk5fU1RBVEUgXTtcblx0XHRcdGNvbnN0IHBhcmVudHMgPSBbIGEucGFyZW50Q3R4LCBudWxsIF07XG5cdFx0XHRyZXR1cm4gbmV3IEFycmF5UHJlZGljdGlvbkNvbnRleHQocGFyZW50cywgcGF5bG9hZHMpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBNZXJnZSB0d28ge0BsaW5rIEFycmF5UHJlZGljdGlvbkNvbnRleHR9IGluc3RhbmNlcy5cbiAqXG4gKiA8cD5EaWZmZXJlbnQgdG9wcywgZGlmZmVyZW50IHBhcmVudHMuPGJyPlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9BcnJheU1lcmdlX0RpZmZUb3BEaWZmUGFyLnN2Z1wiIHR5cGU9XCJpbWFnZS9zdmcreG1sXCIvPjwvcD5cbiAqXG4gKiA8cD5TaGFyZWQgdG9wLCBzYW1lIHBhcmVudHMuPGJyPlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9BcnJheU1lcmdlX1NoYXJlVG9wU2FtZVBhci5zdmdcIiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz48L3A+XG4gKlxuICogPHA+U2hhcmVkIHRvcCwgZGlmZmVyZW50IHBhcmVudHMuPGJyPlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9BcnJheU1lcmdlX1NoYXJlVG9wRGlmZlBhci5zdmdcIiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz48L3A+XG4gKlxuICogPHA+U2hhcmVkIHRvcCwgYWxsIHNoYXJlZCBwYXJlbnRzLjxicj5cbiAqIDxlbWJlZCBzcmM9XCJpbWFnZXMvQXJyYXlNZXJnZV9TaGFyZVRvcFNoYXJlUGFyLnN2Z1wiXG4gKiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz48L3A+XG4gKlxuICogPHA+RXF1YWwgdG9wcywgbWVyZ2UgcGFyZW50cyBhbmQgcmVkdWNlIHRvcCB0b1xuICoge0BsaW5rIFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0fS48YnI+XG4gKiA8ZW1iZWQgc3JjPVwiaW1hZ2VzL0FycmF5TWVyZ2VfRXF1YWxUb3Auc3ZnXCIgdHlwZT1cImltYWdlL3N2Zyt4bWxcIi8+PC9wPlxuICovXG5mdW5jdGlvbiBtZXJnZUFycmF5cyhhLCBiLCByb290SXNXaWxkY2FyZCwgbWVyZ2VDYWNoZSkge1xuXHRpZiAobWVyZ2VDYWNoZSAhPT0gbnVsbCkge1xuXHRcdGxldCBwcmV2aW91cyA9IG1lcmdlQ2FjaGUuZ2V0KGEsIGIpO1xuXHRcdGlmIChwcmV2aW91cyAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHByZXZpb3VzO1xuXHRcdH1cblx0XHRwcmV2aW91cyA9IG1lcmdlQ2FjaGUuZ2V0KGIsIGEpO1xuXHRcdGlmIChwcmV2aW91cyAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHByZXZpb3VzO1xuXHRcdH1cblx0fVxuXHQvLyBtZXJnZSBzb3J0ZWQgcGF5bG9hZHMgYSArIGIgPT4gTVxuXHRsZXQgaSA9IDA7IC8vIHdhbGtzIGFcblx0bGV0IGogPSAwOyAvLyB3YWxrcyBiXG5cdGxldCBrID0gMDsgLy8gd2Fsa3MgdGFyZ2V0IE0gYXJyYXlcblxuXHRsZXQgbWVyZ2VkUmV0dXJuU3RhdGVzID0gW107XG5cdGxldCBtZXJnZWRQYXJlbnRzID0gW107XG5cdC8vIHdhbGsgYW5kIG1lcmdlIHRvIHlpZWxkIG1lcmdlZFBhcmVudHMsIG1lcmdlZFJldHVyblN0YXRlc1xuXHR3aGlsZSAoaSA8IGEucmV0dXJuU3RhdGVzLmxlbmd0aCAmJiBqIDwgYi5yZXR1cm5TdGF0ZXMubGVuZ3RoKSB7XG5cdFx0Y29uc3QgYV9wYXJlbnQgPSBhLnBhcmVudHNbaV07XG5cdFx0Y29uc3QgYl9wYXJlbnQgPSBiLnBhcmVudHNbal07XG5cdFx0aWYgKGEucmV0dXJuU3RhdGVzW2ldID09PSBiLnJldHVyblN0YXRlc1tqXSkge1xuXHRcdFx0Ly8gc2FtZSBwYXlsb2FkIChzdGFjayB0b3BzIGFyZSBlcXVhbCksIG11c3QgeWllbGQgbWVyZ2VkIHNpbmdsZXRvblxuXHRcdFx0Y29uc3QgcGF5bG9hZCA9IGEucmV0dXJuU3RhdGVzW2ldO1xuXHRcdFx0Ly8gJCskID0gJFxuXHRcdFx0Y29uc3QgYm90aERvbGxhcnMgPSBwYXlsb2FkID09PSBQcmVkaWN0aW9uQ29udGV4dC5FTVBUWV9SRVRVUk5fU1RBVEUgJiZcblx0XHRcdFx0XHRhX3BhcmVudCA9PT0gbnVsbCAmJiBiX3BhcmVudCA9PT0gbnVsbDtcblx0XHRcdGNvbnN0IGF4X2F4ID0gKGFfcGFyZW50ICE9PSBudWxsICYmIGJfcGFyZW50ICE9PSBudWxsICYmIGFfcGFyZW50ID09PSBiX3BhcmVudCk7IC8vIGF4K2F4XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBheFxuXHRcdFx0aWYgKGJvdGhEb2xsYXJzIHx8IGF4X2F4KSB7XG5cdFx0XHRcdG1lcmdlZFBhcmVudHNba10gPSBhX3BhcmVudDsgLy8gY2hvb3NlIGxlZnRcblx0XHRcdFx0bWVyZ2VkUmV0dXJuU3RhdGVzW2tdID0gcGF5bG9hZDtcblx0XHRcdH0gZWxzZSB7IC8vIGF4K2F5IC0+IGEnW3gseV1cblx0XHRcdFx0bWVyZ2VkUGFyZW50c1trXSA9IG1lcmdlKGFfcGFyZW50LCBiX3BhcmVudCwgcm9vdElzV2lsZGNhcmQsIG1lcmdlQ2FjaGUpO1xuXHRcdFx0XHRtZXJnZWRSZXR1cm5TdGF0ZXNba10gPSBwYXlsb2FkO1xuXHRcdFx0fVxuXHRcdFx0aSArPSAxOyAvLyBob3Agb3ZlciBsZWZ0IG9uZSBhcyB1c3VhbFxuXHRcdFx0aiArPSAxOyAvLyBidXQgYWxzbyBza2lwIG9uZSBpbiByaWdodCBzaWRlIHNpbmNlIHdlIG1lcmdlXG5cdFx0fSBlbHNlIGlmIChhLnJldHVyblN0YXRlc1tpXSA8IGIucmV0dXJuU3RhdGVzW2pdKSB7IC8vIGNvcHkgYVtpXSB0byBNXG5cdFx0XHRtZXJnZWRQYXJlbnRzW2tdID0gYV9wYXJlbnQ7XG5cdFx0XHRtZXJnZWRSZXR1cm5TdGF0ZXNba10gPSBhLnJldHVyblN0YXRlc1tpXTtcblx0XHRcdGkgKz0gMTtcblx0XHR9IGVsc2UgeyAvLyBiID4gYSwgY29weSBiW2pdIHRvIE1cblx0XHRcdG1lcmdlZFBhcmVudHNba10gPSBiX3BhcmVudDtcblx0XHRcdG1lcmdlZFJldHVyblN0YXRlc1trXSA9IGIucmV0dXJuU3RhdGVzW2pdO1xuXHRcdFx0aiArPSAxO1xuXHRcdH1cblx0XHRrICs9IDE7XG5cdH1cblx0Ly8gY29weSBvdmVyIGFueSBwYXlsb2FkcyByZW1haW5pbmcgaW4gZWl0aGVyIGFycmF5XG5cdGlmIChpIDwgYS5yZXR1cm5TdGF0ZXMubGVuZ3RoKSB7XG5cdFx0Zm9yIChsZXQgcCA9IGk7IHAgPCBhLnJldHVyblN0YXRlcy5sZW5ndGg7IHArKykge1xuXHRcdFx0bWVyZ2VkUGFyZW50c1trXSA9IGEucGFyZW50c1twXTtcblx0XHRcdG1lcmdlZFJldHVyblN0YXRlc1trXSA9IGEucmV0dXJuU3RhdGVzW3BdO1xuXHRcdFx0ayArPSAxO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRmb3IgKGxldCBwID0gajsgcCA8IGIucmV0dXJuU3RhdGVzLmxlbmd0aDsgcCsrKSB7XG5cdFx0XHRtZXJnZWRQYXJlbnRzW2tdID0gYi5wYXJlbnRzW3BdO1xuXHRcdFx0bWVyZ2VkUmV0dXJuU3RhdGVzW2tdID0gYi5yZXR1cm5TdGF0ZXNbcF07XG5cdFx0XHRrICs9IDE7XG5cdFx0fVxuXHR9XG5cdC8vIHRyaW0gbWVyZ2VkIGlmIHdlIGNvbWJpbmVkIGEgZmV3IHRoYXQgaGFkIHNhbWUgc3RhY2sgdG9wc1xuXHRpZiAoayA8IG1lcmdlZFBhcmVudHMubGVuZ3RoKSB7IC8vIHdyaXRlIGluZGV4IDwgbGFzdCBwb3NpdGlvbjsgdHJpbVxuXHRcdGlmIChrID09PSAxKSB7IC8vIGZvciBqdXN0IG9uZSBtZXJnZWQgZWxlbWVudCwgcmV0dXJuIHNpbmdsZXRvbiB0b3Bcblx0XHRcdGNvbnN0IGFfID0gU2luZ2xldG9uUHJlZGljdGlvbkNvbnRleHQuY3JlYXRlKG1lcmdlZFBhcmVudHNbMF0sXG5cdFx0XHRcdFx0bWVyZ2VkUmV0dXJuU3RhdGVzWzBdKTtcblx0XHRcdGlmIChtZXJnZUNhY2hlICE9PSBudWxsKSB7XG5cdFx0XHRcdG1lcmdlQ2FjaGUuc2V0KGEsIGIsIGFfKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBhXztcblx0XHR9XG5cdFx0bWVyZ2VkUGFyZW50cyA9IG1lcmdlZFBhcmVudHMuc2xpY2UoMCwgayk7XG5cdFx0bWVyZ2VkUmV0dXJuU3RhdGVzID0gbWVyZ2VkUmV0dXJuU3RhdGVzLnNsaWNlKDAsIGspO1xuXHR9XG5cblx0Y29uc3QgTSA9IG5ldyBBcnJheVByZWRpY3Rpb25Db250ZXh0KG1lcmdlZFBhcmVudHMsIG1lcmdlZFJldHVyblN0YXRlcyk7XG5cblx0Ly8gaWYgd2UgY3JlYXRlZCBzYW1lIGFycmF5IGFzIGEgb3IgYiwgcmV0dXJuIHRoYXQgaW5zdGVhZFxuXHQvLyBUT0RPOiB0cmFjayB3aGV0aGVyIHRoaXMgaXMgcG9zc2libGUgYWJvdmUgZHVyaW5nIG1lcmdlIHNvcnQgZm9yIHNwZWVkXG5cdGlmIChNID09PSBhKSB7XG5cdFx0aWYgKG1lcmdlQ2FjaGUgIT09IG51bGwpIHtcblx0XHRcdG1lcmdlQ2FjaGUuc2V0KGEsIGIsIGEpO1xuXHRcdH1cblx0XHRyZXR1cm4gYTtcblx0fVxuXHRpZiAoTSA9PT0gYikge1xuXHRcdGlmIChtZXJnZUNhY2hlICE9PSBudWxsKSB7XG5cdFx0XHRtZXJnZUNhY2hlLnNldChhLCBiLCBiKTtcblx0XHR9XG5cdFx0cmV0dXJuIGI7XG5cdH1cblx0Y29tYmluZUNvbW1vblBhcmVudHMobWVyZ2VkUGFyZW50cyk7XG5cblx0aWYgKG1lcmdlQ2FjaGUgIT09IG51bGwpIHtcblx0XHRtZXJnZUNhY2hlLnNldChhLCBiLCBNKTtcblx0fVxuXHRyZXR1cm4gTTtcbn1cblxuLyoqXG4gKiBNYWtlIHBhc3Mgb3ZlciBhbGwgPGVtPk08L2VtPiB7QGNvZGUgcGFyZW50c307IG1lcmdlIGFueSB7QGNvZGUgZXF1YWxzKCl9XG4gKiBvbmVzLlxuICovXG5mdW5jdGlvbiBjb21iaW5lQ29tbW9uUGFyZW50cyhwYXJlbnRzKSB7XG5cdGNvbnN0IHVuaXF1ZVBhcmVudHMgPSBuZXcgTWFwKCk7XG5cblx0Zm9yIChsZXQgcCA9IDA7IHAgPCBwYXJlbnRzLmxlbmd0aDsgcCsrKSB7XG5cdFx0Y29uc3QgcGFyZW50ID0gcGFyZW50c1twXTtcblx0XHRpZiAoISh1bmlxdWVQYXJlbnRzLmNvbnRhaW5zS2V5KHBhcmVudCkpKSB7XG5cdFx0XHR1bmlxdWVQYXJlbnRzLnB1dChwYXJlbnQsIHBhcmVudCk7XG5cdFx0fVxuXHR9XG5cdGZvciAobGV0IHEgPSAwOyBxIDwgcGFyZW50cy5sZW5ndGg7IHErKykge1xuXHRcdHBhcmVudHNbcV0gPSB1bmlxdWVQYXJlbnRzLmdldChwYXJlbnRzW3FdKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRDYWNoZWRQcmVkaWN0aW9uQ29udGV4dChjb250ZXh0LCBjb250ZXh0Q2FjaGUsIHZpc2l0ZWQpIHtcblx0aWYgKGNvbnRleHQuaXNFbXB0eSgpKSB7XG5cdFx0cmV0dXJuIGNvbnRleHQ7XG5cdH1cblx0bGV0IGV4aXN0aW5nID0gdmlzaXRlZC5nZXQoY29udGV4dCkgfHwgbnVsbDtcblx0aWYgKGV4aXN0aW5nICE9PSBudWxsKSB7XG5cdFx0cmV0dXJuIGV4aXN0aW5nO1xuXHR9XG5cdGV4aXN0aW5nID0gY29udGV4dENhY2hlLmdldChjb250ZXh0KTtcblx0aWYgKGV4aXN0aW5nICE9PSBudWxsKSB7XG5cdFx0dmlzaXRlZC5wdXQoY29udGV4dCwgZXhpc3RpbmcpO1xuXHRcdHJldHVybiBleGlzdGluZztcblx0fVxuXHRsZXQgY2hhbmdlZCA9IGZhbHNlO1xuXHRsZXQgcGFyZW50cyA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHBhcmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBwYXJlbnQgPSBnZXRDYWNoZWRQcmVkaWN0aW9uQ29udGV4dChjb250ZXh0LmdldFBhcmVudChpKSwgY29udGV4dENhY2hlLCB2aXNpdGVkKTtcblx0XHRpZiAoY2hhbmdlZCB8fCBwYXJlbnQgIT09IGNvbnRleHQuZ2V0UGFyZW50KGkpKSB7XG5cdFx0XHRpZiAoIWNoYW5nZWQpIHtcblx0XHRcdFx0cGFyZW50cyA9IFtdO1xuXHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbnRleHQubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRwYXJlbnRzW2pdID0gY29udGV4dC5nZXRQYXJlbnQoaik7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRwYXJlbnRzW2ldID0gcGFyZW50O1xuXHRcdH1cblx0fVxuXHRpZiAoIWNoYW5nZWQpIHtcblx0XHRjb250ZXh0Q2FjaGUuYWRkKGNvbnRleHQpO1xuXHRcdHZpc2l0ZWQucHV0KGNvbnRleHQsIGNvbnRleHQpO1xuXHRcdHJldHVybiBjb250ZXh0O1xuXHR9XG5cdGxldCB1cGRhdGVkID0gbnVsbDtcblx0aWYgKHBhcmVudHMubGVuZ3RoID09PSAwKSB7XG5cdFx0dXBkYXRlZCA9IFByZWRpY3Rpb25Db250ZXh0LkVNUFRZO1xuXHR9IGVsc2UgaWYgKHBhcmVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0dXBkYXRlZCA9IFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0LmNyZWF0ZShwYXJlbnRzWzBdLCBjb250ZXh0XG5cdFx0XHRcdC5nZXRSZXR1cm5TdGF0ZSgwKSk7XG5cdH0gZWxzZSB7XG5cdFx0dXBkYXRlZCA9IG5ldyBBcnJheVByZWRpY3Rpb25Db250ZXh0KHBhcmVudHMsIGNvbnRleHQucmV0dXJuU3RhdGVzKTtcblx0fVxuXHRjb250ZXh0Q2FjaGUuYWRkKHVwZGF0ZWQpO1xuXHR2aXNpdGVkLnB1dCh1cGRhdGVkLCB1cGRhdGVkKTtcblx0dmlzaXRlZC5wdXQoY29udGV4dCwgdXBkYXRlZCk7XG5cblx0cmV0dXJuIHVwZGF0ZWQ7XG59XG5cbi8vIHRlcidzIHJlY3Vyc2l2ZSB2ZXJzaW9uIG9mIFNhbSdzIGdldEFsbE5vZGVzKClcbmZ1bmN0aW9uIGdldEFsbENvbnRleHROb2Rlcyhjb250ZXh0LCBub2RlcywgdmlzaXRlZCkge1xuXHRpZiAobm9kZXMgPT09IG51bGwpIHtcblx0XHRub2RlcyA9IFtdO1xuXHRcdHJldHVybiBnZXRBbGxDb250ZXh0Tm9kZXMoY29udGV4dCwgbm9kZXMsIHZpc2l0ZWQpO1xuXHR9IGVsc2UgaWYgKHZpc2l0ZWQgPT09IG51bGwpIHtcblx0XHR2aXNpdGVkID0gbmV3IE1hcCgpO1xuXHRcdHJldHVybiBnZXRBbGxDb250ZXh0Tm9kZXMoY29udGV4dCwgbm9kZXMsIHZpc2l0ZWQpO1xuXHR9IGVsc2Uge1xuXHRcdGlmIChjb250ZXh0ID09PSBudWxsIHx8IHZpc2l0ZWQuY29udGFpbnNLZXkoY29udGV4dCkpIHtcblx0XHRcdHJldHVybiBub2Rlcztcblx0XHR9XG5cdFx0dmlzaXRlZC5wdXQoY29udGV4dCwgY29udGV4dCk7XG5cdFx0bm9kZXMucHVzaChjb250ZXh0KTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRleHQubGVuZ3RoOyBpKyspIHtcblx0XHRcdGdldEFsbENvbnRleHROb2Rlcyhjb250ZXh0LmdldFBhcmVudChpKSwgbm9kZXMsIHZpc2l0ZWQpO1xuXHRcdH1cblx0XHRyZXR1cm4gbm9kZXM7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdG1lcmdlLFxuXHRQcmVkaWN0aW9uQ29udGV4dCxcblx0UHJlZGljdGlvbkNvbnRleHRDYWNoZSxcblx0U2luZ2xldG9uUHJlZGljdGlvbkNvbnRleHQsXG5cdHByZWRpY3Rpb25Db250ZXh0RnJvbVJ1bGVDb250ZXh0LFxuXHRnZXRDYWNoZWRQcmVkaWN0aW9uQ29udGV4dFxufVxuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7VG9rZW59ID0gcmVxdWlyZSgnLi9Ub2tlbicpO1xuY29uc3Qge0NvbnNvbGVFcnJvckxpc3RlbmVyfSA9IHJlcXVpcmUoJy4vZXJyb3IvRXJyb3JMaXN0ZW5lcicpO1xuY29uc3Qge1Byb3h5RXJyb3JMaXN0ZW5lcn0gPSByZXF1aXJlKCcuL2Vycm9yL0Vycm9yTGlzdGVuZXInKTtcblxuY2xhc3MgUmVjb2duaXplciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFsgQ29uc29sZUVycm9yTGlzdGVuZXIuSU5TVEFOQ0UgXTtcbiAgICAgICAgdGhpcy5faW50ZXJwID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3RhdGVOdW1iZXIgPSAtMTtcbiAgICB9XG5cbiAgICBjaGVja1ZlcnNpb24odG9vbFZlcnNpb24pIHtcbiAgICAgICAgY29uc3QgcnVudGltZVZlcnNpb24gPSBcIjQuOS4zXCI7XG4gICAgICAgIGlmIChydW50aW1lVmVyc2lvbiE9PXRvb2xWZXJzaW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFOVExSIHJ1bnRpbWUgYW5kIGdlbmVyYXRlZCBjb2RlIHZlcnNpb25zIGRpc2FncmVlOiBcIitydW50aW1lVmVyc2lvbitcIiE9XCIrdG9vbFZlcnNpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkRXJyb3JMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcmVtb3ZlRXJyb3JMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtdO1xuICAgIH1cblxuICAgIGdldExpdGVyYWxOYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci5saXRlcmFsTmFtZXMgfHwgW107XG4gICAgfVxuXG4gICAgZ2V0U3ltYm9saWNOYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci5zeW1ib2xpY05hbWVzIHx8IFtdO1xuICAgIH1cblxuICAgIGdldFRva2VuTmFtZXMoKSB7XG4gICAgICAgIGlmKCF0aGlzLnRva2VuTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpdGVyYWxOYW1lcyA9IHRoaXMuZ2V0TGl0ZXJhbE5hbWVzKCk7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xpY05hbWVzID0gdGhpcy5nZXRTeW1ib2xpY05hbWVzKCk7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBsaXRlcmFsTmFtZXMubGVuZ3RoID4gc3ltYm9saWNOYW1lcy5sZW5ndGggPyBsaXRlcmFsTmFtZXMubGVuZ3RoIDogc3ltYm9saWNOYW1lcy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnRva2VuTmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpPGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2tlbk5hbWVzW2ldID0gbGl0ZXJhbE5hbWVzW2ldIHx8IHN5bWJvbGljTmFtZXNbaV0gfHwgXCI8SU5WQUxJRFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuTmFtZXM7XG4gICAgfVxuXG4gICAgZ2V0VG9rZW5UeXBlTWFwKCkge1xuICAgICAgICBjb25zdCB0b2tlbk5hbWVzID0gdGhpcy5nZXRUb2tlbk5hbWVzKCk7XG4gICAgICAgIGlmICh0b2tlbk5hbWVzPT09bnVsbCkge1xuICAgICAgICAgICAgdGhyb3coXCJUaGUgY3VycmVudCByZWNvZ25pemVyIGRvZXMgbm90IHByb3ZpZGUgYSBsaXN0IG9mIHRva2VuIG5hbWVzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy50b2tlblR5cGVNYXBDYWNoZVt0b2tlbk5hbWVzXTtcbiAgICAgICAgaWYocmVzdWx0PT09dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0b2tlbk5hbWVzLnJlZHVjZShmdW5jdGlvbihvLCBrLCBpKSB7IG9ba10gPSBpOyB9KTtcbiAgICAgICAgICAgIHJlc3VsdC5FT0YgPSBUb2tlbi5FT0Y7XG4gICAgICAgICAgICB0aGlzLnRva2VuVHlwZU1hcENhY2hlW3Rva2VuTmFtZXNdID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgbWFwIGZyb20gcnVsZSBuYW1lcyB0byBydWxlIGluZGV4ZXMuXG4gICAgICogPHA+VXNlZCBmb3IgWFBhdGggYW5kIHRyZWUgcGF0dGVybiBjb21waWxhdGlvbi48L3A+XG4gICAgICovXG4gICAgZ2V0UnVsZUluZGV4TWFwKCkge1xuICAgICAgICBjb25zdCBydWxlTmFtZXMgPSB0aGlzLnJ1bGVOYW1lcztcbiAgICAgICAgaWYgKHJ1bGVOYW1lcz09PW51bGwpIHtcbiAgICAgICAgICAgIHRocm93KFwiVGhlIGN1cnJlbnQgcmVjb2duaXplciBkb2VzIG5vdCBwcm92aWRlIGEgbGlzdCBvZiBydWxlIG5hbWVzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5ydWxlSW5kZXhNYXBDYWNoZVtydWxlTmFtZXNdOyAvLyB0b2RvOiBzaG91bGQgaXQgYmUgUmVjb2duaXplci5ydWxlSW5kZXhNYXBDYWNoZSA/XG4gICAgICAgIGlmKHJlc3VsdD09PXVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcnVsZU5hbWVzLnJlZHVjZShmdW5jdGlvbihvLCBrLCBpKSB7IG9ba10gPSBpOyB9KTtcbiAgICAgICAgICAgIHRoaXMucnVsZUluZGV4TWFwQ2FjaGVbcnVsZU5hbWVzXSA9IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGdldFRva2VuVHlwZSh0b2tlbk5hbWUpIHtcbiAgICAgICAgY29uc3QgdHR5cGUgPSB0aGlzLmdldFRva2VuVHlwZU1hcCgpW3Rva2VuTmFtZV07XG4gICAgICAgIGlmICh0dHlwZSAhPT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0dHlwZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBUb2tlbi5JTlZBTElEX1RZUEU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXaGF0IGlzIHRoZSBlcnJvciBoZWFkZXIsIG5vcm1hbGx5IGxpbmUvY2hhcmFjdGVyIHBvc2l0aW9uIGluZm9ybWF0aW9uP1xuICAgIGdldEVycm9ySGVhZGVyKGUpIHtcbiAgICAgICAgY29uc3QgbGluZSA9IGUuZ2V0T2ZmZW5kaW5nVG9rZW4oKS5saW5lO1xuICAgICAgICBjb25zdCBjb2x1bW4gPSBlLmdldE9mZmVuZGluZ1Rva2VuKCkuY29sdW1uO1xuICAgICAgICByZXR1cm4gXCJsaW5lIFwiICsgbGluZSArIFwiOlwiICsgY29sdW1uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhvdyBzaG91bGQgYSB0b2tlbiBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3IgbWVzc2FnZT8gVGhlIGRlZmF1bHRcbiAgICAgKiBpcyB0byBkaXNwbGF5IGp1c3QgdGhlIHRleHQsIGJ1dCBkdXJpbmcgZGV2ZWxvcG1lbnQgeW91IG1pZ2h0XG4gICAgICogd2FudCB0byBoYXZlIGEgbG90IG9mIGluZm9ybWF0aW9uIHNwaXQgb3V0LiAgT3ZlcnJpZGUgaW4gdGhhdCBjYXNlXG4gICAgICogdG8gdXNlIHQudG9TdHJpbmcoKSAod2hpY2gsIGZvciBDb21tb25Ub2tlbiwgZHVtcHMgZXZlcnl0aGluZyBhYm91dFxuICAgICAqIHRoZSB0b2tlbikuIFRoaXMgaXMgYmV0dGVyIHRoYW4gZm9yY2luZyB5b3UgdG8gb3ZlcnJpZGUgYSBtZXRob2QgaW5cbiAgICAgKiB5b3VyIHRva2VuIG9iamVjdHMgYmVjYXVzZSB5b3UgZG9uJ3QgaGF2ZSB0byBnbyBtb2RpZnkgeW91ciBsZXhlclxuICAgICAqIHNvIHRoYXQgaXQgY3JlYXRlcyBhIG5ldyBKYXZhIHR5cGUuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCBpcyBub3QgY2FsbGVkIGJ5IHRoZSBBTlRMUiA0IFJ1bnRpbWUuIFNwZWNpZmljXG4gICAgICogaW1wbGVtZW50YXRpb25zIG9mIHtAbGluayBBTlRMUkVycm9yU3RyYXRlZ3l9IG1heSBwcm92aWRlIGEgc2ltaWxhclxuICAgICAqIGZlYXR1cmUgd2hlbiBuZWNlc3NhcnkuIEZvciBleGFtcGxlLCBzZWVcbiAgICAgKiB7QGxpbmsgRGVmYXVsdEVycm9yU3RyYXRlZ3kvL2dldFRva2VuRXJyb3JEaXNwbGF5fS4qL1xuICAgIGdldFRva2VuRXJyb3JEaXNwbGF5KHQpIHtcbiAgICAgICAgaWYgKHQ9PT1udWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gXCI8bm8gdG9rZW4+XCI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHMgPSB0LnRleHQ7XG4gICAgICAgIGlmIChzPT09bnVsbCkge1xuICAgICAgICAgICAgaWYgKHQudHlwZT09PVRva2VuLkVPRikge1xuICAgICAgICAgICAgICAgIHMgPSBcIjxFT0Y+XCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHMgPSBcIjxcIiArIHQudHlwZSArIFwiPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoXCJcXG5cIixcIlxcXFxuXCIpLnJlcGxhY2UoXCJcXHJcIixcIlxcXFxyXCIpLnJlcGxhY2UoXCJcXHRcIixcIlxcXFx0XCIpO1xuICAgICAgICByZXR1cm4gXCInXCIgKyBzICsgXCInXCI7XG4gICAgfVxuXG4gICAgZ2V0RXJyb3JMaXN0ZW5lckRpc3BhdGNoKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5RXJyb3JMaXN0ZW5lcih0aGlzLl9saXN0ZW5lcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHN1YmNsYXNzIG5lZWRzIHRvIG92ZXJyaWRlIHRoZXNlIGlmIHRoZXJlIGFyZSBzZW1wcmVkcyBvciBhY3Rpb25zXG4gICAgICogdGhhdCB0aGUgQVROIGludGVycCBuZWVkcyB0byBleGVjdXRlXG4gICAgICovXG4gICAgc2VtcHJlZChsb2NhbGN0eCwgcnVsZUluZGV4LCBhY3Rpb25JbmRleCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcmVjcHJlZChsb2NhbGN0eCAsIHByZWNlZGVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZ2V0IHN0YXRlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZU51bWJlcjtcbiAgICB9XG5cbiAgICBzZXQgc3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5fc3RhdGVOdW1iZXIgPSBzdGF0ZTtcbiAgICB9XG59XG5cblJlY29nbml6ZXIudG9rZW5UeXBlTWFwQ2FjaGUgPSB7fTtcblJlY29nbml6ZXIucnVsZUluZGV4TWFwQ2FjaGUgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWNvZ25pemVyO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7UnVsZU5vZGV9ID0gcmVxdWlyZSgnLi90cmVlL1RyZWUnKTtcbmNvbnN0IHtJTlZBTElEX0lOVEVSVkFMfSA9IHJlcXVpcmUoJy4vdHJlZS9UcmVlJyk7XG5jb25zdCBUcmVlcyA9IHJlcXVpcmUoJy4vdHJlZS9UcmVlcycpO1xuXG5jbGFzcyBSdWxlQ29udGV4dCBleHRlbmRzIFJ1bGVOb2RlIHtcblx0LyoqIEEgcnVsZSBjb250ZXh0IGlzIGEgcmVjb3JkIG9mIGEgc2luZ2xlIHJ1bGUgaW52b2NhdGlvbi4gSXQga25vd3Ncblx0ICogd2hpY2ggY29udGV4dCBpbnZva2VkIGl0LCBpZiBhbnkuIElmIHRoZXJlIGlzIG5vIHBhcmVudCBjb250ZXh0LCB0aGVuXG5cdCAqIG5hdHVyYWxseSB0aGUgaW52b2tpbmcgc3RhdGUgaXMgbm90IHZhbGlkLiAgVGhlIHBhcmVudCBsaW5rXG5cdCAqIHByb3ZpZGVzIGEgY2hhaW4gdXB3YXJkcyBmcm9tIHRoZSBjdXJyZW50IHJ1bGUgaW52b2NhdGlvbiB0byB0aGUgcm9vdFxuXHQgKiBvZiB0aGUgaW52b2NhdGlvbiB0cmVlLCBmb3JtaW5nIGEgc3RhY2suIFdlIGFjdHVhbGx5IGNhcnJ5IG5vXG5cdCAqIGluZm9ybWF0aW9uIGFib3V0IHRoZSBydWxlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNvbnRleHQgKGV4Y2VwdFxuXHQgKiB3aGVuIHBhcnNpbmcpLiBXZSBrZWVwIG9ubHkgdGhlIHN0YXRlIG51bWJlciBvZiB0aGUgaW52b2tpbmcgc3RhdGUgZnJvbVxuXHQgKiB0aGUgQVROIHN1Ym1hY2hpbmUgdGhhdCBpbnZva2VkIHRoaXMuIENvbnRyYXN0IHRoaXMgd2l0aCB0aGUgc1xuXHQgKiBwb2ludGVyIGluc2lkZSBQYXJzZXJSdWxlQ29udGV4dCB0aGF0IHRyYWNrcyB0aGUgY3VycmVudCBzdGF0ZVxuXHQgKiBiZWluZyBcImV4ZWN1dGVkXCIgZm9yIHRoZSBjdXJyZW50IHJ1bGUuXG5cdCAqXG5cdCAqIFRoZSBwYXJlbnQgY29udGV4dHMgYXJlIHVzZWZ1bCBmb3IgY29tcHV0aW5nIGxvb2thaGVhZCBzZXRzIGFuZFxuXHQgKiBnZXR0aW5nIGVycm9yIGluZm9ybWF0aW9uLlxuXHQgKlxuXHQgKiBUaGVzZSBvYmplY3RzIGFyZSB1c2VkIGR1cmluZyBwYXJzaW5nIGFuZCBwcmVkaWN0aW9uLlxuXHQgKiBGb3IgdGhlIHNwZWNpYWwgY2FzZSBvZiBwYXJzZXJzLCB3ZSB1c2UgdGhlIHN1YmNsYXNzXG5cdCAqIFBhcnNlclJ1bGVDb250ZXh0LlxuXHQgKlxuXHQgKiBAc2VlIFBhcnNlclJ1bGVDb250ZXh0XG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcblx0XHQvLyBXaGF0IGNvbnRleHQgaW52b2tlZCB0aGlzIHJ1bGU/XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnBhcmVudEN0eCA9IHBhcmVudCB8fCBudWxsO1xuXHRcdC8qKlxuXHRcdCAqIFdoYXQgc3RhdGUgaW52b2tlZCB0aGUgcnVsZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBjb250ZXh0P1xuXHRcdCAqIFRoZSBcInJldHVybiBhZGRyZXNzXCIgaXMgdGhlIGZvbGxvd1N0YXRlIG9mIGludm9raW5nU3RhdGVcblx0XHQgKiBJZiBwYXJlbnQgaXMgbnVsbCwgdGhpcyBzaG91bGQgYmUgLTEuXG5cdFx0ICovXG5cdFx0dGhpcy5pbnZva2luZ1N0YXRlID0gaW52b2tpbmdTdGF0ZSB8fCAtMTtcblx0fVxuXG5cdGRlcHRoKCkge1xuXHRcdGxldCBuID0gMDtcblx0XHRsZXQgcCA9IHRoaXM7XG5cdFx0d2hpbGUgKHAgIT09IG51bGwpIHtcblx0XHRcdHAgPSBwLnBhcmVudEN0eDtcblx0XHRcdG4gKz0gMTtcblx0XHR9XG5cdFx0cmV0dXJuIG47XG5cdH1cblxuXHQvKipcblx0ICogQSBjb250ZXh0IGlzIGVtcHR5IGlmIHRoZXJlIGlzIG5vIGludm9raW5nIHN0YXRlOyBtZWFuaW5nIG5vYm9keSBjYWxsXG5cdCAqIGN1cnJlbnQgY29udGV4dC5cblx0ICovXG5cdGlzRW1wdHkoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaW52b2tpbmdTdGF0ZSA9PT0gLTE7XG5cdH1cblxuLy8gc2F0aXNmeSB0aGUgUGFyc2VUcmVlIC8gU3ludGF4VHJlZSBpbnRlcmZhY2Vcblx0Z2V0U291cmNlSW50ZXJ2YWwoKSB7XG5cdFx0cmV0dXJuIElOVkFMSURfSU5URVJWQUw7XG5cdH1cblxuXHRnZXRSdWxlQ29udGV4dCgpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGdldFBheWxvYWQoKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJuIHRoZSBjb21iaW5lZCB0ZXh0IG9mIGFsbCBjaGlsZCBub2Rlcy4gVGhpcyBtZXRob2Qgb25seSBjb25zaWRlcnNcblx0ICogdG9rZW5zIHdoaWNoIGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgcGFyc2UgdHJlZS5cblx0ICogPHA+XG5cdCAqIFNpbmNlIHRva2VucyBvbiBoaWRkZW4gY2hhbm5lbHMgKGUuZy4gd2hpdGVzcGFjZSBvciBjb21tZW50cykgYXJlIG5vdFxuXHQgKiBhZGRlZCB0byB0aGUgcGFyc2UgdHJlZXMsIHRoZXkgd2lsbCBub3QgYXBwZWFyIGluIHRoZSBvdXRwdXQgb2YgdGhpc1xuXHQgKiBtZXRob2QuXG5cdCAqL1xuXHRnZXRUZXh0KCkge1xuXHRcdGlmICh0aGlzLmdldENoaWxkQ291bnQoKSA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLmNoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuXHRcdFx0XHRyZXR1cm4gY2hpbGQuZ2V0VGV4dCgpO1xuXHRcdFx0fSkuam9pbihcIlwiKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRm9yIHJ1bGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcGFyc2UgdHJlZSBpbnRlcm5hbCBub2RlLCByZXR1cm5cblx0ICogdGhlIG91dGVyIGFsdGVybmF0aXZlIG51bWJlciB1c2VkIHRvIG1hdGNoIHRoZSBpbnB1dC4gRGVmYXVsdFxuXHQgKiBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdCBjb21wdXRlIG5vciBzdG9yZSB0aGlzIGFsdCBudW0uIENyZWF0ZVxuXHQgKiBhIHN1YmNsYXNzIG9mIFBhcnNlclJ1bGVDb250ZXh0IHdpdGggYmFja2luZyBmaWVsZCBhbmQgc2V0XG5cdCAqIG9wdGlvbiBjb250ZXh0U3VwZXJDbGFzcy5cblx0ICogdG8gc2V0IGl0LlxuXHQgKi9cblx0Z2V0QWx0TnVtYmVyKCkge1xuXHQgICAgLy8gdXNlIGNvbnN0YW50IHZhbHVlIG9mIEFUTi5JTlZBTElEX0FMVF9OVU1CRVIgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeVxuXHQgICAgcmV0dXJuIDA7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBTZXQgdGhlIG91dGVyIGFsdGVybmF0aXZlIG51bWJlciBmb3IgdGhpcyBjb250ZXh0IG5vZGUuIERlZmF1bHRcblx0ICogaW1wbGVtZW50YXRpb24gZG9lcyBub3RoaW5nIHRvIGF2b2lkIGJhY2tpbmcgZmllbGQgb3ZlcmhlYWQgZm9yXG5cdCAqIHRyZWVzIHRoYXQgZG9uJ3QgbmVlZCBpdC4gIENyZWF0ZVxuXHQgKiBhIHN1YmNsYXNzIG9mIFBhcnNlclJ1bGVDb250ZXh0IHdpdGggYmFja2luZyBmaWVsZCBhbmQgc2V0XG5cdCAqIG9wdGlvbiBjb250ZXh0U3VwZXJDbGFzcy5cblx0ICovXG5cdHNldEFsdE51bWJlcihhbHROdW1iZXIpIHsgfVxuXG5cdGdldENoaWxkKGkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGdldENoaWxkQ291bnQoKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRhY2NlcHQodmlzaXRvcikge1xuXHRcdHJldHVybiB2aXNpdG9yLnZpc2l0Q2hpbGRyZW4odGhpcyk7XG5cdH1cblxuXHQvKipcblx0ICogUHJpbnQgb3V0IGEgd2hvbGUgdHJlZSwgbm90IGp1c3QgYSBub2RlLCBpbiBMSVNQIGZvcm1hdFxuXHQgKiAocm9vdCBjaGlsZDEgLi4gY2hpbGROKS4gUHJpbnQganVzdCBhIG5vZGUgaWYgdGhpcyBpcyBhIGxlYWYuXG5cdCAqL1xuXHR0b1N0cmluZ1RyZWUocnVsZU5hbWVzLCByZWNvZykge1xuXHRcdHJldHVybiBUcmVlcy50b1N0cmluZ1RyZWUodGhpcywgcnVsZU5hbWVzLCByZWNvZyk7XG5cdH1cblxuXHR0b1N0cmluZyhydWxlTmFtZXMsIHN0b3ApIHtcblx0XHRydWxlTmFtZXMgPSBydWxlTmFtZXMgfHwgbnVsbDtcblx0XHRzdG9wID0gc3RvcCB8fCBudWxsO1xuXHRcdGxldCBwID0gdGhpcztcblx0XHRsZXQgcyA9IFwiW1wiO1xuXHRcdHdoaWxlIChwICE9PSBudWxsICYmIHAgIT09IHN0b3ApIHtcblx0XHRcdGlmIChydWxlTmFtZXMgPT09IG51bGwpIHtcblx0XHRcdFx0aWYgKCFwLmlzRW1wdHkoKSkge1xuXHRcdFx0XHRcdHMgKz0gcC5pbnZva2luZ1N0YXRlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCByaSA9IHAucnVsZUluZGV4O1xuXHRcdFx0XHRjb25zdCBydWxlTmFtZSA9IChyaSA+PSAwICYmIHJpIDwgcnVsZU5hbWVzLmxlbmd0aCkgPyBydWxlTmFtZXNbcmldXG5cdFx0XHRcdFx0XHQ6IFwiXCIgKyByaTtcblx0XHRcdFx0cyArPSBydWxlTmFtZTtcblx0XHRcdH1cblx0XHRcdGlmIChwLnBhcmVudEN0eCAhPT0gbnVsbCAmJiAocnVsZU5hbWVzICE9PSBudWxsIHx8ICFwLnBhcmVudEN0eC5pc0VtcHR5KCkpKSB7XG5cdFx0XHRcdHMgKz0gXCIgXCI7XG5cdFx0XHR9XG5cdFx0XHRwID0gcC5wYXJlbnRDdHg7XG5cdFx0fVxuXHRcdHMgKz0gXCJdXCI7XG5cdFx0cmV0dXJuIHM7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSdWxlQ29udGV4dDtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuLyoqXG4gKiBBIHRva2VuIGhhcyBwcm9wZXJ0aWVzOiB0ZXh0LCB0eXBlLCBsaW5lLCBjaGFyYWN0ZXIgcG9zaXRpb24gaW4gdGhlIGxpbmVcbiAqIChzbyB3ZSBjYW4gaWdub3JlIHRhYnMpLCB0b2tlbiBjaGFubmVsLCBpbmRleCwgYW5kIHNvdXJjZSBmcm9tIHdoaWNoXG4gKiB3ZSBvYnRhaW5lZCB0aGlzIHRva2VuLlxuICovXG5jbGFzcyBUb2tlbiB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuc291cmNlID0gbnVsbDtcblx0XHR0aGlzLnR5cGUgPSBudWxsOyAvLyB0b2tlbiB0eXBlIG9mIHRoZSB0b2tlblxuXHRcdHRoaXMuY2hhbm5lbCA9IG51bGw7IC8vIFRoZSBwYXJzZXIgaWdub3JlcyBldmVyeXRoaW5nIG5vdCBvbiBERUZBVUxUX0NIQU5ORUxcblx0XHR0aGlzLnN0YXJ0ID0gbnVsbDsgLy8gb3B0aW9uYWw7IHJldHVybiAtMSBpZiBub3QgaW1wbGVtZW50ZWQuXG5cdFx0dGhpcy5zdG9wID0gbnVsbDsgLy8gb3B0aW9uYWw7IHJldHVybiAtMSBpZiBub3QgaW1wbGVtZW50ZWQuXG5cdFx0dGhpcy50b2tlbkluZGV4ID0gbnVsbDsgLy8gZnJvbSAwLi5uLTEgb2YgdGhlIHRva2VuIG9iamVjdCBpbiB0aGUgaW5wdXQgc3RyZWFtXG5cdFx0dGhpcy5saW5lID0gbnVsbDsgLy8gbGluZT0xLi5uIG9mIHRoZSAxc3QgY2hhcmFjdGVyXG5cdFx0dGhpcy5jb2x1bW4gPSBudWxsOyAvLyBiZWdpbm5pbmcgb2YgdGhlIGxpbmUgYXQgd2hpY2ggaXQgb2NjdXJzLCAwLi5uLTFcblx0XHR0aGlzLl90ZXh0ID0gbnVsbDsgLy8gdGV4dCBvZiB0aGUgdG9rZW4uXG5cdH1cblxuXHRnZXRUb2tlblNvdXJjZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5zb3VyY2VbMF07XG5cdH1cblxuXHRnZXRJbnB1dFN0cmVhbSgpIHtcblx0XHRyZXR1cm4gdGhpcy5zb3VyY2VbMV07XG5cdH1cblxuXHRnZXQgdGV4dCgpe1xuXHRcdHJldHVybiB0aGlzLl90ZXh0O1xuXHR9XG5cblx0c2V0IHRleHQodGV4dCkge1xuXHRcdHRoaXMuX3RleHQgPSB0ZXh0O1xuXHR9XG59XG5cblRva2VuLklOVkFMSURfVFlQRSA9IDA7XG5cbi8qKlxuICogRHVyaW5nIGxvb2thaGVhZCBvcGVyYXRpb25zLCB0aGlzIFwidG9rZW5cIiBzaWduaWZpZXMgd2UgaGl0IHJ1bGUgZW5kIEFUTiBzdGF0ZVxuICogYW5kIGRpZCBub3QgZm9sbG93IGl0IGRlc3BpdGUgbmVlZGluZyB0by5cbiAqL1xuVG9rZW4uRVBTSUxPTiA9IC0yO1xuXG5Ub2tlbi5NSU5fVVNFUl9UT0tFTl9UWVBFID0gMTtcblxuVG9rZW4uRU9GID0gLTE7XG5cbi8qKlxuICogQWxsIHRva2VucyBnbyB0byB0aGUgcGFyc2VyICh1bmxlc3Mgc2tpcCgpIGlzIGNhbGxlZCBpbiB0aGF0IHJ1bGUpXG4gKiBvbiBhIHBhcnRpY3VsYXIgXCJjaGFubmVsXCIuIFRoZSBwYXJzZXIgdHVuZXMgdG8gYSBwYXJ0aWN1bGFyIGNoYW5uZWxcbiAqIHNvIHRoYXQgd2hpdGVzcGFjZSBldGMuLi4gY2FuIGdvIHRvIHRoZSBwYXJzZXIgb24gYSBcImhpZGRlblwiIGNoYW5uZWwuXG4gKi9cblRva2VuLkRFRkFVTFRfQ0hBTk5FTCA9IDA7XG5cbi8qKlxuICogQW55dGhpbmcgb24gZGlmZmVyZW50IGNoYW5uZWwgdGhhbiBERUZBVUxUX0NIQU5ORUwgaXMgbm90IHBhcnNlZFxuICogYnkgcGFyc2VyLlxuICovXG5Ub2tlbi5ISURERU5fQ0hBTk5FTCA9IDE7XG5cblxuY2xhc3MgQ29tbW9uVG9rZW4gZXh0ZW5kcyBUb2tlbiB7XG5cdGNvbnN0cnVjdG9yKHNvdXJjZSwgdHlwZSwgY2hhbm5lbCwgc3RhcnQsIHN0b3ApIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuc291cmNlID0gc291cmNlICE9PSB1bmRlZmluZWQgPyBzb3VyY2UgOiBDb21tb25Ub2tlbi5FTVBUWV9TT1VSQ0U7XG5cdFx0dGhpcy50eXBlID0gdHlwZSAhPT0gdW5kZWZpbmVkID8gdHlwZSA6IG51bGw7XG5cdFx0dGhpcy5jaGFubmVsID0gY2hhbm5lbCAhPT0gdW5kZWZpbmVkID8gY2hhbm5lbCA6IFRva2VuLkRFRkFVTFRfQ0hBTk5FTDtcblx0XHR0aGlzLnN0YXJ0ID0gc3RhcnQgIT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogLTE7XG5cdFx0dGhpcy5zdG9wID0gc3RvcCAhPT0gdW5kZWZpbmVkID8gc3RvcCA6IC0xO1xuXHRcdHRoaXMudG9rZW5JbmRleCA9IC0xO1xuXHRcdGlmICh0aGlzLnNvdXJjZVswXSAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5saW5lID0gc291cmNlWzBdLmxpbmU7XG5cdFx0XHR0aGlzLmNvbHVtbiA9IHNvdXJjZVswXS5jb2x1bW47XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29sdW1uID0gLTE7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcge0BsaW5rIENvbW1vblRva2VufSBhcyBhIGNvcHkgb2YgYW5vdGhlciB7QGxpbmsgVG9rZW59LlxuXHQgKlxuXHQgKiA8cD5cblx0ICogSWYge0Bjb2RlIG9sZFRva2VufSBpcyBhbHNvIGEge0BsaW5rIENvbW1vblRva2VufSBpbnN0YW5jZSwgdGhlIG5ld2x5XG5cdCAqIGNvbnN0cnVjdGVkIHRva2VuIHdpbGwgc2hhcmUgYSByZWZlcmVuY2UgdG8gdGhlIHtAbGluayAvL3RleHR9IGZpZWxkIGFuZFxuXHQgKiB0aGUge0BsaW5rIFBhaXJ9IHN0b3JlZCBpbiB7QGxpbmsgLy9zb3VyY2V9LiBPdGhlcndpc2UsIHtAbGluayAvL3RleHR9IHdpbGxcblx0ICogYmUgYXNzaWduZWQgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHtAbGluayAvL2dldFRleHR9LCBhbmQge0BsaW5rIC8vc291cmNlfVxuXHQgKiB3aWxsIGJlIGNvbnN0cnVjdGVkIGZyb20gdGhlIHJlc3VsdCBvZiB7QGxpbmsgVG9rZW4vL2dldFRva2VuU291cmNlfSBhbmRcblx0ICoge0BsaW5rIFRva2VuLy9nZXRJbnB1dFN0cmVhbX0uPC9wPlxuXHQgKlxuXHQgKiBAcGFyYW0gb2xkVG9rZW4gVGhlIHRva2VuIHRvIGNvcHkuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblx0XHRjb25zdCB0ID0gbmV3IENvbW1vblRva2VuKHRoaXMuc291cmNlLCB0aGlzLnR5cGUsIHRoaXMuY2hhbm5lbCwgdGhpcy5zdGFydCwgdGhpcy5zdG9wKTtcblx0XHR0LnRva2VuSW5kZXggPSB0aGlzLnRva2VuSW5kZXg7XG5cdFx0dC5saW5lID0gdGhpcy5saW5lO1xuXHRcdHQuY29sdW1uID0gdGhpcy5jb2x1bW47XG5cdFx0dC50ZXh0ID0gdGhpcy50ZXh0O1xuXHRcdHJldHVybiB0O1xuXHR9XG5cblx0dG9TdHJpbmcoKSB7XG5cdFx0bGV0IHR4dCA9IHRoaXMudGV4dDtcblx0XHRpZiAodHh0ICE9PSBudWxsKSB7XG5cdFx0XHR0eHQgPSB0eHQucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIikucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIikucmVwbGFjZSgvXFx0L2csIFwiXFxcXHRcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHR4dCA9IFwiPG5vIHRleHQ+XCI7XG5cdFx0fVxuXHRcdHJldHVybiBcIltAXCIgKyB0aGlzLnRva2VuSW5kZXggKyBcIixcIiArIHRoaXMuc3RhcnQgKyBcIjpcIiArIHRoaXMuc3RvcCArIFwiPSdcIiArXG5cdFx0XHRcdHR4dCArIFwiJyw8XCIgKyB0aGlzLnR5cGUgKyBcIj5cIiArXG5cdFx0XHRcdCh0aGlzLmNoYW5uZWwgPiAwID8gXCIsY2hhbm5lbD1cIiArIHRoaXMuY2hhbm5lbCA6IFwiXCIpICsgXCIsXCIgK1xuXHRcdFx0XHR0aGlzLmxpbmUgKyBcIjpcIiArIHRoaXMuY29sdW1uICsgXCJdXCI7XG5cdH1cblxuXHRnZXQgdGV4dCgpe1xuXHRcdGlmICh0aGlzLl90ZXh0ICE9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdGV4dDtcblx0XHR9XG5cdFx0Y29uc3QgaW5wdXQgPSB0aGlzLmdldElucHV0U3RyZWFtKCk7XG5cdFx0aWYgKGlucHV0ID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0Y29uc3QgbiA9IGlucHV0LnNpemU7XG5cdFx0aWYgKHRoaXMuc3RhcnQgPCBuICYmIHRoaXMuc3RvcCA8IG4pIHtcblx0XHRcdHJldHVybiBpbnB1dC5nZXRUZXh0KHRoaXMuc3RhcnQsIHRoaXMuc3RvcCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBcIjxFT0Y+XCI7XG5cdFx0fVxuXHR9XG5cblx0c2V0IHRleHQodGV4dCkge1xuXHRcdHRoaXMuX3RleHQgPSB0ZXh0O1xuXHR9XG59XG5cbi8qKlxuICogQW4gZW1wdHkge0BsaW5rIFBhaXJ9IHdoaWNoIGlzIHVzZWQgYXMgdGhlIGRlZmF1bHQgdmFsdWUgb2ZcbiAqIHtAbGluayAvL3NvdXJjZX0gZm9yIHRva2VucyB0aGF0IGRvIG5vdCBoYXZlIGEgc291cmNlLlxuICovXG5Db21tb25Ub2tlbi5FTVBUWV9TT1VSQ0UgPSBbIG51bGwsIG51bGwgXTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFRva2VuLFxuXHRDb21tb25Ub2tlblxufVxuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5mdW5jdGlvbiB2YWx1ZVRvU3RyaW5nKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gbnVsbCA/IFwibnVsbFwiIDogdjtcbn1cblxuZnVuY3Rpb24gYXJyYXlUb1N0cmluZyhhKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYSkgPyAoXCJbXCIgKyBhLm1hcCh2YWx1ZVRvU3RyaW5nKS5qb2luKFwiLCBcIikgKyBcIl1cIikgOiBcIm51bGxcIjtcbn1cblxuU3RyaW5nLnByb3RvdHlwZS5zZWVkID0gU3RyaW5nLnByb3RvdHlwZS5zZWVkIHx8IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDIsIDMyKSk7XG5cblN0cmluZy5wcm90b3R5cGUuaGFzaENvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy50b1N0cmluZygpO1xuICAgIGxldCBoMWIsIGsxO1xuXG4gICAgY29uc3QgcmVtYWluZGVyID0ga2V5Lmxlbmd0aCAmIDM7IC8vIGtleS5sZW5ndGggJSA0XG4gICAgY29uc3QgYnl0ZXMgPSBrZXkubGVuZ3RoIC0gcmVtYWluZGVyO1xuICAgIGxldCBoMSA9IFN0cmluZy5wcm90b3R5cGUuc2VlZDtcbiAgICBjb25zdCBjMSA9IDB4Y2M5ZTJkNTE7XG4gICAgY29uc3QgYzIgPSAweDFiODczNTkzO1xuICAgIGxldCBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgYnl0ZXMpIHtcbiAgICAgICAgazEgPVxuICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdChpKSAmIDB4ZmYpKSB8XG4gICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4KSB8XG4gICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNikgfFxuICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQpO1xuICAgICAgICArK2k7XG5cbiAgICAgICAgazEgPSAoKCgoazEgJiAweGZmZmYpICogYzEpICsgKCgoKGsxID4+PiAxNikgKiBjMSkgJiAweGZmZmYpIDw8IDE2KSkpICYgMHhmZmZmZmZmZjtcbiAgICAgICAgazEgPSAoazEgPDwgMTUpIHwgKGsxID4+PiAxNyk7XG4gICAgICAgIGsxID0gKCgoKGsxICYgMHhmZmZmKSAqIGMyKSArICgoKChrMSA+Pj4gMTYpICogYzIpICYgMHhmZmZmKSA8PCAxNikpKSAmIDB4ZmZmZmZmZmY7XG5cbiAgICAgICAgaDEgXj0gazE7XG4gICAgICAgIGgxID0gKGgxIDw8IDEzKSB8IChoMSA+Pj4gMTkpO1xuICAgICAgICBoMWIgPSAoKCgoaDEgJiAweGZmZmYpICogNSkgKyAoKCgoaDEgPj4+IDE2KSAqIDUpICYgMHhmZmZmKSA8PCAxNikpKSAmIDB4ZmZmZmZmZmY7XG4gICAgICAgIGgxID0gKCgoaDFiICYgMHhmZmZmKSArIDB4NmI2NCkgKyAoKCgoaDFiID4+PiAxNikgKyAweGU2NTQpICYgMHhmZmZmKSA8PCAxNikpO1xuICAgIH1cblxuICAgIGsxID0gMDtcblxuICAgIHN3aXRjaCAocmVtYWluZGVyKSB7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGsxIF49IChrZXkuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgazEgXj0gKGtleS5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGsxIF49IChrZXkuY2hhckNvZGVBdChpKSAmIDB4ZmYpO1xuXG4gICAgICAgICAgICBrMSA9ICgoKGsxICYgMHhmZmZmKSAqIGMxKSArICgoKChrMSA+Pj4gMTYpICogYzEpICYgMHhmZmZmKSA8PCAxNikpICYgMHhmZmZmZmZmZjtcbiAgICAgICAgICAgIGsxID0gKGsxIDw8IDE1KSB8IChrMSA+Pj4gMTcpO1xuICAgICAgICAgICAgazEgPSAoKChrMSAmIDB4ZmZmZikgKiBjMikgKyAoKCgoazEgPj4+IDE2KSAqIGMyKSAmIDB4ZmZmZikgPDwgMTYpKSAmIDB4ZmZmZmZmZmY7XG4gICAgICAgICAgICBoMSBePSBrMTtcbiAgICB9XG5cbiAgICBoMSBePSBrZXkubGVuZ3RoO1xuXG4gICAgaDEgXj0gaDEgPj4+IDE2O1xuICAgIGgxID0gKCgoaDEgJiAweGZmZmYpICogMHg4NWViY2E2YikgKyAoKCgoaDEgPj4+IDE2KSAqIDB4ODVlYmNhNmIpICYgMHhmZmZmKSA8PCAxNikpICYgMHhmZmZmZmZmZjtcbiAgICBoMSBePSBoMSA+Pj4gMTM7XG4gICAgaDEgPSAoKCgoaDEgJiAweGZmZmYpICogMHhjMmIyYWUzNSkgKyAoKCgoaDEgPj4+IDE2KSAqIDB4YzJiMmFlMzUpICYgMHhmZmZmKSA8PCAxNikpKSAmIDB4ZmZmZmZmZmY7XG4gICAgaDEgXj0gaDEgPj4+IDE2O1xuXG4gICAgcmV0dXJuIGgxID4+PiAwO1xufTtcblxuZnVuY3Rpb24gc3RhbmRhcmRFcXVhbHNGdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPyBhLmVxdWFscyhiKSA6IGE9PWI7XG59XG5cbmZ1bmN0aW9uIHN0YW5kYXJkSGFzaENvZGVGdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuIGEgPyBhLmhhc2hDb2RlKCkgOiAtMTtcbn1cblxuY2xhc3MgU2V0IHtcbiAgICBjb25zdHJ1Y3RvcihoYXNoRnVuY3Rpb24sIGVxdWFsc0Z1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmhhc2hGdW5jdGlvbiA9IGhhc2hGdW5jdGlvbiB8fCBzdGFuZGFyZEhhc2hDb2RlRnVuY3Rpb247XG4gICAgICAgIHRoaXMuZXF1YWxzRnVuY3Rpb24gPSBlcXVhbHNGdW5jdGlvbiB8fCBzdGFuZGFyZEVxdWFsc0Z1bmN0aW9uO1xuICAgIH1cblxuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBoYXNoID0gdGhpcy5oYXNoRnVuY3Rpb24odmFsdWUpO1xuICAgICAgICBjb25zdCBrZXkgPSBcImhhc2hfXCIgKyBoYXNoO1xuICAgICAgICBpZiAoa2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5kYXRhW2tleV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVxdWFsc0Z1bmN0aW9uKHZhbHVlLCB2YWx1ZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhW2tleV0gPSBbdmFsdWVdO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udGFpbnModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHZhbHVlKSAhPSBudWxsO1xuICAgIH1cblxuICAgIGdldCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBoYXNoID0gdGhpcy5oYXNoRnVuY3Rpb24odmFsdWUpO1xuICAgICAgICBjb25zdCBrZXkgPSBcImhhc2hfXCIgKyBoYXNoO1xuICAgICAgICBpZiAoa2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5kYXRhW2tleV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVxdWFsc0Z1bmN0aW9uKHZhbHVlLCB2YWx1ZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhbHVlcygpIHtcbiAgICAgICAgbGV0IGwgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoXCJoYXNoX1wiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGwgPSBsLmNvbmNhdCh0aGlzLmRhdGFba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGw7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBhcnJheVRvU3RyaW5nKHRoaXMudmFsdWVzKCkpO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGgoKXtcbiAgICAgICAgbGV0IGwgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihcImhhc2hfXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbCA9IGwgKyB0aGlzLmRhdGFba2V5XS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGw7XG4gICAgfVxufVxuXG5cbmNsYXNzIEJpdFNldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIH1cblxuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRhdGFbdmFsdWVdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBvcihzZXQpIHtcbiAgICAgICAgY29uc3QgYml0cyA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKHNldC5kYXRhKS5tYXAoZnVuY3Rpb24gKGFsdCkge1xuICAgICAgICAgICAgYml0cy5hZGQoYWx0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKHZhbHVlKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmRhdGFbdmFsdWVdO1xuICAgIH1cblxuICAgIGNvbnRhaW5zKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbdmFsdWVdID09PSB0cnVlO1xuICAgIH1cblxuICAgIHZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgbWluVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbi5hcHBseShudWxsLCB0aGlzLnZhbHVlcygpKTtcbiAgICB9XG5cbiAgICBoYXNoQ29kZSgpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IG5ldyBIYXNoKCk7XG4gICAgICAgIGhhc2gudXBkYXRlKHRoaXMudmFsdWVzKCkpO1xuICAgICAgICByZXR1cm4gaGFzaC5maW5pc2goKTtcbiAgICB9XG5cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBCaXRTZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaENvZGUoKSA9PT0gb3RoZXIuaGFzaENvZGUoKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwie1wiICsgdGhpcy52YWx1ZXMoKS5qb2luKFwiLCBcIikgKyBcIn1cIjtcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcygpLmxlbmd0aDtcbiAgICB9XG59XG5cblxuY2xhc3MgTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihoYXNoRnVuY3Rpb24sIGVxdWFsc0Z1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmhhc2hGdW5jdGlvbiA9IGhhc2hGdW5jdGlvbiB8fCBzdGFuZGFyZEhhc2hDb2RlRnVuY3Rpb247XG4gICAgICAgIHRoaXMuZXF1YWxzRnVuY3Rpb24gPSBlcXVhbHNGdW5jdGlvbiB8fCBzdGFuZGFyZEVxdWFsc0Z1bmN0aW9uO1xuICAgIH1cblxuICAgIHB1dChrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGhhc2hLZXkgPSBcImhhc2hfXCIgKyB0aGlzLmhhc2hGdW5jdGlvbihrZXkpO1xuICAgICAgICBpZiAoaGFzaEtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSB0aGlzLmRhdGFbaGFzaEtleV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXF1YWxzRnVuY3Rpb24oa2V5LCBlbnRyeS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gZW50cnkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvbGRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnRyaWVzLnB1c2goe2tleTprZXksIHZhbHVlOnZhbHVlfSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbaGFzaEtleV0gPSBbe2tleTprZXksIHZhbHVlOnZhbHVlfV07XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb250YWluc0tleShrZXkpIHtcbiAgICAgICAgY29uc3QgaGFzaEtleSA9IFwiaGFzaF9cIiArIHRoaXMuaGFzaEZ1bmN0aW9uKGtleSk7XG4gICAgICAgIGlmKGhhc2hLZXkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5kYXRhW2hhc2hLZXldO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW50cnkgPSBlbnRyaWVzW2ldO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVxdWFsc0Z1bmN0aW9uKGtleSwgZW50cnkua2V5KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgaGFzaEtleSA9IFwiaGFzaF9cIiArIHRoaXMuaGFzaEZ1bmN0aW9uKGtleSk7XG4gICAgICAgIGlmKGhhc2hLZXkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5kYXRhW2hhc2hLZXldO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW50cnkgPSBlbnRyaWVzW2ldO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVxdWFsc0Z1bmN0aW9uKGtleSwgZW50cnkua2V5KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGVudHJpZXMoKSB7XG4gICAgICAgIGxldCBsID0gW107XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKFwiaGFzaF9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICBsID0gbC5jb25jYXQodGhpcy5kYXRhW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsO1xuICAgIH1cblxuICAgIGdldEtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKS5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUua2V5O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRWYWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKS5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3Qgc3MgPSB0aGlzLmVudHJpZXMoKS5tYXAoZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiAneycgKyBlbnRyeS5rZXkgKyAnOicgKyBlbnRyeS52YWx1ZSArICd9JztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAnWycgKyBzcy5qb2luKFwiLCBcIikgKyAnXSc7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpe1xuICAgICAgICBsZXQgbCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgaGFzaEtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGlmIChoYXNoS2V5LmluZGV4T2YoXCJoYXNoX1wiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGwgPSBsICsgdGhpcy5kYXRhW2hhc2hLZXldLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbDtcbiAgICB9XG59XG5cblxuY2xhc3MgQWx0RGljdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgIH1cblxuICAgIGdldChrZXkpIHtcbiAgICAgICAga2V5ID0gXCJrLVwiICsga2V5O1xuICAgICAgICBpZiAoa2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBrZXkgPSBcImstXCIgKyBrZXk7XG4gICAgICAgIHRoaXMuZGF0YVtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFsdWVzKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5kYXRhKTtcbiAgICAgICAgcmV0dXJuIGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuXG5jbGFzcyBEb3VibGVEaWN0IHtcbiAgICBjb25zdHJ1Y3RvcihkZWZhdWx0TWFwQ3Rvcikge1xuICAgICAgICB0aGlzLmRlZmF1bHRNYXBDdG9yID0gZGVmYXVsdE1hcEN0b3IgfHwgTWFwO1xuICAgICAgICB0aGlzLmNhY2hlTWFwID0gbmV3IHRoaXMuZGVmYXVsdE1hcEN0b3IoKTtcbiAgICB9XG5cbiAgICBnZXQoYSwgYikge1xuICAgICAgICBjb25zdCBkID0gdGhpcy5jYWNoZU1hcC5nZXQoYSkgfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIGQgPT09IG51bGwgPyBudWxsIDogKGQuZ2V0KGIpIHx8IG51bGwpO1xuICAgIH1cblxuICAgIHNldChhLCBiLCBvKSB7XG4gICAgICAgIGxldCBkID0gdGhpcy5jYWNoZU1hcC5nZXQoYSkgfHwgbnVsbDtcbiAgICAgICAgaWYgKGQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGQgPSBuZXcgdGhpcy5kZWZhdWx0TWFwQ3RvcigpO1xuICAgICAgICAgICAgdGhpcy5jYWNoZU1hcC5wdXQoYSwgZCk7XG4gICAgICAgIH1cbiAgICAgICAgZC5wdXQoYiwgbyk7XG4gICAgfVxufVxuXG5jbGFzcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuaGFzaCA9IDA7XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICBmb3IobGV0IGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUuYXBwbHkodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGsgPSAwO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSB2YWx1ZS5oYXNoQ29kZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZS51cGRhdGVIYXNoQ29kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS51cGRhdGVIYXNoQ29kZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5vIHVwZGF0ZUhhc2hDb2RlIGZvciBcIiArIHZhbHVlLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgayA9IGsgKiAweENDOUUyRDUxO1xuICAgICAgICAgICAgICAgIGsgPSAoayA8PCAxNSkgfCAoayA+Pj4gKDMyIC0gMTUpKTtcbiAgICAgICAgICAgICAgICBrID0gayAqIDB4MUI4NzM1OTM7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCA9IHRoaXMuY291bnQgKyAxO1xuICAgICAgICAgICAgICAgIGxldCBoYXNoID0gdGhpcy5oYXNoIF4gaztcbiAgICAgICAgICAgICAgICBoYXNoID0gKGhhc2ggPDwgMTMpIHwgKGhhc2ggPj4+ICgzMiAtIDEzKSk7XG4gICAgICAgICAgICAgICAgaGFzaCA9IGhhc2ggKiA1ICsgMHhFNjU0NkI2NDtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc2ggPSBoYXNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluaXNoKCkge1xuICAgICAgICBsZXQgaGFzaCA9IHRoaXMuaGFzaCBeICh0aGlzLmNvdW50ICogNCk7XG4gICAgICAgIGhhc2ggPSBoYXNoIF4gKGhhc2ggPj4+IDE2KTtcbiAgICAgICAgaGFzaCA9IGhhc2ggKiAweDg1RUJDQTZCO1xuICAgICAgICBoYXNoID0gaGFzaCBeIChoYXNoID4+PiAxMyk7XG4gICAgICAgIGhhc2ggPSBoYXNoICogMHhDMkIyQUUzNTtcbiAgICAgICAgaGFzaCA9IGhhc2ggXiAoaGFzaCA+Pj4gMTYpO1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGhhc2hTdHVmZigpIHtcbiAgICBjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcbiAgICBoYXNoLnVwZGF0ZS5hcHBseShoYXNoLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBoYXNoLmZpbmlzaCgpO1xufVxuXG5cbmZ1bmN0aW9uIGVzY2FwZVdoaXRlc3BhY2UocywgZXNjYXBlU3BhY2VzKSB7XG4gICAgcyA9IHMucmVwbGFjZSgvXFx0L2csIFwiXFxcXHRcIilcbiAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKVxuICAgICAgICAgLnJlcGxhY2UoL1xcci9nLCBcIlxcXFxyXCIpO1xuICAgIGlmIChlc2NhcGVTcGFjZXMpIHtcbiAgICAgICAgcyA9IHMucmVwbGFjZSgvIC9nLCBcIlxcdTAwQjdcIik7XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiB0aXRsZUNhc2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHdcXFMqL2csIGZ1bmN0aW9uICh0eHQpIHtcbiAgICAgICAgcmV0dXJuIHR4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR4dC5zdWJzdHIoMSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGEsIGIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYSkgfHwgIUFycmF5LmlzQXJyYXkoYikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYSA9PT0gYilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSA9PT0gYltpXSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWFbaV0uZXF1YWxzIHx8ICFhW2ldLmVxdWFscyhiW2ldKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEhhc2gsXG4gICAgU2V0LFxuICAgIE1hcCxcbiAgICBCaXRTZXQsXG4gICAgQWx0RGljdCxcbiAgICBEb3VibGVEaWN0LFxuICAgIGhhc2hTdHVmZixcbiAgICBlc2NhcGVXaGl0ZXNwYWNlLFxuICAgIGFycmF5VG9TdHJpbmcsXG4gICAgdGl0bGVDYXNlLFxuICAgIGVxdWFsQXJyYXlzXG59XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IExMMUFuYWx5emVyID0gcmVxdWlyZSgnLi8uLi9MTDFBbmFseXplcicpO1xuY29uc3Qge0ludGVydmFsU2V0fSA9IHJlcXVpcmUoJy4vLi4vSW50ZXJ2YWxTZXQnKTtcbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuLy4uL1Rva2VuJyk7XG5cbmNsYXNzIEFUTiB7XG5cbiAgICBjb25zdHJ1Y3RvcihncmFtbWFyVHlwZSAsIG1heFRva2VuVHlwZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVXNlZCBmb3IgcnVudGltZSBkZXNlcmlhbGl6YXRpb24gb2YgQVROcyBmcm9tIHN0cmluZ3NcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIEFUTi5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ncmFtbWFyVHlwZSA9IGdyYW1tYXJUeXBlO1xuICAgICAgICAvLyBUaGUgbWF4aW11bSB2YWx1ZSBmb3IgYW55IHN5bWJvbCByZWNvZ25pemVkIGJ5IGEgdHJhbnNpdGlvbiBpbiB0aGUgQVROLlxuICAgICAgICB0aGlzLm1heFRva2VuVHlwZSA9IG1heFRva2VuVHlwZTtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVhY2ggc3VicnVsZS9ydWxlIGlzIGEgZGVjaXNpb24gcG9pbnQgYW5kIHdlIG11c3QgdHJhY2sgdGhlbSBzbyB3ZVxuICAgICAgICAgKiBjYW4gZ28gYmFjayBsYXRlciBhbmQgYnVpbGQgREZBIHByZWRpY3RvcnMgZm9yIHRoZW0uICBUaGlzIGluY2x1ZGVzXG4gICAgICAgICAqIGFsbCB0aGUgcnVsZXMsIHN1YnJ1bGVzLCBvcHRpb25hbCBibG9ja3MsICgpKywgKCkqIGV0Yy4uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZWNpc2lvblRvU3RhdGUgPSBbXTtcbiAgICAgICAgLy8gTWFwcyBmcm9tIHJ1bGUgaW5kZXggdG8gc3RhcnRpbmcgc3RhdGUgbnVtYmVyLlxuICAgICAgICB0aGlzLnJ1bGVUb1N0YXJ0U3RhdGUgPSBbXTtcbiAgICAgICAgLy8gTWFwcyBmcm9tIHJ1bGUgaW5kZXggdG8gc3RvcCBzdGF0ZSBudW1iZXIuXG4gICAgICAgIHRoaXMucnVsZVRvU3RvcFN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5tb2RlTmFtZVRvU3RhcnRTdGF0ZSA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRm9yIGxleGVyIEFUTnMsIHRoaXMgbWFwcyB0aGUgcnVsZSBpbmRleCB0byB0aGUgcmVzdWx0aW5nIHRva2VuIHR5cGUuXG4gICAgICAgICAqIEZvciBwYXJzZXIgQVROcywgdGhpcyBtYXBzIHRoZSBydWxlIGluZGV4IHRvIHRoZSBnZW5lcmF0ZWQgYnlwYXNzIHRva2VuXG4gICAgICAgICAqIHR5cGUgaWYgdGhlIHtAbGluayBBVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zLy9pc0dlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb25zfVxuICAgICAgICAgKiBkZXNlcmlhbGl6YXRpb24gb3B0aW9uIHdhcyBzcGVjaWZpZWQ7IG90aGVyd2lzZSwgdGhpcyBpcyB7QGNvZGUgbnVsbH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucnVsZVRvVG9rZW5UeXBlID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvciBsZXhlciBBVE5zLCB0aGlzIGlzIGFuIGFycmF5IG9mIHtAbGluayBMZXhlckFjdGlvbn0gb2JqZWN0cyB3aGljaCBtYXlcbiAgICAgICAgICogYmUgcmVmZXJlbmNlZCBieSBhY3Rpb24gdHJhbnNpdGlvbnMgaW4gdGhlIEFUTlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZXhlckFjdGlvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLm1vZGVUb1N0YXJ0U3RhdGUgPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBzZXQgb2YgdmFsaWQgdG9rZW5zIHRoYXQgY2FuIG9jY3VyIHN0YXJ0aW5nIGluIHN0YXRlIHtAY29kZSBzfS5cbiAgICAgKiBJZiB7QGNvZGUgY3R4fSBpcyBudWxsLCB0aGUgc2V0IG9mIHRva2VucyB3aWxsIG5vdCBpbmNsdWRlIHdoYXQgY2FuIGZvbGxvd1xuICAgICAqIHRoZSBydWxlIHN1cnJvdW5kaW5nIHtAY29kZSBzfS4gSW4gb3RoZXIgd29yZHMsIHRoZSBzZXQgd2lsbCBiZVxuICAgICAqIHJlc3RyaWN0ZWQgdG8gdG9rZW5zIHJlYWNoYWJsZSBzdGF5aW5nIHdpdGhpbiB7QGNvZGUgc30ncyBydWxlXG4gICAgICovXG4gICAgbmV4dFRva2Vuc0luQ29udGV4dChzLCBjdHgpIHtcbiAgICAgICAgY29uc3QgYW5hbCA9IG5ldyBMTDFBbmFseXplcih0aGlzKTtcbiAgICAgICAgcmV0dXJuIGFuYWwuTE9PSyhzLCBudWxsLCBjdHgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIHNldCBvZiB2YWxpZCB0b2tlbnMgdGhhdCBjYW4gb2NjdXIgc3RhcnRpbmcgaW4ge0Bjb2RlIHN9IGFuZFxuICAgICAqIHN0YXlpbmcgaW4gc2FtZSBydWxlLiB7QGxpbmsgVG9rZW4vL0VQU0lMT059IGlzIGluIHNldCBpZiB3ZSByZWFjaCBlbmQgb2ZcbiAgICAgKiBydWxlXG4gICAgICovXG4gICAgbmV4dFRva2Vuc05vQ29udGV4dChzKSB7XG4gICAgICAgIGlmIChzLm5leHRUb2tlbldpdGhpblJ1bGUgIT09IG51bGwgKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5uZXh0VG9rZW5XaXRoaW5SdWxlO1xuICAgICAgICB9XG4gICAgICAgIHMubmV4dFRva2VuV2l0aGluUnVsZSA9IHRoaXMubmV4dFRva2Vuc0luQ29udGV4dChzLCBudWxsKTtcbiAgICAgICAgcy5uZXh0VG9rZW5XaXRoaW5SdWxlLnJlYWRPbmx5ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHMubmV4dFRva2VuV2l0aGluUnVsZTtcbiAgICB9XG5cbiAgICBuZXh0VG9rZW5zKHMsIGN0eCkge1xuICAgICAgICBpZiAoIGN0eD09PXVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHRUb2tlbnNOb0NvbnRleHQocyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0VG9rZW5zSW5Db250ZXh0KHMsIGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRTdGF0ZShzdGF0ZSkge1xuICAgICAgICBpZiAoIHN0YXRlICE9PSBudWxsICkge1xuICAgICAgICAgICAgc3RhdGUuYXRuID0gdGhpcztcbiAgICAgICAgICAgIHN0YXRlLnN0YXRlTnVtYmVyID0gdGhpcy5zdGF0ZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGVzLnB1c2goc3RhdGUpO1xuICAgIH1cblxuICAgIHJlbW92ZVN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHRoaXMuc3RhdGVzW3N0YXRlLnN0YXRlTnVtYmVyXSA9IG51bGw7IC8vIGp1c3QgZnJlZSBtZW0sIGRvbid0IHNoaWZ0IHN0YXRlcyBpbiBsaXN0XG4gICAgfVxuXG4gICAgZGVmaW5lRGVjaXNpb25TdGF0ZShzKSB7XG4gICAgICAgIHRoaXMuZGVjaXNpb25Ub1N0YXRlLnB1c2gocyk7XG4gICAgICAgIHMuZGVjaXNpb24gPSB0aGlzLmRlY2lzaW9uVG9TdGF0ZS5sZW5ndGgtMTtcbiAgICAgICAgcmV0dXJuIHMuZGVjaXNpb247XG4gICAgfVxuXG4gICAgZ2V0RGVjaXNpb25TdGF0ZShkZWNpc2lvbikge1xuICAgICAgICBpZiAodGhpcy5kZWNpc2lvblRvU3RhdGUubGVuZ3RoPT09MCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNpc2lvblRvU3RhdGVbZGVjaXNpb25dO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHNldCBvZiBpbnB1dCBzeW1ib2xzIHdoaWNoIGNvdWxkIGZvbGxvdyBBVE4gc3RhdGUgbnVtYmVyXG4gICAgICoge0Bjb2RlIHN0YXRlTnVtYmVyfSBpbiB0aGUgc3BlY2lmaWVkIGZ1bGwge0Bjb2RlIGNvbnRleHR9LiBUaGlzIG1ldGhvZFxuICAgICAqIGNvbnNpZGVycyB0aGUgY29tcGxldGUgcGFyc2VyIGNvbnRleHQsIGJ1dCBkb2VzIG5vdCBldmFsdWF0ZSBzZW1hbnRpY1xuICAgICAqIHByZWRpY2F0ZXMgKGkuZS4gYWxsIHByZWRpY2F0ZXMgZW5jb3VudGVyZWQgZHVyaW5nIHRoZSBjYWxjdWxhdGlvbiBhcmVcbiAgICAgKiBhc3N1bWVkIHRydWUpLiBJZiBhIHBhdGggaW4gdGhlIEFUTiBleGlzdHMgZnJvbSB0aGUgc3RhcnRpbmcgc3RhdGUgdG8gdGhlXG4gICAgICoge0BsaW5rIFJ1bGVTdG9wU3RhdGV9IG9mIHRoZSBvdXRlcm1vc3QgY29udGV4dCB3aXRob3V0IG1hdGNoaW5nIGFueVxuICAgICAqIHN5bWJvbHMsIHtAbGluayBUb2tlbi8vRU9GfSBpcyBhZGRlZCB0byB0aGUgcmV0dXJuZWQgc2V0LlxuICAgICAqXG4gICAgICogPHA+SWYge0Bjb2RlIGNvbnRleHR9IGlzIHtAY29kZSBudWxsfSwgaXQgaXMgdHJlYXRlZCBhc1xuICAgICAqIHtAbGluayBQYXJzZXJSdWxlQ29udGV4dC8vRU1QVFl9LjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGF0ZU51bWJlciB0aGUgQVROIHN0YXRlIG51bWJlclxuICAgICAqIEBwYXJhbSBjdHggdGhlIGZ1bGwgcGFyc2UgY29udGV4dFxuICAgICAqXG4gICAgICogQHJldHVybiB7SW50ZXJ2YWxTZXR9IFRoZSBzZXQgb2YgcG90ZW50aWFsbHkgdmFsaWQgaW5wdXQgc3ltYm9scyB3aGljaCBjb3VsZCBmb2xsb3cgdGhlXG4gICAgICogc3BlY2lmaWVkIHN0YXRlIGluIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAgICAgKlxuICAgICAqIEB0aHJvd3MgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmIHRoZSBBVE4gZG9lcyBub3QgY29udGFpbiBhIHN0YXRlIHdpdGhcbiAgICAgKiBudW1iZXIge0Bjb2RlIHN0YXRlTnVtYmVyfVxuICAgICAqL1xuICAgIGdldEV4cGVjdGVkVG9rZW5zKHN0YXRlTnVtYmVyLCBjdHggKSB7XG4gICAgICAgIGlmICggc3RhdGVOdW1iZXIgPCAwIHx8IHN0YXRlTnVtYmVyID49IHRoaXMuc3RhdGVzLmxlbmd0aCApIHtcbiAgICAgICAgICAgIHRocm93KFwiSW52YWxpZCBzdGF0ZSBudW1iZXIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLnN0YXRlc1tzdGF0ZU51bWJlcl07XG4gICAgICAgIGxldCBmb2xsb3dpbmcgPSB0aGlzLm5leHRUb2tlbnMocyk7XG4gICAgICAgIGlmICghZm9sbG93aW5nLmNvbnRhaW5zKFRva2VuLkVQU0lMT04pKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9sbG93aW5nO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkID0gbmV3IEludGVydmFsU2V0KCk7XG4gICAgICAgIGV4cGVjdGVkLmFkZFNldChmb2xsb3dpbmcpO1xuICAgICAgICBleHBlY3RlZC5yZW1vdmVPbmUoVG9rZW4uRVBTSUxPTik7XG4gICAgICAgIHdoaWxlIChjdHggIT09IG51bGwgJiYgY3R4Lmludm9raW5nU3RhdGUgPj0gMCAmJiBmb2xsb3dpbmcuY29udGFpbnMoVG9rZW4uRVBTSUxPTikpIHtcbiAgICAgICAgICAgIGNvbnN0IGludm9raW5nU3RhdGUgPSB0aGlzLnN0YXRlc1tjdHguaW52b2tpbmdTdGF0ZV07XG4gICAgICAgICAgICBjb25zdCBydCA9IGludm9raW5nU3RhdGUudHJhbnNpdGlvbnNbMF07XG4gICAgICAgICAgICBmb2xsb3dpbmcgPSB0aGlzLm5leHRUb2tlbnMocnQuZm9sbG93U3RhdGUpO1xuICAgICAgICAgICAgZXhwZWN0ZWQuYWRkU2V0KGZvbGxvd2luZyk7XG4gICAgICAgICAgICBleHBlY3RlZC5yZW1vdmVPbmUoVG9rZW4uRVBTSUxPTik7XG4gICAgICAgICAgICBjdHggPSBjdHgucGFyZW50Q3R4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb2xsb3dpbmcuY29udGFpbnMoVG9rZW4uRVBTSUxPTikpIHtcbiAgICAgICAgICAgIGV4cGVjdGVkLmFkZE9uZShUb2tlbi5FT0YpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleHBlY3RlZDtcbiAgICB9XG59XG5cbkFUTi5JTlZBTElEX0FMVF9OVU1CRVIgPSAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFUTjtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge0RlY2lzaW9uU3RhdGV9ID0gcmVxdWlyZSgnLi9BVE5TdGF0ZScpO1xuY29uc3Qge1NlbWFudGljQ29udGV4dH0gPSByZXF1aXJlKCcuL1NlbWFudGljQ29udGV4dCcpO1xuY29uc3Qge0hhc2h9ID0gcmVxdWlyZShcIi4uL1V0aWxzXCIpO1xuXG5cbmZ1bmN0aW9uIGNoZWNrUGFyYW1zKHBhcmFtcywgaXNDZmcpIHtcblx0aWYocGFyYW1zPT09bnVsbCkge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHsgc3RhdGU6bnVsbCwgYWx0Om51bGwsIGNvbnRleHQ6bnVsbCwgc2VtYW50aWNDb250ZXh0Om51bGwgfTtcblx0XHRpZihpc0NmZykge1xuXHRcdFx0cmVzdWx0LnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0ID0gMDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBlbHNlIHtcblx0XHRjb25zdCBwcm9wcyA9IHt9O1xuXHRcdHByb3BzLnN0YXRlID0gcGFyYW1zLnN0YXRlIHx8IG51bGw7XG5cdFx0cHJvcHMuYWx0ID0gKHBhcmFtcy5hbHQgPT09IHVuZGVmaW5lZCkgPyBudWxsIDogcGFyYW1zLmFsdDtcblx0XHRwcm9wcy5jb250ZXh0ID0gcGFyYW1zLmNvbnRleHQgfHwgbnVsbDtcblx0XHRwcm9wcy5zZW1hbnRpY0NvbnRleHQgPSBwYXJhbXMuc2VtYW50aWNDb250ZXh0IHx8IG51bGw7XG5cdFx0aWYoaXNDZmcpIHtcblx0XHRcdHByb3BzLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0ID0gcGFyYW1zLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0IHx8IDA7XG5cdFx0XHRwcm9wcy5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZCA9IHBhcmFtcy5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZCB8fCBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHByb3BzO1xuXHR9XG59XG5cbmNsYXNzIEFUTkNvbmZpZyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBBIHR1cGxlOiAoQVROIHN0YXRlLCBwcmVkaWN0ZWQgYWx0LCBzeW50YWN0aWMsIHNlbWFudGljIGNvbnRleHQpLlxuICAgICAqIFRoZSBzeW50YWN0aWMgY29udGV4dCBpcyBhIGdyYXBoLXN0cnVjdHVyZWQgc3RhY2sgbm9kZSB3aG9zZVxuICAgICAqIHBhdGgocykgdG8gdGhlIHJvb3QgaXMgdGhlIHJ1bGUgaW52b2NhdGlvbihzKVxuICAgICAqIGNoYWluIHVzZWQgdG8gYXJyaXZlIGF0IHRoZSBzdGF0ZS4gIFRoZSBzZW1hbnRpYyBjb250ZXh0IGlzXG4gICAgICogdGhlIHRyZWUgb2Ygc2VtYW50aWMgcHJlZGljYXRlcyBlbmNvdW50ZXJlZCBiZWZvcmUgcmVhY2hpbmdcbiAgICAgKiBhbiBBVE4gc3RhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMsIGNvbmZpZykge1xuICAgICAgICB0aGlzLmNoZWNrQ29udGV4dChwYXJhbXMsIGNvbmZpZyk7XG4gICAgICAgIHBhcmFtcyA9IGNoZWNrUGFyYW1zKHBhcmFtcyk7XG4gICAgICAgIGNvbmZpZyA9IGNoZWNrUGFyYW1zKGNvbmZpZywgdHJ1ZSk7XG4gICAgICAgIC8vIFRoZSBBVE4gc3RhdGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29uZmlndXJhdGlvbi8vL1xuICAgICAgICB0aGlzLnN0YXRlID0gcGFyYW1zLnN0YXRlIT09bnVsbCA/IHBhcmFtcy5zdGF0ZSA6IGNvbmZpZy5zdGF0ZTtcbiAgICAgICAgLy8gV2hhdCBhbHQgKG9yIGxleGVyIHJ1bGUpIGlzIHByZWRpY3RlZCBieSB0aGlzIGNvbmZpZ3VyYXRpb24vLy9cbiAgICAgICAgdGhpcy5hbHQgPSBwYXJhbXMuYWx0IT09bnVsbCA/IHBhcmFtcy5hbHQgOiBjb25maWcuYWx0O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHN0YWNrIG9mIGludm9raW5nIHN0YXRlcyBsZWFkaW5nIHRvIHRoZSBydWxlL3N0YXRlcyBhc3NvY2lhdGVkXG4gICAgICAgICAqIHdpdGggdGhpcyBjb25maWcuICBXZSB0cmFjayBvbmx5IHRob3NlIGNvbnRleHRzIHB1c2hlZCBkdXJpbmdcbiAgICAgICAgICogZXhlY3V0aW9uIG9mIHRoZSBBVE4gc2ltdWxhdG9yXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBwYXJhbXMuY29udGV4dCE9PW51bGwgPyBwYXJhbXMuY29udGV4dCA6IGNvbmZpZy5jb250ZXh0O1xuICAgICAgICB0aGlzLnNlbWFudGljQ29udGV4dCA9IHBhcmFtcy5zZW1hbnRpY0NvbnRleHQhPT1udWxsID8gcGFyYW1zLnNlbWFudGljQ29udGV4dCA6XG4gICAgICAgICAgICAoY29uZmlnLnNlbWFudGljQ29udGV4dCE9PW51bGwgPyBjb25maWcuc2VtYW50aWNDb250ZXh0IDogU2VtYW50aWNDb250ZXh0Lk5PTkUpO1xuICAgICAgICAvLyBUT0RPOiBtYWtlIGl0IGEgYm9vbGVhbiB0aGVuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBjYW5ub3QgZXhlY3V0ZSBwcmVkaWNhdGVzIGRlcGVuZGVudCB1cG9uIGxvY2FsIGNvbnRleHQgdW5sZXNzXG4gICAgICAgICAqIHdlIGtub3cgZm9yIHN1cmUgd2UgYXJlIGluIHRoZSBjb3JyZWN0IGNvbnRleHQuIEJlY2F1c2UgdGhlcmUgaXNcbiAgICAgICAgICogbm8gd2F5IHRvIGRvIHRoaXMgZWZmaWNpZW50bHksIHdlIHNpbXBseSBjYW5ub3QgZXZhbHVhdGVcbiAgICAgICAgICogZGVwZW5kZW50IHByZWRpY2F0ZXMgdW5sZXNzIHdlIGFyZSBpbiB0aGUgcnVsZSB0aGF0IGluaXRpYWxseVxuICAgICAgICAgKiBpbnZva2VzIHRoZSBBVE4gc2ltdWxhdG9yLlxuICAgICAgICAgKiBjbG9zdXJlKCkgdHJhY2tzIHRoZSBkZXB0aCBvZiBob3cgZmFyIHdlIGRpcCBpbnRvIHRoZVxuICAgICAgICAgKiBvdXRlciBjb250ZXh0OiBkZXB0aCAmZ3Q7IDAuICBOb3RlIHRoYXQgaXQgbWF5IG5vdCBiZSB0b3RhbGx5XG4gICAgICAgICAqIGFjY3VyYXRlIGRlcHRoIHNpbmNlIEkgZG9uJ3QgZXZlciBkZWNyZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVhY2hlc0ludG9PdXRlckNvbnRleHQgPSBjb25maWcucmVhY2hlc0ludG9PdXRlckNvbnRleHQ7XG4gICAgICAgIHRoaXMucHJlY2VkZW5jZUZpbHRlclN1cHByZXNzZWQgPSBjb25maWcucHJlY2VkZW5jZUZpbHRlclN1cHByZXNzZWQ7XG4gICAgfVxuXG4gICAgY2hlY2tDb250ZXh0KHBhcmFtcywgY29uZmlnKSB7XG4gICAgICAgIGlmKChwYXJhbXMuY29udGV4dD09PW51bGwgfHwgcGFyYW1zLmNvbnRleHQ9PT11bmRlZmluZWQpICYmXG4gICAgICAgICAgICAgICAgKGNvbmZpZz09PW51bGwgfHwgY29uZmlnLmNvbnRleHQ9PT1udWxsIHx8IGNvbmZpZy5jb250ZXh0PT09dW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhc2hDb2RlKCkge1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcbiAgICAgICAgdGhpcy51cGRhdGVIYXNoQ29kZShoYXNoKTtcbiAgICAgICAgcmV0dXJuIGhhc2guZmluaXNoKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlSGFzaENvZGUoaGFzaCkge1xuICAgICAgICBoYXNoLnVwZGF0ZSh0aGlzLnN0YXRlLnN0YXRlTnVtYmVyLCB0aGlzLmFsdCwgdGhpcy5jb250ZXh0LCB0aGlzLnNlbWFudGljQ29udGV4dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gQVROIGNvbmZpZ3VyYXRpb24gaXMgZXF1YWwgdG8gYW5vdGhlciBpZiBib3RoIGhhdmVcbiAgICAgKiB0aGUgc2FtZSBzdGF0ZSwgdGhleSBwcmVkaWN0IHRoZSBzYW1lIGFsdGVybmF0aXZlLCBhbmRcbiAgICAgKiBzeW50YWN0aWMvc2VtYW50aWMgY29udGV4dHMgYXJlIHRoZSBzYW1lXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoISAob3RoZXIgaW5zdGFuY2VvZiBBVE5Db25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5zdGF0ZU51bWJlcj09PW90aGVyLnN0YXRlLnN0YXRlTnVtYmVyICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hbHQ9PT1vdGhlci5hbHQgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5jb250ZXh0PT09bnVsbCA/IG90aGVyLmNvbnRleHQ9PT1udWxsIDogdGhpcy5jb250ZXh0LmVxdWFscyhvdGhlci5jb250ZXh0KSkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNlbWFudGljQ29udGV4dC5lcXVhbHMob3RoZXIuc2VtYW50aWNDb250ZXh0KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMucHJlY2VkZW5jZUZpbHRlclN1cHByZXNzZWQ9PT1vdGhlci5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhc2hDb2RlRm9yQ29uZmlnU2V0KCkge1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcbiAgICAgICAgaGFzaC51cGRhdGUodGhpcy5zdGF0ZS5zdGF0ZU51bWJlciwgdGhpcy5hbHQsIHRoaXMuc2VtYW50aWNDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGhhc2guZmluaXNoKCk7XG4gICAgfVxuXG4gICAgZXF1YWxzRm9yQ29uZmlnU2V0KG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoISAob3RoZXIgaW5zdGFuY2VvZiBBVE5Db25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5zdGF0ZU51bWJlcj09PW90aGVyLnN0YXRlLnN0YXRlTnVtYmVyICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hbHQ9PT1vdGhlci5hbHQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNlbWFudGljQ29udGV4dC5lcXVhbHMob3RoZXIuc2VtYW50aWNDb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCIoXCIgKyB0aGlzLnN0YXRlICsgXCIsXCIgKyB0aGlzLmFsdCArXG4gICAgICAgICAgICAodGhpcy5jb250ZXh0IT09bnVsbCA/IFwiLFtcIiArIHRoaXMuY29udGV4dC50b1N0cmluZygpICsgXCJdXCIgOiBcIlwiKSArXG4gICAgICAgICAgICAodGhpcy5zZW1hbnRpY0NvbnRleHQgIT09IFNlbWFudGljQ29udGV4dC5OT05FID9cbiAgICAgICAgICAgICAgICAgICAgKFwiLFwiICsgdGhpcy5zZW1hbnRpY0NvbnRleHQudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiKSArXG4gICAgICAgICAgICAodGhpcy5yZWFjaGVzSW50b091dGVyQ29udGV4dD4wID9cbiAgICAgICAgICAgICAgICAgICAgKFwiLHVwPVwiICsgdGhpcy5yZWFjaGVzSW50b091dGVyQ29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiKSArIFwiKVwiO1xuICAgIH1cbn1cblxuXG5jbGFzcyBMZXhlckFUTkNvbmZpZyBleHRlbmRzIEFUTkNvbmZpZyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zLCBjb25maWcpIHtcbiAgICAgICAgc3VwZXIocGFyYW1zLCBjb25maWcpO1xuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGJhY2tpbmcgZmllbGQgZm9yIHtAbGluayAvL2dldExleGVyQWN0aW9uRXhlY3V0b3J9LlxuICAgICAgICBjb25zdCBsZXhlckFjdGlvbkV4ZWN1dG9yID0gcGFyYW1zLmxleGVyQWN0aW9uRXhlY3V0b3IgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5sZXhlckFjdGlvbkV4ZWN1dG9yID0gbGV4ZXJBY3Rpb25FeGVjdXRvciB8fCAoY29uZmlnIT09bnVsbCA/IGNvbmZpZy5sZXhlckFjdGlvbkV4ZWN1dG9yIDogbnVsbCk7XG4gICAgICAgIHRoaXMucGFzc2VkVGhyb3VnaE5vbkdyZWVkeURlY2lzaW9uID0gY29uZmlnIT09bnVsbCA/IHRoaXMuY2hlY2tOb25HcmVlZHlEZWNpc2lvbihjb25maWcsIHRoaXMuc3RhdGUpIDogZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzaENvZGVGb3JDb25maWdTZXQgPSBMZXhlckFUTkNvbmZpZy5wcm90b3R5cGUuaGFzaENvZGU7XG4gICAgICAgIHRoaXMuZXF1YWxzRm9yQ29uZmlnU2V0ID0gTGV4ZXJBVE5Db25maWcucHJvdG90eXBlLmVxdWFscztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdXBkYXRlSGFzaENvZGUoaGFzaCkge1xuICAgICAgICBoYXNoLnVwZGF0ZSh0aGlzLnN0YXRlLnN0YXRlTnVtYmVyLCB0aGlzLmFsdCwgdGhpcy5jb250ZXh0LCB0aGlzLnNlbWFudGljQ29udGV4dCwgdGhpcy5wYXNzZWRUaHJvdWdoTm9uR3JlZWR5RGVjaXNpb24sIHRoaXMubGV4ZXJBY3Rpb25FeGVjdXRvcik7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzID09PSBvdGhlciB8fFxuICAgICAgICAgICAgICAgIChvdGhlciBpbnN0YW5jZW9mIExleGVyQVROQ29uZmlnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wYXNzZWRUaHJvdWdoTm9uR3JlZWR5RGVjaXNpb24gPT09IG90aGVyLnBhc3NlZFRocm91Z2hOb25HcmVlZHlEZWNpc2lvbiAmJlxuICAgICAgICAgICAgICAgICh0aGlzLmxleGVyQWN0aW9uRXhlY3V0b3IgPyB0aGlzLmxleGVyQWN0aW9uRXhlY3V0b3IuZXF1YWxzKG90aGVyLmxleGVyQWN0aW9uRXhlY3V0b3IpIDogIW90aGVyLmxleGVyQWN0aW9uRXhlY3V0b3IpICYmXG4gICAgICAgICAgICAgICAgc3VwZXIuZXF1YWxzKG90aGVyKSk7XG4gICAgfVxuXG4gICAgY2hlY2tOb25HcmVlZHlEZWNpc2lvbihzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICByZXR1cm4gc291cmNlLnBhc3NlZFRocm91Z2hOb25HcmVlZHlEZWNpc2lvbiB8fFxuICAgICAgICAgICAgKHRhcmdldCBpbnN0YW5jZW9mIERlY2lzaW9uU3RhdGUpICYmIHRhcmdldC5ub25HcmVlZHk7XG4gICAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzLkFUTkNvbmZpZyA9IEFUTkNvbmZpZztcbm1vZHVsZS5leHBvcnRzLkxleGVyQVROQ29uZmlnID0gTGV4ZXJBVE5Db25maWc7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IEFUTiA9IHJlcXVpcmUoJy4vQVROJyk7XG5jb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vLi4vVXRpbHMnKTtcbmNvbnN0IHtTZW1hbnRpY0NvbnRleHR9ID0gcmVxdWlyZSgnLi9TZW1hbnRpY0NvbnRleHQnKTtcbmNvbnN0IHttZXJnZX0gPSByZXF1aXJlKCcuLy4uL1ByZWRpY3Rpb25Db250ZXh0Jyk7XG5cbmZ1bmN0aW9uIGhhc2hBVE5Db25maWcoYykge1xuXHRyZXR1cm4gYy5oYXNoQ29kZUZvckNvbmZpZ1NldCgpO1xufVxuXG5mdW5jdGlvbiBlcXVhbEFUTkNvbmZpZ3MoYSwgYikge1xuXHRpZiAoIGE9PT1iICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGVsc2UgaWYgKCBhPT09bnVsbCB8fCBiPT09bnVsbCApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZWxzZVxuICAgICAgIHJldHVybiBhLmVxdWFsc0ZvckNvbmZpZ1NldChiKTtcbiB9XG5cbi8qKlxuICogU3BlY2lhbGl6ZWQge0BsaW5rIFNldH17QGNvZGUgPH17QGxpbmsgQVROQ29uZmlnfXtAY29kZSA+fSB0aGF0IGNhbiB0cmFja1xuICogaW5mbyBhYm91dCB0aGUgc2V0LCB3aXRoIHN1cHBvcnQgZm9yIGNvbWJpbmluZyBzaW1pbGFyIGNvbmZpZ3VyYXRpb25zIHVzaW5nIGFcbiAqIGdyYXBoLXN0cnVjdHVyZWQgc3RhY2tcbiAqL1xuY2xhc3MgQVROQ29uZmlnU2V0IHtcblx0Y29uc3RydWN0b3IoZnVsbEN0eCkge1xuXHRcdC8qKlxuXHRcdCAqIFRoZSByZWFzb24gdGhhdCB3ZSBuZWVkIHRoaXMgaXMgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRoZSBoYXNoIG1hcCB0byB1c2Vcblx0XHQgKiB0aGUgc3RhbmRhcmQgaGFzaCBjb2RlIGFuZCBlcXVhbHMuIFdlIG5lZWQgYWxsIGNvbmZpZ3VyYXRpb25zIHdpdGggdGhlXG5cdFx0ICogc2FtZVxuXHRcdCAqIHtAY29kZSAocyxpLF8sc2VtY3R4KX0gdG8gYmUgZXF1YWwuIFVuZm9ydHVuYXRlbHksIHRoaXMga2V5IGVmZmVjdGl2ZWx5XG5cdFx0ICogZG91Ymxlc1xuXHRcdCAqIHRoZSBudW1iZXIgb2Ygb2JqZWN0cyBhc3NvY2lhdGVkIHdpdGggQVROQ29uZmlncy4gVGhlIG90aGVyIHNvbHV0aW9uIGlzXG5cdFx0ICogdG9cblx0XHQgKiB1c2UgYSBoYXNoIHRhYmxlIHRoYXQgbGV0cyB1cyBzcGVjaWZ5IHRoZSBlcXVhbHMvaGFzaGNvZGUgb3BlcmF0aW9uLlxuXHRcdCAqIEFsbCBjb25maWdzIGJ1dCBoYXNoZWQgYnkgKHMsIGksIF8sIHBpKSBub3QgaW5jbHVkaW5nIGNvbnRleHQuIFdpcGVkIG91dFxuXHRcdCAqIHdoZW4gd2UgZ28gcmVhZG9ubHkgYXMgdGhpcyBzZXQgYmVjb21lcyBhIERGQSBzdGF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuY29uZmlnTG9va3VwID0gbmV3IFV0aWxzLlNldChoYXNoQVROQ29uZmlnLCBlcXVhbEFUTkNvbmZpZ3MpO1xuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlcyB0aGF0IHRoaXMgY29uZmlndXJhdGlvbiBzZXQgaXMgcGFydCBvZiBhIGZ1bGwgY29udGV4dFxuXHRcdCAqIExMIHByZWRpY3Rpb24uIEl0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgaG93IHRvIG1lcmdlICQuIFdpdGggU0xMXG5cdFx0ICogaXQncyBhIHdpbGRjYXJkIHdoZXJlYXMgaXQgaXMgbm90IGZvciBMTCBjb250ZXh0IG1lcmdlXG5cdFx0ICovXG5cdFx0dGhpcy5mdWxsQ3R4ID0gZnVsbEN0eCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZ1bGxDdHg7XG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGVzIHRoYXQgdGhlIHNldCBvZiBjb25maWd1cmF0aW9ucyBpcyByZWFkLW9ubHkuIERvIG5vdFxuXHRcdCAqIGFsbG93IGFueSBjb2RlIHRvIG1hbmlwdWxhdGUgdGhlIHNldDsgREZBIHN0YXRlcyB3aWxsIHBvaW50IGF0XG5cdFx0ICogdGhlIHNldHMgYW5kIHRoZXkgbXVzdCBub3QgY2hhbmdlLiBUaGlzIGRvZXMgbm90IHByb3RlY3QgdGhlIG90aGVyXG5cdFx0ICogZmllbGRzOyBpbiBwYXJ0aWN1bGFyLCBjb25mbGljdGluZ0FsdHMgaXMgc2V0IGFmdGVyXG5cdFx0ICogd2UndmUgbWFkZSB0aGlzIHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy5yZWFkT25seSA9IGZhbHNlO1xuXHRcdC8vIFRyYWNrIHRoZSBlbGVtZW50cyBhcyB0aGV5IGFyZSBhZGRlZCB0byB0aGUgc2V0OyBzdXBwb3J0cyBnZXQoaSkvLy9cblx0XHR0aGlzLmNvbmZpZ3MgPSBbXTtcblxuXHRcdC8vIFRPRE86IHRoZXNlIGZpZWxkcyBtYWtlIG1lIHByZXR0eSB1bmNvbWZvcnRhYmxlIGJ1dCBuaWNlIHRvIHBhY2sgdXAgaW5mb1xuXHRcdC8vIHRvZ2V0aGVyLCBzYXZlcyByZWNvbXB1dGF0aW9uXG5cdFx0Ly8gVE9ETzogY2FuIHdlIHRyYWNrIGNvbmZsaWN0cyBhcyB0aGV5IGFyZSBhZGRlZCB0byBzYXZlIHNjYW5uaW5nIGNvbmZpZ3Ncblx0XHQvLyBsYXRlcj9cblx0XHR0aGlzLnVuaXF1ZUFsdCA9IDA7XG5cdFx0dGhpcy5jb25mbGljdGluZ0FsdHMgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVXNlZCBpbiBwYXJzZXIgYW5kIGxleGVyLiBJbiBsZXhlciwgaXQgaW5kaWNhdGVzIHdlIGhpdCBhIHByZWRcblx0XHQgKiB3aGlsZSBjb21wdXRpbmcgYSBjbG9zdXJlIG9wZXJhdGlvbi4gRG9uJ3QgbWFrZSBhIERGQSBzdGF0ZSBmcm9tIHRoaXNcblx0XHQgKi9cblx0XHR0aGlzLmhhc1NlbWFudGljQ29udGV4dCA9IGZhbHNlO1xuXHRcdHRoaXMuZGlwc0ludG9PdXRlckNvbnRleHQgPSBmYWxzZTtcblxuXHRcdHRoaXMuY2FjaGVkSGFzaENvZGUgPSAtMTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRpbmcgYSBuZXcgY29uZmlnIG1lYW5zIG1lcmdpbmcgY29udGV4dHMgd2l0aCBleGlzdGluZyBjb25maWdzIGZvclxuXHQgKiB7QGNvZGUgKHMsIGksIHBpLCBfKX0sIHdoZXJlIHtAY29kZSBzfSBpcyB0aGVcblx0ICoge0BsaW5rIEFUTkNvbmZpZy8vc3RhdGV9LCB7QGNvZGUgaX0gaXMgdGhlIHtAbGluayBBVE5Db25maWcvL2FsdH0sIGFuZFxuXHQgKiB7QGNvZGUgcGl9IGlzIHRoZSB7QGxpbmsgQVROQ29uZmlnLy9zZW1hbnRpY0NvbnRleHR9LiBXZSB1c2Vcblx0ICoge0Bjb2RlIChzLGkscGkpfSBhcyBrZXkuXG5cdCAqXG5cdCAqIDxwPlRoaXMgbWV0aG9kIHVwZGF0ZXMge0BsaW5rIC8vZGlwc0ludG9PdXRlckNvbnRleHR9IGFuZFxuXHQgKiB7QGxpbmsgLy9oYXNTZW1hbnRpY0NvbnRleHR9IHdoZW4gbmVjZXNzYXJ5LjwvcD5cblx0ICovXG5cdGFkZChjb25maWcsIG1lcmdlQ2FjaGUpIHtcblx0XHRpZiAobWVyZ2VDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRtZXJnZUNhY2hlID0gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHRoaXMucmVhZE9ubHkpIHtcblx0XHRcdHRocm93IFwiVGhpcyBzZXQgaXMgcmVhZG9ubHlcIjtcblx0XHR9XG5cdFx0aWYgKGNvbmZpZy5zZW1hbnRpY0NvbnRleHQgIT09IFNlbWFudGljQ29udGV4dC5OT05FKSB7XG5cdFx0XHR0aGlzLmhhc1NlbWFudGljQ29udGV4dCA9IHRydWU7XG5cdFx0fVxuXHRcdGlmIChjb25maWcucmVhY2hlc0ludG9PdXRlckNvbnRleHQgPiAwKSB7XG5cdFx0XHR0aGlzLmRpcHNJbnRvT3V0ZXJDb250ZXh0ID0gdHJ1ZTtcblx0XHR9XG5cdFx0Y29uc3QgZXhpc3RpbmcgPSB0aGlzLmNvbmZpZ0xvb2t1cC5hZGQoY29uZmlnKTtcblx0XHRpZiAoZXhpc3RpbmcgPT09IGNvbmZpZykge1xuXHRcdFx0dGhpcy5jYWNoZWRIYXNoQ29kZSA9IC0xO1xuXHRcdFx0dGhpcy5jb25maWdzLnB1c2goY29uZmlnKTsgLy8gdHJhY2sgb3JkZXIgaGVyZVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdC8vIGEgcHJldmlvdXMgKHMsaSxwaSxfKSwgbWVyZ2Ugd2l0aCBpdCBhbmQgc2F2ZSByZXN1bHRcblx0XHRjb25zdCByb290SXNXaWxkY2FyZCA9ICF0aGlzLmZ1bGxDdHg7XG5cdFx0Y29uc3QgbWVyZ2VkID0gbWVyZ2UoZXhpc3RpbmcuY29udGV4dCwgY29uZmlnLmNvbnRleHQsIHJvb3RJc1dpbGRjYXJkLCBtZXJnZUNhY2hlKTtcblx0XHQvKipcblx0XHQgKiBubyBuZWVkIHRvIGNoZWNrIGZvciBleGlzdGluZy5jb250ZXh0LCBjb25maWcuY29udGV4dCBpbiBjYWNoZVxuXHRcdCAqIHNpbmNlIG9ubHkgd2F5IHRvIGNyZWF0ZSBuZXcgZ3JhcGhzIGlzIFwiY2FsbCBydWxlXCIgYW5kIGhlcmUuIFdlXG5cdFx0ICogY2FjaGUgYXQgYm90aCBwbGFjZXNcblx0XHQgKi9cblx0XHRleGlzdGluZy5yZWFjaGVzSW50b091dGVyQ29udGV4dCA9IE1hdGgubWF4KCBleGlzdGluZy5yZWFjaGVzSW50b091dGVyQ29udGV4dCwgY29uZmlnLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0KTtcblx0XHQvLyBtYWtlIHN1cmUgdG8gcHJlc2VydmUgdGhlIHByZWNlZGVuY2UgZmlsdGVyIHN1cHByZXNzaW9uIGR1cmluZyB0aGUgbWVyZ2Vcblx0XHRpZiAoY29uZmlnLnByZWNlZGVuY2VGaWx0ZXJTdXBwcmVzc2VkKSB7XG5cdFx0XHRleGlzdGluZy5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZCA9IHRydWU7XG5cdFx0fVxuXHRcdGV4aXN0aW5nLmNvbnRleHQgPSBtZXJnZWQ7IC8vIHJlcGxhY2UgY29udGV4dDsgbm8gbmVlZCB0byBhbHQgbWFwcGluZ1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Z2V0U3RhdGVzKCkge1xuXHRcdGNvbnN0IHN0YXRlcyA9IG5ldyBVdGlscy5TZXQoKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29uZmlncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0c3RhdGVzLmFkZCh0aGlzLmNvbmZpZ3NbaV0uc3RhdGUpO1xuXHRcdH1cblx0XHRyZXR1cm4gc3RhdGVzO1xuXHR9XG5cblx0Z2V0UHJlZGljYXRlcygpIHtcblx0XHRjb25zdCBwcmVkcyA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb25maWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBjID0gdGhpcy5jb25maWdzW2ldLnNlbWFudGljQ29udGV4dDtcblx0XHRcdGlmIChjICE9PSBTZW1hbnRpY0NvbnRleHQuTk9ORSkge1xuXHRcdFx0XHRwcmVkcy5wdXNoKGMuc2VtYW50aWNDb250ZXh0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHByZWRzO1xuXHR9XG5cblx0b3B0aW1pemVDb25maWdzKGludGVycHJldGVyKSB7XG5cdFx0aWYgKHRoaXMucmVhZE9ubHkpIHtcblx0XHRcdHRocm93IFwiVGhpcyBzZXQgaXMgcmVhZG9ubHlcIjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY29uZmlnTG9va3VwLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29uZmlncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY29uZmlnID0gdGhpcy5jb25maWdzW2ldO1xuXHRcdFx0Y29uZmlnLmNvbnRleHQgPSBpbnRlcnByZXRlci5nZXRDYWNoZWRDb250ZXh0KGNvbmZpZy5jb250ZXh0KTtcblx0XHR9XG5cdH1cblxuXHRhZGRBbGwoY29sbCkge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY29sbC5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5hZGQoY29sbFtpXSk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGVxdWFscyhvdGhlcikge1xuXHRcdHJldHVybiB0aGlzID09PSBvdGhlciB8fFxuXHRcdFx0KG90aGVyIGluc3RhbmNlb2YgQVROQ29uZmlnU2V0ICYmXG5cdFx0XHRVdGlscy5lcXVhbEFycmF5cyh0aGlzLmNvbmZpZ3MsIG90aGVyLmNvbmZpZ3MpICYmXG5cdFx0XHR0aGlzLmZ1bGxDdHggPT09IG90aGVyLmZ1bGxDdHggJiZcblx0XHRcdHRoaXMudW5pcXVlQWx0ID09PSBvdGhlci51bmlxdWVBbHQgJiZcblx0XHRcdHRoaXMuY29uZmxpY3RpbmdBbHRzID09PSBvdGhlci5jb25mbGljdGluZ0FsdHMgJiZcblx0XHRcdHRoaXMuaGFzU2VtYW50aWNDb250ZXh0ID09PSBvdGhlci5oYXNTZW1hbnRpY0NvbnRleHQgJiZcblx0XHRcdHRoaXMuZGlwc0ludG9PdXRlckNvbnRleHQgPT09IG90aGVyLmRpcHNJbnRvT3V0ZXJDb250ZXh0KTtcblx0fVxuXG5cdGhhc2hDb2RlKCkge1xuXHRcdGNvbnN0IGhhc2ggPSBuZXcgVXRpbHMuSGFzaCgpO1xuXHRcdGhhc2gudXBkYXRlKHRoaXMuY29uZmlncyk7XG5cdFx0cmV0dXJuIGhhc2guZmluaXNoKCk7XG5cdH1cblxuXHR1cGRhdGVIYXNoQ29kZShoYXNoKSB7XG5cdFx0aWYgKHRoaXMucmVhZE9ubHkpIHtcblx0XHRcdGlmICh0aGlzLmNhY2hlZEhhc2hDb2RlID09PSAtMSkge1xuXHRcdFx0XHR0aGlzLmNhY2hlZEhhc2hDb2RlID0gdGhpcy5oYXNoQ29kZSgpO1xuXHRcdFx0fVxuXHRcdFx0aGFzaC51cGRhdGUodGhpcy5jYWNoZWRIYXNoQ29kZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhhc2gudXBkYXRlKHRoaXMuaGFzaENvZGUoKSk7XG5cdFx0fVxuXHR9XG5cblx0aXNFbXB0eSgpIHtcblx0XHRyZXR1cm4gdGhpcy5jb25maWdzLmxlbmd0aCA9PT0gMDtcblx0fVxuXG5cdGNvbnRhaW5zKGl0ZW0pIHtcblx0XHRpZiAodGhpcy5jb25maWdMb29rdXAgPT09IG51bGwpIHtcblx0XHRcdHRocm93IFwiVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkIGZvciByZWFkb25seSBzZXRzLlwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5jb25maWdMb29rdXAuY29udGFpbnMoaXRlbSk7XG5cdH1cblxuXHRjb250YWluc0Zhc3QoaXRlbSkge1xuXHRcdGlmICh0aGlzLmNvbmZpZ0xvb2t1cCA9PT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgXCJUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIHJlYWRvbmx5IHNldHMuXCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmNvbmZpZ0xvb2t1cC5jb250YWluc0Zhc3QoaXRlbSk7XG5cdH1cblxuXHRjbGVhcigpIHtcblx0XHRpZiAodGhpcy5yZWFkT25seSkge1xuXHRcdFx0dGhyb3cgXCJUaGlzIHNldCBpcyByZWFkb25seVwiO1xuXHRcdH1cblx0XHR0aGlzLmNvbmZpZ3MgPSBbXTtcblx0XHR0aGlzLmNhY2hlZEhhc2hDb2RlID0gLTE7XG5cdFx0dGhpcy5jb25maWdMb29rdXAgPSBuZXcgVXRpbHMuU2V0KCk7XG5cdH1cblxuXHRzZXRSZWFkb25seShyZWFkT25seSkge1xuXHRcdHRoaXMucmVhZE9ubHkgPSByZWFkT25seTtcblx0XHRpZiAocmVhZE9ubHkpIHtcblx0XHRcdHRoaXMuY29uZmlnTG9va3VwID0gbnVsbDsgLy8gY2FuJ3QgbW9kLCBubyBuZWVkIGZvciBsb29rdXAgY2FjaGVcblx0XHR9XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gVXRpbHMuYXJyYXlUb1N0cmluZyh0aGlzLmNvbmZpZ3MpICtcblx0XHRcdCh0aGlzLmhhc1NlbWFudGljQ29udGV4dCA/IFwiLGhhc1NlbWFudGljQ29udGV4dD1cIiArIHRoaXMuaGFzU2VtYW50aWNDb250ZXh0IDogXCJcIikgK1xuXHRcdFx0KHRoaXMudW5pcXVlQWx0ICE9PSBBVE4uSU5WQUxJRF9BTFRfTlVNQkVSID8gXCIsdW5pcXVlQWx0PVwiICsgdGhpcy51bmlxdWVBbHQgOiBcIlwiKSArXG5cdFx0XHQodGhpcy5jb25mbGljdGluZ0FsdHMgIT09IG51bGwgPyBcIixjb25mbGljdGluZ0FsdHM9XCIgKyB0aGlzLmNvbmZsaWN0aW5nQWx0cyA6IFwiXCIpICtcblx0XHRcdCh0aGlzLmRpcHNJbnRvT3V0ZXJDb250ZXh0ID8gXCIsZGlwc0ludG9PdXRlckNvbnRleHRcIiA6IFwiXCIpO1xuXHR9XG5cblx0Z2V0IGl0ZW1zKCl7XG5cdFx0cmV0dXJuIHRoaXMuY29uZmlncztcblx0fVxuXG5cdGdldCBsZW5ndGgoKXtcblx0XHRyZXR1cm4gdGhpcy5jb25maWdzLmxlbmd0aDtcblx0fVxufVxuXG5cbmNsYXNzIE9yZGVyZWRBVE5Db25maWdTZXQgZXh0ZW5kcyBBVE5Db25maWdTZXQge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuY29uZmlnTG9va3VwID0gbmV3IFV0aWxzLlNldCgpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRBVE5Db25maWdTZXQsXG5cdE9yZGVyZWRBVE5Db25maWdTZXRcbn1cbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY2xhc3MgQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucyB7XG5cdGNvbnN0cnVjdG9yKGNvcHlGcm9tKSB7XG5cdFx0aWYoY29weUZyb209PT11bmRlZmluZWQpIHtcblx0XHRcdGNvcHlGcm9tID0gbnVsbDtcblx0XHR9XG5cdFx0dGhpcy5yZWFkT25seSA9IGZhbHNlO1xuXHRcdHRoaXMudmVyaWZ5QVROID0gY29weUZyb209PT1udWxsID8gdHJ1ZSA6IGNvcHlGcm9tLnZlcmlmeUFUTjtcblx0XHR0aGlzLmdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb25zID0gY29weUZyb209PT1udWxsID8gZmFsc2UgOiBjb3B5RnJvbS5nZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9ucztcblx0fVxufVxuXG5BVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zLmRlZmF1bHRPcHRpb25zID0gbmV3IEFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMoKTtcbkFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMuZGVmYXVsdE9wdGlvbnMucmVhZE9ubHkgPSB0cnVlO1xuXG4vLyAgICBkZWYgX19zZXRhdHRyX18oc2VsZiwga2V5LCB2YWx1ZSk6XG4vLyAgICAgICAgaWYga2V5IT1cInJlYWRPbmx5XCIgYW5kIHNlbGYucmVhZE9ubHk6XG4vLyAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbihcIlRoZSBvYmplY3QgaXMgcmVhZCBvbmx5LlwiKVxuLy8gICAgICAgIHN1cGVyKHR5cGUoc2VsZiksIHNlbGYpLl9fc2V0YXR0cl9fKGtleSx2YWx1ZSlcblxubW9kdWxlLmV4cG9ydHMgPSBBVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zXG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuLy4uL1Rva2VuJyk7XG5jb25zdCBBVE4gPSByZXF1aXJlKCcuL0FUTicpO1xuY29uc3QgQVROVHlwZSA9IHJlcXVpcmUoJy4vQVROVHlwZScpO1xuXG5jb25zdCB7XG4gICAgQVROU3RhdGUsXG4gICAgQmFzaWNTdGF0ZSxcbiAgICBEZWNpc2lvblN0YXRlLFxuICAgIEJsb2NrU3RhcnRTdGF0ZSxcbiAgICBCbG9ja0VuZFN0YXRlLFxuICAgIExvb3BFbmRTdGF0ZSxcbiAgICBSdWxlU3RhcnRTdGF0ZSxcbiAgICBSdWxlU3RvcFN0YXRlLFxuICAgIFRva2Vuc1N0YXJ0U3RhdGUsXG4gICAgUGx1c0xvb3BiYWNrU3RhdGUsXG4gICAgU3Rhckxvb3BiYWNrU3RhdGUsXG4gICAgU3Rhckxvb3BFbnRyeVN0YXRlLFxuICAgIFBsdXNCbG9ja1N0YXJ0U3RhdGUsXG4gICAgU3RhckJsb2NrU3RhcnRTdGF0ZSxcbiAgICBCYXNpY0Jsb2NrU3RhcnRTdGF0ZVxufSA9IHJlcXVpcmUoJy4vQVROU3RhdGUnKTtcblxuY29uc3Qge1xuICAgIFRyYW5zaXRpb24sXG4gICAgQXRvbVRyYW5zaXRpb24sXG4gICAgU2V0VHJhbnNpdGlvbixcbiAgICBOb3RTZXRUcmFuc2l0aW9uLFxuICAgIFJ1bGVUcmFuc2l0aW9uLFxuICAgIFJhbmdlVHJhbnNpdGlvbixcbiAgICBBY3Rpb25UcmFuc2l0aW9uLFxuICAgIEVwc2lsb25UcmFuc2l0aW9uLFxuICAgIFdpbGRjYXJkVHJhbnNpdGlvbixcbiAgICBQcmVkaWNhdGVUcmFuc2l0aW9uLFxuICAgIFByZWNlZGVuY2VQcmVkaWNhdGVUcmFuc2l0aW9uXG59ID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uJylcblxuY29uc3Qge0ludGVydmFsU2V0fSA9IHJlcXVpcmUoJy4vLi4vSW50ZXJ2YWxTZXQnKTtcbmNvbnN0IEFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMgPSByZXF1aXJlKCcuL0FUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMnKTtcblxuY29uc3Qge1xuICAgIExleGVyQWN0aW9uVHlwZSxcbiAgICBMZXhlclNraXBBY3Rpb24sXG4gICAgTGV4ZXJDaGFubmVsQWN0aW9uLFxuICAgIExleGVyQ3VzdG9tQWN0aW9uLFxuICAgIExleGVyTW9yZUFjdGlvbixcbiAgICBMZXhlclR5cGVBY3Rpb24sXG4gICAgTGV4ZXJQdXNoTW9kZUFjdGlvbixcbiAgICBMZXhlclBvcE1vZGVBY3Rpb24sXG4gICAgTGV4ZXJNb2RlQWN0aW9uLFxufSA9IHJlcXVpcmUoJy4vTGV4ZXJBY3Rpb24nKTtcblxuLy8gVGhpcyBpcyB0aGUgZWFybGllc3Qgc3VwcG9ydGVkIHNlcmlhbGl6ZWQgVVVJRC5cbi8vIHN0aWNrIHRvIHNlcmlhbGl6ZWQgdmVyc2lvbiBmb3Igbm93LCB3ZSBkb24ndCBuZWVkIGEgVVVJRCBpbnN0YW5jZVxuY29uc3QgQkFTRV9TRVJJQUxJWkVEX1VVSUQgPSBcIkFBREI4RDdFLUFFRUYtNDQxNS1BRDJCLTgyMDRENkNGMDQyRVwiO1xuXG4vL1xuLy8gVGhpcyBVVUlEIGluZGljYXRlcyB0aGUgc2VyaWFsaXplZCBBVE4gY29udGFpbnMgdHdvIHNldHMgb2Zcbi8vIEludGVydmFsU2V0cywgd2hlcmUgdGhlIHNlY29uZCBzZXQncyB2YWx1ZXMgYXJlIGVuY29kZWQgYXNcbi8vIDMyLWJpdCBpbnRlZ2VycyB0byBzdXBwb3J0IHRoZSBmdWxsIFVuaWNvZGUgU01QIHJhbmdlIHVwIHRvIFUrMTBGRkZGLlxuLy9cbmNvbnN0IEFEREVEX1VOSUNPREVfU01QID0gXCI1OTYyNzc4NC0zQkU1LTQxN0EtQjlFQi04MTMxQTcyODYwODlcIjtcblxuLy8gVGhpcyBsaXN0IGNvbnRhaW5zIGFsbCBvZiB0aGUgY3VycmVudGx5IHN1cHBvcnRlZCBVVUlEcywgb3JkZXJlZCBieSB3aGVuXG4vLyB0aGUgZmVhdHVyZSBmaXJzdCBhcHBlYXJlZCBpbiB0aGlzIGJyYW5jaC5cbmNvbnN0IFNVUFBPUlRFRF9VVUlEUyA9IFsgQkFTRV9TRVJJQUxJWkVEX1VVSUQsIEFEREVEX1VOSUNPREVfU01QIF07XG5cbmNvbnN0IFNFUklBTElaRURfVkVSU0lPTiA9IDM7XG5cbi8vIFRoaXMgaXMgdGhlIGN1cnJlbnQgc2VyaWFsaXplZCBVVUlELlxuY29uc3QgU0VSSUFMSVpFRF9VVUlEID0gQURERURfVU5JQ09ERV9TTVA7XG5cbmZ1bmN0aW9uIGluaXRBcnJheSggbGVuZ3RoLCB2YWx1ZSkge1xuXHRjb25zdCB0bXAgPSBbXTtcblx0dG1wW2xlbmd0aC0xXSA9IHZhbHVlO1xuXHRyZXR1cm4gdG1wLm1hcChmdW5jdGlvbihpKSB7cmV0dXJuIHZhbHVlO30pO1xufVxuXG5jbGFzcyBBVE5EZXNlcmlhbGl6ZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblxuICAgICAgICBpZiAoIG9wdGlvbnM9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMgPT09IG51bGwgKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy5kZWZhdWx0T3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc2VyaWFsaXphdGlvbk9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnN0YXRlRmFjdG9yaWVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5hY3Rpb25GYWN0b3JpZXMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgYSBwYXJ0aWN1bGFyIHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24gb2YgYW4gQVROIHN1cHBvcnRzXG4gICAgICogYSBwYXJ0aWN1bGFyIGZlYXR1cmUsIGlkZW50aWZpZWQgYnkgdGhlIHtAbGluayBVVUlEfSB1c2VkIGZvciBzZXJpYWxpemluZ1xuICAgICAqIHRoZSBBVE4gYXQgdGhlIHRpbWUgdGhlIGZlYXR1cmUgd2FzIGZpcnN0IGludHJvZHVjZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmVhdHVyZSBUaGUge0BsaW5rIFVVSUR9IG1hcmtpbmcgdGhlIGZpcnN0IHRpbWUgdGhlIGZlYXR1cmUgd2FzXG4gICAgICogc3VwcG9ydGVkIGluIHRoZSBzZXJpYWxpemVkIEFUTi5cbiAgICAgKiBAcGFyYW0gYWN0dWFsVXVpZCBUaGUge0BsaW5rIFVVSUR9IG9mIHRoZSBhY3R1YWwgc2VyaWFsaXplZCBBVE4gd2hpY2ggaXNcbiAgICAgKiBjdXJyZW50bHkgYmVpbmcgZGVzZXJpYWxpemVkLlxuICAgICAqIEByZXR1cm4ge0Bjb2RlIHRydWV9IGlmIHRoZSB7QGNvZGUgYWN0dWFsVXVpZH0gdmFsdWUgcmVwcmVzZW50cyBhXG4gICAgICogc2VyaWFsaXplZCBBVE4gYXQgb3IgYWZ0ZXIgdGhlIGZlYXR1cmUgaWRlbnRpZmllZCBieSB7QGNvZGUgZmVhdHVyZX0gd2FzXG4gICAgICogaW50cm9kdWNlZDsgb3RoZXJ3aXNlLCB7QGNvZGUgZmFsc2V9LlxuICAgICovXG4gICAgaXNGZWF0dXJlU3VwcG9ydGVkKGZlYXR1cmUsIGFjdHVhbFV1aWQpIHtcbiAgICAgICAgY29uc3QgaWR4MSA9IFNVUFBPUlRFRF9VVUlEUy5pbmRleE9mKGZlYXR1cmUpO1xuICAgICAgICBpZiAoaWR4MTwwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWR4MiA9IFNVUFBPUlRFRF9VVUlEUy5pbmRleE9mKGFjdHVhbFV1aWQpO1xuICAgICAgICByZXR1cm4gaWR4MiA+PSBpZHgxO1xuICAgIH1cblxuICAgIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICAgICAgdGhpcy5yZXNldChkYXRhKTtcbiAgICAgICAgdGhpcy5jaGVja1ZlcnNpb24oKTtcbiAgICAgICAgdGhpcy5jaGVja1VVSUQoKTtcbiAgICAgICAgY29uc3QgYXRuID0gdGhpcy5yZWFkQVROKCk7XG4gICAgICAgIHRoaXMucmVhZFN0YXRlcyhhdG4pO1xuICAgICAgICB0aGlzLnJlYWRSdWxlcyhhdG4pO1xuICAgICAgICB0aGlzLnJlYWRNb2RlcyhhdG4pO1xuICAgICAgICBjb25zdCBzZXRzID0gW107XG4gICAgICAgIC8vIEZpcnN0LCBkZXNlcmlhbGl6ZSBzZXRzIHdpdGggMTYtYml0IGFyZ3VtZW50cyA8PSBVK0ZGRkYuXG4gICAgICAgIHRoaXMucmVhZFNldHMoYXRuLCBzZXRzLCB0aGlzLnJlYWRJbnQuYmluZCh0aGlzKSk7XG4gICAgICAgIC8vIE5leHQsIGlmIHRoZSBBVE4gd2FzIHNlcmlhbGl6ZWQgd2l0aCB0aGUgVW5pY29kZSBTTVAgZmVhdHVyZSxcbiAgICAgICAgLy8gZGVzZXJpYWxpemUgc2V0cyB3aXRoIDMyLWJpdCBhcmd1bWVudHMgPD0gVSsxMEZGRkYuXG4gICAgICAgIGlmICh0aGlzLmlzRmVhdHVyZVN1cHBvcnRlZChBRERFRF9VTklDT0RFX1NNUCwgdGhpcy51dWlkKSkge1xuICAgICAgICAgICAgdGhpcy5yZWFkU2V0cyhhdG4sIHNldHMsIHRoaXMucmVhZEludDMyLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVhZEVkZ2VzKGF0biwgc2V0cyk7XG4gICAgICAgIHRoaXMucmVhZERlY2lzaW9ucyhhdG4pO1xuICAgICAgICB0aGlzLnJlYWRMZXhlckFjdGlvbnMoYXRuKTtcbiAgICAgICAgdGhpcy5tYXJrUHJlY2VkZW5jZURlY2lzaW9ucyhhdG4pO1xuICAgICAgICB0aGlzLnZlcmlmeUFUTihhdG4pO1xuICAgICAgICBpZiAodGhpcy5kZXNlcmlhbGl6YXRpb25PcHRpb25zLmdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb25zICYmIGF0bi5ncmFtbWFyVHlwZSA9PT0gQVROVHlwZS5QQVJTRVIgKSB7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb25zKGF0bik7XG4gICAgICAgICAgICAvLyByZS12ZXJpZnkgYWZ0ZXIgbW9kaWZpY2F0aW9uXG4gICAgICAgICAgICB0aGlzLnZlcmlmeUFUTihhdG4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdG47XG4gICAgfVxuXG4gICAgcmVzZXQoZGF0YSkge1xuICAgICAgICBjb25zdCBhZGp1c3QgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gYy5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgcmV0dXJuIHY+MSAgPyB2LTIgOiB2ICsgNjU1MzQ7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHRlbXAgPSBkYXRhLnNwbGl0KFwiXCIpLm1hcChhZGp1c3QpO1xuICAgICAgICAvLyBkb24ndCBhZGp1c3QgdGhlIGZpcnN0IHZhbHVlIHNpbmNlIHRoYXQncyB0aGUgdmVyc2lvbiBudW1iZXJcbiAgICAgICAgdGVtcFswXSA9IGRhdGEuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgdGhpcy5kYXRhID0gdGVtcDtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgIH1cblxuICAgIGNoZWNrVmVyc2lvbigpIHtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICBpZiAoIHZlcnNpb24gIT09IFNFUklBTElaRURfVkVSU0lPTiApIHtcbiAgICAgICAgICAgIHRocm93IChcIkNvdWxkIG5vdCBkZXNlcmlhbGl6ZSBBVE4gd2l0aCB2ZXJzaW9uIFwiICsgdmVyc2lvbiArIFwiIChleHBlY3RlZCBcIiArIFNFUklBTElaRURfVkVSU0lPTiArIFwiKS5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja1VVSUQoKSB7XG4gICAgICAgIGNvbnN0IHV1aWQgPSB0aGlzLnJlYWRVVUlEKCk7XG4gICAgICAgIGlmIChTVVBQT1JURURfVVVJRFMuaW5kZXhPZih1dWlkKTwwKSB7XG4gICAgICAgICAgICB0aHJvdyAoXCJDb3VsZCBub3QgZGVzZXJpYWxpemUgQVROIHdpdGggVVVJRDogXCIgKyB1dWlkICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiAoZXhwZWN0ZWQgXCIgKyBTRVJJQUxJWkVEX1VVSUQgKyBcIiBvciBhIGxlZ2FjeSBVVUlEKS5cIiwgdXVpZCwgU0VSSUFMSVpFRF9VVUlEKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnV1aWQgPSB1dWlkO1xuICAgIH1cblxuICAgIHJlYWRBVE4oKSB7XG4gICAgICAgIGNvbnN0IGdyYW1tYXJUeXBlID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgIGNvbnN0IG1heFRva2VuVHlwZSA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICByZXR1cm4gbmV3IEFUTihncmFtbWFyVHlwZSwgbWF4VG9rZW5UeXBlKTtcbiAgICB9XG5cbiAgICByZWFkU3RhdGVzKGF0bikge1xuICAgICAgICBsZXQgaiwgcGFpciwgc3RhdGVOdW1iZXI7XG4gICAgICAgIGNvbnN0ICBsb29wQmFja1N0YXRlTnVtYmVycyA9IFtdO1xuICAgICAgICBjb25zdCAgZW5kU3RhdGVOdW1iZXJzID0gW107XG4gICAgICAgIGNvbnN0ICBuc3RhdGVzID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgIGZvcihsZXQgaT0wOyBpPG5zdGF0ZXM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgIHN0eXBlID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICAvLyBpZ25vcmUgYmFkIHR5cGUgb2Ygc3RhdGVzXG4gICAgICAgICAgICBpZiAoc3R5cGU9PT1BVE5TdGF0ZS5JTlZBTElEX1RZUEUpIHtcbiAgICAgICAgICAgICAgICBhdG4uYWRkU3RhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcnVsZUluZGV4ID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBpZiAocnVsZUluZGV4ID09PSAweEZGRkYpIHtcbiAgICAgICAgICAgICAgICBydWxlSW5kZXggPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0ICBzID0gdGhpcy5zdGF0ZUZhY3Rvcnkoc3R5cGUsIHJ1bGVJbmRleCk7XG4gICAgICAgICAgICBpZiAoc3R5cGUgPT09IEFUTlN0YXRlLkxPT1BfRU5EKSB7IC8vIHNwZWNpYWwgY2FzZVxuICAgICAgICAgICAgICAgIGNvbnN0ICBsb29wQmFja1N0YXRlTnVtYmVyID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICAgICAgbG9vcEJhY2tTdGF0ZU51bWJlcnMucHVzaChbcywgbG9vcEJhY2tTdGF0ZU51bWJlcl0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmKHMgaW5zdGFuY2VvZiBCbG9ja1N0YXJ0U3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCAgZW5kU3RhdGVOdW1iZXIgPSB0aGlzLnJlYWRJbnQoKTtcbiAgICAgICAgICAgICAgICBlbmRTdGF0ZU51bWJlcnMucHVzaChbcywgZW5kU3RhdGVOdW1iZXJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0bi5hZGRTdGF0ZShzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkZWxheSB0aGUgYXNzaWdubWVudCBvZiBsb29wIGJhY2sgYW5kIGVuZCBzdGF0ZXMgdW50aWwgd2Uga25vdyBhbGwgdGhlXG4gICAgICAgIC8vIHN0YXRlIGluc3RhbmNlcyBoYXZlIGJlZW4gaW5pdGlhbGl6ZWRcbiAgICAgICAgZm9yIChqPTA7IGo8bG9vcEJhY2tTdGF0ZU51bWJlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBsb29wQmFja1N0YXRlTnVtYmVyc1tqXTtcbiAgICAgICAgICAgIHBhaXJbMF0ubG9vcEJhY2tTdGF0ZSA9IGF0bi5zdGF0ZXNbcGFpclsxXV07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGo9MDsgajxlbmRTdGF0ZU51bWJlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBlbmRTdGF0ZU51bWJlcnNbal07XG4gICAgICAgICAgICBwYWlyWzBdLmVuZFN0YXRlID0gYXRuLnN0YXRlc1twYWlyWzFdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBudW1Ob25HcmVlZHlTdGF0ZXMgPSB0aGlzLnJlYWRJbnQoKTtcbiAgICAgICAgZm9yIChqPTA7IGo8bnVtTm9uR3JlZWR5U3RhdGVzOyBqKyspIHtcbiAgICAgICAgICAgIHN0YXRlTnVtYmVyID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBhdG4uc3RhdGVzW3N0YXRlTnVtYmVyXS5ub25HcmVlZHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG51bVByZWNlZGVuY2VTdGF0ZXMgPSB0aGlzLnJlYWRJbnQoKTtcbiAgICAgICAgZm9yIChqPTA7IGo8bnVtUHJlY2VkZW5jZVN0YXRlczsgaisrKSB7XG4gICAgICAgICAgICBzdGF0ZU51bWJlciA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICAgICAgYXRuLnN0YXRlc1tzdGF0ZU51bWJlcl0uaXNQcmVjZWRlbmNlUnVsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWFkUnVsZXMoYXRuKSB7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBjb25zdCBucnVsZXMgPSB0aGlzLnJlYWRJbnQoKTtcbiAgICAgICAgaWYgKGF0bi5ncmFtbWFyVHlwZSA9PT0gQVROVHlwZS5MRVhFUiApIHtcbiAgICAgICAgICAgIGF0bi5ydWxlVG9Ub2tlblR5cGUgPSBpbml0QXJyYXkobnJ1bGVzLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBhdG4ucnVsZVRvU3RhcnRTdGF0ZSA9IGluaXRBcnJheShucnVsZXMsIDApO1xuICAgICAgICBmb3IgKGk9MDsgaTxucnVsZXM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICAgICAgYXRuLnJ1bGVUb1N0YXJ0U3RhdGVbaV0gPSBhdG4uc3RhdGVzW3NdO1xuICAgICAgICAgICAgaWYgKCBhdG4uZ3JhbW1hclR5cGUgPT09IEFUTlR5cGUuTEVYRVIgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRva2VuVHlwZSA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlblR5cGUgPT09IDB4RkZGRikge1xuICAgICAgICAgICAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlbi5FT0Y7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF0bi5ydWxlVG9Ub2tlblR5cGVbaV0gPSB0b2tlblR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXRuLnJ1bGVUb1N0b3BTdGF0ZSA9IGluaXRBcnJheShucnVsZXMsIDApO1xuICAgICAgICBmb3IgKGk9MDsgaTxhdG4uc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGF0bi5zdGF0ZXNbaV07XG4gICAgICAgICAgICBpZiAoIShzdGF0ZSBpbnN0YW5jZW9mIFJ1bGVTdG9wU3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdG4ucnVsZVRvU3RvcFN0YXRlW3N0YXRlLnJ1bGVJbmRleF0gPSBzdGF0ZTtcbiAgICAgICAgICAgIGF0bi5ydWxlVG9TdGFydFN0YXRlW3N0YXRlLnJ1bGVJbmRleF0uc3RvcFN0YXRlID0gc3RhdGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWFkTW9kZXMoYXRuKSB7XG4gICAgICAgIGNvbnN0IG5tb2RlcyA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGk8bm1vZGVzOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBhdG4ubW9kZVRvU3RhcnRTdGF0ZS5wdXNoKGF0bi5zdGF0ZXNbc10pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVhZFNldHMoYXRuLCBzZXRzLCByZWFkVW5pY29kZSkge1xuICAgICAgICBjb25zdCBtID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxtOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGlzZXQgPSBuZXcgSW50ZXJ2YWxTZXQoKTtcbiAgICAgICAgICAgIHNldHMucHVzaChpc2V0KTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLnJlYWRJbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5zRW9mID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBpZiAoY29udGFpbnNFb2YhPT0wKSB7XG4gICAgICAgICAgICAgICAgaXNldC5hZGRPbmUoLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPG47IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGkxID0gcmVhZFVuaWNvZGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpMiA9IHJlYWRVbmljb2RlKCk7XG4gICAgICAgICAgICAgICAgaXNldC5hZGRSYW5nZShpMSwgaTIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVhZEVkZ2VzKGF0biwgc2V0cykge1xuICAgICAgICBsZXQgaSwgaiwgc3RhdGUsIHRyYW5zLCB0YXJnZXQ7XG4gICAgICAgIGNvbnN0IG5lZGdlcyA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICBmb3IgKGk9MDsgaTxuZWRnZXM7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc3JjID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBjb25zdCB0cmcgPSB0aGlzLnJlYWRJbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IHR0eXBlID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBjb25zdCBhcmcxID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBjb25zdCBhcmcyID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBjb25zdCBhcmczID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICB0cmFucyA9IHRoaXMuZWRnZUZhY3RvcnkoYXRuLCB0dHlwZSwgc3JjLCB0cmcsIGFyZzEsIGFyZzIsIGFyZzMsIHNldHMpO1xuICAgICAgICAgICAgY29uc3Qgc3JjU3RhdGUgPSBhdG4uc3RhdGVzW3NyY107XG4gICAgICAgICAgICBzcmNTdGF0ZS5hZGRUcmFuc2l0aW9uKHRyYW5zKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlZGdlcyBmb3IgcnVsZSBzdG9wIHN0YXRlcyBjYW4gYmUgZGVyaXZlZCwgc28gdGhleSBhcmVuJ3Qgc2VyaWFsaXplZFxuICAgICAgICBmb3IgKGk9MDsgaTxhdG4uc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGF0bi5zdGF0ZXNbaV07XG4gICAgICAgICAgICBmb3IgKGo9MDsgajxzdGF0ZS50cmFuc2l0aW9ucy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzdGF0ZS50cmFuc2l0aW9uc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgUnVsZVRyYW5zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgb3V0ZXJtb3N0UHJlY2VkZW5jZVJldHVybiA9IC0xO1xuICAgICAgICAgICAgICAgIGlmIChhdG4ucnVsZVRvU3RhcnRTdGF0ZVt0LnRhcmdldC5ydWxlSW5kZXhdLmlzUHJlY2VkZW5jZVJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQucHJlY2VkZW5jZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ZXJtb3N0UHJlY2VkZW5jZVJldHVybiA9IHQudGFyZ2V0LnJ1bGVJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyYW5zID0gbmV3IEVwc2lsb25UcmFuc2l0aW9uKHQuZm9sbG93U3RhdGUsIG91dGVybW9zdFByZWNlZGVuY2VSZXR1cm4pO1xuICAgICAgICAgICAgICAgIGF0bi5ydWxlVG9TdG9wU3RhdGVbdC50YXJnZXQucnVsZUluZGV4XS5hZGRUcmFuc2l0aW9uKHRyYW5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaT0wOyBpPGF0bi5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN0YXRlID0gYXRuLnN0YXRlc1tpXTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIEJsb2NrU3RhcnRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8ga25vdyB0aGUgZW5kIHN0YXRlIHRvIHNldCBpdHMgc3RhcnQgc3RhdGVcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZW5kU3RhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgKFwiSWxsZWdhbFN0YXRlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBibG9jayBlbmQgc3RhdGVzIGNhbiBvbmx5IGJlIGFzc29jaWF0ZWQgdG8gYSBzaW5nbGUgYmxvY2sgc3RhcnRcbiAgICAgICAgICAgICAgICAvLyBzdGF0ZVxuICAgICAgICAgICAgICAgIGlmICggc3RhdGUuZW5kU3RhdGUuc3RhcnRTdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAoXCJJbGxlZ2FsU3RhdGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlLmVuZFN0YXRlLnN0YXJ0U3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIFBsdXNMb29wYmFja1N0YXRlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqPTA7IGo8c3RhdGUudHJhbnNpdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gc3RhdGUudHJhbnNpdGlvbnNbal0udGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgUGx1c0Jsb2NrU3RhcnRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Lmxvb3BCYWNrU3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgaW5zdGFuY2VvZiBTdGFyTG9vcGJhY2tTdGF0ZSkge1xuICAgICAgICAgICAgICAgIGZvciAoaj0wOyBqPHN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHN0YXRlLnRyYW5zaXRpb25zW2pdLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFN0YXJMb29wRW50cnlTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Lmxvb3BCYWNrU3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlYWREZWNpc2lvbnMoYXRuKSB7XG4gICAgICAgIGNvbnN0IG5kZWNpc2lvbnMgPSB0aGlzLnJlYWRJbnQoKTtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPG5kZWNpc2lvbnM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICAgICAgY29uc3QgZGVjU3RhdGUgPSBhdG4uc3RhdGVzW3NdO1xuICAgICAgICAgICAgYXRuLmRlY2lzaW9uVG9TdGF0ZS5wdXNoKGRlY1N0YXRlKTtcbiAgICAgICAgICAgIGRlY1N0YXRlLmRlY2lzaW9uID0gaTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlYWRMZXhlckFjdGlvbnMoYXRuKSB7XG4gICAgICAgIGlmIChhdG4uZ3JhbW1hclR5cGUgPT09IEFUTlR5cGUuTEVYRVIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgICAgICBhdG4ubGV4ZXJBY3Rpb25zID0gaW5pdEFycmF5KGNvdW50LCBudWxsKTtcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uVHlwZSA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhMSA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhMSA9PT0gMHhGRkZGKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGExID0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBkYXRhMiA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhMiA9PT0gMHhGRkZGKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEyID0gLTE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXRuLmxleGVyQWN0aW9uc1tpXSA9IHRoaXMubGV4ZXJBY3Rpb25GYWN0b3J5KGFjdGlvblR5cGUsIGRhdGExLCBkYXRhMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9ucyhhdG4pIHtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gYXRuLnJ1bGVUb1N0YXJ0U3RhdGUubGVuZ3RoO1xuICAgICAgICBmb3IoaT0wOyBpPGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGF0bi5ydWxlVG9Ub2tlblR5cGVbaV0gPSBhdG4ubWF4VG9rZW5UeXBlICsgaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGk9MDsgaTxjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb24oYXRuLCBpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb24oYXRuLCBpZHgpIHtcbiAgICAgICAgbGV0IGksIHN0YXRlO1xuICAgICAgICBjb25zdCBieXBhc3NTdGFydCA9IG5ldyBCYXNpY0Jsb2NrU3RhcnRTdGF0ZSgpO1xuICAgICAgICBieXBhc3NTdGFydC5ydWxlSW5kZXggPSBpZHg7XG4gICAgICAgIGF0bi5hZGRTdGF0ZShieXBhc3NTdGFydCk7XG5cbiAgICAgICAgY29uc3QgYnlwYXNzU3RvcCA9IG5ldyBCbG9ja0VuZFN0YXRlKCk7XG4gICAgICAgIGJ5cGFzc1N0b3AucnVsZUluZGV4ID0gaWR4O1xuICAgICAgICBhdG4uYWRkU3RhdGUoYnlwYXNzU3RvcCk7XG5cbiAgICAgICAgYnlwYXNzU3RhcnQuZW5kU3RhdGUgPSBieXBhc3NTdG9wO1xuICAgICAgICBhdG4uZGVmaW5lRGVjaXNpb25TdGF0ZShieXBhc3NTdGFydCk7XG5cbiAgICAgICAgYnlwYXNzU3RvcC5zdGFydFN0YXRlID0gYnlwYXNzU3RhcnQ7XG5cbiAgICAgICAgbGV0IGV4Y2x1ZGVUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgICAgbGV0IGVuZFN0YXRlID0gbnVsbDtcblxuICAgICAgICBpZiAoYXRuLnJ1bGVUb1N0YXJ0U3RhdGVbaWR4XS5pc1ByZWNlZGVuY2VSdWxlKSB7XG4gICAgICAgICAgICAvLyB3cmFwIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgcnVsZSB0byB0aGUgU3Rhckxvb3BFbnRyeVN0YXRlXG4gICAgICAgICAgICBlbmRTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICBmb3IoaT0wOyBpPGF0bi5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGF0bi5zdGF0ZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVJc0VuZFN0YXRlRm9yKHN0YXRlLCBpZHgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZFN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVUcmFuc2l0aW9uID0gc3RhdGUubG9vcEJhY2tTdGF0ZS50cmFuc2l0aW9uc1swXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4Y2x1ZGVUcmFuc2l0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgKFwiQ291bGRuJ3QgaWRlbnRpZnkgZmluYWwgc3RhdGUgb2YgdGhlIHByZWNlZGVuY2UgcnVsZSBwcmVmaXggc2VjdGlvbi5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmRTdGF0ZSA9IGF0bi5ydWxlVG9TdG9wU3RhdGVbaWR4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFsbCBub24tZXhjbHVkZWQgdHJhbnNpdGlvbnMgdGhhdCBjdXJyZW50bHkgdGFyZ2V0IGVuZCBzdGF0ZSBuZWVkIHRvXG4gICAgICAgIC8vIHRhcmdldCBibG9ja0VuZCBpbnN0ZWFkXG4gICAgICAgIGZvcihpPTA7IGk8YXRuLnN0YXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3RhdGUgPSBhdG4uc3RhdGVzW2ldO1xuICAgICAgICAgICAgZm9yKGxldCBqPTA7IGo8c3RhdGUudHJhbnNpdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2l0aW9uID0gc3RhdGUudHJhbnNpdGlvbnNbal07XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24gPT09IGV4Y2x1ZGVUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHJhbnNpdGlvbi50YXJnZXQgPT09IGVuZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24udGFyZ2V0ID0gYnlwYXNzU3RvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhbGwgdHJhbnNpdGlvbnMgbGVhdmluZyB0aGUgcnVsZSBzdGFydCBzdGF0ZSBuZWVkIHRvIGxlYXZlIGJsb2NrU3RhcnRcbiAgICAgICAgLy8gaW5zdGVhZFxuICAgICAgICBjb25zdCBydWxlVG9TdGFydFN0YXRlID0gYXRuLnJ1bGVUb1N0YXJ0U3RhdGVbaWR4XTtcbiAgICAgICAgY29uc3QgY291bnQgPSBydWxlVG9TdGFydFN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBjb3VudCA+IDApIHtcbiAgICAgICAgICAgIGJ5cGFzc1N0YXJ0LmFkZFRyYW5zaXRpb24ocnVsZVRvU3RhcnRTdGF0ZS50cmFuc2l0aW9uc1tjb3VudC0xXSk7XG4gICAgICAgICAgICBydWxlVG9TdGFydFN0YXRlLnRyYW5zaXRpb25zID0gcnVsZVRvU3RhcnRTdGF0ZS50cmFuc2l0aW9ucy5zbGljZSgtMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbGluayB0aGUgbmV3IHN0YXRlc1xuICAgICAgICBhdG4ucnVsZVRvU3RhcnRTdGF0ZVtpZHhdLmFkZFRyYW5zaXRpb24obmV3IEVwc2lsb25UcmFuc2l0aW9uKGJ5cGFzc1N0YXJ0KSk7XG4gICAgICAgIGJ5cGFzc1N0b3AuYWRkVHJhbnNpdGlvbihuZXcgRXBzaWxvblRyYW5zaXRpb24oZW5kU3RhdGUpKTtcblxuICAgICAgICBjb25zdCBtYXRjaFN0YXRlID0gbmV3IEJhc2ljU3RhdGUoKTtcbiAgICAgICAgYXRuLmFkZFN0YXRlKG1hdGNoU3RhdGUpO1xuICAgICAgICBtYXRjaFN0YXRlLmFkZFRyYW5zaXRpb24obmV3IEF0b21UcmFuc2l0aW9uKGJ5cGFzc1N0b3AsIGF0bi5ydWxlVG9Ub2tlblR5cGVbaWR4XSkpO1xuICAgICAgICBieXBhc3NTdGFydC5hZGRUcmFuc2l0aW9uKG5ldyBFcHNpbG9uVHJhbnNpdGlvbihtYXRjaFN0YXRlKSk7XG4gICAgfVxuXG4gICAgc3RhdGVJc0VuZFN0YXRlRm9yKHN0YXRlLCBpZHgpIHtcbiAgICAgICAgaWYgKCBzdGF0ZS5ydWxlSW5kZXggIT09IGlkeCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoIHN0YXRlIGluc3RhbmNlb2YgU3Rhckxvb3BFbnRyeVN0YXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWF5YmVMb29wRW5kU3RhdGUgPSBzdGF0ZS50cmFuc2l0aW9uc1tzdGF0ZS50cmFuc2l0aW9ucy5sZW5ndGggLSAxXS50YXJnZXQ7XG4gICAgICAgIGlmICghKCBtYXliZUxvb3BFbmRTdGF0ZSBpbnN0YW5jZW9mIExvb3BFbmRTdGF0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXliZUxvb3BFbmRTdGF0ZS5lcHNpbG9uT25seVRyYW5zaXRpb25zICYmXG4gICAgICAgICAgICAobWF5YmVMb29wRW5kU3RhdGUudHJhbnNpdGlvbnNbMF0udGFyZ2V0IGluc3RhbmNlb2YgUnVsZVN0b3BTdGF0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW5hbHl6ZSB0aGUge0BsaW5rIFN0YXJMb29wRW50cnlTdGF0ZX0gc3RhdGVzIGluIHRoZSBzcGVjaWZpZWQgQVROIHRvIHNldFxuICAgICAqIHRoZSB7QGxpbmsgU3Rhckxvb3BFbnRyeVN0YXRlLy9pc1ByZWNlZGVuY2VEZWNpc2lvbn0gZmllbGQgdG8gdGhlXG4gICAgICogY29ycmVjdCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gYXRuIFRoZSBBVE4uXG4gICAgICovXG4gICAgbWFya1ByZWNlZGVuY2VEZWNpc2lvbnMoYXRuKSB7XG4gICAgICAgIGZvcihsZXQgaT0wOyBpPGF0bi5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gYXRuLnN0YXRlc1tpXTtcbiAgICAgICAgICAgIGlmICghKCBzdGF0ZSBpbnN0YW5jZW9mIFN0YXJMb29wRW50cnlTdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIGFuYWx5emUgdGhlIEFUTiB0byBkZXRlcm1pbmUgaWYgdGhpcyBBVE4gZGVjaXNpb24gc3RhdGUgaXMgdGhlXG4gICAgICAgICAgICAvLyBkZWNpc2lvbiBmb3IgdGhlIGNsb3N1cmUgYmxvY2sgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgYVxuICAgICAgICAgICAgLy8gcHJlY2VkZW5jZSBydWxlIHNob3VsZCBjb250aW51ZSBvciBjb21wbGV0ZS5cbiAgICAgICAgICAgIGlmICggYXRuLnJ1bGVUb1N0YXJ0U3RhdGVbc3RhdGUucnVsZUluZGV4XS5pc1ByZWNlZGVuY2VSdWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF5YmVMb29wRW5kU3RhdGUgPSBzdGF0ZS50cmFuc2l0aW9uc1tzdGF0ZS50cmFuc2l0aW9ucy5sZW5ndGggLSAxXS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKG1heWJlTG9vcEVuZFN0YXRlIGluc3RhbmNlb2YgTG9vcEVuZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF5YmVMb29wRW5kU3RhdGUuZXBzaWxvbk9ubHlUcmFuc2l0aW9ucyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXliZUxvb3BFbmRTdGF0ZS50cmFuc2l0aW9uc1swXS50YXJnZXQgaW5zdGFuY2VvZiBSdWxlU3RvcFN0YXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNQcmVjZWRlbmNlRGVjaXNpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmVyaWZ5QVROKGF0bikge1xuICAgICAgICBpZiAoIXRoaXMuZGVzZXJpYWxpemF0aW9uT3B0aW9ucy52ZXJpZnlBVE4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyB2ZXJpZnkgYXNzdW1wdGlvbnNcbiAgICAgICAgZm9yKGxldCBpPTA7IGk8YXRuLnN0YXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBhdG4uc3RhdGVzW2ldO1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNoZWNrQ29uZGl0aW9uKHN0YXRlLmVwc2lsb25Pbmx5VHJhbnNpdGlvbnMgfHwgc3RhdGUudHJhbnNpdGlvbnMubGVuZ3RoIDw9IDEpO1xuICAgICAgICAgICAgaWYgKHN0YXRlIGluc3RhbmNlb2YgUGx1c0Jsb2NrU3RhcnRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tDb25kaXRpb24oc3RhdGUubG9vcEJhY2tTdGF0ZSAhPT0gbnVsbCk7XG4gICAgICAgICAgICB9IGVsc2UgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIFN0YXJMb29wRW50cnlTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tDb25kaXRpb24oc3RhdGUubG9vcEJhY2tTdGF0ZSAhPT0gbnVsbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0NvbmRpdGlvbihzdGF0ZS50cmFuc2l0aW9ucy5sZW5ndGggPT09IDIpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS50cmFuc2l0aW9uc1swXS50YXJnZXQgaW5zdGFuY2VvZiBTdGFyQmxvY2tTdGFydFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tDb25kaXRpb24oc3RhdGUudHJhbnNpdGlvbnNbMV0udGFyZ2V0IGluc3RhbmNlb2YgTG9vcEVuZFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0NvbmRpdGlvbighc3RhdGUubm9uR3JlZWR5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLnRyYW5zaXRpb25zWzBdLnRhcmdldCBpbnN0YW5jZW9mIExvb3BFbmRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29uZGl0aW9uKHN0YXRlLnRyYW5zaXRpb25zWzFdLnRhcmdldCBpbnN0YW5jZW9mIFN0YXJCbG9ja1N0YXJ0U3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29uZGl0aW9uKHN0YXRlLm5vbkdyZWVkeSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3coXCJJbGxlZ2FsU3RhdGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSBpbnN0YW5jZW9mIFN0YXJMb29wYmFja1N0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0NvbmRpdGlvbihzdGF0ZS50cmFuc2l0aW9ucy5sZW5ndGggPT09IDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tDb25kaXRpb24oc3RhdGUudHJhbnNpdGlvbnNbMF0udGFyZ2V0IGluc3RhbmNlb2YgU3Rhckxvb3BFbnRyeVN0YXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgaW5zdGFuY2VvZiBMb29wRW5kU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29uZGl0aW9uKHN0YXRlLmxvb3BCYWNrU3RhdGUgIT09IG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSBpbnN0YW5jZW9mIFJ1bGVTdGFydFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0NvbmRpdGlvbihzdGF0ZS5zdG9wU3RhdGUgIT09IG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSBpbnN0YW5jZW9mIEJsb2NrU3RhcnRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tDb25kaXRpb24oc3RhdGUuZW5kU3RhdGUgIT09IG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSBpbnN0YW5jZW9mIEJsb2NrRW5kU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29uZGl0aW9uKHN0YXRlLnN0YXJ0U3RhdGUgIT09IG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSBpbnN0YW5jZW9mIERlY2lzaW9uU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29uZGl0aW9uKHN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aCA8PSAxIHx8IHN0YXRlLmRlY2lzaW9uID49IDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ29uZGl0aW9uKHN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aCA8PSAxIHx8IChzdGF0ZSBpbnN0YW5jZW9mIFJ1bGVTdG9wU3RhdGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrQ29uZGl0aW9uKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgICAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgPT09IHVuZGVmaW5lZCB8fCBtZXNzYWdlPT09bnVsbCkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIklsbGVnYWxTdGF0ZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVhZEludCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVt0aGlzLnBvcysrXTtcbiAgICB9XG5cbiAgICByZWFkSW50MzIoKSB7XG4gICAgICAgIGNvbnN0IGxvdyA9IHRoaXMucmVhZEludCgpO1xuICAgICAgICBjb25zdCBoaWdoID0gdGhpcy5yZWFkSW50KCk7XG4gICAgICAgIHJldHVybiBsb3cgfCAoaGlnaCA8PCAxNik7XG4gICAgfVxuXG4gICAgcmVhZExvbmcoKSB7XG4gICAgICAgIGNvbnN0IGxvdyA9IHRoaXMucmVhZEludDMyKCk7XG4gICAgICAgIGNvbnN0IGhpZ2ggPSB0aGlzLnJlYWRJbnQzMigpO1xuICAgICAgICByZXR1cm4gKGxvdyAmIDB4MDAwMDAwMDBGRkZGRkZGRikgfCAoaGlnaCA8PCAzMik7XG4gICAgfVxuXG4gICAgcmVhZFVVSUQoKSB7XG4gICAgICAgIGNvbnN0IGJiID0gW107XG4gICAgICAgIGZvcihsZXQgaT03O2k+PTA7aS0tKSB7XG4gICAgICAgICAgICBjb25zdCBpbnQgPSB0aGlzLnJlYWRJbnQoKTtcbiAgICAgICAgICAgIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICAgICAgICAgICAgYmJbKDIqaSkrMV0gPSBpbnQgJiAweEZGO1xuICAgICAgICAgICAgYmJbMippXSA9IChpbnQgPj4gOCkgJiAweEZGO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieXRlVG9IZXhbYmJbMF1dICsgYnl0ZVRvSGV4W2JiWzFdXSArXG4gICAgICAgIGJ5dGVUb0hleFtiYlsyXV0gKyBieXRlVG9IZXhbYmJbM11dICsgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2JiWzRdXSArIGJ5dGVUb0hleFtiYls1XV0gKyAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYmJbNl1dICsgYnl0ZVRvSGV4W2JiWzddXSArICctJyArXG4gICAgICAgIGJ5dGVUb0hleFtiYls4XV0gKyBieXRlVG9IZXhbYmJbOV1dICsgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2JiWzEwXV0gKyBieXRlVG9IZXhbYmJbMTFdXSArXG4gICAgICAgIGJ5dGVUb0hleFtiYlsxMl1dICsgYnl0ZVRvSGV4W2JiWzEzXV0gK1xuICAgICAgICBieXRlVG9IZXhbYmJbMTRdXSArIGJ5dGVUb0hleFtiYlsxNV1dO1xuICAgIH1cblxuICAgIGVkZ2VGYWN0b3J5KGF0biwgdHlwZSwgc3JjLCB0cmcsIGFyZzEsIGFyZzIsIGFyZzMsIHNldHMpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gYXRuLnN0YXRlc1t0cmddO1xuICAgICAgICBzd2l0Y2godHlwZSkge1xuICAgICAgICBjYXNlIFRyYW5zaXRpb24uRVBTSUxPTjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXBzaWxvblRyYW5zaXRpb24odGFyZ2V0KTtcbiAgICAgICAgY2FzZSBUcmFuc2l0aW9uLlJBTkdFOlxuICAgICAgICAgICAgcmV0dXJuIGFyZzMgIT09IDAgPyBuZXcgUmFuZ2VUcmFuc2l0aW9uKHRhcmdldCwgVG9rZW4uRU9GLCBhcmcyKSA6IG5ldyBSYW5nZVRyYW5zaXRpb24odGFyZ2V0LCBhcmcxLCBhcmcyKTtcbiAgICAgICAgY2FzZSBUcmFuc2l0aW9uLlJVTEU6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1bGVUcmFuc2l0aW9uKGF0bi5zdGF0ZXNbYXJnMV0sIGFyZzIsIGFyZzMsIHRhcmdldCk7XG4gICAgICAgIGNhc2UgVHJhbnNpdGlvbi5QUkVESUNBVEU6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByZWRpY2F0ZVRyYW5zaXRpb24odGFyZ2V0LCBhcmcxLCBhcmcyLCBhcmczICE9PSAwKTtcbiAgICAgICAgY2FzZSBUcmFuc2l0aW9uLlBSRUNFREVOQ0U6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByZWNlZGVuY2VQcmVkaWNhdGVUcmFuc2l0aW9uKHRhcmdldCwgYXJnMSk7XG4gICAgICAgIGNhc2UgVHJhbnNpdGlvbi5BVE9NOlxuICAgICAgICAgICAgcmV0dXJuIGFyZzMgIT09IDAgPyBuZXcgQXRvbVRyYW5zaXRpb24odGFyZ2V0LCBUb2tlbi5FT0YpIDogbmV3IEF0b21UcmFuc2l0aW9uKHRhcmdldCwgYXJnMSk7XG4gICAgICAgIGNhc2UgVHJhbnNpdGlvbi5BQ1RJT046XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFjdGlvblRyYW5zaXRpb24odGFyZ2V0LCBhcmcxLCBhcmcyLCBhcmczICE9PSAwKTtcbiAgICAgICAgY2FzZSBUcmFuc2l0aW9uLlNFVDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2V0VHJhbnNpdGlvbih0YXJnZXQsIHNldHNbYXJnMV0pO1xuICAgICAgICBjYXNlIFRyYW5zaXRpb24uTk9UX1NFVDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm90U2V0VHJhbnNpdGlvbih0YXJnZXQsIHNldHNbYXJnMV0pO1xuICAgICAgICBjYXNlIFRyYW5zaXRpb24uV0lMRENBUkQ6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdpbGRjYXJkVHJhbnNpdGlvbih0YXJnZXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgXCJUaGUgc3BlY2lmaWVkIHRyYW5zaXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIgaXMgbm90IHZhbGlkLlwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGVGYWN0b3J5KHR5cGUsIHJ1bGVJbmRleCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZUZhY3RvcmllcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3Qgc2YgPSBbXTtcbiAgICAgICAgICAgIHNmW0FUTlN0YXRlLklOVkFMSURfVFlQRV0gPSBudWxsO1xuICAgICAgICAgICAgc2ZbQVROU3RhdGUuQkFTSUNdID0gKCkgPT4gbmV3IEJhc2ljU3RhdGUoKTtcbiAgICAgICAgICAgIHNmW0FUTlN0YXRlLlJVTEVfU1RBUlRdID0gKCkgPT4gbmV3IFJ1bGVTdGFydFN0YXRlKCk7XG4gICAgICAgICAgICBzZltBVE5TdGF0ZS5CTE9DS19TVEFSVF0gPSAoKSA9PiBuZXcgQmFzaWNCbG9ja1N0YXJ0U3RhdGUoKTtcbiAgICAgICAgICAgIHNmW0FUTlN0YXRlLlBMVVNfQkxPQ0tfU1RBUlRdID0gKCkgPT4gbmV3IFBsdXNCbG9ja1N0YXJ0U3RhdGUoKTtcbiAgICAgICAgICAgIHNmW0FUTlN0YXRlLlNUQVJfQkxPQ0tfU1RBUlRdID0gKCkgPT4gbmV3IFN0YXJCbG9ja1N0YXJ0U3RhdGUoKTtcbiAgICAgICAgICAgIHNmW0FUTlN0YXRlLlRPS0VOX1NUQVJUXSA9ICgpID0+IG5ldyBUb2tlbnNTdGFydFN0YXRlKCk7XG4gICAgICAgICAgICBzZltBVE5TdGF0ZS5SVUxFX1NUT1BdID0gKCkgPT4gbmV3IFJ1bGVTdG9wU3RhdGUoKTtcbiAgICAgICAgICAgIHNmW0FUTlN0YXRlLkJMT0NLX0VORF0gPSAoKSA9PiBuZXcgQmxvY2tFbmRTdGF0ZSgpO1xuICAgICAgICAgICAgc2ZbQVROU3RhdGUuU1RBUl9MT09QX0JBQ0tdID0gKCkgPT4gbmV3IFN0YXJMb29wYmFja1N0YXRlKCk7XG4gICAgICAgICAgICBzZltBVE5TdGF0ZS5TVEFSX0xPT1BfRU5UUlldID0gKCkgPT4gbmV3IFN0YXJMb29wRW50cnlTdGF0ZSgpO1xuICAgICAgICAgICAgc2ZbQVROU3RhdGUuUExVU19MT09QX0JBQ0tdID0gKCkgPT4gbmV3IFBsdXNMb29wYmFja1N0YXRlKCk7XG4gICAgICAgICAgICBzZltBVE5TdGF0ZS5MT09QX0VORF0gPSAoKSA9PiBuZXcgTG9vcEVuZFN0YXRlKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlRmFjdG9yaWVzID0gc2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGU+dGhpcy5zdGF0ZUZhY3Rvcmllcy5sZW5ndGggfHwgdGhpcy5zdGF0ZUZhY3Rvcmllc1t0eXBlXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3coXCJUaGUgc3BlY2lmaWVkIHN0YXRlIHR5cGUgXCIgKyB0eXBlICsgXCIgaXMgbm90IHZhbGlkLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLnN0YXRlRmFjdG9yaWVzW3R5cGVdKCk7XG4gICAgICAgICAgICBpZiAocyE9PW51bGwpIHtcbiAgICAgICAgICAgICAgICBzLnJ1bGVJbmRleCA9IHJ1bGVJbmRleDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxleGVyQWN0aW9uRmFjdG9yeSh0eXBlLCBkYXRhMSwgZGF0YTIpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aW9uRmFjdG9yaWVzID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBhZiA9IFtdO1xuICAgICAgICAgICAgYWZbTGV4ZXJBY3Rpb25UeXBlLkNIQU5ORUxdID0gKGRhdGExLCBkYXRhMikgPT4gbmV3IExleGVyQ2hhbm5lbEFjdGlvbihkYXRhMSk7XG4gICAgICAgICAgICBhZltMZXhlckFjdGlvblR5cGUuQ1VTVE9NXSA9IChkYXRhMSwgZGF0YTIpID0+IG5ldyBMZXhlckN1c3RvbUFjdGlvbihkYXRhMSwgZGF0YTIpO1xuICAgICAgICAgICAgYWZbTGV4ZXJBY3Rpb25UeXBlLk1PREVdID0gKGRhdGExLCBkYXRhMikgPT4gbmV3IExleGVyTW9kZUFjdGlvbihkYXRhMSk7XG4gICAgICAgICAgICBhZltMZXhlckFjdGlvblR5cGUuTU9SRV0gPSAoZGF0YTEsIGRhdGEyKSA9PiBMZXhlck1vcmVBY3Rpb24uSU5TVEFOQ0U7XG4gICAgICAgICAgICBhZltMZXhlckFjdGlvblR5cGUuUE9QX01PREVdID0gKGRhdGExLCBkYXRhMikgPT4gTGV4ZXJQb3BNb2RlQWN0aW9uLklOU1RBTkNFO1xuICAgICAgICAgICAgYWZbTGV4ZXJBY3Rpb25UeXBlLlBVU0hfTU9ERV0gPSAoZGF0YTEsIGRhdGEyKSA9PiBuZXcgTGV4ZXJQdXNoTW9kZUFjdGlvbihkYXRhMSk7XG4gICAgICAgICAgICBhZltMZXhlckFjdGlvblR5cGUuU0tJUF0gPSAoZGF0YTEsIGRhdGEyKSA9PiBMZXhlclNraXBBY3Rpb24uSU5TVEFOQ0U7XG4gICAgICAgICAgICBhZltMZXhlckFjdGlvblR5cGUuVFlQRV0gPSAoZGF0YTEsIGRhdGEyKSA9PiBuZXcgTGV4ZXJUeXBlQWN0aW9uKGRhdGExKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uRmFjdG9yaWVzID0gYWY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGU+dGhpcy5hY3Rpb25GYWN0b3JpZXMubGVuZ3RoIHx8IHRoaXMuYWN0aW9uRmFjdG9yaWVzW3R5cGVdID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyhcIlRoZSBzcGVjaWZpZWQgbGV4ZXIgYWN0aW9uIHR5cGUgXCIgKyB0eXBlICsgXCIgaXMgbm90IHZhbGlkLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGlvbkZhY3Rvcmllc1t0eXBlXShkYXRhMSwgZGF0YTIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCeXRlVG9IZXgoKSB7XG5cdGNvbnN0IGJ0aCA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdFx0YnRoW2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKS50b1VwcGVyQ2FzZSgpO1xuXHR9XG5cdHJldHVybiBidGg7XG59XG5cbmNvbnN0IGJ5dGVUb0hleCA9IGNyZWF0ZUJ5dGVUb0hleCgpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQVRORGVzZXJpYWxpemVyO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7REZBU3RhdGV9ID0gcmVxdWlyZSgnLi8uLi9kZmEvREZBU3RhdGUnKTtcbmNvbnN0IHtBVE5Db25maWdTZXR9ID0gcmVxdWlyZSgnLi9BVE5Db25maWdTZXQnKTtcbmNvbnN0IHtnZXRDYWNoZWRQcmVkaWN0aW9uQ29udGV4dH0gPSByZXF1aXJlKCcuLy4uL1ByZWRpY3Rpb25Db250ZXh0Jyk7XG5jb25zdCB7TWFwfSA9IHJlcXVpcmUoJy4vLi4vVXRpbHMnKTtcblxuY2xhc3MgQVROU2ltdWxhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihhdG4sIHNoYXJlZENvbnRleHRDYWNoZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbnRleHQgY2FjaGUgbWFwcyBhbGwgUHJlZGljdGlvbkNvbnRleHQgb2JqZWN0cyB0aGF0IGFyZSA9PVxuICAgICAgICAgKiB0byBhIHNpbmdsZSBjYWNoZWQgY29weS4gVGhpcyBjYWNoZSBpcyBzaGFyZWQgYWNyb3NzIGFsbCBjb250ZXh0c1xuICAgICAgICAgKiBpbiBhbGwgQVROQ29uZmlncyBpbiBhbGwgREZBIHN0YXRlcy4gIFdlIHJlYnVpbGQgZWFjaCBBVE5Db25maWdTZXRcbiAgICAgICAgICogdG8gdXNlIG9ubHkgY2FjaGVkIG5vZGVzL2dyYXBocyBpbiBhZGRERkFTdGF0ZSgpLiBXZSBkb24ndCB3YW50IHRvXG4gICAgICAgICAqIGZpbGwgdGhpcyBkdXJpbmcgY2xvc3VyZSgpIHNpbmNlIHRoZXJlIGFyZSBsb3RzIG9mIGNvbnRleHRzIHRoYXRcbiAgICAgICAgICogcG9wIHVwIGJ1dCBhcmUgbm90IHVzZWQgZXZlciBhZ2Fpbi4gSXQgYWxzbyBncmVhdGx5IHNsb3dzIGRvd24gY2xvc3VyZSgpLlxuICAgICAgICAgKlxuICAgICAgICAgKiA8cD5UaGlzIGNhY2hlIG1ha2VzIGEgaHVnZSBkaWZmZXJlbmNlIGluIG1lbW9yeSBhbmQgYSBsaXR0bGUgYml0IGluIHNwZWVkLlxuICAgICAgICAgKiBGb3IgdGhlIEphdmEgZ3JhbW1hciBvbiBqYXZhLiosIGl0IGRyb3BwZWQgdGhlIG1lbW9yeSByZXF1aXJlbWVudHNcbiAgICAgICAgICogYXQgdGhlIGVuZCBmcm9tIDI1TSB0byAxNk0uIFdlIGRvbid0IHN0b3JlIGFueSBvZiB0aGUgZnVsbCBjb250ZXh0XG4gICAgICAgICAqIGdyYXBocyBpbiB0aGUgREZBIGJlY2F1c2UgdGhleSBhcmUgbGltaXRlZCB0byBsb2NhbCBjb250ZXh0IG9ubHksXG4gICAgICAgICAqIGJ1dCBhcHBhcmVudGx5IHRoZXJlJ3MgYSBsb3Qgb2YgcmVwZXRpdGlvbiB0aGVyZSBhcyB3ZWxsLiBXZSBvcHRpbWl6ZVxuICAgICAgICAgKiB0aGUgY29uZmlnIGNvbnRleHRzIGJlZm9yZSBzdG9yaW5nIHRoZSBjb25maWcgc2V0IGluIHRoZSBERkEgc3RhdGVzXG4gICAgICAgICAqIGJ5IGxpdGVyYWxseSByZWJ1aWxkaW5nIHRoZW0gd2l0aCBjYWNoZWQgc3ViZ3JhcGhzIG9ubHkuPC9wPlxuICAgICAgICAgKlxuICAgICAgICAgKiA8cD5JIHRyaWVkIGEgY2FjaGUgZm9yIHVzZSBkdXJpbmcgY2xvc3VyZSBvcGVyYXRpb25zLCB0aGF0IHdhc1xuICAgICAgICAgKiB3aGFja2VkIGFmdGVyIGVhY2ggYWRhcHRpdmVQcmVkaWN0KCkuIEl0IGNvc3QgYSBsaXR0bGUgYml0XG4gICAgICAgICAqIG1vcmUgdGltZSBJIHRoaW5rIGFuZCBkb2Vzbid0IHNhdmUgb24gdGhlIG92ZXJhbGwgZm9vdHByaW50XG4gICAgICAgICAqIHNvIGl0J3Mgbm90IHdvcnRoIHRoZSBjb21wbGV4aXR5LjwvcD5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXRuID0gYXRuO1xuICAgICAgICB0aGlzLnNoYXJlZENvbnRleHRDYWNoZSA9IHNoYXJlZENvbnRleHRDYWNoZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0Q2FjaGVkQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLnNoYXJlZENvbnRleHRDYWNoZSA9PT1udWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aXNpdGVkID0gbmV3IE1hcCgpO1xuICAgICAgICByZXR1cm4gZ2V0Q2FjaGVkUHJlZGljdGlvbkNvbnRleHQoY29udGV4dCwgdGhpcy5zaGFyZWRDb250ZXh0Q2FjaGUsIHZpc2l0ZWQpO1xuICAgIH1cbn1cblxuLy8gTXVzdCBkaXN0aW5ndWlzaCBiZXR3ZWVuIG1pc3NpbmcgZWRnZSBhbmQgZWRnZSB3ZSBrbm93IGxlYWRzIG5vd2hlcmUvLy9cbkFUTlNpbXVsYXRvci5FUlJPUiA9IG5ldyBERkFTdGF0ZSgweDdGRkZGRkZGLCBuZXcgQVROQ29uZmlnU2V0KCkpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQVROU2ltdWxhdG9yO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCBJTklUSUFMX05VTV9UUkFOU0lUSU9OUyA9IDQ7XG5cbi8qKlxuICogVGhlIGZvbGxvd2luZyBpbWFnZXMgc2hvdyB0aGUgcmVsYXRpb24gb2Ygc3RhdGVzIGFuZFxuICoge0BsaW5rIEFUTlN0YXRlLy90cmFuc2l0aW9uc30gZm9yIHZhcmlvdXMgZ3JhbW1hciBjb25zdHJ1Y3RzLlxuICpcbiAqIDx1bD5cbiAqXG4gKiA8bGk+U29saWQgZWRnZXMgbWFya2VkIHdpdGggYW4gJi8vMDk0OTsgaW5kaWNhdGUgYSByZXF1aXJlZFxuICoge0BsaW5rIEVwc2lsb25UcmFuc2l0aW9ufS48L2xpPlxuICpcbiAqIDxsaT5EYXNoZWQgZWRnZXMgaW5kaWNhdGUgbG9jYXRpb25zIHdoZXJlIGFueSB0cmFuc2l0aW9uIGRlcml2ZWQgZnJvbVxuICoge0BsaW5rIFRyYW5zaXRpb259IG1pZ2h0IGFwcGVhci48L2xpPlxuICpcbiAqIDxsaT5EYXNoZWQgbm9kZXMgYXJlIHBsYWNlIGhvbGRlcnMgZm9yIGVpdGhlciBhIHNlcXVlbmNlIG9mIGxpbmtlZFxuICoge0BsaW5rIEJhc2ljU3RhdGV9IHN0YXRlcyBvciB0aGUgaW5jbHVzaW9uIG9mIGEgYmxvY2sgcmVwcmVzZW50aW5nIGEgbmVzdGVkXG4gKiBjb25zdHJ1Y3QgaW4gb25lIG9mIHRoZSBmb3JtcyBiZWxvdy48L2xpPlxuICpcbiAqIDxsaT5Ob2RlcyBzaG93aW5nIG11bHRpcGxlIG91dGdvaW5nIGFsdGVybmF0aXZlcyB3aXRoIGEge0Bjb2RlIC4uLn0gc3VwcG9ydFxuICogYW55IG51bWJlciBvZiBhbHRlcm5hdGl2ZXMgKG9uZSBvciBtb3JlKS4gTm9kZXMgd2l0aG91dCB0aGUge0Bjb2RlIC4uLn0gb25seVxuICogc3VwcG9ydCB0aGUgZXhhY3QgbnVtYmVyIG9mIGFsdGVybmF0aXZlcyBzaG93biBpbiB0aGUgZGlhZ3JhbS48L2xpPlxuICpcbiAqIDwvdWw+XG4gKlxuICogPGgyPkJhc2ljIEJsb2NrczwvaDI+XG4gKlxuICogPGgzPlJ1bGU8L2gzPlxuICpcbiAqIDxlbWJlZCBzcmM9XCJpbWFnZXMvUnVsZS5zdmdcIiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz5cbiAqXG4gKiA8aDM+QmxvY2sgb2YgMSBvciBtb3JlIGFsdGVybmF0aXZlczwvaDM+XG4gKlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9CbG9jay5zdmdcIiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz5cbiAqXG4gKiA8aDI+R3JlZWR5IExvb3BzPC9oMj5cbiAqXG4gKiA8aDM+R3JlZWR5IENsb3N1cmU6IHtAY29kZSAoLi4uKSp9PC9oMz5cbiAqXG4gKiA8ZW1iZWQgc3JjPVwiaW1hZ2VzL0Nsb3N1cmVHcmVlZHkuc3ZnXCIgdHlwZT1cImltYWdlL3N2Zyt4bWxcIi8+XG4gKlxuICogPGgzPkdyZWVkeSBQb3NpdGl2ZSBDbG9zdXJlOiB7QGNvZGUgKC4uLikrfTwvaDM+XG4gKlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9Qb3NpdGl2ZUNsb3N1cmVHcmVlZHkuc3ZnXCIgdHlwZT1cImltYWdlL3N2Zyt4bWxcIi8+XG4gKlxuICogPGgzPkdyZWVkeSBPcHRpb25hbDoge0Bjb2RlICguLi4pP308L2gzPlxuICpcbiAqIDxlbWJlZCBzcmM9XCJpbWFnZXMvT3B0aW9uYWxHcmVlZHkuc3ZnXCIgdHlwZT1cImltYWdlL3N2Zyt4bWxcIi8+XG4gKlxuICogPGgyPk5vbi1HcmVlZHkgTG9vcHM8L2gyPlxuICpcbiAqIDxoMz5Ob24tR3JlZWR5IENsb3N1cmU6IHtAY29kZSAoLi4uKSo/fTwvaDM+XG4gKlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9DbG9zdXJlTm9uR3JlZWR5LnN2Z1wiIHR5cGU9XCJpbWFnZS9zdmcreG1sXCIvPlxuICpcbiAqIDxoMz5Ob24tR3JlZWR5IFBvc2l0aXZlIENsb3N1cmU6IHtAY29kZSAoLi4uKSs/fTwvaDM+XG4gKlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9Qb3NpdGl2ZUNsb3N1cmVOb25HcmVlZHkuc3ZnXCIgdHlwZT1cImltYWdlL3N2Zyt4bWxcIi8+XG4gKlxuICogPGgzPk5vbi1HcmVlZHkgT3B0aW9uYWw6IHtAY29kZSAoLi4uKT8/fTwvaDM+XG4gKlxuICogPGVtYmVkIHNyYz1cImltYWdlcy9PcHRpb25hbE5vbkdyZWVkeS5zdmdcIiB0eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiLz5cbiAqL1xuY2xhc3MgQVROU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBXaGljaCBBVE4gYXJlIHdlIGluP1xuICAgICAgICB0aGlzLmF0biA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGVOdW1iZXIgPSBBVE5TdGF0ZS5JTlZBTElEX1NUQVRFX05VTUJFUjtcbiAgICAgICAgdGhpcy5zdGF0ZVR5cGUgPSBudWxsO1xuICAgICAgICB0aGlzLnJ1bGVJbmRleCA9IDA7IC8vIGF0IHJ1bnRpbWUsIHdlIGRvbid0IGhhdmUgUnVsZSBvYmplY3RzXG4gICAgICAgIHRoaXMuZXBzaWxvbk9ubHlUcmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAvLyBUcmFjayB0aGUgdHJhbnNpdGlvbnMgZW1hbmF0aW5nIGZyb20gdGhpcyBBVE4gc3RhdGUuXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbnMgPSBbXTtcbiAgICAgICAgLy8gVXNlZCB0byBjYWNoZSBsb29rYWhlYWQgZHVyaW5nIHBhcnNpbmcsIG5vdCB1c2VkIGR1cmluZyBjb25zdHJ1Y3Rpb25cbiAgICAgICAgdGhpcy5uZXh0VG9rZW5XaXRoaW5SdWxlID0gbnVsbDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOdW1iZXI7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIEFUTlN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU51bWJlcj09PW90aGVyLnN0YXRlTnVtYmVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNOb25HcmVlZHlFeGl0U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBhZGRUcmFuc2l0aW9uKHRyYW5zLCBpbmRleCkge1xuICAgICAgICBpZihpbmRleD09PXVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50cmFuc2l0aW9ucy5sZW5ndGg9PT0wKSB7XG4gICAgICAgICAgICB0aGlzLmVwc2lsb25Pbmx5VHJhbnNpdGlvbnMgPSB0cmFucy5pc0Vwc2lsb247XG4gICAgICAgIH0gZWxzZSBpZih0aGlzLmVwc2lsb25Pbmx5VHJhbnNpdGlvbnMgIT09IHRyYW5zLmlzRXBzaWxvbikge1xuICAgICAgICAgICAgdGhpcy5lcHNpbG9uT25seVRyYW5zaXRpb25zID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4PT09LTEpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbnMucHVzaCh0cmFucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25zLnNwbGljZShpbmRleCwgMSwgdHJhbnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBjb25zdGFudHMgZm9yIHNlcmlhbGl6YXRpb25cbkFUTlN0YXRlLklOVkFMSURfVFlQRSA9IDA7XG5BVE5TdGF0ZS5CQVNJQyA9IDE7XG5BVE5TdGF0ZS5SVUxFX1NUQVJUID0gMjtcbkFUTlN0YXRlLkJMT0NLX1NUQVJUID0gMztcbkFUTlN0YXRlLlBMVVNfQkxPQ0tfU1RBUlQgPSA0O1xuQVROU3RhdGUuU1RBUl9CTE9DS19TVEFSVCA9IDU7XG5BVE5TdGF0ZS5UT0tFTl9TVEFSVCA9IDY7XG5BVE5TdGF0ZS5SVUxFX1NUT1AgPSA3O1xuQVROU3RhdGUuQkxPQ0tfRU5EID0gODtcbkFUTlN0YXRlLlNUQVJfTE9PUF9CQUNLID0gOTtcbkFUTlN0YXRlLlNUQVJfTE9PUF9FTlRSWSA9IDEwO1xuQVROU3RhdGUuUExVU19MT09QX0JBQ0sgPSAxMTtcbkFUTlN0YXRlLkxPT1BfRU5EID0gMTI7XG5cbkFUTlN0YXRlLnNlcmlhbGl6YXRpb25OYW1lcyA9IFtcbiAgICAgICAgICAgIFwiSU5WQUxJRFwiLFxuICAgICAgICAgICAgXCJCQVNJQ1wiLFxuICAgICAgICAgICAgXCJSVUxFX1NUQVJUXCIsXG4gICAgICAgICAgICBcIkJMT0NLX1NUQVJUXCIsXG4gICAgICAgICAgICBcIlBMVVNfQkxPQ0tfU1RBUlRcIixcbiAgICAgICAgICAgIFwiU1RBUl9CTE9DS19TVEFSVFwiLFxuICAgICAgICAgICAgXCJUT0tFTl9TVEFSVFwiLFxuICAgICAgICAgICAgXCJSVUxFX1NUT1BcIixcbiAgICAgICAgICAgIFwiQkxPQ0tfRU5EXCIsXG4gICAgICAgICAgICBcIlNUQVJfTE9PUF9CQUNLXCIsXG4gICAgICAgICAgICBcIlNUQVJfTE9PUF9FTlRSWVwiLFxuICAgICAgICAgICAgXCJQTFVTX0xPT1BfQkFDS1wiLFxuICAgICAgICAgICAgXCJMT09QX0VORFwiIF07XG5cbkFUTlN0YXRlLklOVkFMSURfU1RBVEVfTlVNQkVSID0gLTE7XG5cblxuY2xhc3MgQmFzaWNTdGF0ZSBleHRlbmRzIEFUTlN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZVR5cGUgPSBBVE5TdGF0ZS5CQVNJQztcbiAgICB9XG59XG5cbmNsYXNzIERlY2lzaW9uU3RhdGUgZXh0ZW5kcyBBVE5TdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGVjaXNpb24gPSAtMTtcbiAgICAgICAgdGhpcy5ub25HcmVlZHkgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG4vKipcbiAqICBUaGUgc3RhcnQgb2YgYSByZWd1bGFyIHtAY29kZSAoLi4uKX0gYmxvY2tcbiAqL1xuY2xhc3MgQmxvY2tTdGFydFN0YXRlIGV4dGVuZHMgRGVjaXNpb25TdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZW5kU3RhdGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmNsYXNzIEJhc2ljQmxvY2tTdGFydFN0YXRlIGV4dGVuZHMgQmxvY2tTdGFydFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZVR5cGUgPSBBVE5TdGF0ZS5CTE9DS19TVEFSVDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG4vKipcbiAqIFRlcm1pbmFsIG5vZGUgb2YgYSBzaW1wbGUge0Bjb2RlIChhfGJ8Yyl9IGJsb2NrXG4gKi9cbmNsYXNzIEJsb2NrRW5kU3RhdGUgZXh0ZW5kcyBBVE5TdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGVUeXBlID0gQVROU3RhdGUuQkxPQ0tfRU5EO1xuICAgICAgICB0aGlzLnN0YXJ0U3RhdGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbi8qKlxuICogVGhlIGxhc3Qgbm9kZSBpbiB0aGUgQVROIGZvciBhIHJ1bGUsIHVubGVzcyB0aGF0IHJ1bGUgaXMgdGhlIHN0YXJ0IHN5bWJvbC5cbiAqIEluIHRoYXQgY2FzZSwgdGhlcmUgaXMgb25lIHRyYW5zaXRpb24gdG8gRU9GLiBMYXRlciwgd2UgbWlnaHQgZW5jb2RlXG4gKiByZWZlcmVuY2VzIHRvIGFsbCBjYWxscyB0byB0aGlzIHJ1bGUgdG8gY29tcHV0ZSBGT0xMT1cgc2V0cyBmb3JcbiAqIGVycm9yIGhhbmRsaW5nXG4gKi9cbmNsYXNzIFJ1bGVTdG9wU3RhdGUgZXh0ZW5kcyBBVE5TdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGVUeXBlID0gQVROU3RhdGUuUlVMRV9TVE9QO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmNsYXNzIFJ1bGVTdGFydFN0YXRlIGV4dGVuZHMgQVROU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlVHlwZSA9IEFUTlN0YXRlLlJVTEVfU1RBUlQ7XG4gICAgICAgIHRoaXMuc3RvcFN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc1ByZWNlZGVuY2VSdWxlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuLyoqXG4gKiBEZWNpc2lvbiBzdGF0ZSBmb3Ige0Bjb2RlIEErfSBhbmQge0Bjb2RlIChBfEIpK30uICBJdCBoYXMgdHdvIHRyYW5zaXRpb25zOlxuICogb25lIHRvIHRoZSBsb29wIGJhY2sgdG8gc3RhcnQgb2YgdGhlIGJsb2NrIGFuZCBvbmUgdG8gZXhpdC5cbiAqL1xuY2xhc3MgUGx1c0xvb3BiYWNrU3RhdGUgZXh0ZW5kcyBEZWNpc2lvblN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZVR5cGUgPSBBVE5TdGF0ZS5QTFVTX0xPT1BfQkFDSztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG4vKipcbiAqIFN0YXJ0IG9mIHtAY29kZSAoQXxCfC4uLikrfSBsb29wLiBUZWNobmljYWxseSBhIGRlY2lzaW9uIHN0YXRlLCBidXRcbiAqIHdlIGRvbid0IHVzZSBmb3IgY29kZSBnZW5lcmF0aW9uOyBzb21lYm9keSBtaWdodCBuZWVkIGl0LCBzbyBJJ20gZGVmaW5pbmdcbiAqIGl0IGZvciBjb21wbGV0ZW5lc3MuIEluIHJlYWxpdHksIHRoZSB7QGxpbmsgUGx1c0xvb3BiYWNrU3RhdGV9IG5vZGUgaXMgdGhlXG4gKiByZWFsIGRlY2lzaW9uLW1ha2luZyBub3RlIGZvciB7QGNvZGUgQSt9XG4gKi9cbmNsYXNzIFBsdXNCbG9ja1N0YXJ0U3RhdGUgZXh0ZW5kcyBCbG9ja1N0YXJ0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlVHlwZSA9IEFUTlN0YXRlLlBMVVNfQkxPQ0tfU1RBUlQ7XG4gICAgICAgIHRoaXMubG9vcEJhY2tTdGF0ZSA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGUgYmxvY2sgdGhhdCBiZWdpbnMgYSBjbG9zdXJlIGxvb3BcbiAqL1xuY2xhc3MgU3RhckJsb2NrU3RhcnRTdGF0ZSBleHRlbmRzIEJsb2NrU3RhcnRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGVUeXBlID0gQVROU3RhdGUuU1RBUl9CTE9DS19TVEFSVDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5jbGFzcyBTdGFyTG9vcGJhY2tTdGF0ZSBleHRlbmRzIEFUTlN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZVR5cGUgPSBBVE5TdGF0ZS5TVEFSX0xPT1BfQkFDSztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5jbGFzcyBTdGFyTG9vcEVudHJ5U3RhdGUgZXh0ZW5kcyBEZWNpc2lvblN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZVR5cGUgPSBBVE5TdGF0ZS5TVEFSX0xPT1BfRU5UUlk7XG4gICAgICAgIHRoaXMubG9vcEJhY2tTdGF0ZSA9IG51bGw7XG4gICAgICAgIC8vIEluZGljYXRlcyB3aGV0aGVyIHRoaXMgc3RhdGUgY2FuIGJlbmVmaXQgZnJvbSBhIHByZWNlZGVuY2UgREZBIGR1cmluZyBTTEwgZGVjaXNpb24gbWFraW5nLlxuICAgICAgICB0aGlzLmlzUHJlY2VkZW5jZURlY2lzaW9uID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG4vKipcbiAqIE1hcmsgdGhlIGVuZCBvZiBhICogb3IgKyBsb29wXG4gKi9cbmNsYXNzIExvb3BFbmRTdGF0ZSBleHRlbmRzIEFUTlN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZVR5cGUgPSBBVE5TdGF0ZS5MT09QX0VORDtcbiAgICAgICAgdGhpcy5sb29wQmFja1N0YXRlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoZSBUb2tlbnMgcnVsZSBzdGFydCBzdGF0ZSBsaW5raW5nIHRvIGVhY2ggbGV4ZXIgcnVsZSBzdGFydCBzdGF0ZVxuICovXG5jbGFzcyBUb2tlbnNTdGFydFN0YXRlIGV4dGVuZHMgRGVjaXNpb25TdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGVUeXBlID0gQVROU3RhdGUuVE9LRU5fU1RBUlQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgQVROU3RhdGUsXG4gICAgQmFzaWNTdGF0ZSxcbiAgICBEZWNpc2lvblN0YXRlLFxuICAgIEJsb2NrU3RhcnRTdGF0ZSxcbiAgICBCbG9ja0VuZFN0YXRlLFxuICAgIExvb3BFbmRTdGF0ZSxcbiAgICBSdWxlU3RhcnRTdGF0ZSxcbiAgICBSdWxlU3RvcFN0YXRlLFxuICAgIFRva2Vuc1N0YXJ0U3RhdGUsXG4gICAgUGx1c0xvb3BiYWNrU3RhdGUsXG4gICAgU3Rhckxvb3BiYWNrU3RhdGUsXG4gICAgU3Rhckxvb3BFbnRyeVN0YXRlLFxuICAgIFBsdXNCbG9ja1N0YXJ0U3RhdGUsXG4gICAgU3RhckJsb2NrU3RhcnRTdGF0ZSxcbiAgICBCYXNpY0Jsb2NrU3RhcnRTdGF0ZVxufVxuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgcmVjb2duaXplciBhbiBBVE4gYXBwbGllcyB0b1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBMRVhFUjogMCxcbiAgICBQQVJTRVI6IDFcbn07XG5cbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge1Rva2VufSA9IHJlcXVpcmUoJy4vLi4vVG9rZW4nKTtcbmNvbnN0IExleGVyID0gcmVxdWlyZSgnLi8uLi9MZXhlcicpO1xuY29uc3QgQVROID0gcmVxdWlyZSgnLi9BVE4nKTtcbmNvbnN0IEFUTlNpbXVsYXRvciA9IHJlcXVpcmUoJy4vQVROU2ltdWxhdG9yJyk7XG5jb25zdCB7REZBU3RhdGV9ID0gcmVxdWlyZSgnLi8uLi9kZmEvREZBU3RhdGUnKTtcbmNvbnN0IHtPcmRlcmVkQVROQ29uZmlnU2V0fSA9IHJlcXVpcmUoJy4vQVROQ29uZmlnU2V0Jyk7XG5jb25zdCB7UHJlZGljdGlvbkNvbnRleHR9ID0gcmVxdWlyZSgnLi8uLi9QcmVkaWN0aW9uQ29udGV4dCcpO1xuY29uc3Qge1NpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0fSA9IHJlcXVpcmUoJy4vLi4vUHJlZGljdGlvbkNvbnRleHQnKTtcbmNvbnN0IHtSdWxlU3RvcFN0YXRlfSA9IHJlcXVpcmUoJy4vQVROU3RhdGUnKTtcbmNvbnN0IHtMZXhlckFUTkNvbmZpZ30gPSByZXF1aXJlKCcuL0FUTkNvbmZpZycpO1xuY29uc3Qge1RyYW5zaXRpb259ID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uJyk7XG5jb25zdCBMZXhlckFjdGlvbkV4ZWN1dG9yID0gcmVxdWlyZSgnLi9MZXhlckFjdGlvbkV4ZWN1dG9yJyk7XG5jb25zdCB7TGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbn0gPSByZXF1aXJlKCcuLy4uL2Vycm9yL0Vycm9ycycpO1xuXG5mdW5jdGlvbiByZXNldFNpbVN0YXRlKHNpbSkge1xuXHRzaW0uaW5kZXggPSAtMTtcblx0c2ltLmxpbmUgPSAwO1xuXHRzaW0uY29sdW1uID0gLTE7XG5cdHNpbS5kZmFTdGF0ZSA9IG51bGw7XG59XG5cbmNsYXNzIFNpbVN0YXRlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0cmVzZXRTaW1TdGF0ZSh0aGlzKTtcblx0fVxuXG5cdHJlc2V0KCkge1xuXHRcdHJlc2V0U2ltU3RhdGUodGhpcyk7XG5cdH1cbn1cblxuY2xhc3MgTGV4ZXJBVE5TaW11bGF0b3IgZXh0ZW5kcyBBVE5TaW11bGF0b3Ige1xuXHQvKipcblx0ICogV2hlbiB3ZSBoaXQgYW4gYWNjZXB0IHN0YXRlIGluIGVpdGhlciB0aGUgREZBIG9yIHRoZSBBVE4sIHdlXG5cdCAqIGhhdmUgdG8gbm90aWZ5IHRoZSBjaGFyYWN0ZXIgc3RyZWFtIHRvIHN0YXJ0IGJ1ZmZlcmluZyBjaGFyYWN0ZXJzXG5cdCAqIHZpYSB7QGxpbmsgSW50U3RyZWFtLy9tYXJrfSBhbmQgcmVjb3JkIHRoZSBjdXJyZW50IHN0YXRlLiBUaGUgY3VycmVudCBzaW0gc3RhdGVcblx0ICogaW5jbHVkZXMgdGhlIGN1cnJlbnQgaW5kZXggaW50byB0aGUgaW5wdXQsIHRoZSBjdXJyZW50IGxpbmUsXG5cdCAqIGFuZCBjdXJyZW50IGNoYXJhY3RlciBwb3NpdGlvbiBpbiB0aGF0IGxpbmUuIE5vdGUgdGhhdCB0aGUgTGV4ZXIgaXNcblx0ICogdHJhY2tpbmcgdGhlIHN0YXJ0aW5nIGxpbmUgYW5kIGNoYXJhY3Rlcml6YXRpb24gb2YgdGhlIHRva2VuLiBUaGVzZVxuXHQgKiB2YXJpYWJsZXMgdHJhY2sgdGhlIFwic3RhdGVcIiBvZiB0aGUgc2ltdWxhdG9yIHdoZW4gaXQgaGl0cyBhbiBhY2NlcHQgc3RhdGUuXG5cdCAqXG5cdCAqIDxwPldlIHRyYWNrIHRoZXNlIHZhcmlhYmxlcyBzZXBhcmF0ZWx5IGZvciB0aGUgREZBIGFuZCBBVE4gc2ltdWxhdGlvblxuXHQgKiBiZWNhdXNlIHRoZSBERkEgc2ltdWxhdGlvbiBvZnRlbiBoYXMgdG8gZmFpbCBvdmVyIHRvIHRoZSBBVE5cblx0ICogc2ltdWxhdGlvbi4gSWYgdGhlIEFUTiBzaW11bGF0aW9uIGZhaWxzLCB3ZSBuZWVkIHRoZSBERkEgdG8gZmFsbFxuXHQgKiBiYWNrIHRvIGl0cyBwcmV2aW91c2x5IGFjY2VwdGVkIHN0YXRlLCBpZiBhbnkuIElmIHRoZSBBVE4gc3VjY2VlZHMsXG5cdCAqIHRoZW4gdGhlIEFUTiBkb2VzIHRoZSBhY2NlcHQgYW5kIHRoZSBERkEgc2ltdWxhdG9yIHRoYXQgaW52b2tlZCBpdFxuXHQgKiBjYW4gc2ltcGx5IHJldHVybiB0aGUgcHJlZGljdGVkIHRva2VuIHR5cGUuPC9wPlxuXHQgKi9cblx0Y29uc3RydWN0b3IocmVjb2csIGF0biwgZGVjaXNpb25Ub0RGQSwgc2hhcmVkQ29udGV4dENhY2hlKSB7XG5cdFx0c3VwZXIoYXRuLCBzaGFyZWRDb250ZXh0Q2FjaGUpO1xuXHRcdHRoaXMuZGVjaXNpb25Ub0RGQSA9IGRlY2lzaW9uVG9ERkE7XG5cdFx0dGhpcy5yZWNvZyA9IHJlY29nO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBjdXJyZW50IHRva2VuJ3Mgc3RhcnRpbmcgaW5kZXggaW50byB0aGUgY2hhcmFjdGVyIHN0cmVhbS5cblx0XHQgKiBTaGFyZWQgYWNyb3NzIERGQSB0byBBVE4gc2ltdWxhdGlvbiBpbiBjYXNlIHRoZSBBVE4gZmFpbHMgYW5kIHRoZVxuXHRcdCAqIERGQSBkaWQgbm90IGhhdmUgYSBwcmV2aW91cyBhY2NlcHQgc3RhdGUuIEluIHRoaXMgY2FzZSwgd2UgdXNlIHRoZVxuXHRcdCAqIEFUTi1nZW5lcmF0ZWQgZXhjZXB0aW9uIG9iamVjdFxuXHRcdCAqL1xuXHRcdHRoaXMuc3RhcnRJbmRleCA9IC0xO1xuXHRcdC8vIGxpbmUgbnVtYmVyIDEuLm4gd2l0aGluIHRoZSBpbnB1dC8vL1xuXHRcdHRoaXMubGluZSA9IDE7XG5cdFx0LyoqXG5cdFx0ICogVGhlIGluZGV4IG9mIHRoZSBjaGFyYWN0ZXIgcmVsYXRpdmUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZVxuXHRcdCAqIDAuLm4tMVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sdW1uID0gMDtcblx0XHR0aGlzLm1vZGUgPSBMZXhlci5ERUZBVUxUX01PREU7XG5cdFx0LyoqXG5cdFx0ICogVXNlZCBkdXJpbmcgREZBL0FUTiBleGVjIHRvIHJlY29yZCB0aGUgbW9zdCByZWNlbnQgYWNjZXB0IGNvbmZpZ3VyYXRpb25cblx0XHQgKiBpbmZvXG5cdFx0ICovXG5cdFx0dGhpcy5wcmV2QWNjZXB0ID0gbmV3IFNpbVN0YXRlKCk7XG5cdH1cblxuXHRjb3B5U3RhdGUoc2ltdWxhdG9yKSB7XG5cdFx0dGhpcy5jb2x1bW4gPSBzaW11bGF0b3IuY29sdW1uO1xuXHRcdHRoaXMubGluZSA9IHNpbXVsYXRvci5saW5lO1xuXHRcdHRoaXMubW9kZSA9IHNpbXVsYXRvci5tb2RlO1xuXHRcdHRoaXMuc3RhcnRJbmRleCA9IHNpbXVsYXRvci5zdGFydEluZGV4O1xuXHR9XG5cblx0bWF0Y2goaW5wdXQsIG1vZGUpIHtcblx0XHR0aGlzLm1hdGNoX2NhbGxzICs9IDE7XG5cdFx0dGhpcy5tb2RlID0gbW9kZTtcblx0XHRjb25zdCBtYXJrID0gaW5wdXQubWFyaygpO1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLnN0YXJ0SW5kZXggPSBpbnB1dC5pbmRleDtcblx0XHRcdHRoaXMucHJldkFjY2VwdC5yZXNldCgpO1xuXHRcdFx0Y29uc3QgZGZhID0gdGhpcy5kZWNpc2lvblRvREZBW21vZGVdO1xuXHRcdFx0aWYgKGRmYS5zMCA9PT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5tYXRjaEFUTihpbnB1dCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5leGVjQVROKGlucHV0LCBkZmEuczApO1xuXHRcdFx0fVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRpbnB1dC5yZWxlYXNlKG1hcmspO1xuXHRcdH1cblx0fVxuXG5cdHJlc2V0KCkge1xuXHRcdHRoaXMucHJldkFjY2VwdC5yZXNldCgpO1xuXHRcdHRoaXMuc3RhcnRJbmRleCA9IC0xO1xuXHRcdHRoaXMubGluZSA9IDE7XG5cdFx0dGhpcy5jb2x1bW4gPSAwO1xuXHRcdHRoaXMubW9kZSA9IExleGVyLkRFRkFVTFRfTU9ERTtcblx0fVxuXG5cdG1hdGNoQVROKGlucHV0KSB7XG5cdFx0Y29uc3Qgc3RhcnRTdGF0ZSA9IHRoaXMuYXRuLm1vZGVUb1N0YXJ0U3RhdGVbdGhpcy5tb2RlXTtcblxuXHRcdGlmIChMZXhlckFUTlNpbXVsYXRvci5kZWJ1Zykge1xuXHRcdFx0Y29uc29sZS5sb2coXCJtYXRjaEFUTiBtb2RlIFwiICsgdGhpcy5tb2RlICsgXCIgc3RhcnQ6IFwiICsgc3RhcnRTdGF0ZSk7XG5cdFx0fVxuXHRcdGNvbnN0IG9sZF9tb2RlID0gdGhpcy5tb2RlO1xuXHRcdGNvbnN0IHMwX2Nsb3N1cmUgPSB0aGlzLmNvbXB1dGVTdGFydFN0YXRlKGlucHV0LCBzdGFydFN0YXRlKTtcblx0XHRjb25zdCBzdXBwcmVzc0VkZ2UgPSBzMF9jbG9zdXJlLmhhc1NlbWFudGljQ29udGV4dDtcblx0XHRzMF9jbG9zdXJlLmhhc1NlbWFudGljQ29udGV4dCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgbmV4dCA9IHRoaXMuYWRkREZBU3RhdGUoczBfY2xvc3VyZSk7XG5cdFx0aWYgKCFzdXBwcmVzc0VkZ2UpIHtcblx0XHRcdHRoaXMuZGVjaXNpb25Ub0RGQVt0aGlzLm1vZGVdLnMwID0gbmV4dDtcblx0XHR9XG5cblx0XHRjb25zdCBwcmVkaWN0ID0gdGhpcy5leGVjQVROKGlucHV0LCBuZXh0KTtcblxuXHRcdGlmIChMZXhlckFUTlNpbXVsYXRvci5kZWJ1Zykge1xuXHRcdFx0Y29uc29sZS5sb2coXCJERkEgYWZ0ZXIgbWF0Y2hBVE46IFwiICsgdGhpcy5kZWNpc2lvblRvREZBW29sZF9tb2RlXS50b0xleGVyU3RyaW5nKCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJlZGljdDtcblx0fVxuXG5cdGV4ZWNBVE4oaW5wdXQsIGRzMCkge1xuXHRcdGlmIChMZXhlckFUTlNpbXVsYXRvci5kZWJ1Zykge1xuXHRcdFx0Y29uc29sZS5sb2coXCJzdGFydCBzdGF0ZSBjbG9zdXJlPVwiICsgZHMwLmNvbmZpZ3MpO1xuXHRcdH1cblx0XHRpZiAoZHMwLmlzQWNjZXB0U3RhdGUpIHtcblx0XHRcdC8vIGFsbG93IHplcm8tbGVuZ3RoIHRva2Vuc1xuXHRcdFx0dGhpcy5jYXB0dXJlU2ltU3RhdGUodGhpcy5wcmV2QWNjZXB0LCBpbnB1dCwgZHMwKTtcblx0XHR9XG5cdFx0bGV0IHQgPSBpbnB1dC5MQSgxKTtcblx0XHRsZXQgcyA9IGRzMDsgLy8gcyBpcyBjdXJyZW50L2Zyb20gREZBIHN0YXRlXG5cblx0XHR3aGlsZSAodHJ1ZSkgeyAvLyB3aGlsZSBtb3JlIHdvcmtcblx0XHRcdGlmIChMZXhlckFUTlNpbXVsYXRvci5kZWJ1Zykge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImV4ZWNBVE4gbG9vcCBzdGFydGluZyBjbG9zdXJlOiBcIiArIHMuY29uZmlncyk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQXMgd2UgbW92ZSBzcmMtPnRyZywgc3JjLT50cmcsIHdlIGtlZXAgdHJhY2sgb2YgdGhlIHByZXZpb3VzIHRyZyB0b1xuXHRcdFx0ICogYXZvaWQgbG9va2luZyB1cCB0aGUgREZBIHN0YXRlIGFnYWluLCB3aGljaCBpcyBleHBlbnNpdmUuXG5cdFx0XHQgKiBJZiB0aGUgcHJldmlvdXMgdGFyZ2V0IHdhcyBhbHJlYWR5IHBhcnQgb2YgdGhlIERGQSwgd2UgbWlnaHRcblx0XHRcdCAqIGJlIGFibGUgdG8gYXZvaWQgZG9pbmcgYSByZWFjaCBvcGVyYXRpb24gdXBvbiB0LiBJZiBzIT1udWxsLFxuXHRcdFx0ICogaXQgbWVhbnMgdGhhdCBzZW1hbnRpYyBwcmVkaWNhdGVzIGRpZG4ndCBwcmV2ZW50IHVzIGZyb21cblx0XHRcdCAqIGNyZWF0aW5nIGEgREZBIHN0YXRlLiBPbmNlIHdlIGtub3cgcyE9bnVsbCwgd2UgY2hlY2sgdG8gc2VlIGlmXG5cdFx0XHQgKiB0aGUgREZBIHN0YXRlIGhhcyBhbiBlZGdlIGFscmVhZHkgZm9yIHQuIElmIHNvLCB3ZSBjYW4ganVzdCByZXVzZVxuXHRcdFx0ICogaXQncyBjb25maWd1cmF0aW9uIHNldDsgdGhlcmUncyBubyBwb2ludCBpbiByZS1jb21wdXRpbmcgaXQuXG5cdFx0XHQgKiBUaGlzIGlzIGtpbmQgb2YgbGlrZSBkb2luZyBERkEgc2ltdWxhdGlvbiB3aXRoaW4gdGhlIEFUTlxuXHRcdFx0ICogc2ltdWxhdGlvbiBiZWNhdXNlIERGQSBzaW11bGF0aW9uIGlzIHJlYWxseSBqdXN0IGEgd2F5IHRvIGF2b2lkXG5cdFx0XHQgKiBjb21wdXRpbmcgcmVhY2gvY2xvc3VyZSBzZXRzLiBUZWNobmljYWxseSwgb25jZSB3ZSBrbm93IHRoYXRcblx0XHRcdCAqIHdlIGhhdmUgYSBwcmV2aW91c2x5IGFkZGVkIERGQSBzdGF0ZSwgd2UgY291bGQganVtcCBvdmVyIHRvXG5cdFx0XHQgKiB0aGUgREZBIHNpbXVsYXRvci4gQnV0LCB0aGF0IHdvdWxkIG1lYW4gcG9wcGluZyBiYWNrIGFuZCBmb3J0aFxuXHRcdFx0ICogYSBsb3QgYW5kIG1ha2luZyB0aGluZ3MgbW9yZSBjb21wbGljYXRlZCBhbGdvcml0aG1pY2FsbHkuXG5cdFx0XHQgKiBUaGlzIG9wdGltaXphdGlvbiBtYWtlcyBhIGxvdCBvZiBzZW5zZSBmb3IgbG9vcHMgd2l0aGluIERGQS5cblx0XHRcdCAqIEEgY2hhcmFjdGVyIHdpbGwgdGFrZSB1cyBiYWNrIHRvIGFuIGV4aXN0aW5nIERGQSBzdGF0ZVxuXHRcdFx0ICogdGhhdCBhbHJlYWR5IGhhcyBsb3RzIG9mIGVkZ2VzIG91dCBvZiBpdC4gZS5nLiwgLiogaW4gY29tbWVudHMuXG5cdFx0XHQgKiBwcmludChcIlRhcmdldCBmb3I6XCIgKyBzdHIocykgKyBcIiBhbmQ6XCIgKyBzdHIodCkpXG5cdFx0XHQgKi9cblx0XHRcdGxldCB0YXJnZXQgPSB0aGlzLmdldEV4aXN0aW5nVGFyZ2V0U3RhdGUocywgdCk7XG5cdFx0XHQvLyBwcmludChcIkV4aXN0aW5nOlwiICsgc3RyKHRhcmdldCkpXG5cdFx0XHRpZiAodGFyZ2V0ID09PSBudWxsKSB7XG5cdFx0XHRcdHRhcmdldCA9IHRoaXMuY29tcHV0ZVRhcmdldFN0YXRlKGlucHV0LCBzLCB0KTtcblx0XHRcdFx0Ly8gcHJpbnQoXCJDb21wdXRlZDpcIiArIHN0cih0YXJnZXQpKVxuXHRcdFx0fVxuXHRcdFx0aWYgKHRhcmdldCA9PT0gQVROU2ltdWxhdG9yLkVSUk9SKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIGNvbnN1bWFibGUgaW5wdXQgZWxlbWVudCwgbWFrZSBzdXJlIHRvIGNvbnN1bWUgYmVmb3JlXG5cdFx0XHQvLyBjYXB0dXJpbmcgdGhlIGFjY2VwdCBzdGF0ZSBzbyB0aGUgaW5wdXQgaW5kZXgsIGxpbmUsIGFuZCBjaGFyXG5cdFx0XHQvLyBwb3NpdGlvbiBhY2N1cmF0ZWx5IHJlZmxlY3QgdGhlIHN0YXRlIG9mIHRoZSBpbnRlcnByZXRlciBhdCB0aGVcblx0XHRcdC8vIGVuZCBvZiB0aGUgdG9rZW4uXG5cdFx0XHRpZiAodCAhPT0gVG9rZW4uRU9GKSB7XG5cdFx0XHRcdHRoaXMuY29uc3VtZShpbnB1dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGFyZ2V0LmlzQWNjZXB0U3RhdGUpIHtcblx0XHRcdFx0dGhpcy5jYXB0dXJlU2ltU3RhdGUodGhpcy5wcmV2QWNjZXB0LCBpbnB1dCwgdGFyZ2V0KTtcblx0XHRcdFx0aWYgKHQgPT09IFRva2VuLkVPRikge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0ID0gaW5wdXQuTEEoMSk7XG5cdFx0XHRzID0gdGFyZ2V0OyAvLyBmbGlwOyBjdXJyZW50IERGQSB0YXJnZXQgYmVjb21lcyBuZXcgc3JjL2Zyb20gc3RhdGVcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZmFpbE9yQWNjZXB0KHRoaXMucHJldkFjY2VwdCwgaW5wdXQsIHMuY29uZmlncywgdCk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGFuIGV4aXN0aW5nIHRhcmdldCBzdGF0ZSBmb3IgYW4gZWRnZSBpbiB0aGUgREZBLiBJZiB0aGUgdGFyZ2V0IHN0YXRlXG5cdCAqIGZvciB0aGUgZWRnZSBoYXMgbm90IHlldCBiZWVuIGNvbXB1dGVkIG9yIGlzIG90aGVyd2lzZSBub3QgYXZhaWxhYmxlLFxuXHQgKiB0aGlzIG1ldGhvZCByZXR1cm5zIHtAY29kZSBudWxsfS5cblx0ICpcblx0ICogQHBhcmFtIHMgVGhlIGN1cnJlbnQgREZBIHN0YXRlXG5cdCAqIEBwYXJhbSB0IFRoZSBuZXh0IGlucHV0IHN5bWJvbFxuXHQgKiBAcmV0dXJuIFRoZSBleGlzdGluZyB0YXJnZXQgREZBIHN0YXRlIGZvciB0aGUgZ2l2ZW4gaW5wdXQgc3ltYm9sXG5cdCAqIHtAY29kZSB0fSwgb3Ige0Bjb2RlIG51bGx9IGlmIHRoZSB0YXJnZXQgc3RhdGUgZm9yIHRoaXMgZWRnZSBpcyBub3Rcblx0ICogYWxyZWFkeSBjYWNoZWRcblx0ICovXG5cdGdldEV4aXN0aW5nVGFyZ2V0U3RhdGUocywgdCkge1xuXHRcdGlmIChzLmVkZ2VzID09PSBudWxsIHx8IHQgPCBMZXhlckFUTlNpbXVsYXRvci5NSU5fREZBX0VER0UgfHwgdCA+IExleGVyQVROU2ltdWxhdG9yLk1BWF9ERkFfRURHRSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0bGV0IHRhcmdldCA9IHMuZWRnZXNbdCAtIExleGVyQVROU2ltdWxhdG9yLk1JTl9ERkFfRURHRV07XG5cdFx0aWYodGFyZ2V0PT09dW5kZWZpbmVkKSB7XG5cdFx0XHR0YXJnZXQgPSBudWxsO1xuXHRcdH1cblx0XHRpZiAoTGV4ZXJBVE5TaW11bGF0b3IuZGVidWcgJiYgdGFyZ2V0ICE9PSBudWxsKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcInJldXNlIHN0YXRlIFwiICsgcy5zdGF0ZU51bWJlciArIFwiIGVkZ2UgdG8gXCIgKyB0YXJnZXQuc3RhdGVOdW1iZXIpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGUgYSB0YXJnZXQgc3RhdGUgZm9yIGFuIGVkZ2UgaW4gdGhlIERGQSwgYW5kIGF0dGVtcHQgdG8gYWRkIHRoZVxuXHQgKiBjb21wdXRlZCBzdGF0ZSBhbmQgY29ycmVzcG9uZGluZyBlZGdlIHRvIHRoZSBERkEuXG5cdCAqXG5cdCAqIEBwYXJhbSBpbnB1dCBUaGUgaW5wdXQgc3RyZWFtXG5cdCAqIEBwYXJhbSBzIFRoZSBjdXJyZW50IERGQSBzdGF0ZVxuXHQgKiBAcGFyYW0gdCBUaGUgbmV4dCBpbnB1dCBzeW1ib2xcblx0ICpcblx0ICogQHJldHVybiBUaGUgY29tcHV0ZWQgdGFyZ2V0IERGQSBzdGF0ZSBmb3IgdGhlIGdpdmVuIGlucHV0IHN5bWJvbFxuXHQgKiB7QGNvZGUgdH0uIElmIHtAY29kZSB0fSBkb2VzIG5vdCBsZWFkIHRvIGEgdmFsaWQgREZBIHN0YXRlLCB0aGlzIG1ldGhvZFxuXHQgKiByZXR1cm5zIHtAbGluayAvL0VSUk9SfS5cblx0ICovXG5cdGNvbXB1dGVUYXJnZXRTdGF0ZShpbnB1dCwgcywgdCkge1xuXHRcdGNvbnN0IHJlYWNoID0gbmV3IE9yZGVyZWRBVE5Db25maWdTZXQoKTtcblx0XHQvLyBpZiB3ZSBkb24ndCBmaW5kIGFuIGV4aXN0aW5nIERGQSBzdGF0ZVxuXHRcdC8vIEZpbGwgcmVhY2ggc3RhcnRpbmcgZnJvbSBjbG9zdXJlLCBmb2xsb3dpbmcgdCB0cmFuc2l0aW9uc1xuXHRcdHRoaXMuZ2V0UmVhY2hhYmxlQ29uZmlnU2V0KGlucHV0LCBzLmNvbmZpZ3MsIHJlYWNoLCB0KTtcblxuXHRcdGlmIChyZWFjaC5pdGVtcy5sZW5ndGggPT09IDApIHsgLy8gd2UgZ290IG5vd2hlcmUgb24gdCBmcm9tIHNcblx0XHRcdGlmICghcmVhY2guaGFzU2VtYW50aWNDb250ZXh0KSB7XG5cdFx0XHRcdC8vIHdlIGdvdCBub3doZXJlIG9uIHQsIGRvbid0IHRocm93IG91dCB0aGlzIGtub3dsZWRnZTsgaXQnZFxuXHRcdFx0XHQvLyBjYXVzZSBhIGZhaWxvdmVyIGZyb20gREZBIGxhdGVyLlxuXHRcdFx0XHR0aGlzLmFkZERGQUVkZ2UocywgdCwgQVROU2ltdWxhdG9yLkVSUk9SKTtcblx0XHRcdH1cblx0XHRcdC8vIHN0b3Agd2hlbiB3ZSBjYW4ndCBtYXRjaCBhbnkgbW9yZSBjaGFyXG5cdFx0XHRyZXR1cm4gQVROU2ltdWxhdG9yLkVSUk9SO1xuXHRcdH1cblx0XHQvLyBBZGQgYW4gZWRnZSBmcm9tIHMgdG8gdGFyZ2V0IERGQSBmb3VuZC9jcmVhdGVkIGZvciByZWFjaFxuXHRcdHJldHVybiB0aGlzLmFkZERGQUVkZ2UocywgdCwgbnVsbCwgcmVhY2gpO1xuXHR9XG5cblx0ZmFpbE9yQWNjZXB0KHByZXZBY2NlcHQsIGlucHV0LCByZWFjaCwgdCkge1xuXHRcdGlmICh0aGlzLnByZXZBY2NlcHQuZGZhU3RhdGUgIT09IG51bGwpIHtcblx0XHRcdGNvbnN0IGxleGVyQWN0aW9uRXhlY3V0b3IgPSBwcmV2QWNjZXB0LmRmYVN0YXRlLmxleGVyQWN0aW9uRXhlY3V0b3I7XG5cdFx0XHR0aGlzLmFjY2VwdChpbnB1dCwgbGV4ZXJBY3Rpb25FeGVjdXRvciwgdGhpcy5zdGFydEluZGV4LFxuXHRcdFx0XHRcdHByZXZBY2NlcHQuaW5kZXgsIHByZXZBY2NlcHQubGluZSwgcHJldkFjY2VwdC5jb2x1bW4pO1xuXHRcdFx0cmV0dXJuIHByZXZBY2NlcHQuZGZhU3RhdGUucHJlZGljdGlvbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaWYgbm8gYWNjZXB0IGFuZCBFT0YgaXMgZmlyc3QgY2hhciwgcmV0dXJuIEVPRlxuXHRcdFx0aWYgKHQgPT09IFRva2VuLkVPRiAmJiBpbnB1dC5pbmRleCA9PT0gdGhpcy5zdGFydEluZGV4KSB7XG5cdFx0XHRcdHJldHVybiBUb2tlbi5FT0Y7XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbih0aGlzLnJlY29nLCBpbnB1dCwgdGhpcy5zdGFydEluZGV4LCByZWFjaCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEdpdmVuIGEgc3RhcnRpbmcgY29uZmlndXJhdGlvbiBzZXQsIGZpZ3VyZSBvdXQgYWxsIEFUTiBjb25maWd1cmF0aW9uc1xuXHQgKiB3ZSBjYW4gcmVhY2ggdXBvbiBpbnB1dCB7QGNvZGUgdH0uIFBhcmFtZXRlciB7QGNvZGUgcmVhY2h9IGlzIGEgcmV0dXJuXG5cdCAqIHBhcmFtZXRlci5cblx0ICovXG5cdGdldFJlYWNoYWJsZUNvbmZpZ1NldChpbnB1dCwgY2xvc3VyZSxcblx0XHRcdHJlYWNoLCB0KSB7XG5cdFx0Ly8gdGhpcyBpcyB1c2VkIHRvIHNraXAgcHJvY2Vzc2luZyBmb3IgY29uZmlncyB3aGljaCBoYXZlIGEgbG93ZXIgcHJpb3JpdHlcblx0XHQvLyB0aGFuIGEgY29uZmlnIHRoYXQgYWxyZWFkeSByZWFjaGVkIGFuIGFjY2VwdCBzdGF0ZSBmb3IgdGhlIHNhbWUgcnVsZVxuXHRcdGxldCBza2lwQWx0ID0gQVROLklOVkFMSURfQUxUX05VTUJFUjtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNsb3N1cmUuaXRlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGNmZyA9IGNsb3N1cmUuaXRlbXNbaV07XG5cdFx0XHRjb25zdCBjdXJyZW50QWx0UmVhY2hlZEFjY2VwdFN0YXRlID0gKGNmZy5hbHQgPT09IHNraXBBbHQpO1xuXHRcdFx0aWYgKGN1cnJlbnRBbHRSZWFjaGVkQWNjZXB0U3RhdGUgJiYgY2ZnLnBhc3NlZFRocm91Z2hOb25HcmVlZHlEZWNpc2lvbikge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdGlmIChMZXhlckFUTlNpbXVsYXRvci5kZWJ1Zykge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcInRlc3RpbmcgJXMgYXQgJXNcXG5cIiwgdGhpcy5nZXRUb2tlbk5hbWUodCksIGNmZ1xuXHRcdFx0XHRcdFx0LnRvU3RyaW5nKHRoaXMucmVjb2csIHRydWUpKTtcblx0XHRcdH1cblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY2ZnLnN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGNvbnN0IHRyYW5zID0gY2ZnLnN0YXRlLnRyYW5zaXRpb25zW2pdOyAvLyBmb3IgZWFjaCB0cmFuc2l0aW9uXG5cdFx0XHRcdGNvbnN0IHRhcmdldCA9IHRoaXMuZ2V0UmVhY2hhYmxlVGFyZ2V0KHRyYW5zLCB0KTtcblx0XHRcdFx0aWYgKHRhcmdldCAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdGxldCBsZXhlckFjdGlvbkV4ZWN1dG9yID0gY2ZnLmxleGVyQWN0aW9uRXhlY3V0b3I7XG5cdFx0XHRcdFx0aWYgKGxleGVyQWN0aW9uRXhlY3V0b3IgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdGxleGVyQWN0aW9uRXhlY3V0b3IgPSBsZXhlckFjdGlvbkV4ZWN1dG9yLmZpeE9mZnNldEJlZm9yZU1hdGNoKGlucHV0LmluZGV4IC0gdGhpcy5zdGFydEluZGV4KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3QgdHJlYXRFb2ZBc0Vwc2lsb24gPSAodCA9PT0gVG9rZW4uRU9GKTtcblx0XHRcdFx0XHRjb25zdCBjb25maWcgPSBuZXcgTGV4ZXJBVE5Db25maWcoe3N0YXRlOnRhcmdldCwgbGV4ZXJBY3Rpb25FeGVjdXRvcjpsZXhlckFjdGlvbkV4ZWN1dG9yfSwgY2ZnKTtcblx0XHRcdFx0XHRpZiAodGhpcy5jbG9zdXJlKGlucHV0LCBjb25maWcsIHJlYWNoLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50QWx0UmVhY2hlZEFjY2VwdFN0YXRlLCB0cnVlLCB0cmVhdEVvZkFzRXBzaWxvbikpIHtcblx0XHRcdFx0XHRcdC8vIGFueSByZW1haW5pbmcgY29uZmlncyBmb3IgdGhpcyBhbHQgaGF2ZSBhIGxvd2VyIHByaW9yaXR5XG5cdFx0XHRcdFx0XHQvLyB0aGFuIHRoZSBvbmUgdGhhdCBqdXN0IHJlYWNoZWQgYW4gYWNjZXB0IHN0YXRlLlxuXHRcdFx0XHRcdFx0c2tpcEFsdCA9IGNmZy5hbHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YWNjZXB0KGlucHV0LCBsZXhlckFjdGlvbkV4ZWN1dG9yLFxuXHRcdFx0ICAgc3RhcnRJbmRleCwgaW5kZXgsIGxpbmUsIGNoYXJQb3MpIHtcblx0XHQgICBpZiAoTGV4ZXJBVE5TaW11bGF0b3IuZGVidWcpIHtcblx0XHRcdCAgIGNvbnNvbGUubG9nKFwiQUNUSU9OICVzXFxuXCIsIGxleGVyQWN0aW9uRXhlY3V0b3IpO1xuXHRcdCAgIH1cblx0XHQgICAvLyBzZWVrIHRvIGFmdGVyIGxhc3QgY2hhciBpbiB0b2tlblxuXHRcdCAgIGlucHV0LnNlZWsoaW5kZXgpO1xuXHRcdCAgIHRoaXMubGluZSA9IGxpbmU7XG5cdFx0ICAgdGhpcy5jb2x1bW4gPSBjaGFyUG9zO1xuXHRcdCAgIGlmIChsZXhlckFjdGlvbkV4ZWN1dG9yICE9PSBudWxsICYmIHRoaXMucmVjb2cgIT09IG51bGwpIHtcblx0XHRcdCAgIGxleGVyQWN0aW9uRXhlY3V0b3IuZXhlY3V0ZSh0aGlzLnJlY29nLCBpbnB1dCwgc3RhcnRJbmRleCk7XG5cdFx0ICAgfVxuXHQgICB9XG5cblx0Z2V0UmVhY2hhYmxlVGFyZ2V0KHRyYW5zLCB0KSB7XG5cdFx0aWYgKHRyYW5zLm1hdGNoZXModCwgMCwgTGV4ZXIuTUFYX0NIQVJfVkFMVUUpKSB7XG5cdFx0XHRyZXR1cm4gdHJhbnMudGFyZ2V0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRjb21wdXRlU3RhcnRTdGF0ZShpbnB1dCwgcCkge1xuXHRcdGNvbnN0IGluaXRpYWxDb250ZXh0ID0gUHJlZGljdGlvbkNvbnRleHQuRU1QVFk7XG5cdFx0Y29uc3QgY29uZmlncyA9IG5ldyBPcmRlcmVkQVROQ29uZmlnU2V0KCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwLnRyYW5zaXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCB0YXJnZXQgPSBwLnRyYW5zaXRpb25zW2ldLnRhcmdldDtcblx0XHRcdGNvbnN0IGNmZyA9IG5ldyBMZXhlckFUTkNvbmZpZyh7c3RhdGU6dGFyZ2V0LCBhbHQ6aSsxLCBjb250ZXh0OmluaXRpYWxDb250ZXh0fSwgbnVsbCk7XG5cdFx0XHR0aGlzLmNsb3N1cmUoaW5wdXQsIGNmZywgY29uZmlncywgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG5cdFx0fVxuXHRcdHJldHVybiBjb25maWdzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNpbmNlIHRoZSBhbHRlcm5hdGl2ZXMgd2l0aGluIGFueSBsZXhlciBkZWNpc2lvbiBhcmUgb3JkZXJlZCBieVxuXHQgKiBwcmVmZXJlbmNlLCB0aGlzIG1ldGhvZCBzdG9wcyBwdXJzdWluZyB0aGUgY2xvc3VyZSBhcyBzb29uIGFzIGFuIGFjY2VwdFxuXHQgKiBzdGF0ZSBpcyByZWFjaGVkLiBBZnRlciB0aGUgZmlyc3QgYWNjZXB0IHN0YXRlIGlzIHJlYWNoZWQgYnkgZGVwdGgtZmlyc3Rcblx0ICogc2VhcmNoIGZyb20ge0Bjb2RlIGNvbmZpZ30sIGFsbCBvdGhlciAocG90ZW50aWFsbHkgcmVhY2hhYmxlKSBzdGF0ZXMgZm9yXG5cdCAqIHRoaXMgcnVsZSB3b3VsZCBoYXZlIGEgbG93ZXIgcHJpb3JpdHkuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IHtAY29kZSB0cnVlfSBpZiBhbiBhY2NlcHQgc3RhdGUgaXMgcmVhY2hlZCwgb3RoZXJ3aXNlXG5cdCAqIHtAY29kZSBmYWxzZX0uXG5cdCAqL1xuXHRjbG9zdXJlKGlucHV0LCBjb25maWcsIGNvbmZpZ3MsXG5cdFx0XHRjdXJyZW50QWx0UmVhY2hlZEFjY2VwdFN0YXRlLCBzcGVjdWxhdGl2ZSwgdHJlYXRFb2ZBc0Vwc2lsb24pIHtcblx0XHRsZXQgY2ZnID0gbnVsbDtcblx0XHRpZiAoTGV4ZXJBVE5TaW11bGF0b3IuZGVidWcpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiY2xvc3VyZShcIiArIGNvbmZpZy50b1N0cmluZyh0aGlzLnJlY29nLCB0cnVlKSArIFwiKVwiKTtcblx0XHR9XG5cdFx0aWYgKGNvbmZpZy5zdGF0ZSBpbnN0YW5jZW9mIFJ1bGVTdG9wU3RhdGUpIHtcblx0XHRcdGlmIChMZXhlckFUTlNpbXVsYXRvci5kZWJ1Zykge1xuXHRcdFx0XHRpZiAodGhpcy5yZWNvZyAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiY2xvc3VyZSBhdCAlcyBydWxlIHN0b3AgJXNcXG5cIiwgdGhpcy5yZWNvZy5ydWxlTmFtZXNbY29uZmlnLnN0YXRlLnJ1bGVJbmRleF0sIGNvbmZpZyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJjbG9zdXJlIGF0IHJ1bGUgc3RvcCAlc1xcblwiLCBjb25maWcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoY29uZmlnLmNvbnRleHQgPT09IG51bGwgfHwgY29uZmlnLmNvbnRleHQuaGFzRW1wdHlQYXRoKCkpIHtcblx0XHRcdFx0aWYgKGNvbmZpZy5jb250ZXh0ID09PSBudWxsIHx8IGNvbmZpZy5jb250ZXh0LmlzRW1wdHkoKSkge1xuXHRcdFx0XHRcdGNvbmZpZ3MuYWRkKGNvbmZpZyk7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uZmlncy5hZGQobmV3IExleGVyQVROQ29uZmlnKHsgc3RhdGU6Y29uZmlnLnN0YXRlLCBjb250ZXh0OlByZWRpY3Rpb25Db250ZXh0LkVNUFRZfSwgY29uZmlnKSk7XG5cdFx0XHRcdFx0Y3VycmVudEFsdFJlYWNoZWRBY2NlcHRTdGF0ZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChjb25maWcuY29udGV4dCAhPT0gbnVsbCAmJiAhY29uZmlnLmNvbnRleHQuaXNFbXB0eSgpKSB7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLmNvbnRleHQubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoY29uZmlnLmNvbnRleHQuZ2V0UmV0dXJuU3RhdGUoaSkgIT09IFByZWRpY3Rpb25Db250ZXh0LkVNUFRZX1JFVFVSTl9TVEFURSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgbmV3Q29udGV4dCA9IGNvbmZpZy5jb250ZXh0LmdldFBhcmVudChpKTsgLy8gXCJwb3BcIiByZXR1cm4gc3RhdGVcblx0XHRcdFx0XHRcdGNvbnN0IHJldHVyblN0YXRlID0gdGhpcy5hdG4uc3RhdGVzW2NvbmZpZy5jb250ZXh0LmdldFJldHVyblN0YXRlKGkpXTtcblx0XHRcdFx0XHRcdGNmZyA9IG5ldyBMZXhlckFUTkNvbmZpZyh7IHN0YXRlOnJldHVyblN0YXRlLCBjb250ZXh0Om5ld0NvbnRleHQgfSwgY29uZmlnKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRBbHRSZWFjaGVkQWNjZXB0U3RhdGUgPSB0aGlzLmNsb3N1cmUoaW5wdXQsIGNmZyxcblx0XHRcdFx0XHRcdFx0XHRjb25maWdzLCBjdXJyZW50QWx0UmVhY2hlZEFjY2VwdFN0YXRlLCBzcGVjdWxhdGl2ZSxcblx0XHRcdFx0XHRcdFx0XHR0cmVhdEVvZkFzRXBzaWxvbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY3VycmVudEFsdFJlYWNoZWRBY2NlcHRTdGF0ZTtcblx0XHR9XG5cdFx0Ly8gb3B0aW1pemF0aW9uXG5cdFx0aWYgKCFjb25maWcuc3RhdGUuZXBzaWxvbk9ubHlUcmFuc2l0aW9ucykge1xuXHRcdFx0aWYgKCFjdXJyZW50QWx0UmVhY2hlZEFjY2VwdFN0YXRlIHx8ICFjb25maWcucGFzc2VkVGhyb3VnaE5vbkdyZWVkeURlY2lzaW9uKSB7XG5cdFx0XHRcdGNvbmZpZ3MuYWRkKGNvbmZpZyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29uZmlnLnN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRjb25zdCB0cmFucyA9IGNvbmZpZy5zdGF0ZS50cmFuc2l0aW9uc1tqXTtcblx0XHRcdGNmZyA9IHRoaXMuZ2V0RXBzaWxvblRhcmdldChpbnB1dCwgY29uZmlnLCB0cmFucywgY29uZmlncywgc3BlY3VsYXRpdmUsIHRyZWF0RW9mQXNFcHNpbG9uKTtcblx0XHRcdGlmIChjZmcgIT09IG51bGwpIHtcblx0XHRcdFx0Y3VycmVudEFsdFJlYWNoZWRBY2NlcHRTdGF0ZSA9IHRoaXMuY2xvc3VyZShpbnB1dCwgY2ZnLCBjb25maWdzLFxuXHRcdFx0XHRcdFx0Y3VycmVudEFsdFJlYWNoZWRBY2NlcHRTdGF0ZSwgc3BlY3VsYXRpdmUsIHRyZWF0RW9mQXNFcHNpbG9uKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGN1cnJlbnRBbHRSZWFjaGVkQWNjZXB0U3RhdGU7XG5cdH1cblxuXHQvLyBzaWRlLWVmZmVjdDogY2FuIGFsdGVyIGNvbmZpZ3MuaGFzU2VtYW50aWNDb250ZXh0XG5cdGdldEVwc2lsb25UYXJnZXQoaW5wdXQsIGNvbmZpZywgdHJhbnMsXG5cdFx0XHRjb25maWdzLCBzcGVjdWxhdGl2ZSwgdHJlYXRFb2ZBc0Vwc2lsb24pIHtcblx0XHRsZXQgY2ZnID0gbnVsbDtcblx0XHRpZiAodHJhbnMuc2VyaWFsaXphdGlvblR5cGUgPT09IFRyYW5zaXRpb24uUlVMRSkge1xuXHRcdFx0Y29uc3QgbmV3Q29udGV4dCA9IFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0LmNyZWF0ZShjb25maWcuY29udGV4dCwgdHJhbnMuZm9sbG93U3RhdGUuc3RhdGVOdW1iZXIpO1xuXHRcdFx0Y2ZnID0gbmV3IExleGVyQVROQ29uZmlnKCB7IHN0YXRlOnRyYW5zLnRhcmdldCwgY29udGV4dDpuZXdDb250ZXh0fSwgY29uZmlnKTtcblx0XHR9IGVsc2UgaWYgKHRyYW5zLnNlcmlhbGl6YXRpb25UeXBlID09PSBUcmFuc2l0aW9uLlBSRUNFREVOQ0UpIHtcblx0XHRcdHRocm93IFwiUHJlY2VkZW5jZSBwcmVkaWNhdGVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGxleGVycy5cIjtcblx0XHR9IGVsc2UgaWYgKHRyYW5zLnNlcmlhbGl6YXRpb25UeXBlID09PSBUcmFuc2l0aW9uLlBSRURJQ0FURSkge1xuXHRcdFx0Ly8gVHJhY2sgdHJhdmVyc2luZyBzZW1hbnRpYyBwcmVkaWNhdGVzLiBJZiB3ZSB0cmF2ZXJzZSxcblx0XHRcdC8vIHdlIGNhbm5vdCBhZGQgYSBERkEgc3RhdGUgZm9yIHRoaXMgXCJyZWFjaFwiIGNvbXB1dGF0aW9uXG5cdFx0XHQvLyBiZWNhdXNlIHRoZSBERkEgd291bGQgbm90IHRlc3QgdGhlIHByZWRpY2F0ZSBhZ2FpbiBpbiB0aGVcblx0XHRcdC8vIGZ1dHVyZS4gUmF0aGVyIHRoYW4gY3JlYXRpbmcgY29sbGVjdGlvbnMgb2Ygc2VtYW50aWMgcHJlZGljYXRlc1xuXHRcdFx0Ly8gbGlrZSB2MyBhbmQgdGVzdGluZyB0aGVtIG9uIHByZWRpY3Rpb24sIHY0IHdpbGwgdGVzdCB0aGVtIG9uIHRoZVxuXHRcdFx0Ly8gZmx5IGFsbCB0aGUgdGltZSB1c2luZyB0aGUgQVROIG5vdCB0aGUgREZBLiBUaGlzIGlzIHNsb3dlciBidXRcblx0XHRcdC8vIHNlbWFudGljYWxseSBpdCdzIG5vdCB1c2VkIHRoYXQgb2Z0ZW4uIE9uZSBvZiB0aGUga2V5IGVsZW1lbnRzIHRvXG5cdFx0XHQvLyB0aGlzIHByZWRpY2F0ZSBtZWNoYW5pc20gaXMgbm90IGFkZGluZyBERkEgc3RhdGVzIHRoYXQgc2VlXG5cdFx0XHQvLyBwcmVkaWNhdGVzIGltbWVkaWF0ZWx5IGFmdGVyd2FyZHMgaW4gdGhlIEFUTi4gRm9yIGV4YW1wbGUsXG5cblx0XHRcdC8vIGEgOiBJRCB7cDF9PyB8IElEIHtwMn0/IDtcblxuXHRcdFx0Ly8gc2hvdWxkIGNyZWF0ZSB0aGUgc3RhcnQgc3RhdGUgZm9yIHJ1bGUgJ2EnICh0byBzYXZlIHN0YXJ0IHN0YXRlXG5cdFx0XHQvLyBjb21wZXRpdGlvbiksIGJ1dCBzaG91bGQgbm90IGNyZWF0ZSB0YXJnZXQgb2YgSUQgc3RhdGUuIFRoZVxuXHRcdFx0Ly8gY29sbGVjdGlvbiBvZiBBVE4gc3RhdGVzIHRoZSBmb2xsb3dpbmcgSUQgcmVmZXJlbmNlcyBpbmNsdWRlc1xuXHRcdFx0Ly8gc3RhdGVzIHJlYWNoZWQgYnkgdHJhdmVyc2luZyBwcmVkaWNhdGVzLiBTaW5jZSB0aGlzIGlzIHdoZW4gd2Vcblx0XHRcdC8vIHRlc3QgdGhlbSwgd2UgY2Fubm90IGNhc2ggdGhlIERGQSBzdGF0ZSB0YXJnZXQgb2YgSUQuXG5cblx0XHRcdGlmIChMZXhlckFUTlNpbXVsYXRvci5kZWJ1Zykge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkVWQUwgcnVsZSBcIiArIHRyYW5zLnJ1bGVJbmRleCArIFwiOlwiICsgdHJhbnMucHJlZEluZGV4KTtcblx0XHRcdH1cblx0XHRcdGNvbmZpZ3MuaGFzU2VtYW50aWNDb250ZXh0ID0gdHJ1ZTtcblx0XHRcdGlmICh0aGlzLmV2YWx1YXRlUHJlZGljYXRlKGlucHV0LCB0cmFucy5ydWxlSW5kZXgsIHRyYW5zLnByZWRJbmRleCwgc3BlY3VsYXRpdmUpKSB7XG5cdFx0XHRcdGNmZyA9IG5ldyBMZXhlckFUTkNvbmZpZyh7IHN0YXRlOnRyYW5zLnRhcmdldH0sIGNvbmZpZyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0cmFucy5zZXJpYWxpemF0aW9uVHlwZSA9PT0gVHJhbnNpdGlvbi5BQ1RJT04pIHtcblx0XHRcdGlmIChjb25maWcuY29udGV4dCA9PT0gbnVsbCB8fCBjb25maWcuY29udGV4dC5oYXNFbXB0eVBhdGgoKSkge1xuXHRcdFx0XHQvLyBleGVjdXRlIGFjdGlvbnMgYW55d2hlcmUgaW4gdGhlIHN0YXJ0IHJ1bGUgZm9yIGEgdG9rZW4uXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIFRPRE86IGlmIHRoZSBlbnRyeSBydWxlIGlzIGludm9rZWQgcmVjdXJzaXZlbHksIHNvbWVcblx0XHRcdFx0Ly8gYWN0aW9ucyBtYXkgYmUgZXhlY3V0ZWQgZHVyaW5nIHRoZSByZWN1cnNpdmUgY2FsbC4gVGhlXG5cdFx0XHRcdC8vIHByb2JsZW0gY2FuIGFwcGVhciB3aGVuIGhhc0VtcHR5UGF0aCgpIGlzIHRydWUgYnV0XG5cdFx0XHRcdC8vIGlzRW1wdHkoKSBpcyBmYWxzZS4gSW4gdGhpcyBjYXNlLCB0aGUgY29uZmlnIG5lZWRzIHRvIGJlXG5cdFx0XHRcdC8vIHNwbGl0IGludG8gdHdvIGNvbnRleHRzIC0gb25lIHdpdGgganVzdCB0aGUgZW1wdHkgcGF0aFxuXHRcdFx0XHQvLyBhbmQgYW5vdGhlciB3aXRoIGV2ZXJ5dGhpbmcgYnV0IHRoZSBlbXB0eSBwYXRoLlxuXHRcdFx0XHQvLyBVbmZvcnR1bmF0ZWx5LCB0aGUgY3VycmVudCBhbGdvcml0aG0gZG9lcyBub3QgYWxsb3dcblx0XHRcdFx0Ly8gZ2V0RXBzaWxvblRhcmdldCB0byByZXR1cm4gdHdvIGNvbmZpZ3VyYXRpb25zLCBzb1xuXHRcdFx0XHQvLyBhZGRpdGlvbmFsIG1vZGlmaWNhdGlvbnMgYXJlIG5lZWRlZCBiZWZvcmUgd2UgY2FuIHN1cHBvcnRcblx0XHRcdFx0Ly8gdGhlIHNwbGl0IG9wZXJhdGlvbi5cblx0XHRcdFx0Y29uc3QgbGV4ZXJBY3Rpb25FeGVjdXRvciA9IExleGVyQWN0aW9uRXhlY3V0b3IuYXBwZW5kKGNvbmZpZy5sZXhlckFjdGlvbkV4ZWN1dG9yLFxuXHRcdFx0XHRcdFx0dGhpcy5hdG4ubGV4ZXJBY3Rpb25zW3RyYW5zLmFjdGlvbkluZGV4XSk7XG5cdFx0XHRcdGNmZyA9IG5ldyBMZXhlckFUTkNvbmZpZyh7IHN0YXRlOnRyYW5zLnRhcmdldCwgbGV4ZXJBY3Rpb25FeGVjdXRvcjpsZXhlckFjdGlvbkV4ZWN1dG9yIH0sIGNvbmZpZyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZ25vcmUgYWN0aW9ucyBpbiByZWZlcmVuY2VkIHJ1bGVzXG5cdFx0XHRcdGNmZyA9IG5ldyBMZXhlckFUTkNvbmZpZyggeyBzdGF0ZTp0cmFucy50YXJnZXR9LCBjb25maWcpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHJhbnMuc2VyaWFsaXphdGlvblR5cGUgPT09IFRyYW5zaXRpb24uRVBTSUxPTikge1xuXHRcdFx0Y2ZnID0gbmV3IExleGVyQVROQ29uZmlnKHsgc3RhdGU6dHJhbnMudGFyZ2V0fSwgY29uZmlnKTtcblx0XHR9IGVsc2UgaWYgKHRyYW5zLnNlcmlhbGl6YXRpb25UeXBlID09PSBUcmFuc2l0aW9uLkFUT00gfHxcblx0XHRcdFx0XHR0cmFucy5zZXJpYWxpemF0aW9uVHlwZSA9PT0gVHJhbnNpdGlvbi5SQU5HRSB8fFxuXHRcdFx0XHRcdHRyYW5zLnNlcmlhbGl6YXRpb25UeXBlID09PSBUcmFuc2l0aW9uLlNFVCkge1xuXHRcdFx0aWYgKHRyZWF0RW9mQXNFcHNpbG9uKSB7XG5cdFx0XHRcdGlmICh0cmFucy5tYXRjaGVzKFRva2VuLkVPRiwgMCwgTGV4ZXIuTUFYX0NIQVJfVkFMVUUpKSB7XG5cdFx0XHRcdFx0Y2ZnID0gbmV3IExleGVyQVROQ29uZmlnKCB7IHN0YXRlOnRyYW5zLnRhcmdldCB9LCBjb25maWcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjZmc7XG5cdH1cblxuXHQvKipcblx0ICogRXZhbHVhdGUgYSBwcmVkaWNhdGUgc3BlY2lmaWVkIGluIHRoZSBsZXhlci5cblx0ICpcblx0ICogPHA+SWYge0Bjb2RlIHNwZWN1bGF0aXZlfSBpcyB7QGNvZGUgdHJ1ZX0sIHRoaXMgbWV0aG9kIHdhcyBjYWxsZWQgYmVmb3JlXG5cdCAqIHtAbGluayAvL2NvbnN1bWV9IGZvciB0aGUgbWF0Y2hlZCBjaGFyYWN0ZXIuIFRoaXMgbWV0aG9kIHNob3VsZCBjYWxsXG5cdCAqIHtAbGluayAvL2NvbnN1bWV9IGJlZm9yZSBldmFsdWF0aW5nIHRoZSBwcmVkaWNhdGUgdG8gZW5zdXJlIHBvc2l0aW9uXG5cdCAqIHNlbnNpdGl2ZSB2YWx1ZXMsIGluY2x1ZGluZyB7QGxpbmsgTGV4ZXIvL2dldFRleHR9LCB7QGxpbmsgTGV4ZXIvL2dldExpbmV9LFxuXHQgKiBhbmQge0BsaW5rIExleGVyLy9nZXRjb2x1bW59LCBwcm9wZXJseSByZWZsZWN0IHRoZSBjdXJyZW50XG5cdCAqIGxleGVyIHN0YXRlLiBUaGlzIG1ldGhvZCBzaG91bGQgcmVzdG9yZSB7QGNvZGUgaW5wdXR9IGFuZCB0aGUgc2ltdWxhdG9yXG5cdCAqIHRvIHRoZSBvcmlnaW5hbCBzdGF0ZSBiZWZvcmUgcmV0dXJuaW5nIChpLmUuIHVuZG8gdGhlIGFjdGlvbnMgbWFkZSBieSB0aGVcblx0ICogY2FsbCB0byB7QGxpbmsgLy9jb25zdW1lfS48L3A+XG5cdCAqXG5cdCAqIEBwYXJhbSBpbnB1dCBUaGUgaW5wdXQgc3RyZWFtLlxuXHQgKiBAcGFyYW0gcnVsZUluZGV4IFRoZSBydWxlIGNvbnRhaW5pbmcgdGhlIHByZWRpY2F0ZS5cblx0ICogQHBhcmFtIHByZWRJbmRleCBUaGUgaW5kZXggb2YgdGhlIHByZWRpY2F0ZSB3aXRoaW4gdGhlIHJ1bGUuXG5cdCAqIEBwYXJhbSBzcGVjdWxhdGl2ZSB7QGNvZGUgdHJ1ZX0gaWYgdGhlIGN1cnJlbnQgaW5kZXggaW4ge0Bjb2RlIGlucHV0fSBpc1xuXHQgKiBvbmUgY2hhcmFjdGVyIGJlZm9yZSB0aGUgcHJlZGljYXRlJ3MgbG9jYXRpb24uXG5cdCAqXG5cdCAqIEByZXR1cm4ge0Bjb2RlIHRydWV9IGlmIHRoZSBzcGVjaWZpZWQgcHJlZGljYXRlIGV2YWx1YXRlcyB0b1xuXHQgKiB7QGNvZGUgdHJ1ZX0uXG5cdCAqL1xuXHRldmFsdWF0ZVByZWRpY2F0ZShpbnB1dCwgcnVsZUluZGV4LFxuXHRcdFx0cHJlZEluZGV4LCBzcGVjdWxhdGl2ZSkge1xuXHRcdC8vIGFzc3VtZSB0cnVlIGlmIG5vIHJlY29nbml6ZXIgd2FzIHByb3ZpZGVkXG5cdFx0aWYgKHRoaXMucmVjb2cgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAoIXNwZWN1bGF0aXZlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZWNvZy5zZW1wcmVkKG51bGwsIHJ1bGVJbmRleCwgcHJlZEluZGV4KTtcblx0XHR9XG5cdFx0Y29uc3Qgc2F2ZWRjb2x1bW4gPSB0aGlzLmNvbHVtbjtcblx0XHRjb25zdCBzYXZlZExpbmUgPSB0aGlzLmxpbmU7XG5cdFx0Y29uc3QgaW5kZXggPSBpbnB1dC5pbmRleDtcblx0XHRjb25zdCBtYXJrZXIgPSBpbnB1dC5tYXJrKCk7XG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMuY29uc3VtZShpbnB1dCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZWNvZy5zZW1wcmVkKG51bGwsIHJ1bGVJbmRleCwgcHJlZEluZGV4KTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0dGhpcy5jb2x1bW4gPSBzYXZlZGNvbHVtbjtcblx0XHRcdHRoaXMubGluZSA9IHNhdmVkTGluZTtcblx0XHRcdGlucHV0LnNlZWsoaW5kZXgpO1xuXHRcdFx0aW5wdXQucmVsZWFzZShtYXJrZXIpO1xuXHRcdH1cblx0fVxuXG5cdGNhcHR1cmVTaW1TdGF0ZShzZXR0aW5ncywgaW5wdXQsIGRmYVN0YXRlKSB7XG5cdFx0c2V0dGluZ3MuaW5kZXggPSBpbnB1dC5pbmRleDtcblx0XHRzZXR0aW5ncy5saW5lID0gdGhpcy5saW5lO1xuXHRcdHNldHRpbmdzLmNvbHVtbiA9IHRoaXMuY29sdW1uO1xuXHRcdHNldHRpbmdzLmRmYVN0YXRlID0gZGZhU3RhdGU7XG5cdH1cblxuXHRhZGRERkFFZGdlKGZyb21fLCB0aywgdG8sIGNmZ3MpIHtcblx0XHRpZiAodG8gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dG8gPSBudWxsO1xuXHRcdH1cblx0XHRpZiAoY2ZncyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjZmdzID0gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHRvID09PSBudWxsICYmIGNmZ3MgIT09IG51bGwpIHtcblx0XHRcdC8vIGxlYWRpbmcgdG8gdGhpcyBjYWxsLCBBVE5Db25maWdTZXQuaGFzU2VtYW50aWNDb250ZXh0IGlzIHVzZWQgYXMgYVxuXHRcdFx0Ly8gbWFya2VyIGluZGljYXRpbmcgZHluYW1pYyBwcmVkaWNhdGUgZXZhbHVhdGlvbiBtYWtlcyB0aGlzIGVkZ2Vcblx0XHRcdC8vIGRlcGVuZGVudCBvbiB0aGUgc3BlY2lmaWMgaW5wdXQgc2VxdWVuY2UsIHNvIHRoZSBzdGF0aWMgZWRnZSBpbiB0aGVcblx0XHRcdC8vIERGQSBzaG91bGQgYmUgb21pdHRlZC4gVGhlIHRhcmdldCBERkFTdGF0ZSBpcyBzdGlsbCBjcmVhdGVkIHNpbmNlXG5cdFx0XHQvLyBleGVjQVROIGhhcyB0aGUgYWJpbGl0eSB0byByZXN5bmNocm9uaXplIHdpdGggdGhlIERGQSBzdGF0ZSBjYWNoZVxuXHRcdFx0Ly8gZm9sbG93aW5nIHRoZSBwcmVkaWNhdGUgZXZhbHVhdGlvbiBzdGVwLlxuXHRcdFx0Ly9cblx0XHRcdC8vIFRKUCBub3RlczogbmV4dCB0aW1lIHRocm91Z2ggdGhlIERGQSwgd2Ugc2VlIGEgcHJlZCBhZ2FpbiBhbmQgZXZhbC5cblx0XHRcdC8vIElmIHRoYXQgZ2V0cyB1cyB0byBhIHByZXZpb3VzbHkgY3JlYXRlZCAoYnV0IGRhbmdsaW5nKSBERkFcblx0XHRcdC8vIHN0YXRlLCB3ZSBjYW4gY29udGludWUgaW4gcHVyZSBERkEgbW9kZSBmcm9tIHRoZXJlLlxuXHRcdFx0Ly8gL1xuXHRcdFx0Y29uc3Qgc3VwcHJlc3NFZGdlID0gY2Zncy5oYXNTZW1hbnRpY0NvbnRleHQ7XG5cdFx0XHRjZmdzLmhhc1NlbWFudGljQ29udGV4dCA9IGZhbHNlO1xuXG5cdFx0XHR0byA9IHRoaXMuYWRkREZBU3RhdGUoY2Zncyk7XG5cblx0XHRcdGlmIChzdXBwcmVzc0VkZ2UpIHtcblx0XHRcdFx0cmV0dXJuIHRvO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBhZGQgdGhlIGVkZ2Vcblx0XHRpZiAodGsgPCBMZXhlckFUTlNpbXVsYXRvci5NSU5fREZBX0VER0UgfHwgdGsgPiBMZXhlckFUTlNpbXVsYXRvci5NQVhfREZBX0VER0UpIHtcblx0XHRcdC8vIE9ubHkgdHJhY2sgZWRnZXMgd2l0aGluIHRoZSBERkEgYm91bmRzXG5cdFx0XHRyZXR1cm4gdG87XG5cdFx0fVxuXHRcdGlmIChMZXhlckFUTlNpbXVsYXRvci5kZWJ1Zykge1xuXHRcdFx0Y29uc29sZS5sb2coXCJFREdFIFwiICsgZnJvbV8gKyBcIiAtPiBcIiArIHRvICsgXCIgdXBvbiBcIiArIHRrKTtcblx0XHR9XG5cdFx0aWYgKGZyb21fLmVkZ2VzID09PSBudWxsKSB7XG5cdFx0XHQvLyBtYWtlIHJvb20gZm9yIHRva2VucyAxLi5uIGFuZCAtMSBtYXNxdWVyYWRpbmcgYXMgaW5kZXggMFxuXHRcdFx0ZnJvbV8uZWRnZXMgPSBbXTtcblx0XHR9XG5cdFx0ZnJvbV8uZWRnZXNbdGsgLSBMZXhlckFUTlNpbXVsYXRvci5NSU5fREZBX0VER0VdID0gdG87IC8vIGNvbm5lY3RcblxuXHRcdHJldHVybiB0bztcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGQgYSBuZXcgREZBIHN0YXRlIGlmIHRoZXJlIGlzbid0IG9uZSB3aXRoIHRoaXMgc2V0IG9mXG5cdCAqIGNvbmZpZ3VyYXRpb25zIGFscmVhZHkuIFRoaXMgbWV0aG9kIGFsc28gZGV0ZWN0cyB0aGUgZmlyc3Rcblx0ICogY29uZmlndXJhdGlvbiBjb250YWluaW5nIGFuIEFUTiBydWxlIHN0b3Agc3RhdGUuIExhdGVyLCB3aGVuXG5cdCAqIHRyYXZlcnNpbmcgdGhlIERGQSwgd2Ugd2lsbCBrbm93IHdoaWNoIHJ1bGUgdG8gYWNjZXB0LlxuXHQgKi9cblx0YWRkREZBU3RhdGUoY29uZmlncykge1xuXHRcdGNvbnN0IHByb3Bvc2VkID0gbmV3IERGQVN0YXRlKG51bGwsIGNvbmZpZ3MpO1xuXHRcdGxldCBmaXJzdENvbmZpZ1dpdGhSdWxlU3RvcFN0YXRlID0gbnVsbDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbmZpZ3MuaXRlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGNmZyA9IGNvbmZpZ3MuaXRlbXNbaV07XG5cdFx0XHRpZiAoY2ZnLnN0YXRlIGluc3RhbmNlb2YgUnVsZVN0b3BTdGF0ZSkge1xuXHRcdFx0XHRmaXJzdENvbmZpZ1dpdGhSdWxlU3RvcFN0YXRlID0gY2ZnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGZpcnN0Q29uZmlnV2l0aFJ1bGVTdG9wU3RhdGUgIT09IG51bGwpIHtcblx0XHRcdHByb3Bvc2VkLmlzQWNjZXB0U3RhdGUgPSB0cnVlO1xuXHRcdFx0cHJvcG9zZWQubGV4ZXJBY3Rpb25FeGVjdXRvciA9IGZpcnN0Q29uZmlnV2l0aFJ1bGVTdG9wU3RhdGUubGV4ZXJBY3Rpb25FeGVjdXRvcjtcblx0XHRcdHByb3Bvc2VkLnByZWRpY3Rpb24gPSB0aGlzLmF0bi5ydWxlVG9Ub2tlblR5cGVbZmlyc3RDb25maWdXaXRoUnVsZVN0b3BTdGF0ZS5zdGF0ZS5ydWxlSW5kZXhdO1xuXHRcdH1cblx0XHRjb25zdCBkZmEgPSB0aGlzLmRlY2lzaW9uVG9ERkFbdGhpcy5tb2RlXTtcblx0XHRjb25zdCBleGlzdGluZyA9IGRmYS5zdGF0ZXMuZ2V0KHByb3Bvc2VkKTtcblx0XHRpZiAoZXhpc3RpbmchPT1udWxsKSB7XG5cdFx0XHRyZXR1cm4gZXhpc3Rpbmc7XG5cdFx0fVxuXHRcdGNvbnN0IG5ld1N0YXRlID0gcHJvcG9zZWQ7XG5cdFx0bmV3U3RhdGUuc3RhdGVOdW1iZXIgPSBkZmEuc3RhdGVzLmxlbmd0aDtcblx0XHRjb25maWdzLnNldFJlYWRvbmx5KHRydWUpO1xuXHRcdG5ld1N0YXRlLmNvbmZpZ3MgPSBjb25maWdzO1xuXHRcdGRmYS5zdGF0ZXMuYWRkKG5ld1N0YXRlKTtcblx0XHRyZXR1cm4gbmV3U3RhdGU7XG5cdH1cblxuXHRnZXRERkEobW9kZSkge1xuXHRcdHJldHVybiB0aGlzLmRlY2lzaW9uVG9ERkFbbW9kZV07XG5cdH1cblxuLy8gR2V0IHRoZSB0ZXh0IG1hdGNoZWQgc28gZmFyIGZvciB0aGUgY3VycmVudCB0b2tlbi5cblx0Z2V0VGV4dChpbnB1dCkge1xuXHRcdC8vIGluZGV4IGlzIGZpcnN0IGxvb2thaGVhZCBjaGFyLCBkb24ndCBpbmNsdWRlLlxuXHRcdHJldHVybiBpbnB1dC5nZXRUZXh0KHRoaXMuc3RhcnRJbmRleCwgaW5wdXQuaW5kZXggLSAxKTtcblx0fVxuXG5cdGNvbnN1bWUoaW5wdXQpIHtcblx0XHRjb25zdCBjdXJDaGFyID0gaW5wdXQuTEEoMSk7XG5cdFx0aWYgKGN1ckNoYXIgPT09IFwiXFxuXCIuY2hhckNvZGVBdCgwKSkge1xuXHRcdFx0dGhpcy5saW5lICs9IDE7XG5cdFx0XHR0aGlzLmNvbHVtbiA9IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29sdW1uICs9IDE7XG5cdFx0fVxuXHRcdGlucHV0LmNvbnN1bWUoKTtcblx0fVxuXG5cdGdldFRva2VuTmFtZSh0dCkge1xuXHRcdGlmICh0dCA9PT0gLTEpIHtcblx0XHRcdHJldHVybiBcIkVPRlwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gXCInXCIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHR0KSArIFwiJ1wiO1xuXHRcdH1cblx0fVxufVxuXG5MZXhlckFUTlNpbXVsYXRvci5kZWJ1ZyA9IGZhbHNlO1xuTGV4ZXJBVE5TaW11bGF0b3IuZGZhX2RlYnVnID0gZmFsc2U7XG5cbkxleGVyQVROU2ltdWxhdG9yLk1JTl9ERkFfRURHRSA9IDA7XG5MZXhlckFUTlNpbXVsYXRvci5NQVhfREZBX0VER0UgPSAxMjc7IC8vIGZvcmNlcyB1bmljb2RlIHRvIHN0YXkgaW4gQVROXG5cbkxleGVyQVROU2ltdWxhdG9yLm1hdGNoX2NhbGxzID0gMDtcblxubW9kdWxlLmV4cG9ydHMgPSBMZXhlckFUTlNpbXVsYXRvcjtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3QgTGV4ZXJBY3Rpb25UeXBlID0ge1xuICAgIC8vIFRoZSB0eXBlIG9mIGEge0BsaW5rIExleGVyQ2hhbm5lbEFjdGlvbn0gYWN0aW9uLlxuICAgIENIQU5ORUw6IDAsXG4gICAgLy8gVGhlIHR5cGUgb2YgYSB7QGxpbmsgTGV4ZXJDdXN0b21BY3Rpb259IGFjdGlvblxuICAgIENVU1RPTTogMSxcbiAgICAvLyBUaGUgdHlwZSBvZiBhIHtAbGluayBMZXhlck1vZGVBY3Rpb259IGFjdGlvbi5cbiAgICBNT0RFOiAyLFxuICAgIC8vVGhlIHR5cGUgb2YgYSB7QGxpbmsgTGV4ZXJNb3JlQWN0aW9ufSBhY3Rpb24uXG4gICAgTU9SRTogMyxcbiAgICAvL1RoZSB0eXBlIG9mIGEge0BsaW5rIExleGVyUG9wTW9kZUFjdGlvbn0gYWN0aW9uLlxuICAgIFBPUF9NT0RFOiA0LFxuICAgIC8vVGhlIHR5cGUgb2YgYSB7QGxpbmsgTGV4ZXJQdXNoTW9kZUFjdGlvbn0gYWN0aW9uLlxuICAgIFBVU0hfTU9ERTogNSxcbiAgICAvL1RoZSB0eXBlIG9mIGEge0BsaW5rIExleGVyU2tpcEFjdGlvbn0gYWN0aW9uLlxuICAgIFNLSVA6IDYsXG4gICAgLy9UaGUgdHlwZSBvZiBhIHtAbGluayBMZXhlclR5cGVBY3Rpb259IGFjdGlvbi5cbiAgICBUWVBFOiA3XG59XG5cbmNsYXNzIExleGVyQWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5hY3Rpb25UeXBlID0gYWN0aW9uO1xuICAgICAgICB0aGlzLmlzUG9zaXRpb25EZXBlbmRlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBoYXNoQ29kZSgpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IG5ldyBIYXNoKCk7XG4gICAgICAgIHRoaXMudXBkYXRlSGFzaENvZGUoaGFzaCk7XG4gICAgICAgIHJldHVybiBoYXNoLmZpbmlzaCgpXG4gICAgfVxuXG4gICAgdXBkYXRlSGFzaENvZGUoaGFzaCkge1xuICAgICAgICBoYXNoLnVwZGF0ZSh0aGlzLmFjdGlvblR5cGUpO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcyA9PT0gb3RoZXI7XG4gICAgfVxufVxuXG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUge0Bjb2RlIHNraXB9IGxleGVyIGFjdGlvbiBieSBjYWxsaW5nIHtAbGluayBMZXhlci8vc2tpcH0uXG4gKlxuICogPHA+VGhlIHtAY29kZSBza2lwfSBjb21tYW5kIGRvZXMgbm90IGhhdmUgYW55IHBhcmFtZXRlcnMsIHNvIHRoaXMgYWN0aW9uIGlzXG4gKiBpbXBsZW1lbnRlZCBhcyBhIHNpbmdsZXRvbiBpbnN0YW5jZSBleHBvc2VkIGJ5IHtAbGluayAvL0lOU1RBTkNFfS48L3A+XG4gKi9cbmNsYXNzIExleGVyU2tpcEFjdGlvbiBleHRlbmRzIExleGVyQWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoTGV4ZXJBY3Rpb25UeXBlLlNLSVApO1xuICAgIH1cblxuICAgIGV4ZWN1dGUobGV4ZXIpIHtcbiAgICAgICAgbGV4ZXIuc2tpcCgpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJza2lwXCI7XG4gICAgfVxufVxuXG4vLyBQcm92aWRlcyBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGlzIHBhcmFtZXRlcmxlc3MgbGV4ZXIgYWN0aW9uLlxuTGV4ZXJTa2lwQWN0aW9uLklOU1RBTkNFID0gbmV3IExleGVyU2tpcEFjdGlvbigpO1xuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIHtAY29kZSB0eXBlfSBsZXhlciBhY3Rpb24gYnkgY2FsbGluZyB7QGxpbmsgTGV4ZXIvL3NldFR5cGV9XG4gKiB3aXRoIHRoZSBhc3NpZ25lZCB0eXBlXG4gKi9cbmNsYXNzIExleGVyVHlwZUFjdGlvbiBleHRlbmRzIExleGVyQWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIHN1cGVyKExleGVyQWN0aW9uVHlwZS5UWVBFKTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG5cbiAgICBleGVjdXRlKGxleGVyKSB7XG4gICAgICAgIGxleGVyLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgfVxuXG4gICAgdXBkYXRlSGFzaENvZGUoaGFzaCkge1xuICAgICAgICBoYXNoLnVwZGF0ZSh0aGlzLmFjdGlvblR5cGUsIHRoaXMudHlwZSk7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmKHRoaXMgPT09IG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICghIChvdGhlciBpbnN0YW5jZW9mIExleGVyVHlwZUFjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IG90aGVyLnR5cGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwidHlwZShcIiArIHRoaXMudHlwZSArIFwiKVwiO1xuICAgIH1cbn1cblxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIHtAY29kZSBwdXNoTW9kZX0gbGV4ZXIgYWN0aW9uIGJ5IGNhbGxpbmdcbiAqIHtAbGluayBMZXhlci8vcHVzaE1vZGV9IHdpdGggdGhlIGFzc2lnbmVkIG1vZGVcbiAqL1xuY2xhc3MgTGV4ZXJQdXNoTW9kZUFjdGlvbiBleHRlbmRzIExleGVyQWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2RlKSB7XG4gICAgICAgIHN1cGVyKExleGVyQWN0aW9uVHlwZS5QVVNIX01PREUpO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDxwPlRoaXMgYWN0aW9uIGlzIGltcGxlbWVudGVkIGJ5IGNhbGxpbmcge0BsaW5rIExleGVyLy9wdXNoTW9kZX0gd2l0aCB0aGVcbiAgICAgKiB2YWx1ZSBwcm92aWRlZCBieSB7QGxpbmsgLy9nZXRNb2RlfS48L3A+XG4gICAgICovXG4gICAgZXhlY3V0ZShsZXhlcikge1xuICAgICAgICBsZXhlci5wdXNoTW9kZSh0aGlzLm1vZGUpO1xuICAgIH1cblxuICAgIHVwZGF0ZUhhc2hDb2RlKGhhc2gpIHtcbiAgICAgICAgaGFzaC51cGRhdGUodGhpcy5hY3Rpb25UeXBlLCB0aGlzLm1vZGUpO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICBpZiAodGhpcyA9PT0gb3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCEgKG90aGVyIGluc3RhbmNlb2YgTGV4ZXJQdXNoTW9kZUFjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09IG90aGVyLm1vZGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwicHVzaE1vZGUoXCIgKyB0aGlzLm1vZGUgKyBcIilcIjtcbiAgICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUge0Bjb2RlIHBvcE1vZGV9IGxleGVyIGFjdGlvbiBieSBjYWxsaW5nIHtAbGluayBMZXhlci8vcG9wTW9kZX0uXG4gKlxuICogPHA+VGhlIHtAY29kZSBwb3BNb2RlfSBjb21tYW5kIGRvZXMgbm90IGhhdmUgYW55IHBhcmFtZXRlcnMsIHNvIHRoaXMgYWN0aW9uIGlzXG4gKiBpbXBsZW1lbnRlZCBhcyBhIHNpbmdsZXRvbiBpbnN0YW5jZSBleHBvc2VkIGJ5IHtAbGluayAvL0lOU1RBTkNFfS48L3A+XG4gKi9cbmNsYXNzIExleGVyUG9wTW9kZUFjdGlvbiBleHRlbmRzIExleGVyQWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoTGV4ZXJBY3Rpb25UeXBlLlBPUF9NT0RFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiA8cD5UaGlzIGFjdGlvbiBpcyBpbXBsZW1lbnRlZCBieSBjYWxsaW5nIHtAbGluayBMZXhlci8vcG9wTW9kZX0uPC9wPlxuICAgICAqL1xuICAgIGV4ZWN1dGUobGV4ZXIpIHtcbiAgICAgICAgbGV4ZXIucG9wTW9kZSgpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJwb3BNb2RlXCI7XG4gICAgfVxufVxuXG5MZXhlclBvcE1vZGVBY3Rpb24uSU5TVEFOQ0UgPSBuZXcgTGV4ZXJQb3BNb2RlQWN0aW9uKCk7XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUge0Bjb2RlIG1vcmV9IGxleGVyIGFjdGlvbiBieSBjYWxsaW5nIHtAbGluayBMZXhlci8vbW9yZX0uXG4gKlxuICogPHA+VGhlIHtAY29kZSBtb3JlfSBjb21tYW5kIGRvZXMgbm90IGhhdmUgYW55IHBhcmFtZXRlcnMsIHNvIHRoaXMgYWN0aW9uIGlzXG4gKiBpbXBsZW1lbnRlZCBhcyBhIHNpbmdsZXRvbiBpbnN0YW5jZSBleHBvc2VkIGJ5IHtAbGluayAvL0lOU1RBTkNFfS48L3A+XG4gKi9cbmNsYXNzIExleGVyTW9yZUFjdGlvbiBleHRlbmRzIExleGVyQWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoTGV4ZXJBY3Rpb25UeXBlLk1PUkUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDxwPlRoaXMgYWN0aW9uIGlzIGltcGxlbWVudGVkIGJ5IGNhbGxpbmcge0BsaW5rIExleGVyLy9wb3BNb2RlfS48L3A+XG4gICAgICovXG4gICAgZXhlY3V0ZShsZXhlcikge1xuICAgICAgICBsZXhlci5tb3JlKCk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIm1vcmVcIjtcbiAgICB9XG59XG5cbkxleGVyTW9yZUFjdGlvbi5JTlNUQU5DRSA9IG5ldyBMZXhlck1vcmVBY3Rpb24oKTtcblxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIHtAY29kZSBtb2RlfSBsZXhlciBhY3Rpb24gYnkgY2FsbGluZyB7QGxpbmsgTGV4ZXIvL21vZGV9IHdpdGhcbiAqIHRoZSBhc3NpZ25lZCBtb2RlXG4gKi9cbmNsYXNzIExleGVyTW9kZUFjdGlvbiBleHRlbmRzIExleGVyQWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2RlKSB7XG4gICAgICAgIHN1cGVyKExleGVyQWN0aW9uVHlwZS5NT0RFKTtcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiA8cD5UaGlzIGFjdGlvbiBpcyBpbXBsZW1lbnRlZCBieSBjYWxsaW5nIHtAbGluayBMZXhlci8vbW9kZX0gd2l0aCB0aGVcbiAgICAgKiB2YWx1ZSBwcm92aWRlZCBieSB7QGxpbmsgLy9nZXRNb2RlfS48L3A+XG4gICAgICovXG4gICAgZXhlY3V0ZShsZXhlcikge1xuICAgICAgICBsZXhlci5tb2RlKHRoaXMubW9kZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlSGFzaENvZGUoaGFzaCkge1xuICAgICAgICBoYXNoLnVwZGF0ZSh0aGlzLmFjdGlvblR5cGUsIHRoaXMubW9kZSk7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoISAob3RoZXIgaW5zdGFuY2VvZiBMZXhlck1vZGVBY3Rpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlID09PSBvdGhlci5tb2RlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIm1vZGUoXCIgKyB0aGlzLm1vZGUgKyBcIilcIjtcbiAgICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgYSBjdXN0b20gbGV4ZXIgYWN0aW9uIGJ5IGNhbGxpbmcge0BsaW5rIFJlY29nbml6ZXIvL2FjdGlvbn0gd2l0aCB0aGVcbiAqIHJ1bGUgYW5kIGFjdGlvbiBpbmRleGVzIGFzc2lnbmVkIHRvIHRoZSBjdXN0b20gYWN0aW9uLiBUaGUgaW1wbGVtZW50YXRpb24gb2ZcbiAqIGEgY3VzdG9tIGFjdGlvbiBpcyBhZGRlZCB0byB0aGUgZ2VuZXJhdGVkIGNvZGUgZm9yIHRoZSBsZXhlciBpbiBhbiBvdmVycmlkZVxuICogb2Yge0BsaW5rIFJlY29nbml6ZXIvL2FjdGlvbn0gd2hlbiB0aGUgZ3JhbW1hciBpcyBjb21waWxlZC5cbiAqXG4gKiA8cD5UaGlzIGNsYXNzIG1heSByZXByZXNlbnQgZW1iZWRkZWQgYWN0aW9ucyBjcmVhdGVkIHdpdGggdGhlIDxjb2RlPnsuLi59PC9jb2RlPlxuICogc3ludGF4IGluIEFOVExSIDQsIGFzIHdlbGwgYXMgYWN0aW9ucyBjcmVhdGVkIGZvciBsZXhlciBjb21tYW5kcyB3aGVyZSB0aGVcbiAqIGNvbW1hbmQgYXJndW1lbnQgY291bGQgbm90IGJlIGV2YWx1YXRlZCB3aGVuIHRoZSBncmFtbWFyIHdhcyBjb21waWxlZC48L3A+XG4gKi9cbmNsYXNzIExleGVyQ3VzdG9tQWN0aW9uIGV4dGVuZHMgTGV4ZXJBY3Rpb24ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBjdXN0b20gbGV4ZXIgYWN0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBydWxlIGFuZCBhY3Rpb25cbiAgICAgKiBpbmRleGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJ1bGVJbmRleCBUaGUgcnVsZSBpbmRleCB0byB1c2UgZm9yIGNhbGxzIHRvXG4gICAgICoge0BsaW5rIFJlY29nbml6ZXIvL2FjdGlvbn0uXG4gICAgICogQHBhcmFtIGFjdGlvbkluZGV4IFRoZSBhY3Rpb24gaW5kZXggdG8gdXNlIGZvciBjYWxscyB0b1xuICAgICAqIHtAbGluayBSZWNvZ25pemVyLy9hY3Rpb259LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJ1bGVJbmRleCwgYWN0aW9uSW5kZXgpIHtcbiAgICAgICAgc3VwZXIoTGV4ZXJBY3Rpb25UeXBlLkNVU1RPTSk7XG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gcnVsZUluZGV4O1xuICAgICAgICB0aGlzLmFjdGlvbkluZGV4ID0gYWN0aW9uSW5kZXg7XG4gICAgICAgIHRoaXMuaXNQb3NpdGlvbkRlcGVuZGVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPHA+Q3VzdG9tIGFjdGlvbnMgYXJlIGltcGxlbWVudGVkIGJ5IGNhbGxpbmcge0BsaW5rIExleGVyLy9hY3Rpb259IHdpdGggdGhlXG4gICAgICogYXBwcm9wcmlhdGUgcnVsZSBhbmQgYWN0aW9uIGluZGV4ZXMuPC9wPlxuICAgICAqL1xuICAgIGV4ZWN1dGUobGV4ZXIpIHtcbiAgICAgICAgbGV4ZXIuYWN0aW9uKG51bGwsIHRoaXMucnVsZUluZGV4LCB0aGlzLmFjdGlvbkluZGV4KTtcbiAgICB9XG5cbiAgICB1cGRhdGVIYXNoQ29kZShoYXNoKSB7XG4gICAgICAgIGhhc2gudXBkYXRlKHRoaXMuYWN0aW9uVHlwZSwgdGhpcy5ydWxlSW5kZXgsIHRoaXMuYWN0aW9uSW5kZXgpO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICBpZiAodGhpcyA9PT0gb3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCEgKG90aGVyIGluc3RhbmNlb2YgTGV4ZXJDdXN0b21BY3Rpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ydWxlSW5kZXggPT09IG90aGVyLnJ1bGVJbmRleCAmJiB0aGlzLmFjdGlvbkluZGV4ID09PSBvdGhlci5hY3Rpb25JbmRleDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSB7QGNvZGUgY2hhbm5lbH0gbGV4ZXIgYWN0aW9uIGJ5IGNhbGxpbmdcbiAqIHtAbGluayBMZXhlci8vc2V0Q2hhbm5lbH0gd2l0aCB0aGUgYXNzaWduZWQgY2hhbm5lbC5cbiAqIENvbnN0cnVjdHMgYSBuZXcge0Bjb2RlIGNoYW5uZWx9IGFjdGlvbiB3aXRoIHRoZSBzcGVjaWZpZWQgY2hhbm5lbCB2YWx1ZS5cbiAqIEBwYXJhbSBjaGFubmVsIFRoZSBjaGFubmVsIHZhbHVlIHRvIHBhc3MgdG8ge0BsaW5rIExleGVyLy9zZXRDaGFubmVsfVxuICovXG5jbGFzcyBMZXhlckNoYW5uZWxBY3Rpb24gZXh0ZW5kcyBMZXhlckFjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY2hhbm5lbCkge1xuICAgICAgICBzdXBlcihMZXhlckFjdGlvblR5cGUuQ0hBTk5FTCk7XG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPHA+VGhpcyBhY3Rpb24gaXMgaW1wbGVtZW50ZWQgYnkgY2FsbGluZyB7QGxpbmsgTGV4ZXIvL3NldENoYW5uZWx9IHdpdGggdGhlXG4gICAgICogdmFsdWUgcHJvdmlkZWQgYnkge0BsaW5rIC8vZ2V0Q2hhbm5lbH0uPC9wPlxuICAgICAqL1xuICAgIGV4ZWN1dGUobGV4ZXIpIHtcbiAgICAgICAgbGV4ZXIuX2NoYW5uZWwgPSB0aGlzLmNoYW5uZWw7XG4gICAgfVxuXG4gICAgdXBkYXRlSGFzaENvZGUoaGFzaCkge1xuICAgICAgICBoYXNoLnVwZGF0ZSh0aGlzLmFjdGlvblR5cGUsIHRoaXMuY2hhbm5lbCk7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoISAob3RoZXIgaW5zdGFuY2VvZiBMZXhlckNoYW5uZWxBY3Rpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsID09PSBvdGhlci5jaGFubmVsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcImNoYW5uZWwoXCIgKyB0aGlzLmNoYW5uZWwgKyBcIilcIjtcbiAgICB9XG59XG5cblxuLyoqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBMZXhlckFjdGlvbn0gaXMgdXNlZCBmb3IgdHJhY2tpbmcgaW5wdXQgb2Zmc2V0c1xuICogZm9yIHBvc2l0aW9uLWRlcGVuZGVudCBhY3Rpb25zIHdpdGhpbiBhIHtAbGluayBMZXhlckFjdGlvbkV4ZWN1dG9yfS5cbiAqXG4gKiA8cD5UaGlzIGFjdGlvbiBpcyBub3Qgc2VyaWFsaXplZCBhcyBwYXJ0IG9mIHRoZSBBVE4sIGFuZCBpcyBvbmx5IHJlcXVpcmVkIGZvclxuICogcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnMgd2hpY2ggYXBwZWFyIGF0IGEgbG9jYXRpb24gb3RoZXIgdGhhbiB0aGVcbiAqIGVuZCBvZiBhIHJ1bGUuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IERGQSBvcHRpbWl6YXRpb25zIGVtcGxveWVkIGZvclxuICogbGV4ZXIgYWN0aW9ucywgc2VlIHtAbGluayBMZXhlckFjdGlvbkV4ZWN1dG9yLy9hcHBlbmR9IGFuZFxuICoge0BsaW5rIExleGVyQWN0aW9uRXhlY3V0b3IvL2ZpeE9mZnNldEJlZm9yZU1hdGNofS48L3A+XG4gKlxuICogQ29uc3RydWN0cyBhIG5ldyBpbmRleGVkIGN1c3RvbSBhY3Rpb24gYnkgYXNzb2NpYXRpbmcgYSBjaGFyYWN0ZXIgb2Zmc2V0XG4gKiB3aXRoIGEge0BsaW5rIExleGVyQWN0aW9ufS5cbiAqXG4gKiA8cD5Ob3RlOiBUaGlzIGNsYXNzIGlzIG9ubHkgcmVxdWlyZWQgZm9yIGxleGVyIGFjdGlvbnMgZm9yIHdoaWNoXG4gKiB7QGxpbmsgTGV4ZXJBY3Rpb24vL2lzUG9zaXRpb25EZXBlbmRlbnR9IHJldHVybnMge0Bjb2RlIHRydWV9LjwvcD5cbiAqXG4gKiBAcGFyYW0gb2Zmc2V0IFRoZSBvZmZzZXQgaW50byB0aGUgaW5wdXQge0BsaW5rIENoYXJTdHJlYW19LCByZWxhdGl2ZSB0b1xuICogdGhlIHRva2VuIHN0YXJ0IGluZGV4LCBhdCB3aGljaCB0aGUgc3BlY2lmaWVkIGxleGVyIGFjdGlvbiBzaG91bGQgYmVcbiAqIGV4ZWN1dGVkLlxuICogQHBhcmFtIGFjdGlvbiBUaGUgbGV4ZXIgYWN0aW9uIHRvIGV4ZWN1dGUgYXQgYSBwYXJ0aWN1bGFyIG9mZnNldCBpbiB0aGVcbiAqIGlucHV0IHtAbGluayBDaGFyU3RyZWFtfS5cbiAqL1xuY2xhc3MgTGV4ZXJJbmRleGVkQ3VzdG9tQWN0aW9uIGV4dGVuZHMgTGV4ZXJBY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9mZnNldCwgYWN0aW9uKSB7XG4gICAgICAgIHN1cGVyKGFjdGlvbi5hY3Rpb25UeXBlKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICB0aGlzLmlzUG9zaXRpb25EZXBlbmRlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDxwPlRoaXMgbWV0aG9kIGNhbGxzIHtAbGluayAvL2V4ZWN1dGV9IG9uIHRoZSByZXN1bHQgb2Yge0BsaW5rIC8vZ2V0QWN0aW9ufVxuICAgICAqIHVzaW5nIHRoZSBwcm92aWRlZCB7QGNvZGUgbGV4ZXJ9LjwvcD5cbiAgICAgKi9cbiAgICBleGVjdXRlKGxleGVyKSB7XG4gICAgICAgIC8vIGFzc3VtZSB0aGUgaW5wdXQgc3RyZWFtIHBvc2l0aW9uIHdhcyBwcm9wZXJseSBzZXQgYnkgdGhlIGNhbGxpbmcgY29kZVxuICAgICAgICB0aGlzLmFjdGlvbi5leGVjdXRlKGxleGVyKTtcbiAgICB9XG5cbiAgICB1cGRhdGVIYXNoQ29kZShoYXNoKSB7XG4gICAgICAgIGhhc2gudXBkYXRlKHRoaXMuYWN0aW9uVHlwZSwgdGhpcy5vZmZzZXQsIHRoaXMuYWN0aW9uKTtcbiAgICB9XG5cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMgPT09IG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICghIChvdGhlciBpbnN0YW5jZW9mIExleGVySW5kZXhlZEN1c3RvbUFjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZnNldCA9PT0gb3RoZXIub2Zmc2V0ICYmIHRoaXMuYWN0aW9uID09PSBvdGhlci5hY3Rpb247XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIExleGVyQWN0aW9uVHlwZSxcbiAgICBMZXhlclNraXBBY3Rpb24sXG4gICAgTGV4ZXJDaGFubmVsQWN0aW9uLFxuICAgIExleGVyQ3VzdG9tQWN0aW9uLFxuICAgIExleGVySW5kZXhlZEN1c3RvbUFjdGlvbixcbiAgICBMZXhlck1vcmVBY3Rpb24sXG4gICAgTGV4ZXJUeXBlQWN0aW9uLFxuICAgIExleGVyUHVzaE1vZGVBY3Rpb24sXG4gICAgTGV4ZXJQb3BNb2RlQWN0aW9uLFxuICAgIExleGVyTW9kZUFjdGlvblxufVxuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7aGFzaFN0dWZmfSA9IHJlcXVpcmUoXCIuLi9VdGlsc1wiKTtcbmNvbnN0IHtMZXhlckluZGV4ZWRDdXN0b21BY3Rpb259ID0gcmVxdWlyZSgnLi9MZXhlckFjdGlvbicpO1xuXG5jbGFzcyBMZXhlckFjdGlvbkV4ZWN1dG9yIHtcblx0LyoqXG5cdCAqIFJlcHJlc2VudHMgYW4gZXhlY3V0b3IgZm9yIGEgc2VxdWVuY2Ugb2YgbGV4ZXIgYWN0aW9ucyB3aGljaCB0cmF2ZXJzZWQgZHVyaW5nXG5cdCAqIHRoZSBtYXRjaGluZyBvcGVyYXRpb24gb2YgYSBsZXhlciBydWxlICh0b2tlbikuXG5cdCAqXG5cdCAqIDxwPlRoZSBleGVjdXRvciB0cmFja3MgcG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIHBvc2l0aW9uLWRlcGVuZGVudCBsZXhlciBhY3Rpb25zXG5cdCAqIGVmZmljaWVudGx5LCBlbnN1cmluZyB0aGF0IGFjdGlvbnMgYXBwZWFyaW5nIG9ubHkgYXQgdGhlIGVuZCBvZiB0aGUgcnVsZSBkb1xuXHQgKiBub3QgY2F1c2UgYmxvYXRpbmcgb2YgdGhlIHtAbGluayBERkF9IGNyZWF0ZWQgZm9yIHRoZSBsZXhlci48L3A+XG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihsZXhlckFjdGlvbnMpIHtcblx0XHR0aGlzLmxleGVyQWN0aW9ucyA9IGxleGVyQWN0aW9ucyA9PT0gbnVsbCA/IFtdIDogbGV4ZXJBY3Rpb25zO1xuXHRcdC8qKlxuXHRcdCAqIENhY2hlcyB0aGUgcmVzdWx0IG9mIHtAbGluayAvL2hhc2hDb2RlfSBzaW5jZSB0aGUgaGFzaCBjb2RlIGlzIGFuIGVsZW1lbnRcblx0XHQgKiBvZiB0aGUgcGVyZm9ybWFuY2UtY3JpdGljYWwge0BsaW5rIExleGVyQVROQ29uZmlnLy9oYXNoQ29kZX0gb3BlcmF0aW9uXG5cdFx0ICovXG5cdFx0dGhpcy5jYWNoZWRIYXNoQ29kZSA9IGhhc2hTdHVmZihsZXhlckFjdGlvbnMpOyAvLyBcIlwiLmpvaW4oW3N0cihsYSkgZm9yIGxhIGluXG5cdFx0Ly8gbGV4ZXJBY3Rpb25zXSkpXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHtAbGluayBMZXhlckFjdGlvbkV4ZWN1dG9yfSB3aGljaCBlbmNvZGVzIHRoZSBjdXJyZW50IG9mZnNldFxuXHQgKiBmb3IgcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnMuXG5cdCAqXG5cdCAqIDxwPk5vcm1hbGx5LCB3aGVuIHRoZSBleGVjdXRvciBlbmNvdW50ZXJzIGxleGVyIGFjdGlvbnMgd2hlcmVcblx0ICoge0BsaW5rIExleGVyQWN0aW9uLy9pc1Bvc2l0aW9uRGVwZW5kZW50fSByZXR1cm5zIHtAY29kZSB0cnVlfSwgaXQgY2FsbHNcblx0ICoge0BsaW5rIEludFN0cmVhbS8vc2Vla30gb24gdGhlIGlucHV0IHtAbGluayBDaGFyU3RyZWFtfSB0byBzZXQgdGhlIGlucHV0XG5cdCAqIHBvc2l0aW9uIHRvIHRoZSA8ZW0+ZW5kPC9lbT4gb2YgdGhlIGN1cnJlbnQgdG9rZW4uIFRoaXMgYmVoYXZpb3IgcHJvdmlkZXNcblx0ICogZm9yIGVmZmljaWVudCBERkEgcmVwcmVzZW50YXRpb24gb2YgbGV4ZXIgYWN0aW9ucyB3aGljaCBhcHBlYXIgYXQgdGhlIGVuZFxuXHQgKiBvZiBhIGxleGVyIHJ1bGUsIGV2ZW4gd2hlbiB0aGUgbGV4ZXIgcnVsZSBtYXRjaGVzIGEgdmFyaWFibGUgbnVtYmVyIG9mXG5cdCAqIGNoYXJhY3RlcnMuPC9wPlxuXHQgKlxuXHQgKiA8cD5QcmlvciB0byB0cmF2ZXJzaW5nIGEgbWF0Y2ggdHJhbnNpdGlvbiBpbiB0aGUgQVROLCB0aGUgY3VycmVudCBvZmZzZXRcblx0ICogZnJvbSB0aGUgdG9rZW4gc3RhcnQgaW5kZXggaXMgYXNzaWduZWQgdG8gYWxsIHBvc2l0aW9uLWRlcGVuZGVudCBsZXhlclxuXHQgKiBhY3Rpb25zIHdoaWNoIGhhdmUgbm90IGFscmVhZHkgYmVlbiBhc3NpZ25lZCBhIGZpeGVkIG9mZnNldC4gQnkgc3RvcmluZ1xuXHQgKiB0aGUgb2Zmc2V0cyByZWxhdGl2ZSB0byB0aGUgdG9rZW4gc3RhcnQgaW5kZXgsIHRoZSBERkEgcmVwcmVzZW50YXRpb24gb2Zcblx0ICogbGV4ZXIgYWN0aW9ucyB3aGljaCBhcHBlYXIgaW4gdGhlIG1pZGRsZSBvZiB0b2tlbnMgcmVtYWlucyBlZmZpY2llbnQgZHVlXG5cdCAqIHRvIHNoYXJpbmcgYW1vbmcgdG9rZW5zIG9mIHRoZSBzYW1lIGxlbmd0aCwgcmVnYXJkbGVzcyBvZiB0aGVpciBhYnNvbHV0ZVxuXHQgKiBwb3NpdGlvbiBpbiB0aGUgaW5wdXQgc3RyZWFtLjwvcD5cblx0ICpcblx0ICogPHA+SWYgdGhlIGN1cnJlbnQgZXhlY3V0b3IgYWxyZWFkeSBoYXMgb2Zmc2V0cyBhc3NpZ25lZCB0byBhbGxcblx0ICogcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnMsIHRoZSBtZXRob2QgcmV0dXJucyB7QGNvZGUgdGhpc30uPC9wPlxuXHQgKlxuXHQgKiBAcGFyYW0gb2Zmc2V0IFRoZSBjdXJyZW50IG9mZnNldCB0byBhc3NpZ24gdG8gYWxsIHBvc2l0aW9uLWRlcGVuZGVudFxuXHQgKiBsZXhlciBhY3Rpb25zIHdoaWNoIGRvIG5vdCBhbHJlYWR5IGhhdmUgb2Zmc2V0cyBhc3NpZ25lZC5cblx0ICpcblx0ICogQHJldHVybiB7TGV4ZXJBY3Rpb25FeGVjdXRvcn0gQSB7QGxpbmsgTGV4ZXJBY3Rpb25FeGVjdXRvcn0gd2hpY2ggc3RvcmVzIGlucHV0IHN0cmVhbSBvZmZzZXRzXG5cdCAqIGZvciBhbGwgcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnMuXG5cdCAqL1xuXHRmaXhPZmZzZXRCZWZvcmVNYXRjaChvZmZzZXQpIHtcblx0XHRsZXQgdXBkYXRlZExleGVyQWN0aW9ucyA9IG51bGw7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxleGVyQWN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHRoaXMubGV4ZXJBY3Rpb25zW2ldLmlzUG9zaXRpb25EZXBlbmRlbnQgJiZcblx0XHRcdFx0XHQhKHRoaXMubGV4ZXJBY3Rpb25zW2ldIGluc3RhbmNlb2YgTGV4ZXJJbmRleGVkQ3VzdG9tQWN0aW9uKSkge1xuXHRcdFx0XHRpZiAodXBkYXRlZExleGVyQWN0aW9ucyA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHVwZGF0ZWRMZXhlckFjdGlvbnMgPSB0aGlzLmxleGVyQWN0aW9ucy5jb25jYXQoW10pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHVwZGF0ZWRMZXhlckFjdGlvbnNbaV0gPSBuZXcgTGV4ZXJJbmRleGVkQ3VzdG9tQWN0aW9uKG9mZnNldCxcblx0XHRcdFx0XHRcdHRoaXMubGV4ZXJBY3Rpb25zW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHVwZGF0ZWRMZXhlckFjdGlvbnMgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbmV3IExleGVyQWN0aW9uRXhlY3V0b3IodXBkYXRlZExleGVyQWN0aW9ucyk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGUgdGhlIGFjdGlvbnMgZW5jYXBzdWxhdGVkIGJ5IHRoaXMgZXhlY3V0b3Igd2l0aGluIHRoZSBjb250ZXh0IG9mIGFcblx0ICogcGFydGljdWxhciB7QGxpbmsgTGV4ZXJ9LlxuXHQgKlxuXHQgKiA8cD5UaGlzIG1ldGhvZCBjYWxscyB7QGxpbmsgSW50U3RyZWFtLy9zZWVrfSB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZVxuXHQgKiB7QGNvZGUgaW5wdXR9IHtAbGluayBDaGFyU3RyZWFtfSBwcmlvciB0byBjYWxsaW5nXG5cdCAqIHtAbGluayBMZXhlckFjdGlvbi8vZXhlY3V0ZX0gb24gYSBwb3NpdGlvbi1kZXBlbmRlbnQgYWN0aW9uLiBCZWZvcmUgdGhlXG5cdCAqIG1ldGhvZCByZXR1cm5zLCB0aGUgaW5wdXQgcG9zaXRpb24gd2lsbCBiZSByZXN0b3JlZCB0byB0aGUgc2FtZSBwb3NpdGlvblxuXHQgKiBpdCB3YXMgaW4gd2hlbiB0aGUgbWV0aG9kIHdhcyBpbnZva2VkLjwvcD5cblx0ICpcblx0ICogQHBhcmFtIGxleGVyIFRoZSBsZXhlciBpbnN0YW5jZS5cblx0ICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCBzdHJlYW0gd2hpY2ggaXMgdGhlIHNvdXJjZSBmb3IgdGhlIGN1cnJlbnQgdG9rZW4uXG5cdCAqIFdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLCB0aGUgY3VycmVudCB7QGxpbmsgSW50U3RyZWFtLy9pbmRleH0gZm9yXG5cdCAqIHtAY29kZSBpbnB1dH0gc2hvdWxkIGJlIHRoZSBzdGFydCBvZiB0aGUgZm9sbG93aW5nIHRva2VuLCBpLmUuIDFcblx0ICogY2hhcmFjdGVyIHBhc3QgdGhlIGVuZCBvZiB0aGUgY3VycmVudCB0b2tlbi5cblx0ICogQHBhcmFtIHN0YXJ0SW5kZXggVGhlIHRva2VuIHN0YXJ0IGluZGV4LiBUaGlzIHZhbHVlIG1heSBiZSBwYXNzZWQgdG9cblx0ICoge0BsaW5rIEludFN0cmVhbS8vc2Vla30gdG8gc2V0IHRoZSB7QGNvZGUgaW5wdXR9IHBvc2l0aW9uIHRvIHRoZSBiZWdpbm5pbmdcblx0ICogb2YgdGhlIHRva2VuLlxuXHQgKi9cblx0ZXhlY3V0ZShsZXhlciwgaW5wdXQsIHN0YXJ0SW5kZXgpIHtcblx0XHRsZXQgcmVxdWlyZXNTZWVrID0gZmFsc2U7XG5cdFx0Y29uc3Qgc3RvcEluZGV4ID0gaW5wdXQuaW5kZXg7XG5cdFx0dHJ5IHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZXhlckFjdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bGV0IGxleGVyQWN0aW9uID0gdGhpcy5sZXhlckFjdGlvbnNbaV07XG5cdFx0XHRcdGlmIChsZXhlckFjdGlvbiBpbnN0YW5jZW9mIExleGVySW5kZXhlZEN1c3RvbUFjdGlvbikge1xuXHRcdFx0XHRcdGNvbnN0IG9mZnNldCA9IGxleGVyQWN0aW9uLm9mZnNldDtcblx0XHRcdFx0XHRpbnB1dC5zZWVrKHN0YXJ0SW5kZXggKyBvZmZzZXQpO1xuXHRcdFx0XHRcdGxleGVyQWN0aW9uID0gbGV4ZXJBY3Rpb24uYWN0aW9uO1xuXHRcdFx0XHRcdHJlcXVpcmVzU2VlayA9IChzdGFydEluZGV4ICsgb2Zmc2V0KSAhPT0gc3RvcEluZGV4O1xuXHRcdFx0XHR9IGVsc2UgaWYgKGxleGVyQWN0aW9uLmlzUG9zaXRpb25EZXBlbmRlbnQpIHtcblx0XHRcdFx0XHRpbnB1dC5zZWVrKHN0b3BJbmRleCk7XG5cdFx0XHRcdFx0cmVxdWlyZXNTZWVrID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGV4ZXJBY3Rpb24uZXhlY3V0ZShsZXhlcik7XG5cdFx0XHR9XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdGlmIChyZXF1aXJlc1NlZWspIHtcblx0XHRcdFx0aW5wdXQuc2VlayhzdG9wSW5kZXgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGhhc2hDb2RlKCkge1xuXHRcdHJldHVybiB0aGlzLmNhY2hlZEhhc2hDb2RlO1xuXHR9XG5cblx0dXBkYXRlSGFzaENvZGUoaGFzaCkge1xuXHRcdGhhc2gudXBkYXRlKHRoaXMuY2FjaGVkSGFzaENvZGUpO1xuXHR9XG5cblx0ZXF1YWxzKG90aGVyKSB7XG5cdFx0aWYgKHRoaXMgPT09IG90aGVyKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBMZXhlckFjdGlvbkV4ZWN1dG9yKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5jYWNoZWRIYXNoQ29kZSAhPSBvdGhlci5jYWNoZWRIYXNoQ29kZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5sZXhlckFjdGlvbnMubGVuZ3RoICE9IG90aGVyLmxleGVyQWN0aW9ucy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgbnVtQWN0aW9ucyA9IHRoaXMubGV4ZXJBY3Rpb25zLmxlbmd0aFxuXHRcdFx0Zm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbnVtQWN0aW9uczsgKytpZHgpIHtcblx0XHRcdFx0aWYgKCF0aGlzLmxleGVyQWN0aW9uc1tpZHhdLmVxdWFscyhvdGhlci5sZXhlckFjdGlvbnNbaWR4XSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEge0BsaW5rIExleGVyQWN0aW9uRXhlY3V0b3J9IHdoaWNoIGV4ZWN1dGVzIHRoZSBhY3Rpb25zIGZvclxuXHQgKiB0aGUgaW5wdXQge0Bjb2RlIGxleGVyQWN0aW9uRXhlY3V0b3J9IGZvbGxvd2VkIGJ5IGEgc3BlY2lmaWVkXG5cdCAqIHtAY29kZSBsZXhlckFjdGlvbn0uXG5cdCAqXG5cdCAqIEBwYXJhbSBsZXhlckFjdGlvbkV4ZWN1dG9yIFRoZSBleGVjdXRvciBmb3IgYWN0aW9ucyBhbHJlYWR5IHRyYXZlcnNlZCBieVxuXHQgKiB0aGUgbGV4ZXIgd2hpbGUgbWF0Y2hpbmcgYSB0b2tlbiB3aXRoaW4gYSBwYXJ0aWN1bGFyXG5cdCAqIHtAbGluayBMZXhlckFUTkNvbmZpZ30uIElmIHRoaXMgaXMge0Bjb2RlIG51bGx9LCB0aGUgbWV0aG9kIGJlaGF2ZXMgYXNcblx0ICogdGhvdWdoIGl0IHdlcmUgYW4gZW1wdHkgZXhlY3V0b3IuXG5cdCAqIEBwYXJhbSBsZXhlckFjdGlvbiBUaGUgbGV4ZXIgYWN0aW9uIHRvIGV4ZWN1dGUgYWZ0ZXIgdGhlIGFjdGlvbnNcblx0ICogc3BlY2lmaWVkIGluIHtAY29kZSBsZXhlckFjdGlvbkV4ZWN1dG9yfS5cblx0ICpcblx0ICogQHJldHVybiB7TGV4ZXJBY3Rpb25FeGVjdXRvcn0gQSB7QGxpbmsgTGV4ZXJBY3Rpb25FeGVjdXRvcn0gZm9yIGV4ZWN1dGluZyB0aGUgY29tYmluZSBhY3Rpb25zXG5cdCAqIG9mIHtAY29kZSBsZXhlckFjdGlvbkV4ZWN1dG9yfSBhbmQge0Bjb2RlIGxleGVyQWN0aW9ufS5cblx0ICovXG5cdHN0YXRpYyBhcHBlbmQobGV4ZXJBY3Rpb25FeGVjdXRvciwgbGV4ZXJBY3Rpb24pIHtcblx0XHRpZiAobGV4ZXJBY3Rpb25FeGVjdXRvciA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIG5ldyBMZXhlckFjdGlvbkV4ZWN1dG9yKFsgbGV4ZXJBY3Rpb24gXSk7XG5cdFx0fVxuXHRcdGNvbnN0IGxleGVyQWN0aW9ucyA9IGxleGVyQWN0aW9uRXhlY3V0b3IubGV4ZXJBY3Rpb25zLmNvbmNhdChbIGxleGVyQWN0aW9uIF0pO1xuXHRcdHJldHVybiBuZXcgTGV4ZXJBY3Rpb25FeGVjdXRvcihsZXhlckFjdGlvbnMpO1xuXHR9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBMZXhlckFjdGlvbkV4ZWN1dG9yO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vLi4vVXRpbHMnKTtcbmNvbnN0IHtTZXQsIEJpdFNldCwgRG91YmxlRGljdH0gPSBVdGlscztcblxuY29uc3QgQVROID0gcmVxdWlyZSgnLi9BVE4nKTtcbmNvbnN0IHtBVE5TdGF0ZSwgUnVsZVN0b3BTdGF0ZX0gPSByZXF1aXJlKCcuL0FUTlN0YXRlJyk7XG5cbmNvbnN0IHtBVE5Db25maWd9ID0gcmVxdWlyZSgnLi9BVE5Db25maWcnKTtcbmNvbnN0IHtBVE5Db25maWdTZXR9ID0gcmVxdWlyZSgnLi9BVE5Db25maWdTZXQnKTtcbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuLy4uL1Rva2VuJyk7XG5jb25zdCB7REZBU3RhdGUsIFByZWRQcmVkaWN0aW9ufSA9IHJlcXVpcmUoJy4vLi4vZGZhL0RGQVN0YXRlJyk7XG5jb25zdCBBVE5TaW11bGF0b3IgPSByZXF1aXJlKCcuL0FUTlNpbXVsYXRvcicpO1xuY29uc3QgUHJlZGljdGlvbk1vZGUgPSByZXF1aXJlKCcuL1ByZWRpY3Rpb25Nb2RlJyk7XG5jb25zdCBSdWxlQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vUnVsZUNvbnRleHQnKTtcbmNvbnN0IFBhcnNlclJ1bGVDb250ZXh0ID0gcmVxdWlyZSgnLi8uLi9QYXJzZXJSdWxlQ29udGV4dCcpO1xuY29uc3Qge1NlbWFudGljQ29udGV4dH0gPSByZXF1aXJlKCcuL1NlbWFudGljQ29udGV4dCcpO1xuY29uc3Qge1ByZWRpY3Rpb25Db250ZXh0fSA9IHJlcXVpcmUoJy4vLi4vUHJlZGljdGlvbkNvbnRleHQnKTtcbmNvbnN0IHtJbnRlcnZhbH0gPSByZXF1aXJlKCcuLy4uL0ludGVydmFsU2V0Jyk7XG5jb25zdCB7VHJhbnNpdGlvbiwgU2V0VHJhbnNpdGlvbiwgTm90U2V0VHJhbnNpdGlvbiwgUnVsZVRyYW5zaXRpb24sIEFjdGlvblRyYW5zaXRpb259ID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uJyk7XG5jb25zdCB7Tm9WaWFibGVBbHRFeGNlcHRpb259ID0gcmVxdWlyZSgnLi8uLi9lcnJvci9FcnJvcnMnKTtcbmNvbnN0IHtTaW5nbGV0b25QcmVkaWN0aW9uQ29udGV4dCwgcHJlZGljdGlvbkNvbnRleHRGcm9tUnVsZUNvbnRleHR9ID0gcmVxdWlyZSgnLi8uLi9QcmVkaWN0aW9uQ29udGV4dCcpO1xuXG5cbi8qKlxuICogVGhlIGVtYm9kaW1lbnQgb2YgdGhlIGFkYXB0aXZlIExMKCopLCBBTEwoKiksIHBhcnNpbmcgc3RyYXRlZ3kuXG4gKlxuICogPHA+XG4gKiBUaGUgYmFzaWMgY29tcGxleGl0eSBvZiB0aGUgYWRhcHRpdmUgc3RyYXRlZ3kgbWFrZXMgaXQgaGFyZGVyIHRvIHVuZGVyc3RhbmQuXG4gKiBXZSBiZWdpbiB3aXRoIEFUTiBzaW11bGF0aW9uIHRvIGJ1aWxkIHBhdGhzIGluIGEgREZBLiBTdWJzZXF1ZW50IHByZWRpY3Rpb25cbiAqIHJlcXVlc3RzIGdvIHRocm91Z2ggdGhlIERGQSBmaXJzdC4gSWYgdGhleSByZWFjaCBhIHN0YXRlIHdpdGhvdXQgYW4gZWRnZSBmb3JcbiAqIHRoZSBjdXJyZW50IHN5bWJvbCwgdGhlIGFsZ29yaXRobSBmYWlscyBvdmVyIHRvIHRoZSBBVE4gc2ltdWxhdGlvbiB0b1xuICogY29tcGxldGUgdGhlIERGQSBwYXRoIGZvciB0aGUgY3VycmVudCBpbnB1dCAodW50aWwgaXQgZmluZHMgYSBjb25mbGljdCBzdGF0ZVxuICogb3IgdW5pcXVlbHkgcHJlZGljdGluZyBzdGF0ZSkuPC9wPlxuICpcbiAqIDxwPlxuICogQWxsIG9mIHRoYXQgaXMgZG9uZSB3aXRob3V0IHVzaW5nIHRoZSBvdXRlciBjb250ZXh0IGJlY2F1c2Ugd2Ugd2FudCB0byBjcmVhdGVcbiAqIGEgREZBIHRoYXQgaXMgbm90IGRlcGVuZGVudCB1cG9uIHRoZSBydWxlIGludm9jYXRpb24gc3RhY2sgd2hlbiB3ZSBkbyBhXG4gKiBwcmVkaWN0aW9uLiBPbmUgREZBIHdvcmtzIGluIGFsbCBjb250ZXh0cy4gV2UgYXZvaWQgdXNpbmcgY29udGV4dCBub3RcbiAqIG5lY2Vzc2FyaWx5IGJlY2F1c2UgaXQncyBzbG93ZXIsIGFsdGhvdWdoIGl0IGNhbiBiZSwgYnV0IGJlY2F1c2Ugb2YgdGhlIERGQVxuICogY2FjaGluZyBwcm9ibGVtLiBUaGUgY2xvc3VyZSByb3V0aW5lIG9ubHkgY29uc2lkZXJzIHRoZSBydWxlIGludm9jYXRpb24gc3RhY2tcbiAqIGNyZWF0ZWQgZHVyaW5nIHByZWRpY3Rpb24gYmVnaW5uaW5nIGluIHRoZSBkZWNpc2lvbiBydWxlLiBGb3IgZXhhbXBsZSwgaWZcbiAqIHByZWRpY3Rpb24gb2NjdXJzIHdpdGhvdXQgaW52b2tpbmcgYW5vdGhlciBydWxlJ3MgQVROLCB0aGVyZSBhcmUgbm8gY29udGV4dFxuICogc3RhY2tzIGluIHRoZSBjb25maWd1cmF0aW9ucy4gV2hlbiBsYWNrIG9mIGNvbnRleHQgbGVhZHMgdG8gYSBjb25mbGljdCwgd2VcbiAqIGRvbid0IGtub3cgaWYgaXQncyBhbiBhbWJpZ3VpdHkgb3IgYSB3ZWFrbmVzcyBpbiB0aGUgc3Ryb25nIExMKCopIHBhcnNpbmdcbiAqIHN0cmF0ZWd5ICh2ZXJzdXMgZnVsbCBMTCgqKSkuPC9wPlxuICpcbiAqIDxwPlxuICogV2hlbiBTTEwgeWllbGRzIGEgY29uZmlndXJhdGlvbiBzZXQgd2l0aCBjb25mbGljdCwgd2UgcmV3aW5kIHRoZSBpbnB1dCBhbmRcbiAqIHJldHJ5IHRoZSBBVE4gc2ltdWxhdGlvbiwgdGhpcyB0aW1lIHVzaW5nIGZ1bGwgb3V0ZXIgY29udGV4dCB3aXRob3V0IGFkZGluZ1xuICogdG8gdGhlIERGQS4gQ29uZmlndXJhdGlvbiBjb250ZXh0IHN0YWNrcyB3aWxsIGJlIHRoZSBmdWxsIGludm9jYXRpb24gc3RhY2tzXG4gKiBmcm9tIHRoZSBzdGFydCBydWxlLiBJZiB3ZSBnZXQgYSBjb25mbGljdCB1c2luZyBmdWxsIGNvbnRleHQsIHRoZW4gd2UgY2FuXG4gKiBkZWZpbml0aXZlbHkgc2F5IHdlIGhhdmUgYSB0cnVlIGFtYmlndWl0eSBmb3IgdGhhdCBpbnB1dCBzZXF1ZW5jZS4gSWYgd2VcbiAqIGRvbid0IGdldCBhIGNvbmZsaWN0LCBpdCBpbXBsaWVzIHRoYXQgdGhlIGRlY2lzaW9uIGlzIHNlbnNpdGl2ZSB0byB0aGUgb3V0ZXJcbiAqIGNvbnRleHQuIChJdCBpcyBub3QgY29udGV4dC1zZW5zaXRpdmUgaW4gdGhlIHNlbnNlIG9mIGNvbnRleHQtc2Vuc2l0aXZlXG4gKiBncmFtbWFycy4pPC9wPlxuICpcbiAqIDxwPlxuICogVGhlIG5leHQgdGltZSB3ZSByZWFjaCB0aGlzIERGQSBzdGF0ZSB3aXRoIGFuIFNMTCBjb25mbGljdCwgdGhyb3VnaCBERkFcbiAqIHNpbXVsYXRpb24sIHdlIHdpbGwgYWdhaW4gcmV0cnkgdGhlIEFUTiBzaW11bGF0aW9uIHVzaW5nIGZ1bGwgY29udGV4dCBtb2RlLlxuICogVGhpcyBpcyBzbG93IGJlY2F1c2Ugd2UgY2FuJ3Qgc2F2ZSB0aGUgcmVzdWx0cyBhbmQgaGF2ZSB0byBcImludGVycHJldFwiIHRoZVxuICogQVROIGVhY2ggdGltZSB3ZSBnZXQgdGhhdCBpbnB1dC48L3A+XG4gKlxuICogPHA+XG4gKiA8c3Ryb25nPkNBQ0hJTkcgRlVMTCBDT05URVhUIFBSRURJQ1RJT05TPC9zdHJvbmc+PC9wPlxuICpcbiAqIDxwPlxuICogV2UgY291bGQgY2FjaGUgcmVzdWx0cyBmcm9tIGZ1bGwgY29udGV4dCB0byBwcmVkaWN0ZWQgYWx0ZXJuYXRpdmUgZWFzaWx5IGFuZFxuICogdGhhdCBzYXZlcyBhIGxvdCBvZiB0aW1lIGJ1dCBkb2Vzbid0IHdvcmsgaW4gcHJlc2VuY2Ugb2YgcHJlZGljYXRlcy4gVGhlIHNldFxuICogb2YgdmlzaWJsZSBwcmVkaWNhdGVzIGZyb20gdGhlIEFUTiBzdGFydCBzdGF0ZSBjaGFuZ2VzIGRlcGVuZGluZyBvbiB0aGVcbiAqIGNvbnRleHQsIGJlY2F1c2UgY2xvc3VyZSBjYW4gZmFsbCBvZmYgdGhlIGVuZCBvZiBhIHJ1bGUuIEkgdHJpZWQgdG8gY2FjaGVcbiAqIHR1cGxlcyAoc3RhY2sgY29udGV4dCwgc2VtYW50aWMgY29udGV4dCwgcHJlZGljdGVkIGFsdCkgYnV0IGl0IHdhcyBzbG93ZXJcbiAqIHRoYW4gaW50ZXJwcmV0aW5nIGFuZCBtdWNoIG1vcmUgY29tcGxpY2F0ZWQuIEFsc28gcmVxdWlyZWQgYSBodWdlIGFtb3VudCBvZlxuICogbWVtb3J5LiBUaGUgZ29hbCBpcyBub3QgdG8gY3JlYXRlIHRoZSB3b3JsZCdzIGZhc3Rlc3QgcGFyc2VyIGFueXdheS4gSSdkIGxpa2VcbiAqIHRvIGtlZXAgdGhpcyBhbGdvcml0aG0gc2ltcGxlLiBCeSBsYXVuY2hpbmcgbXVsdGlwbGUgdGhyZWFkcywgd2UgY2FuIGltcHJvdmVcbiAqIHRoZSBzcGVlZCBvZiBwYXJzaW5nIGFjcm9zcyBhIGxhcmdlIG51bWJlciBvZiBmaWxlcy48L3A+XG4gKlxuICogPHA+XG4gKiBUaGVyZSBpcyBubyBzdHJpY3Qgb3JkZXJpbmcgYmV0d2VlbiB0aGUgYW1vdW50IG9mIGlucHV0IHVzZWQgYnkgU0xMIHZzIExMLFxuICogd2hpY2ggbWFrZXMgaXQgcmVhbGx5IGhhcmQgdG8gYnVpbGQgYSBjYWNoZSBmb3IgZnVsbCBjb250ZXh0LiBMZXQncyBzYXkgdGhhdFxuICogd2UgaGF2ZSBpbnB1dCBBIEIgQyB0aGF0IGxlYWRzIHRvIGFuIFNMTCBjb25mbGljdCB3aXRoIGZ1bGwgY29udGV4dCBYLiBUaGF0XG4gKiBpbXBsaWVzIHRoYXQgdXNpbmcgWCB3ZSBtaWdodCBvbmx5IHVzZSBBIEIgYnV0IHdlIGNvdWxkIGFsc28gdXNlIEEgQiBDIEQgdG9cbiAqIHJlc29sdmUgY29uZmxpY3QuIElucHV0IEEgQiBDIEQgY291bGQgcHJlZGljdCBhbHRlcm5hdGl2ZSAxIGluIG9uZSBwb3NpdGlvblxuICogaW4gdGhlIGlucHV0IGFuZCBBIEIgQyBFIGNvdWxkIHByZWRpY3QgYWx0ZXJuYXRpdmUgMiBpbiBhbm90aGVyIHBvc2l0aW9uIGluXG4gKiBpbnB1dC4gVGhlIGNvbmZsaWN0aW5nIFNMTCBjb25maWd1cmF0aW9ucyBjb3VsZCBzdGlsbCBiZSBub24tdW5pcXVlIGluIHRoZVxuICogZnVsbCBjb250ZXh0IHByZWRpY3Rpb24sIHdoaWNoIHdvdWxkIGxlYWQgdXMgdG8gcmVxdWlyaW5nIG1vcmUgaW5wdXQgdGhhbiB0aGVcbiAqIG9yaWdpbmFsIEEgQiBDLlx0VG8gbWFrZSBhXHRwcmVkaWN0aW9uIGNhY2hlIHdvcmssIHdlIGhhdmUgdG8gdHJhY2tcdHRoZSBleGFjdFxuICogaW5wdXRcdHVzZWQgZHVyaW5nIHRoZSBwcmV2aW91cyBwcmVkaWN0aW9uLiBUaGF0IGFtb3VudHMgdG8gYSBjYWNoZSB0aGF0IG1hcHNcbiAqIFggdG8gYSBzcGVjaWZpYyBERkEgZm9yIHRoYXQgY29udGV4dC48L3A+XG4gKlxuICogPHA+XG4gKiBTb21ldGhpbmcgc2hvdWxkIGJlIGRvbmUgZm9yIGxlZnQtcmVjdXJzaXZlIGV4cHJlc3Npb24gcHJlZGljdGlvbnMuIFRoZXkgYXJlXG4gKiBsaWtlbHkgTEwoMSkgKyBwcmVkIGV2YWwuIEVhc2llciB0byBkbyB0aGUgd2hvbGUgU0xMIHVubGVzcyBlcnJvciBhbmQgcmV0cnlcbiAqIHdpdGggZnVsbCBMTCB0aGluZyBTYW0gZG9lcy48L3A+XG4gKlxuICogPHA+XG4gKiA8c3Ryb25nPkFWT0lESU5HIEZVTEwgQ09OVEVYVCBQUkVESUNUSU9OPC9zdHJvbmc+PC9wPlxuICpcbiAqIDxwPlxuICogV2UgYXZvaWQgZG9pbmcgZnVsbCBjb250ZXh0IHJldHJ5IHdoZW4gdGhlIG91dGVyIGNvbnRleHQgaXMgZW1wdHksIHdlIGRpZCBub3RcbiAqIGRpcCBpbnRvIHRoZSBvdXRlciBjb250ZXh0IGJ5IGZhbGxpbmcgb2ZmIHRoZSBlbmQgb2YgdGhlIGRlY2lzaW9uIHN0YXRlIHJ1bGUsXG4gKiBvciB3aGVuIHdlIGZvcmNlIFNMTCBtb2RlLjwvcD5cbiAqXG4gKiA8cD5cbiAqIEFzIGFuIGV4YW1wbGUgb2YgdGhlIG5vdCBkaXAgaW50byBvdXRlciBjb250ZXh0IGNhc2UsIGNvbnNpZGVyIGFzIHN1cGVyXG4gKiBjb25zdHJ1Y3RvciBjYWxscyB2ZXJzdXMgZnVuY3Rpb24gY2FsbHMuIE9uZSBncmFtbWFyIG1pZ2h0IGxvb2sgbGlrZVxuICogdGhpczo8L3A+XG4gKlxuICogPHByZT5cbiAqIGN0b3JCb2R5XG4gKiAgIDogJ3snIHN1cGVyQ2FsbD8gc3RhdCogJ30nXG4gKiAgIDtcbiAqIDwvcHJlPlxuICpcbiAqIDxwPlxuICogT3IsIHlvdSBtaWdodCBzZWUgc29tZXRoaW5nIGxpa2U8L3A+XG4gKlxuICogPHByZT5cbiAqIHN0YXRcbiAqICAgOiBzdXBlckNhbGwgJzsnXG4gKiAgIHwgZXhwcmVzc2lvbiAnOydcbiAqICAgfCAuLi5cbiAqICAgO1xuICogPC9wcmU+XG4gKlxuICogPHA+XG4gKiBJbiBib3RoIGNhc2VzIEkgYmVsaWV2ZSB0aGF0IG5vIGNsb3N1cmUgb3BlcmF0aW9ucyB3aWxsIGRpcCBpbnRvIHRoZSBvdXRlclxuICogY29udGV4dC4gSW4gdGhlIGZpcnN0IGNhc2UgY3RvckJvZHkgaW4gdGhlIHdvcnN0IGNhc2Ugd2lsbCBzdG9wIGF0IHRoZSAnfScuXG4gKiBJbiB0aGUgMm5kIGNhc2UgaXQgc2hvdWxkIHN0b3AgYXQgdGhlICc7Jy4gQm90aCBjYXNlcyBzaG91bGQgc3RheSB3aXRoaW4gdGhlXG4gKiBlbnRyeSBydWxlIGFuZCBub3QgZGlwIGludG8gdGhlIG91dGVyIGNvbnRleHQuPC9wPlxuICpcbiAqIDxwPlxuICogPHN0cm9uZz5QUkVESUNBVEVTPC9zdHJvbmc+PC9wPlxuICpcbiAqIDxwPlxuICogUHJlZGljYXRlcyBhcmUgYWx3YXlzIGV2YWx1YXRlZCBpZiBwcmVzZW50IGluIGVpdGhlciBTTEwgb3IgTEwgYm90aC4gU0xMIGFuZFxuICogTEwgc2ltdWxhdGlvbiBkZWFscyB3aXRoIHByZWRpY2F0ZXMgZGlmZmVyZW50bHkuIFNMTCBjb2xsZWN0cyBwcmVkaWNhdGVzIGFzXG4gKiBpdCBwZXJmb3JtcyBjbG9zdXJlIG9wZXJhdGlvbnMgbGlrZSBBTlRMUiB2MyBkaWQuIEl0IGRlbGF5cyBwcmVkaWNhdGVcbiAqIGV2YWx1YXRpb24gdW50aWwgaXQgcmVhY2hlcyBhbmQgYWNjZXB0IHN0YXRlLiBUaGlzIGFsbG93cyB1cyB0byBjYWNoZSB0aGUgU0xMXG4gKiBBVE4gc2ltdWxhdGlvbiB3aGVyZWFzLCBpZiB3ZSBoYWQgZXZhbHVhdGVkIHByZWRpY2F0ZXMgb24tdGhlLWZseSBkdXJpbmdcbiAqIGNsb3N1cmUsIHRoZSBERkEgc3RhdGUgY29uZmlndXJhdGlvbiBzZXRzIHdvdWxkIGJlIGRpZmZlcmVudCBhbmQgd2UgY291bGRuJ3RcbiAqIGJ1aWxkIHVwIGEgc3VpdGFibGUgREZBLjwvcD5cbiAqXG4gKiA8cD5cbiAqIFdoZW4gYnVpbGRpbmcgYSBERkEgYWNjZXB0IHN0YXRlIGR1cmluZyBBVE4gc2ltdWxhdGlvbiwgd2UgZXZhbHVhdGUgYW55XG4gKiBwcmVkaWNhdGVzIGFuZCByZXR1cm4gdGhlIHNvbGUgc2VtYW50aWNhbGx5IHZhbGlkIGFsdGVybmF0aXZlLiBJZiB0aGVyZSBpc1xuICogbW9yZSB0aGFuIDEgYWx0ZXJuYXRpdmUsIHdlIHJlcG9ydCBhbiBhbWJpZ3VpdHkuIElmIHRoZXJlIGFyZSAwIGFsdGVybmF0aXZlcyxcbiAqIHdlIHRocm93IGFuIGV4Y2VwdGlvbi4gQWx0ZXJuYXRpdmVzIHdpdGhvdXQgcHJlZGljYXRlcyBhY3QgbGlrZSB0aGV5IGhhdmVcbiAqIHRydWUgcHJlZGljYXRlcy4gVGhlIHNpbXBsZSB3YXkgdG8gdGhpbmsgYWJvdXQgaXQgaXMgdG8gc3RyaXAgYXdheSBhbGxcbiAqIGFsdGVybmF0aXZlcyB3aXRoIGZhbHNlIHByZWRpY2F0ZXMgYW5kIGNob29zZSB0aGUgbWluaW11bSBhbHRlcm5hdGl2ZSB0aGF0XG4gKiByZW1haW5zLjwvcD5cbiAqXG4gKiA8cD5cbiAqIFdoZW4gd2Ugc3RhcnQgaW4gdGhlIERGQSBhbmQgcmVhY2ggYW4gYWNjZXB0IHN0YXRlIHRoYXQncyBwcmVkaWNhdGVkLCB3ZSB0ZXN0XG4gKiB0aG9zZSBhbmQgcmV0dXJuIHRoZSBtaW5pbXVtIHNlbWFudGljYWxseSB2aWFibGUgYWx0ZXJuYXRpdmUuIElmIG5vXG4gKiBhbHRlcm5hdGl2ZXMgYXJlIHZpYWJsZSwgd2UgdGhyb3cgYW4gZXhjZXB0aW9uLjwvcD5cbiAqXG4gKiA8cD5cbiAqIER1cmluZyBmdWxsIExMIEFUTiBzaW11bGF0aW9uLCBjbG9zdXJlIGFsd2F5cyBldmFsdWF0ZXMgcHJlZGljYXRlcyBhbmRcbiAqIG9uLXRoZS1mbHkuIFRoaXMgaXMgY3J1Y2lhbCB0byByZWR1Y2luZyB0aGUgY29uZmlndXJhdGlvbiBzZXQgc2l6ZSBkdXJpbmdcbiAqIGNsb3N1cmUuIEl0IGhpdHMgYSBsYW5kbWluZSB3aGVuIHBhcnNpbmcgd2l0aCB0aGUgSmF2YSBncmFtbWFyLCBmb3IgZXhhbXBsZSxcbiAqIHdpdGhvdXQgdGhpcyBvbi10aGUtZmx5IGV2YWx1YXRpb24uPC9wPlxuICpcbiAqIDxwPlxuICogPHN0cm9uZz5TSEFSSU5HIERGQTwvc3Ryb25nPjwvcD5cbiAqXG4gKiA8cD5cbiAqIEFsbCBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgcGFyc2VyIHNoYXJlIHRoZSBzYW1lIGRlY2lzaW9uIERGQXMgdGhyb3VnaCBhXG4gKiBzdGF0aWMgZmllbGQuIEVhY2ggaW5zdGFuY2UgZ2V0cyBpdHMgb3duIEFUTiBzaW11bGF0b3IgYnV0IHRoZXkgc2hhcmUgdGhlXG4gKiBzYW1lIHtAbGluayAvL2RlY2lzaW9uVG9ERkF9IGZpZWxkLiBUaGV5IGFsc28gc2hhcmUgYVxuICoge0BsaW5rIFByZWRpY3Rpb25Db250ZXh0Q2FjaGV9IG9iamVjdCB0aGF0IG1ha2VzIHN1cmUgdGhhdCBhbGxcbiAqIHtAbGluayBQcmVkaWN0aW9uQ29udGV4dH0gb2JqZWN0cyBhcmUgc2hhcmVkIGFtb25nIHRoZSBERkEgc3RhdGVzLiBUaGlzIG1ha2VzXG4gKiBhIGJpZyBzaXplIGRpZmZlcmVuY2UuPC9wPlxuICpcbiAqIDxwPlxuICogPHN0cm9uZz5USFJFQUQgU0FGRVRZPC9zdHJvbmc+PC9wPlxuICpcbiAqIDxwPlxuICogVGhlIHtAbGluayBQYXJzZXJBVE5TaW11bGF0b3J9IGxvY2tzIG9uIHRoZSB7QGxpbmsgLy9kZWNpc2lvblRvREZBfSBmaWVsZCB3aGVuXG4gKiBpdCBhZGRzIGEgbmV3IERGQSBvYmplY3QgdG8gdGhhdCBhcnJheS4ge0BsaW5rIC8vYWRkREZBRWRnZX1cbiAqIGxvY2tzIG9uIHRoZSBERkEgZm9yIHRoZSBjdXJyZW50IGRlY2lzaW9uIHdoZW4gc2V0dGluZyB0aGVcbiAqIHtAbGluayBERkFTdGF0ZS8vZWRnZXN9IGZpZWxkLiB7QGxpbmsgLy9hZGRERkFTdGF0ZX0gbG9ja3Mgb25cbiAqIHRoZSBERkEgZm9yIHRoZSBjdXJyZW50IGRlY2lzaW9uIHdoZW4gbG9va2luZyB1cCBhIERGQSBzdGF0ZSB0byBzZWUgaWYgaXRcbiAqIGFscmVhZHkgZXhpc3RzLiBXZSBtdXN0IG1ha2Ugc3VyZSB0aGF0IGFsbCByZXF1ZXN0cyB0byBhZGQgREZBIHN0YXRlcyB0aGF0XG4gKiBhcmUgZXF1aXZhbGVudCByZXN1bHQgaW4gdGhlIHNhbWUgc2hhcmVkIERGQSBvYmplY3QuIFRoaXMgaXMgYmVjYXVzZSBsb3RzIG9mXG4gKiB0aHJlYWRzIHdpbGwgYmUgdHJ5aW5nIHRvIHVwZGF0ZSB0aGUgREZBIGF0IG9uY2UuIFRoZVxuICoge0BsaW5rIC8vYWRkREZBU3RhdGV9IG1ldGhvZCBhbHNvIGxvY2tzIGluc2lkZSB0aGUgREZBIGxvY2tcbiAqIGJ1dCB0aGlzIHRpbWUgb24gdGhlIHNoYXJlZCBjb250ZXh0IGNhY2hlIHdoZW4gaXQgcmVidWlsZHMgdGhlXG4gKiBjb25maWd1cmF0aW9ucycge0BsaW5rIFByZWRpY3Rpb25Db250ZXh0fSBvYmplY3RzIHVzaW5nIGNhY2hlZFxuICogc3ViZ3JhcGhzL25vZGVzLiBObyBvdGhlciBsb2NraW5nIG9jY3VycywgZXZlbiBkdXJpbmcgREZBIHNpbXVsYXRpb24uIFRoaXMgaXNcbiAqIHNhZmUgYXMgbG9uZyBhcyB3ZSBjYW4gZ3VhcmFudGVlIHRoYXQgYWxsIHRocmVhZHMgcmVmZXJlbmNpbmdcbiAqIHtAY29kZSBzLmVkZ2VbdF19IGdldCB0aGUgc2FtZSBwaHlzaWNhbCB0YXJnZXQge0BsaW5rIERGQVN0YXRlfSwgb3JcbiAqIHtAY29kZSBudWxsfS4gT25jZSBpbnRvIHRoZSBERkEsIHRoZSBERkEgc2ltdWxhdGlvbiBkb2VzIG5vdCByZWZlcmVuY2UgdGhlXG4gKiB7QGxpbmsgREZBLy9zdGF0ZXN9IG1hcC4gSXQgZm9sbG93cyB0aGUge0BsaW5rIERGQVN0YXRlLy9lZGdlc30gZmllbGQgdG8gbmV3XG4gKiB0YXJnZXRzLiBUaGUgREZBIHNpbXVsYXRvciB3aWxsIGVpdGhlciBmaW5kIHtAbGluayBERkFTdGF0ZS8vZWRnZXN9IHRvIGJlXG4gKiB7QGNvZGUgbnVsbH0sIHRvIGJlIG5vbi17QGNvZGUgbnVsbH0gYW5kIHtAY29kZSBkZmEuZWRnZXNbdF19IG51bGwsIG9yXG4gKiB7QGNvZGUgZGZhLmVkZ2VzW3RdfSB0byBiZSBub24tbnVsbC4gVGhlXG4gKiB7QGxpbmsgLy9hZGRERkFFZGdlfSBtZXRob2QgY291bGQgYmUgcmFjaW5nIHRvIHNldCB0aGUgZmllbGRcbiAqIGJ1dCBpbiBlaXRoZXIgY2FzZSB0aGUgREZBIHNpbXVsYXRvciB3b3JrczsgaWYge0Bjb2RlIG51bGx9LCBhbmQgcmVxdWVzdHMgQVROXG4gKiBzaW11bGF0aW9uLiBJdCBjb3VsZCBhbHNvIHJhY2UgdHJ5aW5nIHRvIGdldCB7QGNvZGUgZGZhLmVkZ2VzW3RdfSwgYnV0IGVpdGhlclxuICogd2F5IGl0IHdpbGwgd29yayBiZWNhdXNlIGl0J3Mgbm90IGRvaW5nIGEgdGVzdCBhbmQgc2V0IG9wZXJhdGlvbi48L3A+XG4gKlxuICogPHA+XG4gKiA8c3Ryb25nPlN0YXJ0aW5nIHdpdGggU0xMIHRoZW4gZmFpbGluZyB0byBjb21iaW5lZCBTTEwvTEwgKFR3by1TdGFnZVxuICogUGFyc2luZyk8L3N0cm9uZz48L3A+XG4gKlxuICogPHA+XG4gKiBTYW0gcG9pbnRlZCBvdXQgdGhhdCBpZiBTTEwgZG9lcyBub3QgZ2l2ZSBhIHN5bnRheCBlcnJvciwgdGhlbiB0aGVyZSBpcyBub1xuICogcG9pbnQgaW4gZG9pbmcgZnVsbCBMTCwgd2hpY2ggaXMgc2xvd2VyLiBXZSBvbmx5IGhhdmUgdG8gdHJ5IExMIGlmIHdlIGdldCBhXG4gKiBzeW50YXggZXJyb3IuIEZvciBtYXhpbXVtIHNwZWVkLCBTYW0gc3RhcnRzIHRoZSBwYXJzZXIgc2V0IHRvIHB1cmUgU0xMXG4gKiBtb2RlIHdpdGggdGhlIHtAbGluayBCYWlsRXJyb3JTdHJhdGVneX06PC9wPlxuICpcbiAqIDxwcmU+XG4gKiBwYXJzZXIue0BsaW5rIFBhcnNlci8vZ2V0SW50ZXJwcmV0ZXIoKSBnZXRJbnRlcnByZXRlcigpfS57QGxpbmsgLy9zZXRQcmVkaWN0aW9uTW9kZSBzZXRQcmVkaWN0aW9uTW9kZX17QGNvZGUgKH17QGxpbmsgUHJlZGljdGlvbk1vZGUvL1NMTH17QGNvZGUgKX07XG4gKiBwYXJzZXIue0BsaW5rIFBhcnNlci8vc2V0RXJyb3JIYW5kbGVyIHNldEVycm9ySGFuZGxlcn0obmV3IHtAbGluayBCYWlsRXJyb3JTdHJhdGVneX0oKSk7XG4gKiA8L3ByZT5cbiAqXG4gKiA8cD5cbiAqIElmIGl0IGRvZXMgbm90IGdldCBhIHN5bnRheCBlcnJvciwgdGhlbiB3ZSdyZSBkb25lLiBJZiBpdCBkb2VzIGdldCBhIHN5bnRheFxuICogZXJyb3IsIHdlIG5lZWQgdG8gcmV0cnkgd2l0aCB0aGUgY29tYmluZWQgU0xML0xMIHN0cmF0ZWd5LjwvcD5cbiAqXG4gKiA8cD5cbiAqIFRoZSByZWFzb24gdGhpcyB3b3JrcyBpcyBhcyBmb2xsb3dzLiBJZiB0aGVyZSBhcmUgbm8gU0xMIGNvbmZsaWN0cywgdGhlbiB0aGVcbiAqIGdyYW1tYXIgaXMgU0xMIChhdCBsZWFzdCBmb3IgdGhhdCBpbnB1dCBzZXQpLiBJZiB0aGVyZSBpcyBhbiBTTEwgY29uZmxpY3QsXG4gKiB0aGUgZnVsbCBMTCBhbmFseXNpcyBtdXN0IHlpZWxkIGEgc2V0IG9mIHZpYWJsZSBhbHRlcm5hdGl2ZXMgd2hpY2ggaXMgYVxuICogc3Vic2V0IG9mIHRoZSBhbHRlcm5hdGl2ZXMgcmVwb3J0ZWQgYnkgU0xMLiBJZiB0aGUgTEwgc2V0IGlzIGEgc2luZ2xldG9uLFxuICogdGhlbiB0aGUgZ3JhbW1hciBpcyBMTCBidXQgbm90IFNMTC4gSWYgdGhlIExMIHNldCBpcyB0aGUgc2FtZSBzaXplIGFzIHRoZSBTTExcbiAqIHNldCwgdGhlIGRlY2lzaW9uIGlzIFNMTC4gSWYgdGhlIExMIHNldCBoYXMgc2l6ZSAmZ3Q7IDEsIHRoZW4gdGhhdCBkZWNpc2lvblxuICogaXMgdHJ1bHkgYW1iaWd1b3VzIG9uIHRoZSBjdXJyZW50IGlucHV0LiBJZiB0aGUgTEwgc2V0IGlzIHNtYWxsZXIsIHRoZW4gdGhlXG4gKiBTTEwgY29uZmxpY3QgcmVzb2x1dGlvbiBtaWdodCBjaG9vc2UgYW4gYWx0ZXJuYXRpdmUgdGhhdCB0aGUgZnVsbCBMTCB3b3VsZFxuICogcnVsZSBvdXQgYXMgYSBwb3NzaWJpbGl0eSBiYXNlZCB1cG9uIGJldHRlciBjb250ZXh0IGluZm9ybWF0aW9uLiBJZiB0aGF0J3NcbiAqIHRoZSBjYXNlLCB0aGVuIHRoZSBTTEwgcGFyc2Ugd2lsbCBkZWZpbml0ZWx5IGdldCBhbiBlcnJvciBiZWNhdXNlIHRoZSBmdWxsIExMXG4gKiBhbmFseXNpcyBzYXlzIGl0J3Mgbm90IHZpYWJsZS4gSWYgU0xMIGNvbmZsaWN0IHJlc29sdXRpb24gY2hvb3NlcyBhblxuICogYWx0ZXJuYXRpdmUgd2l0aGluIHRoZSBMTCBzZXQsIHRoZW0gYm90aCBTTEwgYW5kIExMIHdvdWxkIGNob29zZSB0aGUgc2FtZVxuICogYWx0ZXJuYXRpdmUgYmVjYXVzZSB0aGV5IGJvdGggY2hvb3NlIHRoZSBtaW5pbXVtIG9mIG11bHRpcGxlIGNvbmZsaWN0aW5nXG4gKiBhbHRlcm5hdGl2ZXMuPC9wPlxuICpcbiAqIDxwPlxuICogTGV0J3Mgc2F5IHdlIGhhdmUgYSBzZXQgb2YgU0xMIGNvbmZsaWN0aW5nIGFsdGVybmF0aXZlcyB7QGNvZGUgezEsIDIsIDN9fSBhbmRcbiAqIGEgc21hbGxlciBMTCBzZXQgY2FsbGVkIDxlbT5zPC9lbT4uIElmIDxlbT5zPC9lbT4gaXMge0Bjb2RlIHsyLCAzfX0sIHRoZW4gU0xMXG4gKiBwYXJzaW5nIHdpbGwgZ2V0IGFuIGVycm9yIGJlY2F1c2UgU0xMIHdpbGwgcHVyc3VlIGFsdGVybmF0aXZlIDEuIElmXG4gKiA8ZW0+czwvZW0+IGlzIHtAY29kZSB7MSwgMn19IG9yIHtAY29kZSB7MSwgM319IHRoZW4gYm90aCBTTEwgYW5kIExMIHdpbGxcbiAqIGNob29zZSB0aGUgc2FtZSBhbHRlcm5hdGl2ZSBiZWNhdXNlIGFsdGVybmF0aXZlIG9uZSBpcyB0aGUgbWluaW11bSBvZiBlaXRoZXJcbiAqIHNldC4gSWYgPGVtPnM8L2VtPiBpcyB7QGNvZGUgezJ9fSBvciB7QGNvZGUgezN9fSB0aGVuIFNMTCB3aWxsIGdldCBhIHN5bnRheFxuICogZXJyb3IuIElmIDxlbT5zPC9lbT4gaXMge0Bjb2RlIHsxfX0gdGhlbiBTTEwgd2lsbCBzdWNjZWVkLjwvcD5cbiAqXG4gKiA8cD5cbiAqIE9mIGNvdXJzZSwgaWYgdGhlIGlucHV0IGlzIGludmFsaWQsIHRoZW4gd2Ugd2lsbCBnZXQgYW4gZXJyb3IgZm9yIHN1cmUgaW5cbiAqIGJvdGggU0xMIGFuZCBMTCBwYXJzaW5nLiBFcnJvbmVvdXMgaW5wdXQgd2lsbCB0aGVyZWZvcmUgcmVxdWlyZSAyIHBhc3NlcyBvdmVyXG4gKiB0aGUgaW5wdXQuPC9wPlxuICovXG5jbGFzcyBQYXJzZXJBVE5TaW11bGF0b3IgZXh0ZW5kcyBBVE5TaW11bGF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgYXRuLCBkZWNpc2lvblRvREZBLCBzaGFyZWRDb250ZXh0Q2FjaGUpIHtcbiAgICAgICAgc3VwZXIoYXRuLCBzaGFyZWRDb250ZXh0Q2FjaGUpO1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5kZWNpc2lvblRvREZBID0gZGVjaXNpb25Ub0RGQTtcbiAgICAgICAgLy8gU0xMLCBMTCwgb3IgTEwgKyBleGFjdCBhbWJpZyBkZXRlY3Rpb24/Ly9cbiAgICAgICAgdGhpcy5wcmVkaWN0aW9uTW9kZSA9IFByZWRpY3Rpb25Nb2RlLkxMO1xuICAgICAgICAvLyBMQU1FIGdsb2JhbHMgdG8gYXZvaWQgcGFyYW1ldGVycyEhISEhIEkgbmVlZCB0aGVzZSBkb3duIGRlZXAgaW4gcHJlZFRyYW5zaXRpb25cbiAgICAgICAgdGhpcy5faW5wdXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdGFydEluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5fb3V0ZXJDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGZhID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVhY2ggcHJlZGljdGlvbiBvcGVyYXRpb24gdXNlcyBhIGNhY2hlIGZvciBtZXJnZSBvZiBwcmVkaWN0aW9uIGNvbnRleHRzLlxuICAgICAgICAgKiAgRG9uJ3Qga2VlcCBhcm91bmQgYXMgaXQgd2FzdGVzIGh1Z2UgYW1vdW50cyBvZiBtZW1vcnkuIERvdWJsZUtleU1hcFxuICAgICAgICAgKiAgaXNuJ3Qgc3luY2hyb25pemVkIGJ1dCB3ZSdyZSBvayBzaW5jZSB0d28gdGhyZWFkcyBzaG91bGRuJ3QgcmV1c2Ugc2FtZVxuICAgICAgICAgKiAgcGFyc2VyL2F0bnNpbSBvYmplY3QgYmVjYXVzZSBpdCBjYW4gb25seSBoYW5kbGUgb25lIGlucHV0IGF0IGEgdGltZS5cbiAgICAgICAgICogIFRoaXMgbWFwcyBncmFwaHMgYSBhbmQgYiB0byBtZXJnZWQgcmVzdWx0IGMuIChhLGIpJnJhcnI7Yy4gV2UgY2FuIGF2b2lkXG4gICAgICAgICAqICB0aGUgbWVyZ2UgaWYgd2UgZXZlciBzZWUgYSBhbmQgYiBhZ2Fpbi4gIE5vdGUgdGhhdCAoYixhKSZyYXJyO2Mgc2hvdWxkXG4gICAgICAgICAqICBhbHNvIGJlIGV4YW1pbmVkIGR1cmluZyBjYWNoZSBsb29rdXAuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1lcmdlQ2FjaGUgPSBudWxsO1xuICAgICAgICB0aGlzLmRlYnVnID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVidWdfY2xvc3VyZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlYnVnX2FkZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlYnVnX2xpc3RfYXRuX2RlY2lzaW9ucyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRmYV9kZWJ1ZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJldHJ5X2RlYnVnID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7fVxuXG4gICAgYWRhcHRpdmVQcmVkaWN0KGlucHV0LCBkZWNpc2lvbiwgb3V0ZXJDb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnIHx8IHRoaXMuZGVidWdfbGlzdF9hdG5fZGVjaXNpb25zKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFkYXB0aXZlUHJlZGljdCBkZWNpc2lvbiBcIiArIGRlY2lzaW9uICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgZXhlYyBMQSgxKT09XCIgKyB0aGlzLmdldExvb2thaGVhZE5hbWUoaW5wdXQpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgbGluZSBcIiArIGlucHV0LkxUKDEpLmxpbmUgKyBcIjpcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LkxUKDEpLmNvbHVtbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5fc3RhcnRJbmRleCA9IGlucHV0LmluZGV4O1xuICAgICAgICB0aGlzLl9vdXRlckNvbnRleHQgPSBvdXRlckNvbnRleHQ7XG5cbiAgICAgICAgY29uc3QgZGZhID0gdGhpcy5kZWNpc2lvblRvREZBW2RlY2lzaW9uXTtcbiAgICAgICAgdGhpcy5fZGZhID0gZGZhO1xuICAgICAgICBjb25zdCBtID0gaW5wdXQubWFyaygpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGlucHV0LmluZGV4O1xuXG4gICAgICAgIC8vIE5vdyB3ZSBhcmUgY2VydGFpbiB0byBoYXZlIGEgc3BlY2lmaWMgZGVjaXNpb24ncyBERkFcbiAgICAgICAgLy8gQnV0LCBkbyB3ZSBzdGlsbCBuZWVkIGFuIGluaXRpYWwgc3RhdGU/XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgczA7XG4gICAgICAgICAgICBpZiAoZGZhLnByZWNlZGVuY2VEZmEpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgc3RhcnQgc3RhdGUgZm9yIGEgcHJlY2VkZW5jZSBERkEgZGVwZW5kcyBvbiB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHBhcnNlciBwcmVjZWRlbmNlLCBhbmQgaXMgcHJvdmlkZWQgYnkgYSBERkEgbWV0aG9kLlxuICAgICAgICAgICAgICAgIHMwID0gZGZhLmdldFByZWNlZGVuY2VTdGFydFN0YXRlKHRoaXMucGFyc2VyLmdldFByZWNlZGVuY2UoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBzdGFydCBzdGF0ZSBmb3IgYSBcInJlZ3VsYXJcIiBERkEgaXMganVzdCBzMFxuICAgICAgICAgICAgICAgIHMwID0gZGZhLnMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMwPT09bnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChvdXRlckNvbnRleHQ9PT1udWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dGVyQ29udGV4dCA9IFJ1bGVDb250ZXh0LkVNUFRZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWJ1ZyB8fCB0aGlzLmRlYnVnX2xpc3RfYXRuX2RlY2lzaW9ucykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInByZWRpY3RBVE4gZGVjaXNpb24gXCIgKyBkZmEuZGVjaXNpb24gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgZXhlYyBMQSgxKT09XCIgKyB0aGlzLmdldExvb2thaGVhZE5hbWUoaW5wdXQpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLCBvdXRlckNvbnRleHQ9XCIgKyBvdXRlckNvbnRleHQudG9TdHJpbmcodGhpcy5wYXJzZXIucnVsZU5hbWVzKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZnVsbEN0eCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxldCBzMF9jbG9zdXJlID0gdGhpcy5jb21wdXRlU3RhcnRTdGF0ZShkZmEuYXRuU3RhcnRTdGF0ZSwgUnVsZUNvbnRleHQuRU1QVFksIGZ1bGxDdHgpO1xuXG4gICAgICAgICAgICAgICAgaWYoIGRmYS5wcmVjZWRlbmNlRGZhKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSBwcmVjZWRlbmNlIERGQSwgd2UgdXNlIGFwcGx5UHJlY2VkZW5jZUZpbHRlclxuICAgICAgICAgICAgICAgICAgICAvLyB0byBjb252ZXJ0IHRoZSBjb21wdXRlZCBzdGFydCBzdGF0ZSB0byBhIHByZWNlZGVuY2Ugc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RhdGUuIFdlIHRoZW4gdXNlIERGQS5zZXRQcmVjZWRlbmNlU3RhcnRTdGF0ZSB0byBzZXQgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGFwcHJvcHJpYXRlIHN0YXJ0IHN0YXRlIGZvciB0aGUgcHJlY2VkZW5jZSBsZXZlbCByYXRoZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhbiBzaW1wbHkgc2V0dGluZyBERkEuczAuXG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIGRmYS5zMC5jb25maWdzID0gczBfY2xvc3VyZTsgLy8gbm90IHVzZWQgZm9yIHByZWRpY3Rpb24gYnV0IHVzZWZ1bCB0byBrbm93IHN0YXJ0IGNvbmZpZ3MgYW55d2F5XG4gICAgICAgICAgICAgICAgICAgIHMwX2Nsb3N1cmUgPSB0aGlzLmFwcGx5UHJlY2VkZW5jZUZpbHRlcihzMF9jbG9zdXJlKTtcbiAgICAgICAgICAgICAgICAgICAgczAgPSB0aGlzLmFkZERGQVN0YXRlKGRmYSwgbmV3IERGQVN0YXRlKG51bGwsIHMwX2Nsb3N1cmUpKTtcbiAgICAgICAgICAgICAgICAgICAgZGZhLnNldFByZWNlZGVuY2VTdGFydFN0YXRlKHRoaXMucGFyc2VyLmdldFByZWNlZGVuY2UoKSwgczApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gdGhpcy5hZGRERkFTdGF0ZShkZmEsIG5ldyBERkFTdGF0ZShudWxsLCBzMF9jbG9zdXJlKSk7XG4gICAgICAgICAgICAgICAgICAgIGRmYS5zMCA9IHMwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFsdCA9IHRoaXMuZXhlY0FUTihkZmEsIHMwLCBpbnB1dCwgaW5kZXgsIG91dGVyQ29udGV4dCk7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiREZBIGFmdGVyIHByZWRpY3RBVE46IFwiICsgZGZhLnRvU3RyaW5nKHRoaXMucGFyc2VyLmxpdGVyYWxOYW1lcywgdGhpcy5wYXJzZXIuc3ltYm9saWNOYW1lcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFsdDtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX2RmYSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1lcmdlQ2FjaGUgPSBudWxsOyAvLyB3YWNrIGNhY2hlIGFmdGVyIGVhY2ggcHJlZGljdGlvblxuICAgICAgICAgICAgaW5wdXQuc2VlayhpbmRleCk7XG4gICAgICAgICAgICBpbnB1dC5yZWxlYXNlKG0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgQVROIHNpbXVsYXRpb24gdG8gY29tcHV0ZSBhIHByZWRpY3RlZCBhbHRlcm5hdGl2ZSBiYXNlZFxuICAgICAqICB1cG9uIHRoZSByZW1haW5pbmcgaW5wdXQsIGJ1dCBhbHNvIHVwZGF0ZXMgdGhlIERGQSBjYWNoZSB0byBhdm9pZFxuICAgICAqICBoYXZpbmcgdG8gdHJhdmVyc2UgdGhlIEFUTiBhZ2FpbiBmb3IgdGhlIHNhbWUgaW5wdXQgc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBUaGVyZSBhcmUgc29tZSBrZXkgY29uZGl0aW9ucyB3ZSdyZSBsb29raW5nIGZvciBhZnRlciBjb21wdXRpbmcgYSBuZXdcbiAgICAgKiBzZXQgb2YgQVROIGNvbmZpZ3MgKHByb3Bvc2VkIERGQSBzdGF0ZSk6XG4gICAgICogICAgICAgaWYgdGhlIHNldCBpcyBlbXB0eSwgdGhlcmUgaXMgbm8gdmlhYmxlIGFsdGVybmF0aXZlIGZvciBjdXJyZW50IHN5bWJvbFxuICAgICAqICAgICAgIGRvZXMgdGhlIHN0YXRlIHVuaXF1ZWx5IHByZWRpY3QgYW4gYWx0ZXJuYXRpdmU/XG4gICAgICogICAgICAgZG9lcyB0aGUgc3RhdGUgaGF2ZSBhIGNvbmZsaWN0IHRoYXQgd291bGQgcHJldmVudCB1cyBmcm9tXG4gICAgICogICAgICAgICBwdXR0aW5nIGl0IG9uIHRoZSB3b3JrIGxpc3Q/XG4gICAgICpcbiAgICAgKiBXZSBhbHNvIGhhdmUgc29tZSBrZXkgb3BlcmF0aW9ucyB0byBkbzpcbiAgICAgKiAgICAgICBhZGQgYW4gZWRnZSBmcm9tIHByZXZpb3VzIERGQSBzdGF0ZSB0byBwb3RlbnRpYWxseSBuZXcgREZBIHN0YXRlLCBELFxuICAgICAqICAgICAgICAgdXBvbiBjdXJyZW50IHN5bWJvbCBidXQgb25seSBpZiBhZGRpbmcgdG8gd29yayBsaXN0LCB3aGljaCBtZWFucyBpbiBhbGxcbiAgICAgKiAgICAgICAgIGNhc2VzIGV4Y2VwdCBubyB2aWFibGUgYWx0ZXJuYXRpdmUgKGFuZCBwb3NzaWJseSBub24tZ3JlZWR5IGRlY2lzaW9ucz8pXG4gICAgICogICAgICAgY29sbGVjdGluZyBwcmVkaWNhdGVzIGFuZCBhZGRpbmcgc2VtYW50aWMgY29udGV4dCB0byBERkEgYWNjZXB0IHN0YXRlc1xuICAgICAqICAgICAgIGFkZGluZyBydWxlIGNvbnRleHQgdG8gY29udGV4dC1zZW5zaXRpdmUgREZBIGFjY2VwdCBzdGF0ZXNcbiAgICAgKiAgICAgICBjb25zdW1pbmcgYW4gaW5wdXQgc3ltYm9sXG4gICAgICogICAgICAgcmVwb3J0aW5nIGEgY29uZmxpY3RcbiAgICAgKiAgICAgICByZXBvcnRpbmcgYW4gYW1iaWd1aXR5XG4gICAgICogICAgICAgcmVwb3J0aW5nIGEgY29udGV4dCBzZW5zaXRpdml0eVxuICAgICAqICAgICAgIHJlcG9ydGluZyBpbnN1ZmZpY2llbnQgcHJlZGljYXRlc1xuICAgICAqXG4gICAgICogY292ZXIgdGhlc2UgY2FzZXM6XG4gICAgICogICAgZGVhZCBlbmRcbiAgICAgKiAgICBzaW5nbGUgYWx0XG4gICAgICogICAgc2luZ2xlIGFsdCArIHByZWRzXG4gICAgICogICAgY29uZmxpY3RcbiAgICAgKiAgICBjb25mbGljdCArIHByZWRzXG4gICAgICpcbiAgICAgKi9cbiAgICBleGVjQVROKGRmYSwgczAsIGlucHV0LCBzdGFydEluZGV4LCBvdXRlckNvbnRleHQgKSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnIHx8IHRoaXMuZGVidWdfbGlzdF9hdG5fZGVjaXNpb25zKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImV4ZWNBVE4gZGVjaXNpb24gXCIgKyBkZmEuZGVjaXNpb24gK1xuICAgICAgICAgICAgICAgICAgICBcIiBleGVjIExBKDEpPT1cIiArIHRoaXMuZ2V0TG9va2FoZWFkTmFtZShpbnB1dCkgK1xuICAgICAgICAgICAgICAgICAgICBcIiBsaW5lIFwiICsgaW5wdXQuTFQoMSkubGluZSArIFwiOlwiICsgaW5wdXQuTFQoMSkuY29sdW1uKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWx0O1xuICAgICAgICBsZXQgcHJldmlvdXNEID0gczA7XG5cbiAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiczAgPSBcIiArIHMwKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdCA9IGlucHV0LkxBKDEpO1xuICAgICAgICB3aGlsZSh0cnVlKSB7IC8vIHdoaWxlIG1vcmUgd29ya1xuICAgICAgICAgICAgbGV0IEQgPSB0aGlzLmdldEV4aXN0aW5nVGFyZ2V0U3RhdGUocHJldmlvdXNELCB0KTtcbiAgICAgICAgICAgIGlmKEQ9PT1udWxsKSB7XG4gICAgICAgICAgICAgICAgRCA9IHRoaXMuY29tcHV0ZVRhcmdldFN0YXRlKGRmYSwgcHJldmlvdXNELCB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKEQ9PT1BVE5TaW11bGF0b3IuRVJST1IpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBhbnkgY29uZmlncyBpbiBwcmV2aW91cyBkaXBwZWQgaW50byBvdXRlciBjb250ZXh0LCB0aGF0XG4gICAgICAgICAgICAgICAgLy8gbWVhbnMgdGhhdCBpbnB1dCB1cCB0byB0IGFjdHVhbGx5IGZpbmlzaGVkIGVudHJ5IHJ1bGVcbiAgICAgICAgICAgICAgICAvLyBhdCBsZWFzdCBmb3IgU0xMIGRlY2lzaW9uLiBGdWxsIExMIGRvZXNuJ3QgZGlwIGludG8gb3V0ZXJcbiAgICAgICAgICAgICAgICAvLyBzbyBkb24ndCBuZWVkIHNwZWNpYWwgY2FzZS5cbiAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIGdldCBhbiBlcnJvciBubyBtYXR0ZXIgd2hhdCBzbyBkZWxheSB1bnRpbCBhZnRlclxuICAgICAgICAgICAgICAgIC8vIGRlY2lzaW9uOyBiZXR0ZXIgZXJyb3IgbWVzc2FnZS4gQWxzbywgbm8gcmVhY2hhYmxlIHRhcmdldFxuICAgICAgICAgICAgICAgIC8vIEFUTiBzdGF0ZXMgaW4gU0xMIGltcGxpZXMgTEwgd2lsbCBhbHNvIGdldCBub3doZXJlLlxuICAgICAgICAgICAgICAgIC8vIElmIGNvbmZsaWN0IGluIHN0YXRlcyB0aGF0IGRpcCBvdXQsIGNob29zZSBtaW4gc2luY2Ugd2VcbiAgICAgICAgICAgICAgICAvLyB3aWxsIGdldCBlcnJvciBubyBtYXR0ZXIgd2hhdC5cbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5ub1ZpYWJsZUFsdChpbnB1dCwgb3V0ZXJDb250ZXh0LCBwcmV2aW91c0QuY29uZmlncywgc3RhcnRJbmRleCk7XG4gICAgICAgICAgICAgICAgaW5wdXQuc2VlayhzdGFydEluZGV4KTtcbiAgICAgICAgICAgICAgICBhbHQgPSB0aGlzLmdldFN5blZhbGlkT3JTZW1JbnZhbGlkQWx0VGhhdEZpbmlzaGVkRGVjaXNpb25FbnRyeVJ1bGUocHJldmlvdXNELmNvbmZpZ3MsIG91dGVyQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgaWYoYWx0IT09QVROLklOVkFMSURfQUxUX05VTUJFUikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWx0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoRC5yZXF1aXJlc0Z1bGxDb250ZXh0ICYmIHRoaXMucHJlZGljdGlvbk1vZGUgIT09IFByZWRpY3Rpb25Nb2RlLlNMTCkge1xuICAgICAgICAgICAgICAgIC8vIElGIFBSRURTLCBNSUdIVCBSRVNPTFZFIFRPIFNJTkdMRSBBTFQgPT4gU0xMIChvciBzeW50YXggZXJyb3IpXG4gICAgICAgICAgICAgICAgbGV0IGNvbmZsaWN0aW5nQWx0cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEQucHJlZGljYXRlcyE9PW51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiREZBIHN0YXRlIGhhcyBwcmVkcyBpbiBERkEgc2ltIExMIGZhaWxvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZsaWN0SW5kZXggPSBpbnB1dC5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYoY29uZmxpY3RJbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2VlayhzdGFydEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25mbGljdGluZ0FsdHMgPSB0aGlzLmV2YWxTZW1hbnRpY0NvbnRleHQoRC5wcmVkaWNhdGVzLCBvdXRlckNvbnRleHQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmxpY3RpbmdBbHRzLmxlbmd0aD09PTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZ1bGwgTEwgYXZvaWRlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25mbGljdGluZ0FsdHMubWluVmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmxpY3RJbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdG9yZSB0aGUgaW5kZXggc28gcmVwb3J0aW5nIHRoZSBmYWxsYmFjayB0byBmdWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250ZXh0IG9jY3VycyB3aXRoIHRoZSBpbmRleCBhdCB0aGUgY29ycmVjdCBzcG90XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZWVrKGNvbmZsaWN0SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRmYV9kZWJ1Zykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImN0eCBzZW5zaXRpdmUgc3RhdGUgXCIgKyBvdXRlckNvbnRleHQgK1wiIGluIFwiICsgRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bGxDdHggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHMwX2Nsb3N1cmUgPSB0aGlzLmNvbXB1dGVTdGFydFN0YXRlKGRmYS5hdG5TdGFydFN0YXRlLCBvdXRlckNvbnRleHQsIGZ1bGxDdHgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0KGRmYSwgY29uZmxpY3RpbmdBbHRzLCBELmNvbmZpZ3MsIHN0YXJ0SW5kZXgsIGlucHV0LmluZGV4KTtcbiAgICAgICAgICAgICAgICBhbHQgPSB0aGlzLmV4ZWNBVE5XaXRoRnVsbENvbnRleHQoZGZhLCBELCBzMF9jbG9zdXJlLCBpbnB1dCwgc3RhcnRJbmRleCwgb3V0ZXJDb250ZXh0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEQuaXNBY2NlcHRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChELnByZWRpY2F0ZXM9PT1udWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBELnByZWRpY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3BJbmRleCA9IGlucHV0LmluZGV4O1xuICAgICAgICAgICAgICAgIGlucHV0LnNlZWsoc3RhcnRJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWx0cyA9IHRoaXMuZXZhbFNlbWFudGljQ29udGV4dChELnByZWRpY2F0ZXMsIG91dGVyQ29udGV4dCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGFsdHMubGVuZ3RoPT09MCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLm5vVmlhYmxlQWx0KGlucHV0LCBvdXRlckNvbnRleHQsIEQuY29uZmlncywgc3RhcnRJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHRzLmxlbmd0aD09PTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsdHMubWluVmFsdWUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyByZXBvcnQgYW1iaWd1aXR5IGFmdGVyIHByZWRpY2F0ZSBldmFsdWF0aW9uIHRvIG1ha2Ugc3VyZSB0aGUgY29ycmVjdCBzZXQgb2YgYW1iaWcgYWx0cyBpcyByZXBvcnRlZC5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvcnRBbWJpZ3VpdHkoZGZhLCBELCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGZhbHNlLCBhbHRzLCBELmNvbmZpZ3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWx0cy5taW5WYWx1ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZpb3VzRCA9IEQ7XG5cbiAgICAgICAgICAgIGlmICh0ICE9PSBUb2tlbi5FT0YpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgdCA9IGlucHV0LkxBKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFuIGV4aXN0aW5nIHRhcmdldCBzdGF0ZSBmb3IgYW4gZWRnZSBpbiB0aGUgREZBLiBJZiB0aGUgdGFyZ2V0IHN0YXRlXG4gICAgICogZm9yIHRoZSBlZGdlIGhhcyBub3QgeWV0IGJlZW4gY29tcHV0ZWQgb3IgaXMgb3RoZXJ3aXNlIG5vdCBhdmFpbGFibGUsXG4gICAgICogdGhpcyBtZXRob2QgcmV0dXJucyB7QGNvZGUgbnVsbH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJldmlvdXNEIFRoZSBjdXJyZW50IERGQSBzdGF0ZVxuICAgICAqIEBwYXJhbSB0IFRoZSBuZXh0IGlucHV0IHN5bWJvbFxuICAgICAqIEByZXR1cm4gVGhlIGV4aXN0aW5nIHRhcmdldCBERkEgc3RhdGUgZm9yIHRoZSBnaXZlbiBpbnB1dCBzeW1ib2xcbiAgICAgKiB7QGNvZGUgdH0sIG9yIHtAY29kZSBudWxsfSBpZiB0aGUgdGFyZ2V0IHN0YXRlIGZvciB0aGlzIGVkZ2UgaXMgbm90XG4gICAgICogYWxyZWFkeSBjYWNoZWRcbiAgICAgKi9cbiAgICBnZXRFeGlzdGluZ1RhcmdldFN0YXRlKHByZXZpb3VzRCwgdCkge1xuICAgICAgICBjb25zdCBlZGdlcyA9IHByZXZpb3VzRC5lZGdlcztcbiAgICAgICAgaWYgKGVkZ2VzPT09bnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZWRnZXNbdCArIDFdIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGEgdGFyZ2V0IHN0YXRlIGZvciBhbiBlZGdlIGluIHRoZSBERkEsIGFuZCBhdHRlbXB0IHRvIGFkZCB0aGVcbiAgICAgKiBjb21wdXRlZCBzdGF0ZSBhbmQgY29ycmVzcG9uZGluZyBlZGdlIHRvIHRoZSBERkEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGZhIFRoZSBERkFcbiAgICAgKiBAcGFyYW0gcHJldmlvdXNEIFRoZSBjdXJyZW50IERGQSBzdGF0ZVxuICAgICAqIEBwYXJhbSB0IFRoZSBuZXh0IGlucHV0IHN5bWJvbFxuICAgICAqXG4gICAgICogQHJldHVybiBUaGUgY29tcHV0ZWQgdGFyZ2V0IERGQSBzdGF0ZSBmb3IgdGhlIGdpdmVuIGlucHV0IHN5bWJvbFxuICAgICAqIHtAY29kZSB0fS4gSWYge0Bjb2RlIHR9IGRvZXMgbm90IGxlYWQgdG8gYSB2YWxpZCBERkEgc3RhdGUsIHRoaXMgbWV0aG9kXG4gICAgICogcmV0dXJucyB7QGxpbmsgLy9FUlJPUlxuICAgICAqL1xuICAgIGNvbXB1dGVUYXJnZXRTdGF0ZShkZmEsIHByZXZpb3VzRCwgdCkge1xuICAgICAgIGNvbnN0IHJlYWNoID0gdGhpcy5jb21wdXRlUmVhY2hTZXQocHJldmlvdXNELmNvbmZpZ3MsIHQsIGZhbHNlKTtcbiAgICAgICAgaWYocmVhY2g9PT1udWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZERGQUVkZ2UoZGZhLCBwcmV2aW91c0QsIHQsIEFUTlNpbXVsYXRvci5FUlJPUik7XG4gICAgICAgICAgICByZXR1cm4gQVROU2ltdWxhdG9yLkVSUk9SO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgdGFyZ2V0IHN0YXRlOyB3ZSdsbCBhZGQgdG8gREZBIGFmdGVyIGl0J3MgY29tcGxldGVcbiAgICAgICAgbGV0IEQgPSBuZXcgREZBU3RhdGUobnVsbCwgcmVhY2gpO1xuXG4gICAgICAgIGNvbnN0IHByZWRpY3RlZEFsdCA9IHRoaXMuZ2V0VW5pcXVlQWx0KHJlYWNoKTtcblxuICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgY29uc3QgYWx0U3ViU2V0cyA9IFByZWRpY3Rpb25Nb2RlLmdldENvbmZsaWN0aW5nQWx0U3Vic2V0cyhyZWFjaCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNMTCBhbHRTdWJTZXRzPVwiICsgVXRpbHMuYXJyYXlUb1N0cmluZyhhbHRTdWJTZXRzKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAvKlwiLCBwcmV2aW91cz1cIiArIHByZXZpb3VzRC5jb25maWdzICsgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiLCBjb25maWdzPVwiICsgcmVhY2ggK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIsIHByZWRpY3Q9XCIgKyBwcmVkaWN0ZWRBbHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIsIGFsbFN1YnNldHNDb25mbGljdD1cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBQcmVkaWN0aW9uTW9kZS5hbGxTdWJzZXRzQ29uZmxpY3QoYWx0U3ViU2V0cykgKyBcIiwgY29uZmxpY3RpbmdBbHRzPVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q29uZmxpY3RpbmdBbHRzKHJlYWNoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWRpY3RlZEFsdCE9PUFUTi5JTlZBTElEX0FMVF9OVU1CRVIpIHtcbiAgICAgICAgICAgIC8vIE5PIENPTkZMSUNULCBVTklRVUVMWSBQUkVESUNURUQgQUxUXG4gICAgICAgICAgICBELmlzQWNjZXB0U3RhdGUgPSB0cnVlO1xuICAgICAgICAgICAgRC5jb25maWdzLnVuaXF1ZUFsdCA9IHByZWRpY3RlZEFsdDtcbiAgICAgICAgICAgIEQucHJlZGljdGlvbiA9IHByZWRpY3RlZEFsdDtcbiAgICAgICAgfSBlbHNlIGlmIChQcmVkaWN0aW9uTW9kZS5oYXNTTExDb25mbGljdFRlcm1pbmF0aW5nUHJlZGljdGlvbih0aGlzLnByZWRpY3Rpb25Nb2RlLCByZWFjaCkpIHtcbiAgICAgICAgICAgIC8vIE1PUkUgVEhBTiBPTkUgVklBQkxFIEFMVEVSTkFUSVZFXG4gICAgICAgICAgICBELmNvbmZpZ3MuY29uZmxpY3RpbmdBbHRzID0gdGhpcy5nZXRDb25mbGljdGluZ0FsdHMocmVhY2gpO1xuICAgICAgICAgICAgRC5yZXF1aXJlc0Z1bGxDb250ZXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGluIFNMTC1vbmx5IG1vZGUsIHdlIHdpbGwgc3RvcCBhdCB0aGlzIHN0YXRlIGFuZCByZXR1cm4gdGhlIG1pbmltdW0gYWx0XG4gICAgICAgICAgICBELmlzQWNjZXB0U3RhdGUgPSB0cnVlO1xuICAgICAgICAgICAgRC5wcmVkaWN0aW9uID0gRC5jb25maWdzLmNvbmZsaWN0aW5nQWx0cy5taW5WYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChELmlzQWNjZXB0U3RhdGUgJiYgRC5jb25maWdzLmhhc1NlbWFudGljQ29udGV4dCkge1xuICAgICAgICAgICAgdGhpcy5wcmVkaWNhdGVERkFTdGF0ZShELCB0aGlzLmF0bi5nZXREZWNpc2lvblN0YXRlKGRmYS5kZWNpc2lvbikpO1xuICAgICAgICAgICAgaWYoIEQucHJlZGljYXRlcyE9PW51bGwpIHtcbiAgICAgICAgICAgICAgICBELnByZWRpY3Rpb24gPSBBVE4uSU5WQUxJRF9BTFRfTlVNQkVSO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFsbCBhZGRzIHRvIGRmYSBhcmUgZG9uZSBhZnRlciB3ZSd2ZSBjcmVhdGVkIGZ1bGwgRCBzdGF0ZVxuICAgICAgICBEID0gdGhpcy5hZGRERkFFZGdlKGRmYSwgcHJldmlvdXNELCB0LCBEKTtcbiAgICAgICAgcmV0dXJuIEQ7XG4gICAgfVxuXG4gICAgcHJlZGljYXRlREZBU3RhdGUoZGZhU3RhdGUsIGRlY2lzaW9uU3RhdGUpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB0ZXN0IGFsbCBwcmVkaWNhdGVzLCBldmVuIGluIERGQSBzdGF0ZXMgdGhhdFxuICAgICAgICAvLyB1bmlxdWVseSBwcmVkaWN0IGFsdGVybmF0aXZlLlxuICAgICAgICBjb25zdCBuYWx0cyA9IGRlY2lzaW9uU3RhdGUudHJhbnNpdGlvbnMubGVuZ3RoO1xuICAgICAgICAvLyBVcGRhdGUgREZBIHNvIHJlYWNoIGJlY29tZXMgYWNjZXB0IHN0YXRlIHdpdGggKHByZWRpY2F0ZSxhbHQpXG4gICAgICAgIC8vIHBhaXJzIGlmIHByZWRzIGZvdW5kIGZvciBjb25mbGljdGluZyBhbHRzXG4gICAgICAgIGNvbnN0IGFsdHNUb0NvbGxlY3RQcmVkc0Zyb20gPSB0aGlzLmdldENvbmZsaWN0aW5nQWx0c09yVW5pcXVlQWx0KGRmYVN0YXRlLmNvbmZpZ3MpO1xuICAgICAgICBjb25zdCBhbHRUb1ByZWQgPSB0aGlzLmdldFByZWRzRm9yQW1iaWdBbHRzKGFsdHNUb0NvbGxlY3RQcmVkc0Zyb20sIGRmYVN0YXRlLmNvbmZpZ3MsIG5hbHRzKTtcbiAgICAgICAgaWYgKGFsdFRvUHJlZCE9PW51bGwpIHtcbiAgICAgICAgICAgIGRmYVN0YXRlLnByZWRpY2F0ZXMgPSB0aGlzLmdldFByZWRpY2F0ZVByZWRpY3Rpb25zKGFsdHNUb0NvbGxlY3RQcmVkc0Zyb20sIGFsdFRvUHJlZCk7XG4gICAgICAgICAgICBkZmFTdGF0ZS5wcmVkaWN0aW9uID0gQVROLklOVkFMSURfQUxUX05VTUJFUjsgLy8gbWFrZSBzdXJlIHdlIHVzZSBwcmVkc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhlcmUgYXJlIHByZWRzIGluIGNvbmZpZ3MgYnV0IHRoZXkgbWlnaHQgZ28gYXdheVxuICAgICAgICAgICAgLy8gd2hlbiBPUidkIHRvZ2V0aGVyIGxpa2Uge3B9PyB8fCBOT05FID09IE5PTkUuIElmIG5laXRoZXJcbiAgICAgICAgICAgIC8vIGFsdCBoYXMgcHJlZHMsIHJlc29sdmUgdG8gbWluIGFsdFxuICAgICAgICAgICAgZGZhU3RhdGUucHJlZGljdGlvbiA9IGFsdHNUb0NvbGxlY3RQcmVkc0Zyb20ubWluVmFsdWUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuLy8gY29tZXMgYmFjayB3aXRoIHJlYWNoLnVuaXF1ZUFsdCBzZXQgdG8gYSB2YWxpZCBhbHRcbiAgICBleGVjQVROV2l0aEZ1bGxDb250ZXh0KGRmYSwgRCwgLy8gaG93IGZhciB3ZSBnb3QgYmVmb3JlIGZhaWxpbmcgb3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGVyQ29udGV4dCkge1xuICAgICAgICBpZiAodGhpcy5kZWJ1ZyB8fCB0aGlzLmRlYnVnX2xpc3RfYXRuX2RlY2lzaW9ucykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJleGVjQVROV2l0aEZ1bGxDb250ZXh0IFwiK3MwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmdWxsQ3R4ID0gdHJ1ZTtcbiAgICAgICAgbGV0IGZvdW5kRXhhY3RBbWJpZyA9IGZhbHNlO1xuICAgICAgICBsZXQgcmVhY2g7XG4gICAgICAgIGxldCBwcmV2aW91cyA9IHMwO1xuICAgICAgICBpbnB1dC5zZWVrKHN0YXJ0SW5kZXgpO1xuICAgICAgICBsZXQgdCA9IGlucHV0LkxBKDEpO1xuICAgICAgICBsZXQgcHJlZGljdGVkQWx0ID0gLTE7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7IC8vIHdoaWxlIG1vcmUgd29ya1xuICAgICAgICAgICAgcmVhY2ggPSB0aGlzLmNvbXB1dGVSZWFjaFNldChwcmV2aW91cywgdCwgZnVsbEN0eCk7XG4gICAgICAgICAgICBpZiAocmVhY2g9PT1udWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgYW55IGNvbmZpZ3MgaW4gcHJldmlvdXMgZGlwcGVkIGludG8gb3V0ZXIgY29udGV4dCwgdGhhdFxuICAgICAgICAgICAgICAgIC8vIG1lYW5zIHRoYXQgaW5wdXQgdXAgdG8gdCBhY3R1YWxseSBmaW5pc2hlZCBlbnRyeSBydWxlXG4gICAgICAgICAgICAgICAgLy8gYXQgbGVhc3QgZm9yIExMIGRlY2lzaW9uLiBGdWxsIExMIGRvZXNuJ3QgZGlwIGludG8gb3V0ZXJcbiAgICAgICAgICAgICAgICAvLyBzbyBkb24ndCBuZWVkIHNwZWNpYWwgY2FzZS5cbiAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIGdldCBhbiBlcnJvciBubyBtYXR0ZXIgd2hhdCBzbyBkZWxheSB1bnRpbCBhZnRlclxuICAgICAgICAgICAgICAgIC8vIGRlY2lzaW9uOyBiZXR0ZXIgZXJyb3IgbWVzc2FnZS4gQWxzbywgbm8gcmVhY2hhYmxlIHRhcmdldFxuICAgICAgICAgICAgICAgIC8vIEFUTiBzdGF0ZXMgaW4gU0xMIGltcGxpZXMgTEwgd2lsbCBhbHNvIGdldCBub3doZXJlLlxuICAgICAgICAgICAgICAgIC8vIElmIGNvbmZsaWN0IGluIHN0YXRlcyB0aGF0IGRpcCBvdXQsIGNob29zZSBtaW4gc2luY2Ugd2VcbiAgICAgICAgICAgICAgICAvLyB3aWxsIGdldCBlcnJvciBubyBtYXR0ZXIgd2hhdC5cbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5ub1ZpYWJsZUFsdChpbnB1dCwgb3V0ZXJDb250ZXh0LCBwcmV2aW91cywgc3RhcnRJbmRleCk7XG4gICAgICAgICAgICAgICAgaW5wdXQuc2VlayhzdGFydEluZGV4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbHQgPSB0aGlzLmdldFN5blZhbGlkT3JTZW1JbnZhbGlkQWx0VGhhdEZpbmlzaGVkRGVjaXNpb25FbnRyeVJ1bGUocHJldmlvdXMsIG91dGVyQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgaWYoYWx0IT09QVROLklOVkFMSURfQUxUX05VTUJFUikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWx0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWx0U3ViU2V0cyA9IFByZWRpY3Rpb25Nb2RlLmdldENvbmZsaWN0aW5nQWx0U3Vic2V0cyhyZWFjaCk7XG4gICAgICAgICAgICBpZih0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMTCBhbHRTdWJTZXRzPVwiICsgYWx0U3ViU2V0cyArIFwiLCBwcmVkaWN0PVwiICtcbiAgICAgICAgICAgICAgICAgICAgICBQcmVkaWN0aW9uTW9kZS5nZXRVbmlxdWVBbHQoYWx0U3ViU2V0cykgKyBcIiwgcmVzb2x2ZXNUb0p1c3RPbmVWaWFibGVBbHQ9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFByZWRpY3Rpb25Nb2RlLnJlc29sdmVzVG9KdXN0T25lVmlhYmxlQWx0KGFsdFN1YlNldHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWNoLnVuaXF1ZUFsdCA9IHRoaXMuZ2V0VW5pcXVlQWx0KHJlYWNoKTtcbiAgICAgICAgICAgIC8vIHVuaXF1ZSBwcmVkaWN0aW9uP1xuICAgICAgICAgICAgaWYocmVhY2gudW5pcXVlQWx0IT09QVROLklOVkFMSURfQUxUX05VTUJFUikge1xuICAgICAgICAgICAgICAgIHByZWRpY3RlZEFsdCA9IHJlYWNoLnVuaXF1ZUFsdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmVkaWN0aW9uTW9kZSAhPT0gUHJlZGljdGlvbk1vZGUuTExfRVhBQ1RfQU1CSUdfREVURUNUSU9OKSB7XG4gICAgICAgICAgICAgICAgcHJlZGljdGVkQWx0ID0gUHJlZGljdGlvbk1vZGUucmVzb2x2ZXNUb0p1c3RPbmVWaWFibGVBbHQoYWx0U3ViU2V0cyk7XG4gICAgICAgICAgICAgICAgaWYocHJlZGljdGVkQWx0ICE9PSBBVE4uSU5WQUxJRF9BTFRfTlVNQkVSKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gZXhhY3QgYW1iaWd1aXR5IG1vZGUsIHdlIG5ldmVyIHRyeSB0byB0ZXJtaW5hdGUgZWFybHkuXG4gICAgICAgICAgICAgICAgLy8gSnVzdCBrZWVwcyBzY2FyZmluZyB1bnRpbCB3ZSBrbm93IHdoYXQgdGhlIGNvbmZsaWN0IGlzXG4gICAgICAgICAgICAgICAgaWYgKFByZWRpY3Rpb25Nb2RlLmFsbFN1YnNldHNDb25mbGljdChhbHRTdWJTZXRzKSAmJiBQcmVkaWN0aW9uTW9kZS5hbGxTdWJzZXRzRXF1YWwoYWx0U3ViU2V0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRFeGFjdEFtYmlnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcHJlZGljdGVkQWx0ID0gUHJlZGljdGlvbk1vZGUuZ2V0U2luZ2xlVmlhYmxlQWx0KGFsdFN1YlNldHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZWxzZSB0aGVyZSBhcmUgbXVsdGlwbGUgbm9uLWNvbmZsaWN0aW5nIHN1YnNldHMgb3JcbiAgICAgICAgICAgICAgICAvLyB3ZSdyZSBub3Qgc3VyZSB3aGF0IHRoZSBhbWJpZ3VpdHkgaXMgeWV0LlxuICAgICAgICAgICAgICAgIC8vIFNvLCBrZWVwIGdvaW5nLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldmlvdXMgPSByZWFjaDtcbiAgICAgICAgICAgIGlmKCB0ICE9PSBUb2tlbi5FT0YpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgdCA9IGlucHV0LkxBKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBjb25maWd1cmF0aW9uIHNldCB1bmlxdWVseSBwcmVkaWN0cyBhbiBhbHRlcm5hdGl2ZSxcbiAgICAgICAgLy8gd2l0aG91dCBjb25mbGljdCwgdGhlbiB3ZSBrbm93IHRoYXQgaXQncyBhIGZ1bGwgTEwgZGVjaXNpb25cbiAgICAgICAgLy8gbm90IFNMTC5cbiAgICAgICAgaWYgKHJlYWNoLnVuaXF1ZUFsdCAhPT0gQVROLklOVkFMSURfQUxUX05VTUJFUiApIHtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5KGRmYSwgcHJlZGljdGVkQWx0LCByZWFjaCwgc3RhcnRJbmRleCwgaW5wdXQuaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIHByZWRpY3RlZEFsdDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBkbyBub3QgY2hlY2sgcHJlZGljYXRlcyBoZXJlIGJlY2F1c2Ugd2UgaGF2ZSBjaGVja2VkIHRoZW1cbiAgICAgICAgLy8gb24tdGhlLWZseSB3aGVuIGRvaW5nIGZ1bGwgY29udGV4dCBwcmVkaWN0aW9uLlxuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEluIG5vbi1leGFjdCBhbWJpZ3VpdHkgZGV0ZWN0aW9uIG1vZGUsIHdlIG1pZ2h0XHRhY3R1YWxseSBiZSBhYmxlIHRvXG4gICAgICAgIC8vIGRldGVjdCBhbiBleGFjdCBhbWJpZ3VpdHksIGJ1dCBJJ20gbm90IGdvaW5nIHRvIHNwZW5kIHRoZSBjeWNsZXNcbiAgICAgICAgLy8gbmVlZGVkIHRvIGNoZWNrLiBXZSBvbmx5IGVtaXQgYW1iaWd1aXR5IHdhcm5pbmdzIGluIGV4YWN0IGFtYmlndWl0eVxuICAgICAgICAvLyBtb2RlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBGb3IgZXhhbXBsZSwgd2UgbWlnaHQga25vdyB0aGF0IHdlIGhhdmUgY29uZmxpY3RpbmcgY29uZmlndXJhdGlvbnMuXG4gICAgICAgIC8vIEJ1dCwgdGhhdCBkb2VzIG5vdCBtZWFuIHRoYXQgdGhlcmUgaXMgbm8gd2F5IGZvcndhcmQgd2l0aG91dCBhXG4gICAgICAgIC8vIGNvbmZsaWN0LiBJdCdzIHBvc3NpYmxlIHRvIGhhdmUgbm9uY29uZmxpY3RpbmcgYWx0IHN1YnNldHMgYXMgaW46XG5cbiAgICAgICAgLy8gYWx0U3ViU2V0cz1bezEsIDJ9LCB7MSwgMn0sIHsxfSwgezEsIDJ9XVxuXG4gICAgICAgIC8vIGZyb21cbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgWygxNywxLFs1ICRdKSwgKDEzLDEsWzUgMTAgJF0pLCAoMjEsMSxbNSAxMCAkXSksICgxMSwxLFskXSksXG4gICAgICAgIC8vICAgICAoMTMsMixbNSAxMCAkXSksICgyMSwyLFs1IDEwICRdKSwgKDExLDIsWyRdKV1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCAoMTcsMSxbNSAkXSkgaW5kaWNhdGVzIHRoZXJlIGlzIHNvbWUgbmV4dCBzZXF1ZW5jZSB0aGF0XG4gICAgICAgIC8vIHdvdWxkIHJlc29sdmUgdGhpcyB3aXRob3V0IGNvbmZsaWN0IHRvIGFsdGVybmF0aXZlIDEuIEFueSBvdGhlciB2aWFibGVcbiAgICAgICAgLy8gbmV4dCBzZXF1ZW5jZSwgaG93ZXZlciwgaXMgYXNzb2NpYXRlZCB3aXRoIGEgY29uZmxpY3QuICBXZSBzdG9wXG4gICAgICAgIC8vIGxvb2tpbmcgZm9yIGlucHV0IGJlY2F1c2Ugbm8gYW1vdW50IG9mIGZ1cnRoZXIgbG9va2FoZWFkIHdpbGwgYWx0ZXJcbiAgICAgICAgLy8gdGhlIGZhY3QgdGhhdCB3ZSBzaG91bGQgcHJlZGljdCBhbHRlcm5hdGl2ZSAxLiAgV2UganVzdCBjYW4ndCBzYXkgZm9yXG4gICAgICAgIC8vIHN1cmUgdGhhdCB0aGVyZSBpcyBhbiBhbWJpZ3VpdHkgd2l0aG91dCBsb29raW5nIGZ1cnRoZXIuXG5cbiAgICAgICAgdGhpcy5yZXBvcnRBbWJpZ3VpdHkoZGZhLCBELCBzdGFydEluZGV4LCBpbnB1dC5pbmRleCwgZm91bmRFeGFjdEFtYmlnLCBudWxsLCByZWFjaCk7XG5cbiAgICAgICAgcmV0dXJuIHByZWRpY3RlZEFsdDtcbiAgICB9XG5cbiAgICBjb21wdXRlUmVhY2hTZXQoY2xvc3VyZSwgdCwgZnVsbEN0eCkge1xuICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbiBjb21wdXRlUmVhY2hTZXQsIHN0YXJ0aW5nIGNsb3N1cmU6IFwiICsgY2xvc3VyZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoIHRoaXMubWVyZ2VDYWNoZT09PW51bGwpIHtcbiAgICAgICAgICAgIHRoaXMubWVyZ2VDYWNoZSA9IG5ldyBEb3VibGVEaWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlID0gbmV3IEFUTkNvbmZpZ1NldChmdWxsQ3R4KTtcblxuICAgICAgICAvLyBDb25maWd1cmF0aW9ucyBhbHJlYWR5IGluIGEgcnVsZSBzdG9wIHN0YXRlIGluZGljYXRlIHJlYWNoaW5nIHRoZSBlbmRcbiAgICAgICAgLy8gb2YgdGhlIGRlY2lzaW9uIHJ1bGUgKGxvY2FsIGNvbnRleHQpIG9yIGVuZCBvZiB0aGUgc3RhcnQgcnVsZSAoZnVsbFxuICAgICAgICAvLyBjb250ZXh0KS4gT25jZSByZWFjaGVkLCB0aGVzZSBjb25maWd1cmF0aW9ucyBhcmUgbmV2ZXIgdXBkYXRlZCBieSBhXG4gICAgICAgIC8vIGNsb3N1cmUgb3BlcmF0aW9uLCBzbyB0aGV5IGFyZSBoYW5kbGVkIHNlcGFyYXRlbHkgZm9yIHRoZSBwZXJmb3JtYW5jZVxuICAgICAgICAvLyBhZHZhbnRhZ2Ugb2YgaGF2aW5nIGEgc21hbGxlciBpbnRlcm1lZGlhdGUgc2V0IHdoZW4gY2FsbGluZyBjbG9zdXJlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBGb3IgZnVsbC1jb250ZXh0IHJlYWNoIG9wZXJhdGlvbnMsIHNlcGFyYXRlIGhhbmRsaW5nIGlzIHJlcXVpcmVkIHRvXG4gICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBhbHRlcm5hdGl2ZSBtYXRjaGluZyB0aGUgbG9uZ2VzdCBvdmVyYWxsIHNlcXVlbmNlIGlzXG4gICAgICAgIC8vIGNob3NlbiB3aGVuIG11bHRpcGxlIHN1Y2ggY29uZmlndXJhdGlvbnMgY2FuIG1hdGNoIHRoZSBpbnB1dC5cblxuICAgICAgICBsZXQgc2tpcHBlZFN0b3BTdGF0ZXMgPSBudWxsO1xuXG4gICAgICAgIC8vIEZpcnN0IGZpZ3VyZSBvdXQgd2hlcmUgd2UgY2FuIHJlYWNoIG9uIGlucHV0IHRcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPGNsb3N1cmUuaXRlbXMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgY29uc3QgYyA9IGNsb3N1cmUuaXRlbXNbaV07XG4gICAgICAgICAgICBpZih0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0aW5nIFwiICsgdGhpcy5nZXRUb2tlbk5hbWUodCkgKyBcIiBhdCBcIiArIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMuc3RhdGUgaW5zdGFuY2VvZiBSdWxlU3RvcFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZ1bGxDdHggfHwgdCA9PT0gVG9rZW4uRU9GKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChza2lwcGVkU3RvcFN0YXRlcz09PW51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBwZWRTdG9wU3RhdGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2tpcHBlZFN0b3BTdGF0ZXMucHVzaChjKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5kZWJ1Z19hZGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWRkZWQgXCIgKyBjICsgXCIgdG8gc2tpcHBlZFN0b3BTdGF0ZXNcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IobGV0IGo9MDtqPGMuc3RhdGUudHJhbnNpdGlvbnMubGVuZ3RoO2orKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zID0gYy5zdGF0ZS50cmFuc2l0aW9uc1tqXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmdldFJlYWNoYWJsZVRhcmdldCh0cmFucywgdCk7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCE9PW51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2ZnID0gbmV3IEFUTkNvbmZpZyh7c3RhdGU6dGFyZ2V0fSwgYyk7XG4gICAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZS5hZGQoY2ZnLCB0aGlzLm1lcmdlQ2FjaGUpO1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmRlYnVnX2FkZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJhZGRlZCBcIiArIGNmZyArIFwiIHRvIGludGVybWVkaWF0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBOb3cgZmlndXJlIG91dCB3aGVyZSB0aGUgcmVhY2ggb3BlcmF0aW9uIGNhbiB0YWtlIHVzLi4uXG4gICAgICAgIGxldCByZWFjaCA9IG51bGw7XG5cbiAgICAgICAgLy8gVGhpcyBibG9jayBvcHRpbWl6ZXMgdGhlIHJlYWNoIG9wZXJhdGlvbiBmb3IgaW50ZXJtZWRpYXRlIHNldHMgd2hpY2hcbiAgICAgICAgLy8gdHJpdmlhbGx5IGluZGljYXRlIGEgdGVybWluYXRpb24gc3RhdGUgZm9yIHRoZSBvdmVyYWxsXG4gICAgICAgIC8vIGFkYXB0aXZlUHJlZGljdCBvcGVyYXRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSBjb25kaXRpb25zIGFzc3VtZSB0aGF0IGludGVybWVkaWF0ZVxuICAgICAgICAvLyBjb250YWlucyBhbGwgY29uZmlndXJhdGlvbnMgcmVsZXZhbnQgdG8gdGhlIHJlYWNoIHNldCwgYnV0IHRoaXNcbiAgICAgICAgLy8gY29uZGl0aW9uIGlzIG5vdCB0cnVlIHdoZW4gb25lIG9yIG1vcmUgY29uZmlndXJhdGlvbnMgaGF2ZSBiZWVuXG4gICAgICAgIC8vIHdpdGhoZWxkIGluIHNraXBwZWRTdG9wU3RhdGVzLCBvciB3aGVuIHRoZSBjdXJyZW50IHN5bWJvbCBpcyBFT0YuXG4gICAgICAgIC8vXG4gICAgICAgIGlmIChza2lwcGVkU3RvcFN0YXRlcz09PW51bGwgJiYgdCE9PVRva2VuLkVPRikge1xuICAgICAgICAgICAgaWYgKGludGVybWVkaWF0ZS5pdGVtcy5sZW5ndGg9PT0xKSB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgcHVyc3VlIHRoZSBjbG9zdXJlIGlmIHRoZXJlIGlzIGp1c3Qgb25lIHN0YXRlLlxuICAgICAgICAgICAgICAgIC8vIEl0IGNhbiBvbmx5IGhhdmUgb25lIGFsdGVybmF0aXZlOyBqdXN0IGFkZCB0byByZXN1bHRcbiAgICAgICAgICAgICAgICAvLyBBbHNvIGRvbid0IHB1cnN1ZSB0aGUgY2xvc3VyZSBpZiB0aGVyZSBpcyB1bmlxdWUgYWx0ZXJuYXRpdmVcbiAgICAgICAgICAgICAgICAvLyBhbW9uZyB0aGUgY29uZmlndXJhdGlvbnMuXG4gICAgICAgICAgICAgICAgcmVhY2ggPSBpbnRlcm1lZGlhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0VW5pcXVlQWx0KGludGVybWVkaWF0ZSkhPT1BVE4uSU5WQUxJRF9BTFRfTlVNQkVSKSB7XG4gICAgICAgICAgICAgICAgLy8gQWxzbyBkb24ndCBwdXJzdWUgdGhlIGNsb3N1cmUgaWYgdGhlcmUgaXMgdW5pcXVlIGFsdGVybmF0aXZlXG4gICAgICAgICAgICAgICAgLy8gYW1vbmcgdGhlIGNvbmZpZ3VyYXRpb25zLlxuICAgICAgICAgICAgICAgIHJlYWNoID0gaW50ZXJtZWRpYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSByZWFjaCBzZXQgY291bGQgbm90IGJlIHRyaXZpYWxseSBkZXRlcm1pbmVkLCBwZXJmb3JtIGEgY2xvc3VyZVxuICAgICAgICAvLyBvcGVyYXRpb24gb24gdGhlIGludGVybWVkaWF0ZSBzZXQgdG8gY29tcHV0ZSBpdHMgaW5pdGlhbCB2YWx1ZS5cbiAgICAgICAgLy9cbiAgICAgICAgaWYgKHJlYWNoPT09bnVsbCkge1xuICAgICAgICAgICAgcmVhY2ggPSBuZXcgQVROQ29uZmlnU2V0KGZ1bGxDdHgpO1xuICAgICAgICAgICAgY29uc3QgY2xvc3VyZUJ1c3kgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBjb25zdCB0cmVhdEVvZkFzRXBzaWxvbiA9IHQgPT09IFRva2VuLkVPRjtcbiAgICAgICAgICAgIGZvciAobGV0IGs9MDsgazxpbnRlcm1lZGlhdGUuaXRlbXMubGVuZ3RoO2srKykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc3VyZShpbnRlcm1lZGlhdGUuaXRlbXNba10sIHJlYWNoLCBjbG9zdXJlQnVzeSwgZmFsc2UsIGZ1bGxDdHgsIHRyZWF0RW9mQXNFcHNpbG9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodCA9PT0gVG9rZW4uRU9GKSB7XG4gICAgICAgICAgICAvLyBBZnRlciBjb25zdW1pbmcgRU9GIG5vIGFkZGl0aW9uYWwgaW5wdXQgaXMgcG9zc2libGUsIHNvIHdlIGFyZVxuICAgICAgICAgICAgLy8gb25seSBpbnRlcmVzdGVkIGluIGNvbmZpZ3VyYXRpb25zIHdoaWNoIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGVcbiAgICAgICAgICAgIC8vIGRlY2lzaW9uIHJ1bGUgKGxvY2FsIGNvbnRleHQpIG9yIGVuZCBvZiB0aGUgc3RhcnQgcnVsZSAoZnVsbFxuICAgICAgICAgICAgLy8gY29udGV4dCkuIFVwZGF0ZSByZWFjaCB0byBjb250YWluIG9ubHkgdGhlc2UgY29uZmlndXJhdGlvbnMuIFRoaXNcbiAgICAgICAgICAgIC8vIGhhbmRsZXMgYm90aCBleHBsaWNpdCBFT0YgdHJhbnNpdGlvbnMgaW4gdGhlIGdyYW1tYXIgYW5kIGltcGxpY2l0XG4gICAgICAgICAgICAvLyBFT0YgdHJhbnNpdGlvbnMgZm9sbG93aW5nIHRoZSBlbmQgb2YgdGhlIGRlY2lzaW9uIG9yIHN0YXJ0IHJ1bGUuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gV2hlbiByZWFjaD09aW50ZXJtZWRpYXRlLCBubyBjbG9zdXJlIG9wZXJhdGlvbiB3YXMgcGVyZm9ybWVkLiBJblxuICAgICAgICAgICAgLy8gdGhpcyBjYXNlLCByZW1vdmVBbGxDb25maWdzTm90SW5SdWxlU3RvcFN0YXRlIG5lZWRzIHRvIGNoZWNrIGZvclxuICAgICAgICAgICAgLy8gcmVhY2hhYmxlIHJ1bGUgc3RvcCBzdGF0ZXMgYXMgd2VsbCBhcyBjb25maWd1cmF0aW9ucyBhbHJlYWR5IGluXG4gICAgICAgICAgICAvLyBhIHJ1bGUgc3RvcCBzdGF0ZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGhhbmRsZWQgYmVmb3JlIHRoZSBjb25maWd1cmF0aW9ucyBpbiBza2lwcGVkU3RvcFN0YXRlcyxcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgYW55IGNvbmZpZ3VyYXRpb25zIHBvdGVudGlhbGx5IGFkZGVkIGZyb20gdGhhdCBsaXN0IGFyZVxuICAgICAgICAgICAgLy8gYWxyZWFkeSBndWFyYW50ZWVkIHRvIG1lZXQgdGhpcyBjb25kaXRpb24gd2hldGhlciBvciBub3QgaXQnc1xuICAgICAgICAgICAgLy8gcmVxdWlyZWQuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgcmVhY2ggPSB0aGlzLnJlbW92ZUFsbENvbmZpZ3NOb3RJblJ1bGVTdG9wU3RhdGUocmVhY2gsIHJlYWNoID09PSBpbnRlcm1lZGlhdGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHNraXBwZWRTdG9wU3RhdGVzIT09bnVsbCwgdGhlbiBpdCBjb250YWlucyBhdCBsZWFzdCBvbmVcbiAgICAgICAgLy8gY29uZmlndXJhdGlvbi4gRm9yIGZ1bGwtY29udGV4dCByZWFjaCBvcGVyYXRpb25zLCB0aGVzZVxuICAgICAgICAvLyBjb25maWd1cmF0aW9ucyByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHN0YXJ0IHJ1bGUsIGluIHdoaWNoIGNhc2Ugd2VcbiAgICAgICAgLy8gb25seSBhZGQgdGhlbSBiYWNrIHRvIHJlYWNoIGlmIG5vIGNvbmZpZ3VyYXRpb24gZHVyaW5nIHRoZSBjdXJyZW50XG4gICAgICAgIC8vIGNsb3N1cmUgb3BlcmF0aW9uIHJlYWNoZWQgc3VjaCBhIHN0YXRlLiBUaGlzIGVuc3VyZXMgYWRhcHRpdmVQcmVkaWN0XG4gICAgICAgIC8vIGNob29zZXMgYW4gYWx0ZXJuYXRpdmUgbWF0Y2hpbmcgdGhlIGxvbmdlc3Qgb3ZlcmFsbCBzZXF1ZW5jZSB3aGVuXG4gICAgICAgIC8vIG11bHRpcGxlIGFsdGVybmF0aXZlcyBhcmUgdmlhYmxlLlxuICAgICAgICAvL1xuICAgICAgICBpZiAoc2tpcHBlZFN0b3BTdGF0ZXMhPT1udWxsICYmICggKCEgZnVsbEN0eCkgfHwgKCEgUHJlZGljdGlvbk1vZGUuaGFzQ29uZmlnSW5SdWxlU3RvcFN0YXRlKHJlYWNoKSkpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBsPTA7IGw8c2tpcHBlZFN0b3BTdGF0ZXMubGVuZ3RoO2wrKykge1xuICAgICAgICAgICAgICAgIHJlYWNoLmFkZChza2lwcGVkU3RvcFN0YXRlc1tsXSwgdGhpcy5tZXJnZUNhY2hlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhY2guaXRlbXMubGVuZ3RoPT09MCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhY2g7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBjb25maWd1cmF0aW9uIHNldCBjb250YWluaW5nIG9ubHkgdGhlIGNvbmZpZ3VyYXRpb25zIGZyb21cbiAgICAgKiB7QGNvZGUgY29uZmlnc30gd2hpY2ggYXJlIGluIGEge0BsaW5rIFJ1bGVTdG9wU3RhdGV9LiBJZiBhbGxcbiAgICAgKiBjb25maWd1cmF0aW9ucyBpbiB7QGNvZGUgY29uZmlnc30gYXJlIGFscmVhZHkgaW4gYSBydWxlIHN0b3Agc3RhdGUsIHRoaXNcbiAgICAgKiBtZXRob2Qgc2ltcGx5IHJldHVybnMge0Bjb2RlIGNvbmZpZ3N9LlxuICAgICAqXG4gICAgICogPHA+V2hlbiB7QGNvZGUgbG9va1RvRW5kT2ZSdWxlfSBpcyB0cnVlLCB0aGlzIG1ldGhvZCB1c2VzXG4gICAgICoge0BsaW5rIEFUTi8vbmV4dFRva2Vuc30gZm9yIGVhY2ggY29uZmlndXJhdGlvbiBpbiB7QGNvZGUgY29uZmlnc30gd2hpY2ggaXNcbiAgICAgKiBub3QgYWxyZWFkeSBpbiBhIHJ1bGUgc3RvcCBzdGF0ZSB0byBzZWUgaWYgYSBydWxlIHN0b3Agc3RhdGUgaXMgcmVhY2hhYmxlXG4gICAgICogZnJvbSB0aGUgY29uZmlndXJhdGlvbiB2aWEgZXBzaWxvbi1vbmx5IHRyYW5zaXRpb25zLjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWdzIHRoZSBjb25maWd1cmF0aW9uIHNldCB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gbG9va1RvRW5kT2ZSdWxlIHdoZW4gdHJ1ZSwgdGhpcyBtZXRob2QgY2hlY2tzIGZvciBydWxlIHN0b3Agc3RhdGVzXG4gICAgICogcmVhY2hhYmxlIGJ5IGVwc2lsb24tb25seSB0cmFuc2l0aW9ucyBmcm9tIGVhY2ggY29uZmlndXJhdGlvbiBpblxuICAgICAqIHtAY29kZSBjb25maWdzfS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Bjb2RlIGNvbmZpZ3N9IGlmIGFsbCBjb25maWd1cmF0aW9ucyBpbiB7QGNvZGUgY29uZmlnc30gYXJlIGluIGFcbiAgICAgKiBydWxlIHN0b3Agc3RhdGUsIG90aGVyd2lzZSByZXR1cm4gYSBuZXcgY29uZmlndXJhdGlvbiBzZXQgY29udGFpbmluZyBvbmx5XG4gICAgICogdGhlIGNvbmZpZ3VyYXRpb25zIGZyb20ge0Bjb2RlIGNvbmZpZ3N9IHdoaWNoIGFyZSBpbiBhIHJ1bGUgc3RvcCBzdGF0ZVxuICAgICAqL1xuICAgIHJlbW92ZUFsbENvbmZpZ3NOb3RJblJ1bGVTdG9wU3RhdGUoY29uZmlncywgbG9va1RvRW5kT2ZSdWxlKSB7XG4gICAgICAgIGlmIChQcmVkaWN0aW9uTW9kZS5hbGxDb25maWdzSW5SdWxlU3RvcFN0YXRlcyhjb25maWdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ3M7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFUTkNvbmZpZ1NldChjb25maWdzLmZ1bGxDdHgpO1xuICAgICAgICBmb3IobGV0IGk9MDsgaTxjb25maWdzLml0ZW1zLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IGNvbmZpZ3MuaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoY29uZmlnLnN0YXRlIGluc3RhbmNlb2YgUnVsZVN0b3BTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5hZGQoY29uZmlnLCB0aGlzLm1lcmdlQ2FjaGUpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvb2tUb0VuZE9mUnVsZSAmJiBjb25maWcuc3RhdGUuZXBzaWxvbk9ubHlUcmFuc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUb2tlbnMgPSB0aGlzLmF0bi5uZXh0VG9rZW5zKGNvbmZpZy5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRUb2tlbnMuY29udGFpbnMoVG9rZW4uRVBTSUxPTikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kT2ZSdWxlU3RhdGUgPSB0aGlzLmF0bi5ydWxlVG9TdG9wU3RhdGVbY29uZmlnLnN0YXRlLnJ1bGVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hZGQobmV3IEFUTkNvbmZpZyh7c3RhdGU6ZW5kT2ZSdWxlU3RhdGV9LCBjb25maWcpLCB0aGlzLm1lcmdlQ2FjaGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGNvbXB1dGVTdGFydFN0YXRlKHAsIGN0eCwgZnVsbEN0eCkge1xuICAgICAgICAvLyBhbHdheXMgYXQgbGVhc3QgdGhlIGltcGxpY2l0IGNhbGwgdG8gc3RhcnQgcnVsZVxuICAgICAgICBjb25zdCBpbml0aWFsQ29udGV4dCA9IHByZWRpY3Rpb25Db250ZXh0RnJvbVJ1bGVDb250ZXh0KHRoaXMuYXRuLCBjdHgpO1xuICAgICAgICBjb25zdCBjb25maWdzID0gbmV3IEFUTkNvbmZpZ1NldChmdWxsQ3R4KTtcbiAgICAgICAgZm9yKGxldCBpPTA7aTxwLnRyYW5zaXRpb25zLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHAudHJhbnNpdGlvbnNbaV0udGFyZ2V0O1xuICAgICAgICAgICAgY29uc3QgYyA9IG5ldyBBVE5Db25maWcoeyBzdGF0ZTp0YXJnZXQsIGFsdDppKzEsIGNvbnRleHQ6aW5pdGlhbENvbnRleHQgfSwgbnVsbCk7XG4gICAgICAgICAgICBjb25zdCBjbG9zdXJlQnVzeSA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc3VyZShjLCBjb25maWdzLCBjbG9zdXJlQnVzeSwgdHJ1ZSwgZnVsbEN0eCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25maWdzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgdGhlIHN0YXJ0IHN0YXRlIGNvbXB1dGVkIGJ5XG4gICAgICoge0BsaW5rIC8vY29tcHV0ZVN0YXJ0U3RhdGV9IHRvIHRoZSBzcGVjaWFsIHN0YXJ0IHN0YXRlIHVzZWQgYnkgYVxuICAgICAqIHByZWNlZGVuY2UgREZBIGZvciBhIHBhcnRpY3VsYXIgcHJlY2VkZW5jZSB2YWx1ZS4gVGhlIHRyYW5zZm9ybWF0aW9uXG4gICAgICogcHJvY2VzcyBhcHBsaWVzIHRoZSBmb2xsb3dpbmcgY2hhbmdlcyB0byB0aGUgc3RhcnQgc3RhdGUncyBjb25maWd1cmF0aW9uXG4gICAgICogc2V0LlxuICAgICAqXG4gICAgICogPG9sPlxuICAgICAqIDxsaT5FdmFsdWF0ZSB0aGUgcHJlY2VkZW5jZSBwcmVkaWNhdGVzIGZvciBlYWNoIGNvbmZpZ3VyYXRpb24gdXNpbmdcbiAgICAgKiB7QGxpbmsgU2VtYW50aWNDb250ZXh0Ly9ldmFsUHJlY2VkZW5jZX0uPC9saT5cbiAgICAgKiA8bGk+UmVtb3ZlIGFsbCBjb25maWd1cmF0aW9ucyB3aGljaCBwcmVkaWN0IGFuIGFsdGVybmF0aXZlIGdyZWF0ZXIgdGhhblxuICAgICAqIDEsIGZvciB3aGljaCBhbm90aGVyIGNvbmZpZ3VyYXRpb24gdGhhdCBwcmVkaWN0cyBhbHRlcm5hdGl2ZSAxIGlzIGluIHRoZVxuICAgICAqIHNhbWUgQVROIHN0YXRlIHdpdGggdGhlIHNhbWUgcHJlZGljdGlvbiBjb250ZXh0LiBUaGlzIHRyYW5zZm9ybWF0aW9uIGlzXG4gICAgICogdmFsaWQgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uczpcbiAgICAgKiA8dWw+XG4gICAgICogPGxpPlRoZSBjbG9zdXJlIGJsb2NrIGNhbm5vdCBjb250YWluIGFueSBlcHNpbG9uIHRyYW5zaXRpb25zIHdoaWNoIGJ5cGFzc1xuICAgICAqIHRoZSBib2R5IG9mIHRoZSBjbG9zdXJlLCBzbyBhbGwgc3RhdGVzIHJlYWNoYWJsZSB2aWEgYWx0ZXJuYXRpdmUgMSBhcmVcbiAgICAgKiBwYXJ0IG9mIHRoZSBwcmVjZWRlbmNlIGFsdGVybmF0aXZlcyBvZiB0aGUgdHJhbnNmb3JtZWQgbGVmdC1yZWN1cnNpdmVcbiAgICAgKiBydWxlLjwvbGk+XG4gICAgICogPGxpPlRoZSBcInByaW1hcnlcIiBwb3J0aW9uIG9mIGEgbGVmdCByZWN1cnNpdmUgcnVsZSBjYW5ub3QgY29udGFpbiBhblxuICAgICAqIGVwc2lsb24gdHJhbnNpdGlvbiwgc28gdGhlIG9ubHkgd2F5IGFuIGFsdGVybmF0aXZlIG90aGVyIHRoYW4gMSBjYW4gZXhpc3RcbiAgICAgKiBpbiBhIHN0YXRlIHRoYXQgaXMgYWxzbyByZWFjaGFibGUgdmlhIGFsdGVybmF0aXZlIDEgaXMgYnkgbmVzdGluZyBjYWxsc1xuICAgICAqIHRvIHRoZSBsZWZ0LXJlY3Vyc2l2ZSBydWxlLCB3aXRoIHRoZSBvdXRlciBjYWxscyBub3QgYmVpbmcgYXQgdGhlXG4gICAgICogcHJlZmVycmVkIHByZWNlZGVuY2UgbGV2ZWwuPC9saT5cbiAgICAgKiA8L3VsPlxuICAgICAqIDwvbGk+XG4gICAgICogPC9vbD5cbiAgICAgKlxuICAgICAqIDxwPlxuICAgICAqIFRoZSBwcmVkaWN0aW9uIGNvbnRleHQgbXVzdCBiZSBjb25zaWRlcmVkIGJ5IHRoaXMgZmlsdGVyIHRvIGFkZHJlc3NcbiAgICAgKiBzaXR1YXRpb25zIGxpa2UgdGhlIGZvbGxvd2luZy5cbiAgICAgKiA8L3A+XG4gICAgICogPGNvZGU+XG4gICAgICogPHByZT5cbiAgICAgKiBncmFtbWFyIFRBO1xuICAgICAqIHByb2c6IHN0YXRlbWVudCogRU9GO1xuICAgICAqIHN0YXRlbWVudDogbGV0dGVyQSB8IHN0YXRlbWVudCBsZXR0ZXJBICdiJyA7XG4gICAgICogbGV0dGVyQTogJ2EnO1xuICAgICAqIDwvcHJlPlxuICAgICAqIDwvY29kZT5cbiAgICAgKiA8cD5cbiAgICAgKiBJZiB0aGUgYWJvdmUgZ3JhbW1hciwgdGhlIEFUTiBzdGF0ZSBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIHRva2VuXG4gICAgICogcmVmZXJlbmNlIHtAY29kZSAnYSd9IGluIHtAY29kZSBsZXR0ZXJBfSBpcyByZWFjaGFibGUgZnJvbSB0aGUgbGVmdCBlZGdlXG4gICAgICogb2YgYm90aCB0aGUgcHJpbWFyeSBhbmQgY2xvc3VyZSBibG9ja3Mgb2YgdGhlIGxlZnQtcmVjdXJzaXZlIHJ1bGVcbiAgICAgKiB7QGNvZGUgc3RhdGVtZW50fS4gVGhlIHByZWRpY3Rpb24gY29udGV4dCBhc3NvY2lhdGVkIHdpdGggZWFjaCBvZiB0aGVzZVxuICAgICAqIGNvbmZpZ3VyYXRpb25zIGRpc3Rpbmd1aXNoZXMgYmV0d2VlbiB0aGVtLCBhbmQgcHJldmVudHMgdGhlIGFsdGVybmF0aXZlXG4gICAgICogd2hpY2ggc3RlcHBlZCBvdXQgdG8ge0Bjb2RlIHByb2d9IChhbmQgdGhlbiBiYWNrIGluIHRvIHtAY29kZSBzdGF0ZW1lbnR9XG4gICAgICogZnJvbSBiZWluZyBlbGltaW5hdGVkIGJ5IHRoZSBmaWx0ZXIuXG4gICAgICogPC9wPlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZ3MgVGhlIGNvbmZpZ3VyYXRpb24gc2V0IGNvbXB1dGVkIGJ5XG4gICAgICoge0BsaW5rIC8vY29tcHV0ZVN0YXJ0U3RhdGV9IGFzIHRoZSBzdGFydCBzdGF0ZSBmb3IgdGhlIERGQS5cbiAgICAgKiBAcmV0dXJuIFRoZSB0cmFuc2Zvcm1lZCBjb25maWd1cmF0aW9uIHNldCByZXByZXNlbnRpbmcgdGhlIHN0YXJ0IHN0YXRlXG4gICAgICogZm9yIGEgcHJlY2VkZW5jZSBERkEgYXQgYSBwYXJ0aWN1bGFyIHByZWNlZGVuY2UgbGV2ZWwgKGRldGVybWluZWQgYnlcbiAgICAgKiBjYWxsaW5nIHtAbGluayBQYXJzZXIvL2dldFByZWNlZGVuY2V9KVxuICAgICAqL1xuICAgIGFwcGx5UHJlY2VkZW5jZUZpbHRlcihjb25maWdzKSB7XG4gICAgICAgIGxldCBjb25maWc7XG4gICAgICAgIGNvbnN0IHN0YXRlc0Zyb21BbHQxID0gW107XG4gICAgICAgIGNvbnN0IGNvbmZpZ1NldCA9IG5ldyBBVE5Db25maWdTZXQoY29uZmlncy5mdWxsQ3R4KTtcbiAgICAgICAgZm9yKGxldCBpPTA7IGk8Y29uZmlncy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnID0gY29uZmlncy5pdGVtc1tpXTtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBhbHQgMSBmaXJzdFxuICAgICAgICAgICAgaWYgKGNvbmZpZy5hbHQgIT09IDEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDb250ZXh0ID0gY29uZmlnLnNlbWFudGljQ29udGV4dC5ldmFsUHJlY2VkZW5jZSh0aGlzLnBhcnNlciwgdGhpcy5fb3V0ZXJDb250ZXh0KTtcbiAgICAgICAgICAgIGlmICh1cGRhdGVkQ29udGV4dD09PW51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29uZmlndXJhdGlvbiB3YXMgZWxpbWluYXRlZFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGVzRnJvbUFsdDFbY29uZmlnLnN0YXRlLnN0YXRlTnVtYmVyXSA9IGNvbmZpZy5jb250ZXh0O1xuICAgICAgICAgICAgaWYgKHVwZGF0ZWRDb250ZXh0ICE9PSBjb25maWcuc2VtYW50aWNDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29uZmlnU2V0LmFkZChuZXcgQVROQ29uZmlnKHtzZW1hbnRpY0NvbnRleHQ6dXBkYXRlZENvbnRleHR9LCBjb25maWcpLCB0aGlzLm1lcmdlQ2FjaGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25maWdTZXQuYWRkKGNvbmZpZywgdGhpcy5tZXJnZUNhY2hlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGk9MDsgaTxjb25maWdzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWdzLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5hbHQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGhhbmRsZWRcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEluIHRoZSBmdXR1cmUsIHRoaXMgZWxpbWluYXRpb24gc3RlcCBjb3VsZCBiZSB1cGRhdGVkIHRvIGFsc29cbiAgICAgICAgICAgIC8vIGZpbHRlciB0aGUgcHJlZGljdGlvbiBjb250ZXh0IGZvciBhbHRlcm5hdGl2ZXMgcHJlZGljdGluZyBhbHQ+MVxuICAgICAgICAgICAgLy8gKGJhc2ljYWxseSBhIGdyYXBoIHN1YnRyYWN0aW9uIGFsZ29yaXRobSkuXG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBzdGF0ZXNGcm9tQWx0MVtjb25maWcuc3RhdGUuc3RhdGVOdW1iZXJdIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQhPT1udWxsICYmIGNvbnRleHQuZXF1YWxzKGNvbmZpZy5jb250ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbGltaW5hdGVkXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZ1NldC5hZGQoY29uZmlnLCB0aGlzLm1lcmdlQ2FjaGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25maWdTZXQ7XG4gICAgfVxuXG4gICAgZ2V0UmVhY2hhYmxlVGFyZ2V0KHRyYW5zLCB0dHlwZSkge1xuICAgICAgICBpZiAodHJhbnMubWF0Y2hlcyh0dHlwZSwgMCwgdGhpcy5hdG4ubWF4VG9rZW5UeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zLnRhcmdldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UHJlZHNGb3JBbWJpZ0FsdHMoYW1iaWdBbHRzLCBjb25maWdzLCBuYWx0cykge1xuICAgICAgICAvLyBSRUFDSD1bMXwxfFtdfDA6MCwgMXwyfFtdfDA6MV1cbiAgICAgICAgLy8gYWx0VG9QcmVkIHN0YXJ0cyBhcyBhbiBhcnJheSBvZiBhbGwgbnVsbCBjb250ZXh0cy4gVGhlIGVudHJ5IGF0IGluZGV4IGlcbiAgICAgICAgLy8gY29ycmVzcG9uZHMgdG8gYWx0ZXJuYXRpdmUgaS4gYWx0VG9QcmVkW2ldIG1heSBoYXZlIG9uZSBvZiB0aHJlZSB2YWx1ZXM6XG4gICAgICAgIC8vICAgMS4gbnVsbDogbm8gQVROQ29uZmlnIGMgaXMgZm91bmQgc3VjaCB0aGF0IGMuYWx0PT1pXG4gICAgICAgIC8vICAgMi4gU2VtYW50aWNDb250ZXh0Lk5PTkU6IEF0IGxlYXN0IG9uZSBBVE5Db25maWcgYyBleGlzdHMgc3VjaCB0aGF0XG4gICAgICAgIC8vICAgICAgYy5hbHQ9PWkgYW5kIGMuc2VtYW50aWNDb250ZXh0PT1TZW1hbnRpY0NvbnRleHQuTk9ORS4gSW4gb3RoZXIgd29yZHMsXG4gICAgICAgIC8vICAgICAgYWx0IGkgaGFzIGF0IGxlYXN0IG9uZSB1bnByZWRpY2F0ZWQgY29uZmlnLlxuICAgICAgICAvLyAgIDMuIE5vbi1OT05FIFNlbWFudGljIENvbnRleHQ6IFRoZXJlIGV4aXN0cyBhdCBsZWFzdCBvbmUsIGFuZCBmb3IgYWxsXG4gICAgICAgIC8vICAgICAgQVROQ29uZmlnIGMgc3VjaCB0aGF0IGMuYWx0PT1pLCBjLnNlbWFudGljQ29udGV4dCE9U2VtYW50aWNDb250ZXh0Lk5PTkUuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEZyb20gdGhpcywgaXQgaXMgY2xlYXIgdGhhdCBOT05FfHxhbnl0aGluZz09Tk9ORS5cbiAgICAgICAgLy9cbiAgICAgICAgbGV0IGFsdFRvUHJlZCA9IFtdO1xuICAgICAgICBmb3IobGV0IGk9MDtpPGNvbmZpZ3MuaXRlbXMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgY29uc3QgYyA9IGNvbmZpZ3MuaXRlbXNbaV07XG4gICAgICAgICAgICBpZihhbWJpZ0FsdHMuY29udGFpbnMoIGMuYWx0ICkpIHtcbiAgICAgICAgICAgICAgICBhbHRUb1ByZWRbYy5hbHRdID0gU2VtYW50aWNDb250ZXh0Lm9yQ29udGV4dChhbHRUb1ByZWRbYy5hbHRdIHx8IG51bGwsIGMuc2VtYW50aWNDb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgblByZWRBbHRzID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9MTtpPCBuYWx0cysxO2krKykge1xuICAgICAgICAgICAgY29uc3QgcHJlZCA9IGFsdFRvUHJlZFtpXSB8fCBudWxsO1xuICAgICAgICAgICAgaWYgKHByZWQ9PT1udWxsKSB7XG4gICAgICAgICAgICAgICAgYWx0VG9QcmVkW2ldID0gU2VtYW50aWNDb250ZXh0Lk5PTkU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByZWQgIT09IFNlbWFudGljQ29udGV4dC5OT05FKSB7XG4gICAgICAgICAgICAgICAgblByZWRBbHRzICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm9uYW1iaWcgYWx0cyBhcmUgbnVsbCBpbiBhbHRUb1ByZWRcbiAgICAgICAgaWYgKG5QcmVkQWx0cz09PTApIHtcbiAgICAgICAgICAgIGFsdFRvUHJlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZ2V0UHJlZHNGb3JBbWJpZ0FsdHMgcmVzdWx0IFwiICsgVXRpbHMuYXJyYXlUb1N0cmluZyhhbHRUb1ByZWQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWx0VG9QcmVkO1xuICAgIH1cblxuICAgIGdldFByZWRpY2F0ZVByZWRpY3Rpb25zKGFtYmlnQWx0cywgYWx0VG9QcmVkKSB7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgICAgIGxldCBjb250YWluc1ByZWRpY2F0ZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpPTE7IGk8YWx0VG9QcmVkLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHByZWQgPSBhbHRUb1ByZWRbaV07XG4gICAgICAgICAgICAvLyB1bnByZWRpY2F0ZWQgaXMgaW5kaWNhdGVkIGJ5IFNlbWFudGljQ29udGV4dC5OT05FXG4gICAgICAgICAgICBpZiggYW1iaWdBbHRzIT09bnVsbCAmJiBhbWJpZ0FsdHMuY29udGFpbnMoIGkgKSkge1xuICAgICAgICAgICAgICAgIHBhaXJzLnB1c2gobmV3IFByZWRQcmVkaWN0aW9uKHByZWQsIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmVkICE9PSBTZW1hbnRpY0NvbnRleHQuTk9ORSkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5zUHJlZGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoISBjb250YWluc1ByZWRpY2F0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhaXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gaW1wcm92ZSB0aGUgbG9jYWxpemF0aW9uIG9mIGVycm9yIG1lc3NhZ2VzIGJ5XG4gICAgICogY2hvb3NpbmcgYW4gYWx0ZXJuYXRpdmUgcmF0aGVyIHRoYW4gdGhyb3dpbmcgYVxuICAgICAqIHtAbGluayBOb1ZpYWJsZUFsdEV4Y2VwdGlvbn0gaW4gcGFydGljdWxhciBwcmVkaWN0aW9uIHNjZW5hcmlvcyB3aGVyZSB0aGVcbiAgICAgKiB7QGxpbmsgLy9FUlJPUn0gc3RhdGUgd2FzIHJlYWNoZWQgZHVyaW5nIEFUTiBzaW11bGF0aW9uLlxuICAgICAqXG4gICAgICogPHA+XG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgdXNlcyB0aGUgZm9sbG93aW5nXG4gICAgICogYWxnb3JpdGhtIHRvIGlkZW50aWZ5IGFuIEFUTiBjb25maWd1cmF0aW9uIHdoaWNoIHN1Y2Nlc3NmdWxseSBwYXJzZWQgdGhlXG4gICAgICogZGVjaXNpb24gZW50cnkgcnVsZS4gQ2hvb3Npbmcgc3VjaCBhbiBhbHRlcm5hdGl2ZSBlbnN1cmVzIHRoYXQgdGhlXG4gICAgICoge0BsaW5rIFBhcnNlclJ1bGVDb250ZXh0fSByZXR1cm5lZCBieSB0aGUgY2FsbGluZyBydWxlIHdpbGwgYmUgY29tcGxldGVcbiAgICAgKiBhbmQgdmFsaWQsIGFuZCB0aGUgc3ludGF4IGVycm9yIHdpbGwgYmUgcmVwb3J0ZWQgbGF0ZXIgYXQgYSBtb3JlXG4gICAgICogbG9jYWxpemVkIGxvY2F0aW9uLjwvcD5cbiAgICAgKlxuICAgICAqIDx1bD5cbiAgICAgKiA8bGk+SWYgYSBzeW50YWN0aWNhbGx5IHZhbGlkIHBhdGggb3IgcGF0aHMgcmVhY2ggdGhlIGVuZCBvZiB0aGUgZGVjaXNpb24gcnVsZSBhbmRcbiAgICAgKiB0aGV5IGFyZSBzZW1hbnRpY2FsbHkgdmFsaWQgaWYgcHJlZGljYXRlZCwgcmV0dXJuIHRoZSBtaW4gYXNzb2NpYXRlZCBhbHQuPC9saT5cbiAgICAgKiA8bGk+RWxzZSwgaWYgYSBzZW1hbnRpY2FsbHkgaW52YWxpZCBidXQgc3ludGFjdGljYWxseSB2YWxpZCBwYXRoIGV4aXN0XG4gICAgICogb3IgcGF0aHMgZXhpc3QsIHJldHVybiB0aGUgbWluaW11bSBhc3NvY2lhdGVkIGFsdC5cbiAgICAgKiA8L2xpPlxuICAgICAqIDxsaT5PdGhlcndpc2UsIHJldHVybiB7QGxpbmsgQVROLy9JTlZBTElEX0FMVF9OVU1CRVJ9LjwvbGk+XG4gICAgICogPC91bD5cbiAgICAgKlxuICAgICAqIDxwPlxuICAgICAqIEluIHNvbWUgc2NlbmFyaW9zLCB0aGUgYWxnb3JpdGhtIGRlc2NyaWJlZCBhYm92ZSBjb3VsZCBwcmVkaWN0IGFuXG4gICAgICogYWx0ZXJuYXRpdmUgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSB7QGxpbmsgRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9ufSBpblxuICAgICAqIHRoZSBwYXJzZXIuIFNwZWNpZmljYWxseSwgdGhpcyBjb3VsZCBvY2N1ciBpZiB0aGUgPGVtPm9ubHk8L2VtPiBjb25maWd1cmF0aW9uXG4gICAgICogY2FwYWJsZSBvZiBzdWNjZXNzZnVsbHkgcGFyc2luZyB0byB0aGUgZW5kIG9mIHRoZSBkZWNpc2lvbiBydWxlIGlzXG4gICAgICogYmxvY2tlZCBieSBhIHNlbWFudGljIHByZWRpY2F0ZS4gQnkgY2hvb3NpbmcgdGhpcyBhbHRlcm5hdGl2ZSB3aXRoaW5cbiAgICAgKiB7QGxpbmsgLy9hZGFwdGl2ZVByZWRpY3R9IGluc3RlYWQgb2YgdGhyb3dpbmcgYVxuICAgICAqIHtAbGluayBOb1ZpYWJsZUFsdEV4Y2VwdGlvbn0sIHRoZSByZXN1bHRpbmdcbiAgICAgKiB7QGxpbmsgRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9ufSBpbiB0aGUgcGFyc2VyIHdpbGwgaWRlbnRpZnkgdGhlIHNwZWNpZmljXG4gICAgICogcHJlZGljYXRlIHdoaWNoIGlzIHByZXZlbnRpbmcgdGhlIHBhcnNlciBmcm9tIHN1Y2Nlc3NmdWxseSBwYXJzaW5nIHRoZVxuICAgICAqIGRlY2lzaW9uIHJ1bGUsIHdoaWNoIGhlbHBzIGRldmVsb3BlcnMgaWRlbnRpZnkgYW5kIGNvcnJlY3QgbG9naWMgZXJyb3JzXG4gICAgICogaW4gc2VtYW50aWMgcHJlZGljYXRlcy5cbiAgICAgKiA8L3A+XG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29uZmlncyBUaGUgQVROIGNvbmZpZ3VyYXRpb25zIHdoaWNoIHdlcmUgdmFsaWQgaW1tZWRpYXRlbHkgYmVmb3JlXG4gICAgICogdGhlIHtAbGluayAvL0VSUk9SfSBzdGF0ZSB3YXMgcmVhY2hlZFxuICAgICAqIEBwYXJhbSBvdXRlckNvbnRleHQgVGhlIGlzIHRoZSBcXGdhbW1hXzAgaW5pdGlhbCBwYXJzZXIgY29udGV4dCBmcm9tIHRoZSBwYXBlclxuICAgICAqIG9yIHRoZSBwYXJzZXIgc3RhY2sgYXQgdGhlIGluc3RhbnQgYmVmb3JlIHByZWRpY3Rpb24gY29tbWVuY2VzLlxuICAgICAqXG4gICAgICogQHJldHVybiBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20ge0BsaW5rIC8vYWRhcHRpdmVQcmVkaWN0fSwgb3JcbiAgICAgKiB7QGxpbmsgQVROLy9JTlZBTElEX0FMVF9OVU1CRVJ9IGlmIGEgc3VpdGFibGUgYWx0ZXJuYXRpdmUgd2FzIG5vdFxuICAgICAqIGlkZW50aWZpZWQgYW5kIHtAbGluayAvL2FkYXB0aXZlUHJlZGljdH0gc2hvdWxkIHJlcG9ydCBhbiBlcnJvciBpbnN0ZWFkXG4gICAgICovXG4gICAgZ2V0U3luVmFsaWRPclNlbUludmFsaWRBbHRUaGF0RmluaXNoZWREZWNpc2lvbkVudHJ5UnVsZShjb25maWdzLCBvdXRlckNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY2ZncyA9IHRoaXMuc3BsaXRBY2NvcmRpbmdUb1NlbWFudGljVmFsaWRpdHkoY29uZmlncywgb3V0ZXJDb250ZXh0KTtcbiAgICAgICAgY29uc3Qgc2VtVmFsaWRDb25maWdzID0gY2Znc1swXTtcbiAgICAgICAgY29uc3Qgc2VtSW52YWxpZENvbmZpZ3MgPSBjZmdzWzFdO1xuICAgICAgICBsZXQgYWx0ID0gdGhpcy5nZXRBbHRUaGF0RmluaXNoZWREZWNpc2lvbkVudHJ5UnVsZShzZW1WYWxpZENvbmZpZ3MpO1xuICAgICAgICBpZiAoYWx0IT09QVROLklOVkFMSURfQUxUX05VTUJFUikgeyAvLyBzZW1hbnRpY2FsbHkvc3ludGFjdGljYWxseSB2aWFibGUgcGF0aCBleGlzdHNcbiAgICAgICAgICAgIHJldHVybiBhbHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXMgdGhlcmUgYSBzeW50YWN0aWNhbGx5IHZhbGlkIHBhdGggd2l0aCBhIGZhaWxlZCBwcmVkP1xuICAgICAgICBpZiAoc2VtSW52YWxpZENvbmZpZ3MuaXRlbXMubGVuZ3RoPjApIHtcbiAgICAgICAgICAgIGFsdCA9IHRoaXMuZ2V0QWx0VGhhdEZpbmlzaGVkRGVjaXNpb25FbnRyeVJ1bGUoc2VtSW52YWxpZENvbmZpZ3MpO1xuICAgICAgICAgICAgaWYgKGFsdCE9PUFUTi5JTlZBTElEX0FMVF9OVU1CRVIpIHsgLy8gc3ludGFjdGljYWxseSB2aWFibGUgcGF0aCBleGlzdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gYWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBVE4uSU5WQUxJRF9BTFRfTlVNQkVSO1xuICAgIH1cblxuICAgIGdldEFsdFRoYXRGaW5pc2hlZERlY2lzaW9uRW50cnlSdWxlKGNvbmZpZ3MpIHtcbiAgICAgICAgY29uc3QgYWx0cyA9IFtdO1xuICAgICAgICBmb3IobGV0IGk9MDtpPGNvbmZpZ3MuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBjb25maWdzLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGMucmVhY2hlc0ludG9PdXRlckNvbnRleHQ+MCB8fCAoKGMuc3RhdGUgaW5zdGFuY2VvZiBSdWxlU3RvcFN0YXRlKSAmJiBjLmNvbnRleHQuaGFzRW1wdHlQYXRoKCkpKSB7XG4gICAgICAgICAgICAgICAgaWYoYWx0cy5pbmRleE9mKGMuYWx0KTwwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdHMucHVzaChjLmFsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhbHRzLmxlbmd0aD09PTApIHtcbiAgICAgICAgICAgIHJldHVybiBBVE4uSU5WQUxJRF9BTFRfTlVNQkVSO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIGFsdHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2FsayB0aGUgbGlzdCBvZiBjb25maWd1cmF0aW9ucyBhbmQgc3BsaXQgdGhlbSBhY2NvcmRpbmcgdG9cbiAgICAgKiB0aG9zZSB0aGF0IGhhdmUgcHJlZHMgZXZhbHVhdGluZyB0byB0cnVlL2ZhbHNlLiAgSWYgbm8gcHJlZCwgYXNzdW1lXG4gICAgICogdHJ1ZSBwcmVkIGFuZCBpbmNsdWRlIGluIHN1Y2NlZWRlZCBzZXQuICBSZXR1cm5zIFBhaXIgb2Ygc2V0cy5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhIG5ldyBzZXQgc28gYXMgbm90IHRvIGFsdGVyIHRoZSBpbmNvbWluZyBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBBc3N1bXB0aW9uOiB0aGUgaW5wdXQgc3RyZWFtIGhhcyBiZWVuIHJlc3RvcmVkIHRvIHRoZSBzdGFydGluZyBwb2ludFxuICAgICAqIHByZWRpY3Rpb24sIHdoaWNoIGlzIHdoZXJlIHByZWRpY2F0ZXMgbmVlZCB0byBldmFsdWF0ZS4qL1xuICAgIHNwbGl0QWNjb3JkaW5nVG9TZW1hbnRpY1ZhbGlkaXR5KCBjb25maWdzLCBvdXRlckNvbnRleHQpIHtcbiAgICAgICAgY29uc3Qgc3VjY2VlZGVkID0gbmV3IEFUTkNvbmZpZ1NldChjb25maWdzLmZ1bGxDdHgpO1xuICAgICAgICBjb25zdCBmYWlsZWQgPSBuZXcgQVROQ29uZmlnU2V0KGNvbmZpZ3MuZnVsbEN0eCk7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8Y29uZmlncy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYyA9IGNvbmZpZ3MuaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoYy5zZW1hbnRpY0NvbnRleHQgIT09IFNlbWFudGljQ29udGV4dC5OT05FKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlZGljYXRlRXZhbHVhdGlvblJlc3VsdCA9IGMuc2VtYW50aWNDb250ZXh0LmV2YWx1YXRlKHRoaXMucGFyc2VyLCBvdXRlckNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGlmIChwcmVkaWNhdGVFdmFsdWF0aW9uUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2NlZWRlZC5hZGQoYyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkLmFkZChjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1Y2NlZWRlZC5hZGQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtzdWNjZWVkZWQsIGZhaWxlZF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9vayB0aHJvdWdoIGEgbGlzdCBvZiBwcmVkaWNhdGUvYWx0IHBhaXJzLCByZXR1cm5pbmcgYWx0cyBmb3IgdGhlXG4gICAgICogcGFpcnMgdGhhdCB3aW4uIEEge0Bjb2RlIE5PTkV9IHByZWRpY2F0ZSBpbmRpY2F0ZXMgYW4gYWx0IGNvbnRhaW5pbmcgYW5cbiAgICAgKiB1bnByZWRpY2F0ZWQgY29uZmlnIHdoaWNoIGJlaGF2ZXMgYXMgXCJhbHdheXMgdHJ1ZS5cIiBJZiAhY29tcGxldGVcbiAgICAgKiB0aGVuIHdlIHN0b3AgYXQgdGhlIGZpcnN0IHByZWRpY2F0ZSB0aGF0IGV2YWx1YXRlcyB0byB0cnVlLiBUaGlzXG4gICAgICogaW5jbHVkZXMgcGFpcnMgd2l0aCBudWxsIHByZWRpY2F0ZXMuXG4gICAgICovXG4gICAgZXZhbFNlbWFudGljQ29udGV4dChwcmVkUHJlZGljdGlvbnMsIG91dGVyQ29udGV4dCwgY29tcGxldGUpIHtcbiAgICAgICAgY29uc3QgcHJlZGljdGlvbnMgPSBuZXcgQml0U2V0KCk7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8cHJlZFByZWRpY3Rpb25zLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhaXIgPSBwcmVkUHJlZGljdGlvbnNbaV07XG4gICAgICAgICAgICBpZiAocGFpci5wcmVkID09PSBTZW1hbnRpY0NvbnRleHQuTk9ORSkge1xuICAgICAgICAgICAgICAgIHByZWRpY3Rpb25zLmFkZChwYWlyLmFsdCk7XG4gICAgICAgICAgICAgICAgaWYgKCEgY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJlZGljYXRlRXZhbHVhdGlvblJlc3VsdCA9IHBhaXIucHJlZC5ldmFsdWF0ZSh0aGlzLnBhcnNlciwgb3V0ZXJDb250ZXh0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnIHx8IHRoaXMuZGZhX2RlYnVnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJldmFsIHByZWQgXCIgKyBwYWlyICsgXCI9XCIgKyBwcmVkaWNhdGVFdmFsdWF0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGVFdmFsdWF0aW9uUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcgfHwgdGhpcy5kZmFfZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJQUkVESUNUIFwiICsgcGFpci5hbHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmVkaWN0aW9ucy5hZGQocGFpci5hbHQpO1xuICAgICAgICAgICAgICAgIGlmICghIGNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJlZGljdGlvbnM7XG4gICAgfVxuXG4vLyBUT0RPOiBJZiB3ZSBhcmUgZG9pbmcgcHJlZGljYXRlcywgdGhlcmUgaXMgbm8gcG9pbnQgaW4gcHVyc3Vpbmdcbi8vICAgICBjbG9zdXJlIG9wZXJhdGlvbnMgaWYgd2UgcmVhY2ggYSBERkEgc3RhdGUgdGhhdCB1bmlxdWVseSBwcmVkaWN0c1xuLy8gICAgIGFsdGVybmF0aXZlLiBXZSB3aWxsIG5vdCBiZSBjYWNoaW5nIHRoYXQgREZBIHN0YXRlIGFuZCBpdCBpcyBhXG4vLyAgICAgd2FzdGUgdG8gcHVyc3VlIHRoZSBjbG9zdXJlLiBNaWdodCBoYXZlIHRvIGFkdmFuY2Ugd2hlbiB3ZSBkb1xuLy8gICAgIGFtYmlnIGRldGVjdGlvbiB0aG91Z2h0IDooXG4vL1xuICAgIGNsb3N1cmUoY29uZmlnLCBjb25maWdzLCBjbG9zdXJlQnVzeSwgY29sbGVjdFByZWRpY2F0ZXMsIGZ1bGxDdHgsIHRyZWF0RW9mQXNFcHNpbG9uKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxEZXB0aCA9IDA7XG4gICAgICAgIHRoaXMuY2xvc3VyZUNoZWNraW5nU3RvcFN0YXRlKGNvbmZpZywgY29uZmlncywgY2xvc3VyZUJ1c3ksIGNvbGxlY3RQcmVkaWNhdGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbEN0eCwgaW5pdGlhbERlcHRoLCB0cmVhdEVvZkFzRXBzaWxvbik7XG4gICAgfVxuXG4gICAgY2xvc3VyZUNoZWNraW5nU3RvcFN0YXRlKGNvbmZpZywgY29uZmlncywgY2xvc3VyZUJ1c3ksIGNvbGxlY3RQcmVkaWNhdGVzLCBmdWxsQ3R4LCBkZXB0aCwgdHJlYXRFb2ZBc0Vwc2lsb24pIHtcbiAgICAgICAgaWYgKHRoaXMuZGVidWcgfHwgdGhpcy5kZWJ1Z19jbG9zdXJlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNsb3N1cmUoXCIgKyBjb25maWcudG9TdHJpbmcodGhpcy5wYXJzZXIsdHJ1ZSkgKyBcIilcIik7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImNvbmZpZ3MoXCIgKyBjb25maWdzLnRvU3RyaW5nKCkgKyBcIilcIik7XG4gICAgICAgICAgICBpZihjb25maWcucmVhY2hlc0ludG9PdXRlckNvbnRleHQ+NTApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcInByb2JsZW1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLnN0YXRlIGluc3RhbmNlb2YgUnVsZVN0b3BTdGF0ZSkge1xuICAgICAgICAgICAgLy8gV2UgaGl0IHJ1bGUgZW5kLiBJZiB3ZSBoYXZlIGNvbnRleHQgaW5mbywgdXNlIGl0XG4gICAgICAgICAgICAvLyBydW4gdGhydSBhbGwgcG9zc2libGUgc3RhY2sgdG9wcyBpbiBjdHhcbiAgICAgICAgICAgIGlmICghIGNvbmZpZy5jb250ZXh0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPTA7IGk8Y29uZmlnLmNvbnRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5jb250ZXh0LmdldFJldHVyblN0YXRlKGkpID09PSBQcmVkaWN0aW9uQ29udGV4dC5FTVBUWV9SRVRVUk5fU1RBVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmdWxsQ3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlncy5hZGQobmV3IEFUTkNvbmZpZyh7c3RhdGU6Y29uZmlnLnN0YXRlLCBjb250ZXh0OlByZWRpY3Rpb25Db250ZXh0LkVNUFRZfSwgY29uZmlnKSwgdGhpcy5tZXJnZUNhY2hlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSBubyBjb250ZXh0IGluZm8sIGp1c3QgY2hhc2UgZm9sbG93IGxpbmtzIChpZiBncmVlZHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGQUxMSU5HIG9mZiBydWxlIFwiICsgdGhpcy5nZXRSdWxlTmFtZShjb25maWcuc3RhdGUucnVsZUluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc3VyZV8oY29uZmlnLCBjb25maWdzLCBjbG9zdXJlQnVzeSwgY29sbGVjdFByZWRpY2F0ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbEN0eCwgZGVwdGgsIHRyZWF0RW9mQXNFcHNpbG9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldHVyblN0YXRlID0gdGhpcy5hdG4uc3RhdGVzW2NvbmZpZy5jb250ZXh0LmdldFJldHVyblN0YXRlKGkpXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IGNvbmZpZy5jb250ZXh0LmdldFBhcmVudChpKTsgLy8gXCJwb3BcIiByZXR1cm4gc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFybXMgPSB7c3RhdGU6cmV0dXJuU3RhdGUsIGFsdDpjb25maWcuYWx0LCBjb250ZXh0Om5ld0NvbnRleHQsIHNlbWFudGljQ29udGV4dDpjb25maWcuc2VtYW50aWNDb250ZXh0fTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IG5ldyBBVE5Db25maWcocGFybXMsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGlsZSB3ZSBoYXZlIGNvbnRleHQgdG8gcG9wIGJhY2sgZnJvbSwgd2UgbWF5IGhhdmVcbiAgICAgICAgICAgICAgICAgICAgLy8gZ290dGVuIHRoYXQgY29udGV4dCBBRlRFUiBoYXZpbmcgZmFsbGluZyBvZmYgYSBydWxlLlxuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgdHJhY2sgdGhhdCB3ZSBhcmUgbm93IG91dCBvZiBjb250ZXh0LlxuICAgICAgICAgICAgICAgICAgICBjLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0ID0gY29uZmlnLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3N1cmVDaGVja2luZ1N0b3BTdGF0ZShjLCBjb25maWdzLCBjbG9zdXJlQnVzeSwgY29sbGVjdFByZWRpY2F0ZXMsIGZ1bGxDdHgsIGRlcHRoIC0gMSwgdHJlYXRFb2ZBc0Vwc2lsb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYoIGZ1bGxDdHgpIHtcbiAgICAgICAgICAgICAgICAvLyByZWFjaGVkIGVuZCBvZiBzdGFydCBydWxlXG4gICAgICAgICAgICAgICAgY29uZmlncy5hZGQoY29uZmlnLCB0aGlzLm1lcmdlQ2FjaGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZWxzZSBpZiB3ZSBoYXZlIG5vIGNvbnRleHQgaW5mbywganVzdCBjaGFzZSBmb2xsb3cgbGlua3MgKGlmIGdyZWVkeSlcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZBTExJTkcgb2ZmIHJ1bGUgXCIgKyB0aGlzLmdldFJ1bGVOYW1lKGNvbmZpZy5zdGF0ZS5ydWxlSW5kZXgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbG9zdXJlXyhjb25maWcsIGNvbmZpZ3MsIGNsb3N1cmVCdXN5LCBjb2xsZWN0UHJlZGljYXRlcywgZnVsbEN0eCwgZGVwdGgsIHRyZWF0RW9mQXNFcHNpbG9uKTtcbiAgICB9XG5cbiAgICAvLyBEbyB0aGUgYWN0dWFsIHdvcmsgb2Ygd2Fsa2luZyBlcHNpbG9uIGVkZ2VzLy9cbiAgICBjbG9zdXJlXyhjb25maWcsIGNvbmZpZ3MsIGNsb3N1cmVCdXN5LCBjb2xsZWN0UHJlZGljYXRlcywgZnVsbEN0eCwgZGVwdGgsIHRyZWF0RW9mQXNFcHNpbG9uKSB7XG4gICAgICAgIGNvbnN0IHAgPSBjb25maWcuc3RhdGU7XG4gICAgICAgIC8vIG9wdGltaXphdGlvblxuICAgICAgICBpZiAoISBwLmVwc2lsb25Pbmx5VHJhbnNpdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbmZpZ3MuYWRkKGNvbmZpZywgdGhpcy5tZXJnZUNhY2hlKTtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0byBub3QgcmV0dXJuIGhlcmUsIGJlY2F1c2UgRU9GIHRyYW5zaXRpb25zIGNhbiBhY3QgYXNcbiAgICAgICAgICAgIC8vIGJvdGggZXBzaWxvbiB0cmFuc2l0aW9ucyBhbmQgbm9uLWVwc2lsb24gdHJhbnNpdGlvbnMuXG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMDtpPHAudHJhbnNpdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmKGkgPT09IDAgJiYgdGhpcy5jYW5Ecm9wTG9vcEVudHJ5RWRnZUluTGVmdFJlY3Vyc2l2ZVJ1bGUoY29uZmlnKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgdCA9IHAudHJhbnNpdGlvbnNbaV07XG4gICAgICAgICAgICBjb25zdCBjb250aW51ZUNvbGxlY3RpbmcgPSBjb2xsZWN0UHJlZGljYXRlcyAmJiAhKHQgaW5zdGFuY2VvZiBBY3Rpb25UcmFuc2l0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldEVwc2lsb25UYXJnZXQoY29uZmlnLCB0LCBjb250aW51ZUNvbGxlY3RpbmcsIGRlcHRoID09PSAwLCBmdWxsQ3R4LCB0cmVhdEVvZkFzRXBzaWxvbik7XG4gICAgICAgICAgICBpZiAoYyE9PW51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3RGVwdGggPSBkZXB0aDtcbiAgICAgICAgICAgICAgICBpZiAoIGNvbmZpZy5zdGF0ZSBpbnN0YW5jZW9mIFJ1bGVTdG9wU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFyZ2V0IGZlbGwgb2ZmIGVuZCBvZiBydWxlOyBtYXJrIHJlc3VsdGluZyBjIGFzIGhhdmluZyBkaXBwZWQgaW50byBvdXRlciBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbid0IGdldCBoZXJlIGlmIGluY29taW5nIGNvbmZpZyB3YXMgcnVsZSBzdG9wIGFuZCB3ZSBoYWQgY29udGV4dFxuICAgICAgICAgICAgICAgICAgICAvLyB0cmFjayBob3cgZmFyIHdlIGRpcCBpbnRvIG91dGVyIGNvbnRleHQuICBNaWdodFxuICAgICAgICAgICAgICAgICAgICAvLyBjb21lIGluIGhhbmR5IGFuZCB3ZSBhdm9pZCBldmFsdWF0aW5nIGNvbnRleHQgZGVwZW5kZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHByZWRzIGlmIHRoaXMgaXMgPiAwLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGZhICE9PSBudWxsICYmIHRoaXMuX2RmYS5wcmVjZWRlbmNlRGZhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5vdXRlcm1vc3RQcmVjZWRlbmNlUmV0dXJuID09PSB0aGlzLl9kZmEuYXRuU3RhcnRTdGF0ZS5ydWxlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnByZWNlZGVuY2VGaWx0ZXJTdXBwcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGMucmVhY2hlc0ludG9PdXRlckNvbnRleHQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsb3N1cmVCdXN5LmFkZChjKSE9PWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIGluZmluaXRlIHJlY3Vyc2lvbiBmb3IgcmlnaHQtcmVjdXJzaXZlIHJ1bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25maWdzLmRpcHNJbnRvT3V0ZXJDb250ZXh0ID0gdHJ1ZTsgLy8gVE9ETzogY2FuIHJlbW92ZT8gb25seSBjYXJlIHdoZW4gd2UgYWRkIHRvIHNldCBwZXIgbWlkZGxlIG9mIHRoaXMgbWV0aG9kXG4gICAgICAgICAgICAgICAgICAgIG5ld0RlcHRoIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImRpcHMgaW50byBvdXRlciBjdHg6IFwiICsgYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXQuaXNFcHNpbG9uICYmIGNsb3N1cmVCdXN5LmFkZChjKSE9PWMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uIGZvciBFT0YqIGFuZCBFT0YrXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIFJ1bGVUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsYXRjaCB3aGVuIG5ld0RlcHRoIGdvZXMgbmVnYXRpdmUgLSBvbmNlIHdlIHN0ZXAgb3V0IG9mIHRoZSBlbnRyeSBjb250ZXh0IHdlIGNhbid0IHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0RlcHRoID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdEZXB0aCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc3VyZUNoZWNraW5nU3RvcFN0YXRlKGMsIGNvbmZpZ3MsIGNsb3N1cmVCdXN5LCBjb250aW51ZUNvbGxlY3RpbmcsIGZ1bGxDdHgsIG5ld0RlcHRoLCB0cmVhdEVvZkFzRXBzaWxvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjYW5Ecm9wTG9vcEVudHJ5RWRnZUluTGVmdFJlY3Vyc2l2ZVJ1bGUoY29uZmlnKSB7XG4gICAgICAgIC8vIHJldHVybiBGYWxzZVxuICAgICAgICBjb25zdCBwID0gY29uZmlnLnN0YXRlO1xuICAgICAgICAvLyBGaXJzdCBjaGVjayB0byBzZWUgaWYgd2UgYXJlIGluIFN0YXJMb29wRW50cnlTdGF0ZSBnZW5lcmF0ZWQgZHVyaW5nXG4gICAgICAgIC8vIGxlZnQtcmVjdXJzaW9uIGVsaW1pbmF0aW9uLiBGb3IgZWZmaWNpZW5jeSwgYWxzbyBjaGVjayBpZlxuICAgICAgICAvLyB0aGUgY29udGV4dCBoYXMgYW4gZW1wdHkgc3RhY2sgY2FzZS4gSWYgc28sIGl0IHdvdWxkIG1lYW5cbiAgICAgICAgLy8gZ2xvYmFsIEZPTExPVyBzbyB3ZSBjYW4ndCBwZXJmb3JtIG9wdGltaXphdGlvblxuICAgICAgICAvLyBBcmUgd2UgdGhlIHNwZWNpYWwgbG9vcCBlbnRyeS9leGl0IHN0YXRlPyBvciBTTEwgd2lsZGNhcmRcbiAgICAgICAgaWYocC5zdGF0ZVR5cGUgIT09IEFUTlN0YXRlLlNUQVJfTE9PUF9FTlRSWSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYocC5zdGF0ZVR5cGUgIT09IEFUTlN0YXRlLlNUQVJfTE9PUF9FTlRSWSB8fCAhcC5pc1ByZWNlZGVuY2VEZWNpc2lvbiB8fFxuICAgICAgICAgICAgICAgY29uZmlnLmNvbnRleHQuaXNFbXB0eSgpIHx8IGNvbmZpZy5jb250ZXh0Lmhhc0VtcHR5UGF0aCgpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8vIFJlcXVpcmUgYWxsIHJldHVybiBzdGF0ZXMgdG8gcmV0dXJuIGJhY2sgdG8gdGhlIHNhbWUgcnVsZSB0aGF0IHAgaXMgaW4uXG4gICAgICAgIGNvbnN0IG51bUN0eHMgPSBjb25maWcuY29udGV4dC5sZW5ndGg7XG4gICAgICAgIGZvcihsZXQgaT0wOyBpPG51bUN0eHM7IGkrKykgeyAvLyBmb3IgZWFjaCBzdGFjayBjb250ZXh0XG4gICAgICAgICAgICBjb25zdCByZXR1cm5TdGF0ZSA9IHRoaXMuYXRuLnN0YXRlc1tjb25maWcuY29udGV4dC5nZXRSZXR1cm5TdGF0ZShpKV07XG4gICAgICAgICAgICBpZiAocmV0dXJuU3RhdGUucnVsZUluZGV4ICE9PSBwLnJ1bGVJbmRleClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNpc2lvblN0YXJ0U3RhdGUgPSBwLnRyYW5zaXRpb25zWzBdLnRhcmdldDtcbiAgICAgICAgY29uc3QgYmxvY2tFbmRTdGF0ZU51bSA9IGRlY2lzaW9uU3RhcnRTdGF0ZS5lbmRTdGF0ZS5zdGF0ZU51bWJlcjtcbiAgICAgICAgY29uc3QgYmxvY2tFbmRTdGF0ZSA9IHRoaXMuYXRuLnN0YXRlc1tibG9ja0VuZFN0YXRlTnVtXTtcblxuICAgICAgICAvLyBWZXJpZnkgdGhhdCB0aGUgdG9wIG9mIGVhY2ggc3RhY2sgY29udGV4dCBsZWFkcyB0byBsb29wIGVudHJ5L2V4aXRcbiAgICAgICAgLy8gc3RhdGUgdGhyb3VnaCBlcHNpbG9uIGVkZ2VzIGFuZCB3L28gbGVhdmluZyBydWxlLlxuICAgICAgICBmb3IobGV0IGk9MDsgaTxudW1DdHhzOyBpKyspIHsgLy8gZm9yIGVhY2ggc3RhY2sgY29udGV4dFxuICAgICAgICAgICAgY29uc3QgcmV0dXJuU3RhdGVOdW1iZXIgPSBjb25maWcuY29udGV4dC5nZXRSZXR1cm5TdGF0ZShpKTtcbiAgICAgICAgICAgIGNvbnN0IHJldHVyblN0YXRlID0gdGhpcy5hdG4uc3RhdGVzW3JldHVyblN0YXRlTnVtYmVyXTtcbiAgICAgICAgICAgIC8vIGFsbCBzdGF0ZXMgbXVzdCBoYXZlIHNpbmdsZSBvdXRnb2luZyBlcHNpbG9uIGVkZ2VcbiAgICAgICAgICAgIGlmIChyZXR1cm5TdGF0ZS50cmFuc2l0aW9ucy5sZW5ndGggIT09IDEgfHwgIXJldHVyblN0YXRlLnRyYW5zaXRpb25zWzBdLmlzRXBzaWxvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIExvb2sgZm9yIHByZWZpeCBvcCBjYXNlIGxpa2UgJ25vdCBleHByJywgKCcgdHlwZSAnKScgZXhwclxuICAgICAgICAgICAgY29uc3QgcmV0dXJuU3RhdGVUYXJnZXQgPSByZXR1cm5TdGF0ZS50cmFuc2l0aW9uc1swXS50YXJnZXQ7XG4gICAgICAgICAgICBpZiAoIHJldHVyblN0YXRlLnN0YXRlVHlwZSA9PT0gQVROU3RhdGUuQkxPQ0tfRU5EICYmIHJldHVyblN0YXRlVGFyZ2V0ID09PSBwIClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gTG9vayBmb3IgJ2V4cHIgb3AgZXhwcicgb3IgY2FzZSB3aGVyZSBleHByJ3MgcmV0dXJuIHN0YXRlIGlzIGJsb2NrIGVuZFxuICAgICAgICAgICAgLy8gb2YgKC4uLikqIGludGVybmFsIGJsb2NrOyB0aGUgYmxvY2sgZW5kIHBvaW50cyB0byBsb29wIGJhY2tcbiAgICAgICAgICAgIC8vIHdoaWNoIHBvaW50cyB0byBwIGJ1dCB3ZSBkb24ndCBuZWVkIHRvIGNoZWNrIHRoYXRcbiAgICAgICAgICAgIGlmICggcmV0dXJuU3RhdGUgPT09IGJsb2NrRW5kU3RhdGUgKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBMb29rIGZvciB0ZXJuYXJ5IGV4cHIgPyBleHByIDogZXhwci4gVGhlIHJldHVybiBzdGF0ZSBwb2ludHMgYXQgYmxvY2sgZW5kLFxuICAgICAgICAgICAgLy8gd2hpY2ggcG9pbnRzIGF0IGxvb3AgZW50cnkgc3RhdGVcbiAgICAgICAgICAgIGlmICggcmV0dXJuU3RhdGVUYXJnZXQgPT09IGJsb2NrRW5kU3RhdGUgKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBMb29rIGZvciBjb21wbGV4IHByZWZpeCAnYmV0d2VlbiBleHByIGFuZCBleHByJyBjYXNlIHdoZXJlIDJuZCBleHByJ3NcbiAgICAgICAgICAgIC8vIHJldHVybiBzdGF0ZSBwb2ludHMgYXQgYmxvY2sgZW5kIHN0YXRlIG9mICguLi4pKiBpbnRlcm5hbCBibG9ja1xuICAgICAgICAgICAgaWYgKHJldHVyblN0YXRlVGFyZ2V0LnN0YXRlVHlwZSA9PT0gQVROU3RhdGUuQkxPQ0tfRU5EICYmIHJldHVyblN0YXRlVGFyZ2V0LnRyYW5zaXRpb25zLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAmJiByZXR1cm5TdGF0ZVRhcmdldC50cmFuc2l0aW9uc1swXS5pc0Vwc2lsb24gJiYgcmV0dXJuU3RhdGVUYXJnZXQudHJhbnNpdGlvbnNbMF0udGFyZ2V0ID09PSBwKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBhbnl0aGluZyBlbHNlIGFpbid0IGNvbmZvcm1pbmdcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXRSdWxlTmFtZShpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5wYXJzZXIhPT1udWxsICYmIGluZGV4Pj0wKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZXIucnVsZU5hbWVzW2luZGV4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIjxydWxlIFwiICsgaW5kZXggKyBcIj5cIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEVwc2lsb25UYXJnZXQoY29uZmlnLCB0LCBjb2xsZWN0UHJlZGljYXRlcywgaW5Db250ZXh0LCBmdWxsQ3R4LCB0cmVhdEVvZkFzRXBzaWxvbikge1xuICAgICAgICBzd2l0Y2godC5zZXJpYWxpemF0aW9uVHlwZSkge1xuICAgICAgICBjYXNlIFRyYW5zaXRpb24uUlVMRTpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1bGVUcmFuc2l0aW9uKGNvbmZpZywgdCk7XG4gICAgICAgIGNhc2UgVHJhbnNpdGlvbi5QUkVDRURFTkNFOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJlY2VkZW5jZVRyYW5zaXRpb24oY29uZmlnLCB0LCBjb2xsZWN0UHJlZGljYXRlcywgaW5Db250ZXh0LCBmdWxsQ3R4KTtcbiAgICAgICAgY2FzZSBUcmFuc2l0aW9uLlBSRURJQ0FURTpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByZWRUcmFuc2l0aW9uKGNvbmZpZywgdCwgY29sbGVjdFByZWRpY2F0ZXMsIGluQ29udGV4dCwgZnVsbEN0eCk7XG4gICAgICAgIGNhc2UgVHJhbnNpdGlvbi5BQ1RJT046XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb25UcmFuc2l0aW9uKGNvbmZpZywgdCk7XG4gICAgICAgIGNhc2UgVHJhbnNpdGlvbi5FUFNJTE9OOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBVE5Db25maWcoe3N0YXRlOnQudGFyZ2V0fSwgY29uZmlnKTtcbiAgICAgICAgY2FzZSBUcmFuc2l0aW9uLkFUT006XG4gICAgICAgIGNhc2UgVHJhbnNpdGlvbi5SQU5HRTpcbiAgICAgICAgY2FzZSBUcmFuc2l0aW9uLlNFVDpcbiAgICAgICAgICAgIC8vIEVPRiB0cmFuc2l0aW9ucyBhY3QgbGlrZSBlcHNpbG9uIHRyYW5zaXRpb25zIGFmdGVyIHRoZSBmaXJzdCBFT0ZcbiAgICAgICAgICAgIC8vIHRyYW5zaXRpb24gaXMgdHJhdmVyc2VkXG4gICAgICAgICAgICBpZiAodHJlYXRFb2ZBc0Vwc2lsb24pIHtcbiAgICAgICAgICAgICAgICBpZiAodC5tYXRjaGVzKFRva2VuLkVPRiwgMCwgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBVE5Db25maWcoe3N0YXRlOiB0LnRhcmdldH0sIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFjdGlvblRyYW5zaXRpb24oY29uZmlnLCB0KSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHQuYWN0aW9uSW5kZXggPT09IC0xID8gNjU1MzUgOiB0LmFjdGlvbkluZGV4O1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBQ1RJT04gZWRnZSBcIiArIHQucnVsZUluZGV4ICsgXCI6XCIgKyBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBVE5Db25maWcoe3N0YXRlOnQudGFyZ2V0fSwgY29uZmlnKTtcbiAgICB9XG5cbiAgICBwcmVjZWRlbmNlVHJhbnNpdGlvbihjb25maWcsIHB0LCBjb2xsZWN0UHJlZGljYXRlcywgaW5Db250ZXh0LCBmdWxsQ3R4KSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBSRUQgKGNvbGxlY3RQcmVkaWNhdGVzPVwiICsgY29sbGVjdFByZWRpY2F0ZXMgKyBcIikgXCIgK1xuICAgICAgICAgICAgICAgICAgICBwdC5wcmVjZWRlbmNlICsgXCI+PV9wLCBjdHggZGVwZW5kZW50PXRydWVcIik7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJzZXIhPT1udWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb250ZXh0IHN1cnJvdW5kaW5nIHByZWQgaXMgXCIgKyBVdGlscy5hcnJheVRvU3RyaW5nKHRoaXMucGFyc2VyLmdldFJ1bGVJbnZvY2F0aW9uU3RhY2soKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbGxlY3RQcmVkaWNhdGVzICYmIGluQ29udGV4dCkge1xuICAgICAgICAgICAgaWYgKGZ1bGxDdHgpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBmdWxsIGNvbnRleHQgbW9kZSwgd2UgY2FuIGV2YWx1YXRlIHByZWRpY2F0ZXMgb24tdGhlLWZseVxuICAgICAgICAgICAgICAgIC8vIGR1cmluZyBjbG9zdXJlLCB3aGljaCBkcmFtYXRpY2FsbHkgcmVkdWNlcyB0aGUgc2l6ZSBvZlxuICAgICAgICAgICAgICAgIC8vIHRoZSBjb25maWcgc2V0cy4gSXQgYWxzbyBvYnZpYXRlcyB0aGUgbmVlZCB0byB0ZXN0IHByZWRpY2F0ZXNcbiAgICAgICAgICAgICAgICAvLyBsYXRlciBkdXJpbmcgY29uZmxpY3QgcmVzb2x1dGlvbi5cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSB0aGlzLl9pbnB1dC5pbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dC5zZWVrKHRoaXMuX3N0YXJ0SW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZWRTdWNjZWVkcyA9IHB0LmdldFByZWRpY2F0ZSgpLmV2YWx1YXRlKHRoaXMucGFyc2VyLCB0aGlzLl9vdXRlckNvbnRleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0LnNlZWsoY3VycmVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAocHJlZFN1Y2NlZWRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBuZXcgQVROQ29uZmlnKHtzdGF0ZTpwdC50YXJnZXR9LCBjb25maWcpOyAvLyBubyBwcmVkIGNvbnRleHRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1NlbUN0eCA9IFNlbWFudGljQ29udGV4dC5hbmRDb250ZXh0KGNvbmZpZy5zZW1hbnRpY0NvbnRleHQsIHB0LmdldFByZWRpY2F0ZSgpKTtcbiAgICAgICAgICAgICAgICBjID0gbmV3IEFUTkNvbmZpZyh7c3RhdGU6cHQudGFyZ2V0LCBzZW1hbnRpY0NvbnRleHQ6bmV3U2VtQ3R4fSwgY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMgPSBuZXcgQVROQ29uZmlnKHtzdGF0ZTpwdC50YXJnZXR9LCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbmZpZyBmcm9tIHByZWQgdHJhbnNpdGlvbj1cIiArIGMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIHByZWRUcmFuc2l0aW9uKGNvbmZpZywgcHQsIGNvbGxlY3RQcmVkaWNhdGVzLCBpbkNvbnRleHQsIGZ1bGxDdHgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUFJFRCAoY29sbGVjdFByZWRpY2F0ZXM9XCIgKyBjb2xsZWN0UHJlZGljYXRlcyArIFwiKSBcIiArIHB0LnJ1bGVJbmRleCArXG4gICAgICAgICAgICAgICAgICAgIFwiOlwiICsgcHQucHJlZEluZGV4ICsgXCIsIGN0eCBkZXBlbmRlbnQ9XCIgKyBwdC5pc0N0eERlcGVuZGVudCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJzZXIhPT1udWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb250ZXh0IHN1cnJvdW5kaW5nIHByZWQgaXMgXCIgKyBVdGlscy5hcnJheVRvU3RyaW5nKHRoaXMucGFyc2VyLmdldFJ1bGVJbnZvY2F0aW9uU3RhY2soKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbGxlY3RQcmVkaWNhdGVzICYmICgocHQuaXNDdHhEZXBlbmRlbnQgJiYgaW5Db250ZXh0KSB8fCAhIHB0LmlzQ3R4RGVwZW5kZW50KSkge1xuICAgICAgICAgICAgaWYgKGZ1bGxDdHgpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBmdWxsIGNvbnRleHQgbW9kZSwgd2UgY2FuIGV2YWx1YXRlIHByZWRpY2F0ZXMgb24tdGhlLWZseVxuICAgICAgICAgICAgICAgIC8vIGR1cmluZyBjbG9zdXJlLCB3aGljaCBkcmFtYXRpY2FsbHkgcmVkdWNlcyB0aGUgc2l6ZSBvZlxuICAgICAgICAgICAgICAgIC8vIHRoZSBjb25maWcgc2V0cy4gSXQgYWxzbyBvYnZpYXRlcyB0aGUgbmVlZCB0byB0ZXN0IHByZWRpY2F0ZXNcbiAgICAgICAgICAgICAgICAvLyBsYXRlciBkdXJpbmcgY29uZmxpY3QgcmVzb2x1dGlvbi5cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSB0aGlzLl9pbnB1dC5pbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dC5zZWVrKHRoaXMuX3N0YXJ0SW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZWRTdWNjZWVkcyA9IHB0LmdldFByZWRpY2F0ZSgpLmV2YWx1YXRlKHRoaXMucGFyc2VyLCB0aGlzLl9vdXRlckNvbnRleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0LnNlZWsoY3VycmVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAocHJlZFN1Y2NlZWRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBuZXcgQVROQ29uZmlnKHtzdGF0ZTpwdC50YXJnZXR9LCBjb25maWcpOyAvLyBubyBwcmVkIGNvbnRleHRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1NlbUN0eCA9IFNlbWFudGljQ29udGV4dC5hbmRDb250ZXh0KGNvbmZpZy5zZW1hbnRpY0NvbnRleHQsIHB0LmdldFByZWRpY2F0ZSgpKTtcbiAgICAgICAgICAgICAgICBjID0gbmV3IEFUTkNvbmZpZyh7c3RhdGU6cHQudGFyZ2V0LCBzZW1hbnRpY0NvbnRleHQ6bmV3U2VtQ3R4fSwgY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMgPSBuZXcgQVROQ29uZmlnKHtzdGF0ZTpwdC50YXJnZXR9LCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbmZpZyBmcm9tIHByZWQgdHJhbnNpdGlvbj1cIiArIGMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIHJ1bGVUcmFuc2l0aW9uKGNvbmZpZywgdCkge1xuICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDQUxMIHJ1bGUgXCIgKyB0aGlzLmdldFJ1bGVOYW1lKHQudGFyZ2V0LnJ1bGVJbmRleCkgKyBcIiwgY3R4PVwiICsgY29uZmlnLmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJldHVyblN0YXRlID0gdC5mb2xsb3dTdGF0ZTtcbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IFNpbmdsZXRvblByZWRpY3Rpb25Db250ZXh0LmNyZWF0ZShjb25maWcuY29udGV4dCwgcmV0dXJuU3RhdGUuc3RhdGVOdW1iZXIpO1xuICAgICAgICByZXR1cm4gbmV3IEFUTkNvbmZpZyh7c3RhdGU6dC50YXJnZXQsIGNvbnRleHQ6bmV3Q29udGV4dH0sIGNvbmZpZyApO1xuICAgIH1cblxuICAgIGdldENvbmZsaWN0aW5nQWx0cyhjb25maWdzKSB7XG4gICAgICAgIGNvbnN0IGFsdHNldHMgPSBQcmVkaWN0aW9uTW9kZS5nZXRDb25mbGljdGluZ0FsdFN1YnNldHMoY29uZmlncyk7XG4gICAgICAgIHJldHVybiBQcmVkaWN0aW9uTW9kZS5nZXRBbHRzKGFsdHNldHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNhbSBwb2ludGVkIG91dCBhIHByb2JsZW0gd2l0aCB0aGUgcHJldmlvdXMgZGVmaW5pdGlvbiwgdjMsIG9mXG4gICAgICogYW1iaWd1b3VzIHN0YXRlcy4gSWYgd2UgaGF2ZSBhbm90aGVyIHN0YXRlIGFzc29jaWF0ZWQgd2l0aCBjb25mbGljdGluZ1xuICAgICAqIGFsdGVybmF0aXZlcywgd2Ugc2hvdWxkIGtlZXAgZ29pbmcuIEZvciBleGFtcGxlLCB0aGUgZm9sbG93aW5nIGdyYW1tYXJcbiAgICAgKlxuICAgICAqIHMgOiAoSUQgfCBJRCBJRD8pICc7JyA7XG4gICAgICpcbiAgICAgKiBXaGVuIHRoZSBBVE4gc2ltdWxhdGlvbiByZWFjaGVzIHRoZSBzdGF0ZSBiZWZvcmUgJzsnLCBpdCBoYXMgYSBERkFcbiAgICAgKiBzdGF0ZSB0aGF0IGxvb2tzIGxpa2U6IFsxMnwxfFtdLCA2fDJ8W10sIDEyfDJ8W11dLiBOYXR1cmFsbHlcbiAgICAgKiAxMnwxfFtdIGFuZCAxMnwyfFtdIGNvbmZsaWN0LCBidXQgd2UgY2Fubm90IHN0b3AgcHJvY2Vzc2luZyB0aGlzIG5vZGVcbiAgICAgKiBiZWNhdXNlIGFsdGVybmF0aXZlIHRvIGhhcyBhbm90aGVyIHdheSB0byBjb250aW51ZSwgdmlhIFs2fDJ8W11dLlxuICAgICAqIFRoZSBrZXkgaXMgdGhhdCB3ZSBoYXZlIGEgc2luZ2xlIHN0YXRlIHRoYXQgaGFzIGNvbmZpZydzIG9ubHkgYXNzb2NpYXRlZFxuICAgICAqIHdpdGggYSBzaW5nbGUgYWx0ZXJuYXRpdmUsIDIsIGFuZCBjcnVjaWFsbHkgdGhlIHN0YXRlIHRyYW5zaXRpb25zXG4gICAgICogYW1vbmcgdGhlIGNvbmZpZ3VyYXRpb25zIGFyZSBhbGwgbm9uLWVwc2lsb24gdHJhbnNpdGlvbnMuIFRoYXQgbWVhbnNcbiAgICAgKiB3ZSBkb24ndCBjb25zaWRlciBhbnkgY29uZmxpY3RzIHRoYXQgaW5jbHVkZSBhbHRlcm5hdGl2ZSAyLiBTbywgd2VcbiAgICAgKiBpZ25vcmUgdGhlIGNvbmZsaWN0IGJldHdlZW4gYWx0cyAxIGFuZCAyLiBXZSBpZ25vcmUgYSBzZXQgb2ZcbiAgICAgKiBjb25mbGljdGluZyBhbHRzIHdoZW4gdGhlcmUgaXMgYW4gaW50ZXJzZWN0aW9uIHdpdGggYW4gYWx0ZXJuYXRpdmVcbiAgICAgKiBhc3NvY2lhdGVkIHdpdGggYSBzaW5nbGUgYWx0IHN0YXRlIGluIHRoZSBzdGF0ZSZyYXJyO2NvbmZpZy1saXN0IG1hcC5cbiAgICAgKlxuICAgICAqIEl0J3MgYWxzbyB0aGUgY2FzZSB0aGF0IHdlIG1pZ2h0IGhhdmUgdHdvIGNvbmZsaWN0aW5nIGNvbmZpZ3VyYXRpb25zIGJ1dFxuICAgICAqIGFsc28gYSAzcmQgbm9uY29uZmxpY3RpbmcgY29uZmlndXJhdGlvbiBmb3IgYSBkaWZmZXJlbnQgYWx0ZXJuYXRpdmU6XG4gICAgICogWzF8MXxbXSwgMXwyfFtdLCA4fDN8W11dLiBUaGlzIGNhbiBjb21lIGFib3V0IGZyb20gZ3JhbW1hcjpcbiAgICAgKlxuICAgICAqIGEgOiBBIHwgQSB8IEEgQiA7XG4gICAgICpcbiAgICAgKiBBZnRlciBtYXRjaGluZyBpbnB1dCBBLCB3ZSByZWFjaCB0aGUgc3RvcCBzdGF0ZSBmb3IgcnVsZSBBLCBzdGF0ZSAxLlxuICAgICAqIFN0YXRlIDggaXMgdGhlIHN0YXRlIHJpZ2h0IGJlZm9yZSBCLiBDbGVhcmx5IGFsdGVybmF0aXZlcyAxIGFuZCAyXG4gICAgICogY29uZmxpY3QgYW5kIG5vIGFtb3VudCBvZiBmdXJ0aGVyIGxvb2thaGVhZCB3aWxsIHNlcGFyYXRlIHRoZSB0d28uXG4gICAgICogSG93ZXZlciwgYWx0ZXJuYXRpdmUgMyB3aWxsIGJlIGFibGUgdG8gY29udGludWUgYW5kIHNvIHdlIGRvIG5vdFxuICAgICAqIHN0b3Agd29ya2luZyBvbiB0aGlzIHN0YXRlLiBJbiB0aGUgcHJldmlvdXMgZXhhbXBsZSwgd2UncmUgY29uY2VybmVkXG4gICAgICogd2l0aCBzdGF0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb25mbGljdGluZyBhbHRlcm5hdGl2ZXMuIEhlcmUgYWx0XG4gICAgICogMyBpcyBub3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb25mbGljdGluZyBjb25maWdzLCBidXQgc2luY2Ugd2UgY2FuIGNvbnRpbnVlXG4gICAgICogbG9va2luZyBmb3IgaW5wdXQgcmVhc29uYWJseSwgSSBkb24ndCBkZWNsYXJlIHRoZSBzdGF0ZSBkb25lLiBXZVxuICAgICAqIGlnbm9yZSBhIHNldCBvZiBjb25mbGljdGluZyBhbHRzIHdoZW4gd2UgaGF2ZSBhbiBhbHRlcm5hdGl2ZVxuICAgICAqIHRoYXQgd2Ugc3RpbGwgbmVlZCB0byBwdXJzdWVcbiAgICAgKi9cbiAgICBnZXRDb25mbGljdGluZ0FsdHNPclVuaXF1ZUFsdChjb25maWdzKSB7XG4gICAgICAgIGxldCBjb25mbGljdGluZ0FsdHMgPSBudWxsO1xuICAgICAgICBpZiAoY29uZmlncy51bmlxdWVBbHQhPT0gQVROLklOVkFMSURfQUxUX05VTUJFUikge1xuICAgICAgICAgICAgY29uZmxpY3RpbmdBbHRzID0gbmV3IEJpdFNldCgpO1xuICAgICAgICAgICAgY29uZmxpY3RpbmdBbHRzLmFkZChjb25maWdzLnVuaXF1ZUFsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25mbGljdGluZ0FsdHMgPSBjb25maWdzLmNvbmZsaWN0aW5nQWx0cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmxpY3RpbmdBbHRzO1xuICAgIH1cblxuICAgIGdldFRva2VuTmFtZSh0KSB7XG4gICAgICAgIGlmICh0PT09VG9rZW4uRU9GKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJFT0ZcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiggdGhpcy5wYXJzZXIhPT1udWxsICYmIHRoaXMucGFyc2VyLmxpdGVyYWxOYW1lcyE9PW51bGwpIHtcbiAgICAgICAgICAgIGlmICh0ID49IHRoaXMucGFyc2VyLmxpdGVyYWxOYW1lcy5sZW5ndGggJiYgdCA+PSB0aGlzLnBhcnNlci5zeW1ib2xpY05hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXCIgKyB0ICsgXCIgdHR5cGUgb3V0IG9mIHJhbmdlOiBcIiArIHRoaXMucGFyc2VyLmxpdGVyYWxOYW1lcyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJcIiArIHRoaXMucGFyc2VyLmdldElucHV0U3RyZWFtKCkuZ2V0VG9rZW5zKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZXIubGl0ZXJhbE5hbWVzW3RdIHx8IHRoaXMucGFyc2VyLnN5bWJvbGljTmFtZXNbdF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgKyBcIjxcIiArIHQgKyBcIj5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIiArIHQ7XG4gICAgfVxuXG4gICAgZ2V0TG9va2FoZWFkTmFtZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUb2tlbk5hbWUoaW5wdXQuTEEoMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGRlYnVnZ2luZyBpbiBhZGFwdGl2ZVByZWRpY3QgYXJvdW5kIGV4ZWNBVE4gYnV0IEkgY3V0XG4gICAgICogaXQgb3V0IGZvciBjbGFyaXR5IG5vdyB0aGF0IGFsZy4gd29ya3Mgd2VsbC4gV2UgY2FuIGxlYXZlIHRoaXNcbiAgICAgKiBcImRlYWRcIiBjb2RlIGZvciBhIGJpdFxuICAgICAqL1xuICAgIGR1bXBEZWFkRW5kQ29uZmlncyhudmFlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGVhZCBlbmQgY29uZmlnczogXCIpO1xuICAgICAgICBjb25zdCBkZWNzID0gbnZhZS5nZXREZWFkRW5kQ29uZmlncygpO1xuICAgICAgICBmb3IobGV0IGk9MDsgaTxkZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gZGVjc1tpXTtcbiAgICAgICAgICAgIGxldCB0cmFucyA9IFwibm8gZWRnZXNcIjtcbiAgICAgICAgICAgIGlmIChjLnN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aD4wKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGMuc3RhdGUudHJhbnNpdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBBdG9tVHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0cmFucyA9IFwiQXRvbSBcIisgdGhpcy5nZXRUb2tlbk5hbWUodC5sYWJlbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0IGluc3RhbmNlb2YgU2V0VHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZWcgPSAodCBpbnN0YW5jZW9mIE5vdFNldFRyYW5zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0cmFucyA9IChuZWcgPyBcIn5cIiA6IFwiXCIpICsgXCJTZXQgXCIgKyB0LnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGMudG9TdHJpbmcodGhpcy5wYXJzZXIsIHRydWUpICsgXCI6XCIgKyB0cmFucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBub1ZpYWJsZUFsdChpbnB1dCwgb3V0ZXJDb250ZXh0LCBjb25maWdzLCBzdGFydEluZGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9WaWFibGVBbHRFeGNlcHRpb24odGhpcy5wYXJzZXIsIGlucHV0LCBpbnB1dC5nZXQoc3RhcnRJbmRleCksIGlucHV0LkxUKDEpLCBjb25maWdzLCBvdXRlckNvbnRleHQpO1xuICAgIH1cblxuICAgIGdldFVuaXF1ZUFsdChjb25maWdzKSB7XG4gICAgICAgIGxldCBhbHQgPSBBVE4uSU5WQUxJRF9BTFRfTlVNQkVSO1xuICAgICAgICBmb3IobGV0IGk9MDtpPGNvbmZpZ3MuaXRlbXMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgY29uc3QgYyA9IGNvbmZpZ3MuaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoYWx0ID09PSBBVE4uSU5WQUxJRF9BTFRfTlVNQkVSKSB7XG4gICAgICAgICAgICAgICAgYWx0ID0gYy5hbHQgLy8gZm91bmQgZmlyc3QgYWx0XG4gICAgICAgICAgICB9IGVsc2UgaWYoIGMuYWx0IT09YWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFUTi5JTlZBTElEX0FMVF9OVU1CRVI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZWRnZSB0byB0aGUgREZBLCBpZiBwb3NzaWJsZS4gVGhpcyBtZXRob2QgY2FsbHNcbiAgICAgKiB7QGxpbmsgLy9hZGRERkFTdGF0ZX0gdG8gZW5zdXJlIHRoZSB7QGNvZGUgdG99IHN0YXRlIGlzIHByZXNlbnQgaW4gdGhlXG4gICAgICogREZBLiBJZiB7QGNvZGUgZnJvbX0gaXMge0Bjb2RlIG51bGx9LCBvciBpZiB7QGNvZGUgdH0gaXMgb3V0c2lkZSB0aGVcbiAgICAgKiByYW5nZSBvZiBlZGdlcyB0aGF0IGNhbiBiZSByZXByZXNlbnRlZCBpbiB0aGUgREZBIHRhYmxlcywgdGhpcyBtZXRob2RcbiAgICAgKiByZXR1cm5zIHdpdGhvdXQgYWRkaW5nIHRoZSBlZGdlIHRvIHRoZSBERkEuXG4gICAgICpcbiAgICAgKiA8cD5JZiB7QGNvZGUgdG99IGlzIHtAY29kZSBudWxsfSwgdGhpcyBtZXRob2QgcmV0dXJucyB7QGNvZGUgbnVsbH0uXG4gICAgICogT3RoZXJ3aXNlLCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSB7QGxpbmsgREZBU3RhdGV9IHJldHVybmVkIGJ5IGNhbGxpbmdcbiAgICAgKiB7QGxpbmsgLy9hZGRERkFTdGF0ZX0gZm9yIHRoZSB7QGNvZGUgdG99IHN0YXRlLjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZmEgVGhlIERGQVxuICAgICAqIEBwYXJhbSBmcm9tXyBUaGUgc291cmNlIHN0YXRlIGZvciB0aGUgZWRnZVxuICAgICAqIEBwYXJhbSB0IFRoZSBpbnB1dCBzeW1ib2xcbiAgICAgKiBAcGFyYW0gdG8gVGhlIHRhcmdldCBzdGF0ZSBmb3IgdGhlIGVkZ2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4gSWYge0Bjb2RlIHRvfSBpcyB7QGNvZGUgbnVsbH0sIHRoaXMgbWV0aG9kIHJldHVybnMge0Bjb2RlIG51bGx9O1xuICAgICAqIG90aGVyd2lzZSB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSByZXN1bHQgb2YgY2FsbGluZyB7QGxpbmsgLy9hZGRERkFTdGF0ZX1cbiAgICAgKiBvbiB7QGNvZGUgdG99XG4gICAgICovXG4gICAgYWRkREZBRWRnZShkZmEsIGZyb21fLCB0LCB0bykge1xuICAgICAgICBpZiggdGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJFREdFIFwiICsgZnJvbV8gKyBcIiAtPiBcIiArIHRvICsgXCIgdXBvbiBcIiArIHRoaXMuZ2V0VG9rZW5OYW1lKHQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG89PT1udWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0byA9IHRoaXMuYWRkREZBU3RhdGUoZGZhLCB0byk7IC8vIHVzZWQgZXhpc3RpbmcgaWYgcG9zc2libGUgbm90IGluY29taW5nXG4gICAgICAgIGlmIChmcm9tXz09PW51bGwgfHwgdCA8IC0xIHx8IHQgPiB0aGlzLmF0bi5tYXhUb2tlblR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbV8uZWRnZXM9PT1udWxsKSB7XG4gICAgICAgICAgICBmcm9tXy5lZGdlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZyb21fLmVkZ2VzW3QrMV0gPSB0bzsgLy8gY29ubmVjdFxuXG4gICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zdCBsaXRlcmFsTmFtZXMgPSB0aGlzLnBhcnNlcj09PW51bGwgPyBudWxsIDogdGhpcy5wYXJzZXIubGl0ZXJhbE5hbWVzO1xuICAgICAgICAgICAgY29uc3Qgc3ltYm9saWNOYW1lcyA9IHRoaXMucGFyc2VyPT09bnVsbCA/IG51bGwgOiB0aGlzLnBhcnNlci5zeW1ib2xpY05hbWVzO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJERkE9XFxuXCIgKyBkZmEudG9TdHJpbmcobGl0ZXJhbE5hbWVzLCBzeW1ib2xpY05hbWVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBzdGF0ZSB7QGNvZGUgRH0gdG8gdGhlIERGQSBpZiBpdCBpcyBub3QgYWxyZWFkeSBwcmVzZW50LCBhbmQgcmV0dXJuXG4gICAgICogdGhlIGFjdHVhbCBpbnN0YW5jZSBzdG9yZWQgaW4gdGhlIERGQS4gSWYgYSBzdGF0ZSBlcXVpdmFsZW50IHRvIHtAY29kZSBEfVxuICAgICAqIGlzIGFscmVhZHkgaW4gdGhlIERGQSwgdGhlIGV4aXN0aW5nIHN0YXRlIGlzIHJldHVybmVkLiBPdGhlcndpc2UgdGhpc1xuICAgICAqIG1ldGhvZCByZXR1cm5zIHtAY29kZSBEfSBhZnRlciBhZGRpbmcgaXQgdG8gdGhlIERGQS5cbiAgICAgKlxuICAgICAqIDxwPklmIHtAY29kZSBEfSBpcyB7QGxpbmsgLy9FUlJPUn0sIHRoaXMgbWV0aG9kIHJldHVybnMge0BsaW5rIC8vRVJST1J9IGFuZFxuICAgICAqIGRvZXMgbm90IGNoYW5nZSB0aGUgREZBLjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZmEgVGhlIGRmYVxuICAgICAqIEBwYXJhbSBEIFRoZSBERkEgc3RhdGUgdG8gYWRkXG4gICAgICogQHJldHVybiBUaGUgc3RhdGUgc3RvcmVkIGluIHRoZSBERkEuIFRoaXMgd2lsbCBiZSBlaXRoZXIgdGhlIGV4aXN0aW5nXG4gICAgICogc3RhdGUgaWYge0Bjb2RlIER9IGlzIGFscmVhZHkgaW4gdGhlIERGQSwgb3Ige0Bjb2RlIER9IGl0c2VsZiBpZiB0aGVcbiAgICAgKiBzdGF0ZSB3YXMgbm90IGFscmVhZHkgcHJlc2VudFxuICAgICAqL1xuICAgIGFkZERGQVN0YXRlKGRmYSwgRCkge1xuICAgICAgICBpZiAoRCA9PT0gQVROU2ltdWxhdG9yLkVSUk9SKSB7XG4gICAgICAgICAgICByZXR1cm4gRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleGlzdGluZyA9IGRmYS5zdGF0ZXMuZ2V0KEQpO1xuICAgICAgICBpZihleGlzdGluZyE9PW51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfVxuICAgICAgICBELnN0YXRlTnVtYmVyID0gZGZhLnN0YXRlcy5sZW5ndGg7XG4gICAgICAgIGlmICghIEQuY29uZmlncy5yZWFkT25seSkge1xuICAgICAgICAgICAgRC5jb25maWdzLm9wdGltaXplQ29uZmlncyh0aGlzKTtcbiAgICAgICAgICAgIEQuY29uZmlncy5zZXRSZWFkb25seSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBkZmEuc3RhdGVzLmFkZChEKTtcbiAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWRkaW5nIG5ldyBERkEgc3RhdGU6IFwiICsgRCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEQ7XG4gICAgfVxuXG4gICAgcmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0KGRmYSwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzLCBzdGFydEluZGV4LCBzdG9wSW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVidWcgfHwgdGhpcy5yZXRyeV9kZWJ1Zykge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBuZXcgSW50ZXJ2YWwoc3RhcnRJbmRleCwgc3RvcEluZGV4ICsgMSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dCBkZWNpc2lvbj1cIiArIGRmYS5kZWNpc2lvbiArIFwiOlwiICsgY29uZmlncyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIsIGlucHV0PVwiICsgdGhpcy5wYXJzZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KGludGVydmFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGFyc2VyIT09bnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZXIuZ2V0RXJyb3JMaXN0ZW5lckRpc3BhdGNoKCkucmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0KHRoaXMucGFyc2VyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlcG9ydENvbnRleHRTZW5zaXRpdml0eShkZmEsIHByZWRpY3Rpb24sIGNvbmZpZ3MsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCkge1xuICAgICAgICBpZiAodGhpcy5kZWJ1ZyB8fCB0aGlzLnJldHJ5X2RlYnVnKSB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IG5ldyBJbnRlcnZhbChzdGFydEluZGV4LCBzdG9wSW5kZXggKyAxKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5IGRlY2lzaW9uPVwiICsgZGZhLmRlY2lzaW9uICsgXCI6XCIgKyBjb25maWdzICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiwgaW5wdXQ9XCIgKyB0aGlzLnBhcnNlci5nZXRUb2tlblN0cmVhbSgpLmdldFRleHQoaW50ZXJ2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wYXJzZXIhPT1udWxsKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlci5nZXRFcnJvckxpc3RlbmVyRGlzcGF0Y2goKS5yZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHkodGhpcy5wYXJzZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIGNvbnRleHQgc2Vuc2l0aXZlIHBhcnNpbmcsIHdlIGtub3cgaXQncyBhbWJpZ3VpdHkgbm90IGNvbmZsaWN0Ly9cbiAgICByZXBvcnRBbWJpZ3VpdHkoZGZhLCBELCBzdGFydEluZGV4LCBzdG9wSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MgKSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnIHx8IHRoaXMucmV0cnlfZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnN0IGludGVydmFsID0gbmV3IEludGVydmFsKHN0YXJ0SW5kZXgsIHN0b3BJbmRleCArIDEpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXBvcnRBbWJpZ3VpdHkgXCIgKyBhbWJpZ0FsdHMgKyBcIjpcIiArIGNvbmZpZ3MgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLCBpbnB1dD1cIiArIHRoaXMucGFyc2VyLmdldFRva2VuU3RyZWFtKCkuZ2V0VGV4dChpbnRlcnZhbCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcnNlciE9PW51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucGFyc2VyLmdldEVycm9yTGlzdGVuZXJEaXNwYXRjaCgpLnJlcG9ydEFtYmlndWl0eSh0aGlzLnBhcnNlciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnNlckFUTlNpbXVsYXRvcjtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge01hcCwgQml0U2V0LCBBbHREaWN0LCBoYXNoU3R1ZmZ9ID0gcmVxdWlyZSgnLi8uLi9VdGlscycpO1xuY29uc3QgQVROID0gcmVxdWlyZSgnLi9BVE4nKTtcbmNvbnN0IHtSdWxlU3RvcFN0YXRlfSA9IHJlcXVpcmUoJy4vQVROU3RhdGUnKTtcbmNvbnN0IHtBVE5Db25maWdTZXR9ID0gcmVxdWlyZSgnLi9BVE5Db25maWdTZXQnKTtcbmNvbnN0IHtBVE5Db25maWd9ID0gcmVxdWlyZSgnLi9BVE5Db25maWcnKTtcbmNvbnN0IHtTZW1hbnRpY0NvbnRleHR9ID0gcmVxdWlyZSgnLi9TZW1hbnRpY0NvbnRleHQnKTtcblxuLyoqXG4gKiBUaGlzIGVudW1lcmF0aW9uIGRlZmluZXMgdGhlIHByZWRpY3Rpb24gbW9kZXMgYXZhaWxhYmxlIGluIEFOVExSIDQgYWxvbmcgd2l0aFxuICogdXRpbGl0eSBtZXRob2RzIGZvciBhbmFseXppbmcgY29uZmlndXJhdGlvbiBzZXRzIGZvciBjb25mbGljdHMgYW5kL29yXG4gKiBhbWJpZ3VpdGllcy5cbiAqL1xuY29uc3QgUHJlZGljdGlvbk1vZGUgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIFNMTCgqKSBwcmVkaWN0aW9uIG1vZGUuIFRoaXMgcHJlZGljdGlvbiBtb2RlIGlnbm9yZXMgdGhlIGN1cnJlbnRcbiAgICAgKiBwYXJzZXIgY29udGV4dCB3aGVuIG1ha2luZyBwcmVkaWN0aW9ucy4gVGhpcyBpcyB0aGUgZmFzdGVzdCBwcmVkaWN0aW9uXG4gICAgICogbW9kZSwgYW5kIHByb3ZpZGVzIGNvcnJlY3QgcmVzdWx0cyBmb3IgbWFueSBncmFtbWFycy4gVGhpcyBwcmVkaWN0aW9uXG4gICAgICogbW9kZSBpcyBtb3JlIHBvd2VyZnVsIHRoYW4gdGhlIHByZWRpY3Rpb24gbW9kZSBwcm92aWRlZCBieSBBTlRMUiAzLCBidXRcbiAgICAgKiBtYXkgcmVzdWx0IGluIHN5bnRheCBlcnJvcnMgZm9yIGdyYW1tYXIgYW5kIGlucHV0IGNvbWJpbmF0aW9ucyB3aGljaCBhcmVcbiAgICAgKiBub3QgU0xMLlxuICAgICAqXG4gICAgICogPHA+XG4gICAgICogV2hlbiB1c2luZyB0aGlzIHByZWRpY3Rpb24gbW9kZSwgdGhlIHBhcnNlciB3aWxsIGVpdGhlciByZXR1cm4gYSBjb3JyZWN0XG4gICAgICogcGFyc2UgdHJlZSAoaS5lLiB0aGUgc2FtZSBwYXJzZSB0cmVlIHRoYXQgd291bGQgYmUgcmV0dXJuZWQgd2l0aCB0aGVcbiAgICAgKiB7QGxpbmsgLy9MTH0gcHJlZGljdGlvbiBtb2RlKSwgb3IgaXQgd2lsbCByZXBvcnQgYSBzeW50YXggZXJyb3IuIElmIGFcbiAgICAgKiBzeW50YXggZXJyb3IgaXMgZW5jb3VudGVyZWQgd2hlbiB1c2luZyB0aGUge0BsaW5rIC8vU0xMfSBwcmVkaWN0aW9uIG1vZGUsXG4gICAgICogaXQgbWF5IGJlIGR1ZSB0byBlaXRoZXIgYW4gYWN0dWFsIHN5bnRheCBlcnJvciBpbiB0aGUgaW5wdXQgb3IgaW5kaWNhdGVcbiAgICAgKiB0aGF0IHRoZSBwYXJ0aWN1bGFyIGNvbWJpbmF0aW9uIG9mIGdyYW1tYXIgYW5kIGlucHV0IHJlcXVpcmVzIHRoZSBtb3JlXG4gICAgICogcG93ZXJmdWwge0BsaW5rIC8vTEx9IHByZWRpY3Rpb24gYWJpbGl0aWVzIHRvIGNvbXBsZXRlIHN1Y2Nlc3NmdWxseS48L3A+XG4gICAgICpcbiAgICAgKiA8cD5cbiAgICAgKiBUaGlzIHByZWRpY3Rpb24gbW9kZSBkb2VzIG5vdCBwcm92aWRlIGFueSBndWFyYW50ZWVzIGZvciBwcmVkaWN0aW9uXG4gICAgICogYmVoYXZpb3IgZm9yIHN5bnRhY3RpY2FsbHktaW5jb3JyZWN0IGlucHV0cy48L3A+XG4gICAgICovXG4gICAgU0xMOiAwLFxuXG4gICAgLyoqXG4gICAgICogVGhlIExMKCopIHByZWRpY3Rpb24gbW9kZS4gVGhpcyBwcmVkaWN0aW9uIG1vZGUgYWxsb3dzIHRoZSBjdXJyZW50IHBhcnNlclxuICAgICAqIGNvbnRleHQgdG8gYmUgdXNlZCBmb3IgcmVzb2x2aW5nIFNMTCBjb25mbGljdHMgdGhhdCBvY2N1ciBkdXJpbmdcbiAgICAgKiBwcmVkaWN0aW9uLiBUaGlzIGlzIHRoZSBmYXN0ZXN0IHByZWRpY3Rpb24gbW9kZSB0aGF0IGd1YXJhbnRlZXMgY29ycmVjdFxuICAgICAqIHBhcnNlIHJlc3VsdHMgZm9yIGFsbCBjb21iaW5hdGlvbnMgb2YgZ3JhbW1hcnMgd2l0aCBzeW50YWN0aWNhbGx5IGNvcnJlY3RcbiAgICAgKiBpbnB1dHMuXG4gICAgICpcbiAgICAgKiA8cD5cbiAgICAgKiBXaGVuIHVzaW5nIHRoaXMgcHJlZGljdGlvbiBtb2RlLCB0aGUgcGFyc2VyIHdpbGwgbWFrZSBjb3JyZWN0IGRlY2lzaW9uc1xuICAgICAqIGZvciBhbGwgc3ludGFjdGljYWxseS1jb3JyZWN0IGdyYW1tYXIgYW5kIGlucHV0IGNvbWJpbmF0aW9ucy4gSG93ZXZlciwgaW5cbiAgICAgKiBjYXNlcyB3aGVyZSB0aGUgZ3JhbW1hciBpcyB0cnVseSBhbWJpZ3VvdXMgdGhpcyBwcmVkaWN0aW9uIG1vZGUgbWlnaHQgbm90XG4gICAgICogcmVwb3J0IGEgcHJlY2lzZSBhbnN3ZXIgZm9yIDxlbT5leGFjdGx5IHdoaWNoPC9lbT4gYWx0ZXJuYXRpdmVzIGFyZVxuICAgICAqIGFtYmlndW91cy48L3A+XG4gICAgICpcbiAgICAgKiA8cD5cbiAgICAgKiBUaGlzIHByZWRpY3Rpb24gbW9kZSBkb2VzIG5vdCBwcm92aWRlIGFueSBndWFyYW50ZWVzIGZvciBwcmVkaWN0aW9uXG4gICAgICogYmVoYXZpb3IgZm9yIHN5bnRhY3RpY2FsbHktaW5jb3JyZWN0IGlucHV0cy48L3A+XG4gICAgICovXG4gICAgTEw6IDEsXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFRoZSBMTCgqKSBwcmVkaWN0aW9uIG1vZGUgd2l0aCBleGFjdCBhbWJpZ3VpdHkgZGV0ZWN0aW9uLiBJbiBhZGRpdGlvbiB0b1xuICAgICAqIHRoZSBjb3JyZWN0bmVzcyBndWFyYW50ZWVzIHByb3ZpZGVkIGJ5IHRoZSB7QGxpbmsgLy9MTH0gcHJlZGljdGlvbiBtb2RlLFxuICAgICAqIHRoaXMgcHJlZGljdGlvbiBtb2RlIGluc3RydWN0cyB0aGUgcHJlZGljdGlvbiBhbGdvcml0aG0gdG8gZGV0ZXJtaW5lIHRoZVxuICAgICAqIGNvbXBsZXRlIGFuZCBleGFjdCBzZXQgb2YgYW1iaWd1b3VzIGFsdGVybmF0aXZlcyBmb3IgZXZlcnkgYW1iaWd1b3VzXG4gICAgICogZGVjaXNpb24gZW5jb3VudGVyZWQgd2hpbGUgcGFyc2luZy5cbiAgICAgKlxuICAgICAqIDxwPlxuICAgICAqIFRoaXMgcHJlZGljdGlvbiBtb2RlIG1heSBiZSB1c2VkIGZvciBkaWFnbm9zaW5nIGFtYmlndWl0aWVzIGR1cmluZ1xuICAgICAqIGdyYW1tYXIgZGV2ZWxvcG1lbnQuIER1ZSB0byB0aGUgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQgb2YgY2FsY3VsYXRpbmcgc2V0c1xuICAgICAqIG9mIGFtYmlndW91cyBhbHRlcm5hdGl2ZXMsIHRoaXMgcHJlZGljdGlvbiBtb2RlIHNob3VsZCBiZSBhdm9pZGVkIHdoZW5cbiAgICAgKiB0aGUgZXhhY3QgcmVzdWx0cyBhcmUgbm90IG5lY2Vzc2FyeS48L3A+XG4gICAgICpcbiAgICAgKiA8cD5cbiAgICAgKiBUaGlzIHByZWRpY3Rpb24gbW9kZSBkb2VzIG5vdCBwcm92aWRlIGFueSBndWFyYW50ZWVzIGZvciBwcmVkaWN0aW9uXG4gICAgICogYmVoYXZpb3IgZm9yIHN5bnRhY3RpY2FsbHktaW5jb3JyZWN0IGlucHV0cy48L3A+XG4gICAgICovXG4gICAgTExfRVhBQ1RfQU1CSUdfREVURUNUSU9OOiAyLFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDb21wdXRlcyB0aGUgU0xMIHByZWRpY3Rpb24gdGVybWluYXRpb24gY29uZGl0aW9uLlxuICAgICAqXG4gICAgICogPHA+XG4gICAgICogVGhpcyBtZXRob2QgY29tcHV0ZXMgdGhlIFNMTCBwcmVkaWN0aW9uIHRlcm1pbmF0aW9uIGNvbmRpdGlvbiBmb3IgYm90aCBvZlxuICAgICAqIHRoZSBmb2xsb3dpbmcgY2FzZXMuPC9wPlxuICAgICAqXG4gICAgICogPHVsPlxuICAgICAqIDxsaT5UaGUgdXN1YWwgU0xMK0xMIGZhbGxiYWNrIHVwb24gU0xMIGNvbmZsaWN0PC9saT5cbiAgICAgKiA8bGk+UHVyZSBTTEwgd2l0aG91dCBMTCBmYWxsYmFjazwvbGk+XG4gICAgICogPC91bD5cbiAgICAgKlxuICAgICAqIDxwPjxzdHJvbmc+Q09NQklORUQgU0xMK0xMIFBBUlNJTkc8L3N0cm9uZz48L3A+XG4gICAgICpcbiAgICAgKiA8cD5XaGVuIExMLWZhbGxiYWNrIGlzIGVuYWJsZWQgdXBvbiBTTEwgY29uZmxpY3QsIGNvcnJlY3QgcHJlZGljdGlvbnMgYXJlXG4gICAgICogZW5zdXJlZCByZWdhcmRsZXNzIG9mIGhvdyB0aGUgdGVybWluYXRpb24gY29uZGl0aW9uIGlzIGNvbXB1dGVkIGJ5IHRoaXNcbiAgICAgKiBtZXRob2QuIER1ZSB0byB0aGUgc3Vic3RhbnRpYWxseSBoaWdoZXIgY29zdCBvZiBMTCBwcmVkaWN0aW9uLCB0aGVcbiAgICAgKiBwcmVkaWN0aW9uIHNob3VsZCBvbmx5IGZhbGwgYmFjayB0byBMTCB3aGVuIHRoZSBhZGRpdGlvbmFsIGxvb2thaGVhZFxuICAgICAqIGNhbm5vdCBsZWFkIHRvIGEgdW5pcXVlIFNMTCBwcmVkaWN0aW9uLjwvcD5cbiAgICAgKlxuICAgICAqIDxwPkFzc3VtaW5nIGNvbWJpbmVkIFNMTCtMTCBwYXJzaW5nLCBhbiBTTEwgY29uZmlndXJhdGlvbiBzZXQgd2l0aCBvbmx5XG4gICAgICogY29uZmxpY3Rpbmcgc3Vic2V0cyBzaG91bGQgZmFsbCBiYWNrIHRvIGZ1bGwgTEwsIGV2ZW4gaWYgdGhlXG4gICAgICogY29uZmlndXJhdGlvbiBzZXRzIGRvbid0IHJlc29sdmUgdG8gdGhlIHNhbWUgYWx0ZXJuYXRpdmUgKGUuZy5cbiAgICAgKiB7QGNvZGUgezEsMn19IGFuZCB7QGNvZGUgezMsNH19LiBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgbm9uLWNvbmZsaWN0aW5nXG4gICAgICogY29uZmlndXJhdGlvbiwgU0xMIGNvdWxkIGNvbnRpbnVlIHdpdGggdGhlIGhvcGVzIHRoYXQgbW9yZSBsb29rYWhlYWQgd2lsbFxuICAgICAqIHJlc29sdmUgdmlhIG9uZSBvZiB0aG9zZSBub24tY29uZmxpY3RpbmcgY29uZmlndXJhdGlvbnMuPC9wPlxuICAgICAqXG4gICAgICogPHA+SGVyZSdzIHRoZSBwcmVkaWN0aW9uIHRlcm1pbmF0aW9uIHJ1bGUgdGhlbTogU0xMIChmb3IgU0xMK0xMIHBhcnNpbmcpXG4gICAgICogc3RvcHMgd2hlbiBpdCBzZWVzIG9ubHkgY29uZmxpY3RpbmcgY29uZmlndXJhdGlvbiBzdWJzZXRzLiBJbiBjb250cmFzdCxcbiAgICAgKiBmdWxsIExMIGtlZXBzIGdvaW5nIHdoZW4gdGhlcmUgaXMgdW5jZXJ0YWludHkuPC9wPlxuICAgICAqXG4gICAgICogPHA+PHN0cm9uZz5IRVVSSVNUSUM8L3N0cm9uZz48L3A+XG4gICAgICpcbiAgICAgKiA8cD5BcyBhIGhldXJpc3RpYywgd2Ugc3RvcCBwcmVkaWN0aW9uIHdoZW4gd2Ugc2VlIGFueSBjb25mbGljdGluZyBzdWJzZXRcbiAgICAgKiB1bmxlc3Mgd2Ugc2VlIGEgc3RhdGUgdGhhdCBvbmx5IGhhcyBvbmUgYWx0ZXJuYXRpdmUgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICAgICAqIFRoZSBzaW5nbGUtYWx0LXN0YXRlIHRoaW5nIGxldHMgcHJlZGljdGlvbiBjb250aW51ZSB1cG9uIHJ1bGVzIGxpa2VcbiAgICAgKiAob3RoZXJ3aXNlLCBpdCB3b3VsZCBhZG1pdCBkZWZlYXQgdG9vIHNvb24pOjwvcD5cbiAgICAgKlxuICAgICAqIDxwPntAY29kZSBbMTJ8MXxbXSwgNnwyfFtdLCAxMnwyfFtdXS4gcyA6IChJRCB8IElEIElEPykgJzsnIDt9PC9wPlxuICAgICAqXG4gICAgICogPHA+V2hlbiB0aGUgQVROIHNpbXVsYXRpb24gcmVhY2hlcyB0aGUgc3RhdGUgYmVmb3JlIHtAY29kZSAnOyd9LCBpdCBoYXMgYVxuICAgICAqIERGQSBzdGF0ZSB0aGF0IGxvb2tzIGxpa2U6IHtAY29kZSBbMTJ8MXxbXSwgNnwyfFtdLCAxMnwyfFtdXX0uIE5hdHVyYWxseVxuICAgICAqIHtAY29kZSAxMnwxfFtdfSBhbmQge0Bjb2RlIDEyfDJ8W119IGNvbmZsaWN0LCBidXQgd2UgY2Fubm90IHN0b3BcbiAgICAgKiBwcm9jZXNzaW5nIHRoaXMgbm9kZSBiZWNhdXNlIGFsdGVybmF0aXZlIHRvIGhhcyBhbm90aGVyIHdheSB0byBjb250aW51ZSxcbiAgICAgKiB2aWEge0Bjb2RlIFs2fDJ8W11dfS48L3A+XG4gICAgICpcbiAgICAgKiA8cD5JdCBhbHNvIGxldCdzIHVzIGNvbnRpbnVlIGZvciB0aGlzIHJ1bGU6PC9wPlxuICAgICAqXG4gICAgICogPHA+e0Bjb2RlIFsxfDF8W10sIDF8MnxbXSwgOHwzfFtdXSBhIDogQSB8IEEgfCBBIEIgO308L3A+XG4gICAgICpcbiAgICAgKiA8cD5BZnRlciBtYXRjaGluZyBpbnB1dCBBLCB3ZSByZWFjaCB0aGUgc3RvcCBzdGF0ZSBmb3IgcnVsZSBBLCBzdGF0ZSAxLlxuICAgICAqIFN0YXRlIDggaXMgdGhlIHN0YXRlIHJpZ2h0IGJlZm9yZSBCLiBDbGVhcmx5IGFsdGVybmF0aXZlcyAxIGFuZCAyXG4gICAgICogY29uZmxpY3QgYW5kIG5vIGFtb3VudCBvZiBmdXJ0aGVyIGxvb2thaGVhZCB3aWxsIHNlcGFyYXRlIHRoZSB0d28uXG4gICAgICogSG93ZXZlciwgYWx0ZXJuYXRpdmUgMyB3aWxsIGJlIGFibGUgdG8gY29udGludWUgYW5kIHNvIHdlIGRvIG5vdCBzdG9wXG4gICAgICogd29ya2luZyBvbiB0aGlzIHN0YXRlLiBJbiB0aGUgcHJldmlvdXMgZXhhbXBsZSwgd2UncmUgY29uY2VybmVkIHdpdGhcbiAgICAgKiBzdGF0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb25mbGljdGluZyBhbHRlcm5hdGl2ZXMuIEhlcmUgYWx0IDMgaXMgbm90XG4gICAgICogYXNzb2NpYXRlZCB3aXRoIHRoZSBjb25mbGljdGluZyBjb25maWdzLCBidXQgc2luY2Ugd2UgY2FuIGNvbnRpbnVlXG4gICAgICogbG9va2luZyBmb3IgaW5wdXQgcmVhc29uYWJseSwgZG9uJ3QgZGVjbGFyZSB0aGUgc3RhdGUgZG9uZS48L3A+XG4gICAgICpcbiAgICAgKiA8cD48c3Ryb25nPlBVUkUgU0xMIFBBUlNJTkc8L3N0cm9uZz48L3A+XG4gICAgICpcbiAgICAgKiA8cD5UbyBoYW5kbGUgcHVyZSBTTEwgcGFyc2luZywgYWxsIHdlIGhhdmUgdG8gZG8gaXMgbWFrZSBzdXJlIHRoYXQgd2VcbiAgICAgKiBjb21iaW5lIHN0YWNrIGNvbnRleHRzIGZvciBjb25maWd1cmF0aW9ucyB0aGF0IGRpZmZlciBvbmx5IGJ5IHNlbWFudGljXG4gICAgICogcHJlZGljYXRlLiBGcm9tIHRoZXJlLCB3ZSBjYW4gZG8gdGhlIHVzdWFsIFNMTCB0ZXJtaW5hdGlvbiBoZXVyaXN0aWMuPC9wPlxuICAgICAqXG4gICAgICogPHA+PHN0cm9uZz5QUkVESUNBVEVTIElOIFNMTCtMTCBQQVJTSU5HPC9zdHJvbmc+PC9wPlxuICAgICAqXG4gICAgICogPHA+U0xMIGRlY2lzaW9ucyBkb24ndCBldmFsdWF0ZSBwcmVkaWNhdGVzIHVudGlsIGFmdGVyIHRoZXkgcmVhY2ggREZBIHN0b3BcbiAgICAgKiBzdGF0ZXMgYmVjYXVzZSB0aGV5IG5lZWQgdG8gY3JlYXRlIHRoZSBERkEgY2FjaGUgdGhhdCB3b3JrcyBpbiBhbGxcbiAgICAgKiBzZW1hbnRpYyBzaXR1YXRpb25zLiBJbiBjb250cmFzdCwgZnVsbCBMTCBldmFsdWF0ZXMgcHJlZGljYXRlcyBjb2xsZWN0ZWRcbiAgICAgKiBkdXJpbmcgc3RhcnQgc3RhdGUgY29tcHV0YXRpb24gc28gaXQgY2FuIGlnbm9yZSBwcmVkaWNhdGVzIHRoZXJlYWZ0ZXIuXG4gICAgICogVGhpcyBtZWFucyB0aGF0IFNMTCB0ZXJtaW5hdGlvbiBkZXRlY3Rpb24gY2FuIHRvdGFsbHkgaWdub3JlIHNlbWFudGljXG4gICAgICogcHJlZGljYXRlcy48L3A+XG4gICAgICpcbiAgICAgKiA8cD5JbXBsZW1lbnRhdGlvbi13aXNlLCB7QGxpbmsgQVROQ29uZmlnU2V0fSBjb21iaW5lcyBzdGFjayBjb250ZXh0cyBidXQgbm90XG4gICAgICogc2VtYW50aWMgcHJlZGljYXRlIGNvbnRleHRzIHNvIHdlIG1pZ2h0IHNlZSB0d28gY29uZmlndXJhdGlvbnMgbGlrZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcuPC9wPlxuICAgICAqXG4gICAgICogPHA+e0Bjb2RlIChzLCAxLCB4LCB7fSksIChzLCAxLCB4Jywge3B9KX08L3A+XG4gICAgICpcbiAgICAgKiA8cD5CZWZvcmUgdGVzdGluZyB0aGVzZSBjb25maWd1cmF0aW9ucyBhZ2FpbnN0IG90aGVycywgd2UgaGF2ZSB0byBtZXJnZVxuICAgICAqIHtAY29kZSB4fSBhbmQge0Bjb2RlIHgnfSAod2l0aG91dCBtb2RpZnlpbmcgdGhlIGV4aXN0aW5nIGNvbmZpZ3VyYXRpb25zKS5cbiAgICAgKiBGb3IgZXhhbXBsZSwgd2UgdGVzdCB7QGNvZGUgKHgreCcpPT14Jyd9IHdoZW4gbG9va2luZyBmb3IgY29uZmxpY3RzIGluXG4gICAgICogdGhlIGZvbGxvd2luZyBjb25maWd1cmF0aW9ucy48L3A+XG4gICAgICpcbiAgICAgKiA8cD57QGNvZGUgKHMsIDEsIHgsIHt9KSwgKHMsIDEsIHgnLCB7cH0pLCAocywgMiwgeCcnLCB7fSl9PC9wPlxuICAgICAqXG4gICAgICogPHA+SWYgdGhlIGNvbmZpZ3VyYXRpb24gc2V0IGhhcyBwcmVkaWNhdGVzIChhcyBpbmRpY2F0ZWQgYnlcbiAgICAgKiB7QGxpbmsgQVROQ29uZmlnU2V0Ly9oYXNTZW1hbnRpY0NvbnRleHR9KSwgdGhpcyBhbGdvcml0aG0gbWFrZXMgYSBjb3B5IG9mXG4gICAgICogdGhlIGNvbmZpZ3VyYXRpb25zIHRvIHN0cmlwIG91dCBhbGwgb2YgdGhlIHByZWRpY2F0ZXMgc28gdGhhdCBhIHN0YW5kYXJkXG4gICAgICoge0BsaW5rIEFUTkNvbmZpZ1NldH0gd2lsbCBtZXJnZSBldmVyeXRoaW5nIGlnbm9yaW5nIHByZWRpY2F0ZXMuPC9wPlxuICAgICAqL1xuICAgIGhhc1NMTENvbmZsaWN0VGVybWluYXRpbmdQcmVkaWN0aW9uOiBmdW5jdGlvbiggbW9kZSwgY29uZmlncykge1xuICAgICAgICAvLyBDb25maWdzIGluIHJ1bGUgc3RvcCBzdGF0ZXMgaW5kaWNhdGUgcmVhY2hpbmcgdGhlIGVuZCBvZiB0aGUgZGVjaXNpb25cbiAgICAgICAgLy8gcnVsZSAobG9jYWwgY29udGV4dCkgb3IgZW5kIG9mIHN0YXJ0IHJ1bGUgKGZ1bGwgY29udGV4dCkuIElmIGFsbFxuICAgICAgICAvLyBjb25maWdzIG1lZXQgdGhpcyBjb25kaXRpb24sIHRoZW4gbm9uZSBvZiB0aGUgY29uZmlndXJhdGlvbnMgaXMgYWJsZVxuICAgICAgICAvLyB0byBtYXRjaCBhZGRpdGlvbmFsIGlucHV0IHNvIHdlIHRlcm1pbmF0ZSBwcmVkaWN0aW9uLlxuICAgICAgICAvL1xuICAgICAgICBpZiAoUHJlZGljdGlvbk1vZGUuYWxsQ29uZmlnc0luUnVsZVN0b3BTdGF0ZXMoY29uZmlncykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIHB1cmUgU0xMIG1vZGUgcGFyc2luZ1xuICAgICAgICBpZiAobW9kZSA9PT0gUHJlZGljdGlvbk1vZGUuU0xMKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBib3RoZXIgd2l0aCBjb21iaW5pbmcgY29uZmlncyBmcm9tIGRpZmZlcmVudCBzZW1hbnRpY1xuICAgICAgICAgICAgLy8gY29udGV4dHMgaWYgd2UgY2FuIGZhaWwgb3ZlciB0byBmdWxsIExMOyBjb3N0cyBtb3JlIHRpbWVcbiAgICAgICAgICAgIC8vIHNpbmNlIHdlJ2xsIG9mdGVuIGZhaWwgb3ZlciBhbnl3YXkuXG4gICAgICAgICAgICBpZiAoY29uZmlncy5oYXNTZW1hbnRpY0NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAvLyBkdXAgY29uZmlncywgdG9zc2luZyBvdXQgc2VtYW50aWMgcHJlZGljYXRlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGR1cCA9IG5ldyBBVE5Db25maWdTZXQoKTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDtpPGNvbmZpZ3MuaXRlbXMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYyA9IGNvbmZpZ3MuaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGMgPSBuZXcgQVROQ29uZmlnKHtzZW1hbnRpY0NvbnRleHQ6U2VtYW50aWNDb250ZXh0Lk5PTkV9LCBjKTtcbiAgICAgICAgICAgICAgICAgICAgZHVwLmFkZChjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlncyA9IGR1cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5vdyB3ZSBoYXZlIGNvbWJpbmVkIGNvbnRleHRzIGZvciBjb25maWdzIHdpdGggZGlzc2ltaWxhciBwcmVkc1xuICAgICAgICB9XG4gICAgICAgIC8vIHB1cmUgU0xMIG9yIGNvbWJpbmVkIFNMTCtMTCBtb2RlIHBhcnNpbmdcbiAgICAgICAgY29uc3QgYWx0c2V0cyA9IFByZWRpY3Rpb25Nb2RlLmdldENvbmZsaWN0aW5nQWx0U3Vic2V0cyhjb25maWdzKTtcbiAgICAgICAgcmV0dXJuIFByZWRpY3Rpb25Nb2RlLmhhc0NvbmZsaWN0aW5nQWx0U2V0KGFsdHNldHMpICYmICFQcmVkaWN0aW9uTW9kZS5oYXNTdGF0ZUFzc29jaWF0ZWRXaXRoT25lQWx0KGNvbmZpZ3MpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYW55IGNvbmZpZ3VyYXRpb24gaW4ge0Bjb2RlIGNvbmZpZ3N9IGlzIGluIGFcbiAgICAgKiB7QGxpbmsgUnVsZVN0b3BTdGF0ZX0uIENvbmZpZ3VyYXRpb25zIG1lZXRpbmcgdGhpcyBjb25kaXRpb24gaGF2ZSByZWFjaGVkXG4gICAgICogdGhlIGVuZCBvZiB0aGUgZGVjaXNpb24gcnVsZSAobG9jYWwgY29udGV4dCkgb3IgZW5kIG9mIHN0YXJ0IHJ1bGUgKGZ1bGxcbiAgICAgKiBjb250ZXh0KS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWdzIHRoZSBjb25maWd1cmF0aW9uIHNldCB0byB0ZXN0XG4gICAgICogQHJldHVybiB7QGNvZGUgdHJ1ZX0gaWYgYW55IGNvbmZpZ3VyYXRpb24gaW4ge0Bjb2RlIGNvbmZpZ3N9IGlzIGluIGFcbiAgICAgKiB7QGxpbmsgUnVsZVN0b3BTdGF0ZX0sIG90aGVyd2lzZSB7QGNvZGUgZmFsc2V9XG4gICAgICovXG4gICAgaGFzQ29uZmlnSW5SdWxlU3RvcFN0YXRlOiBmdW5jdGlvbihjb25maWdzKSB7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8Y29uZmlncy5pdGVtcy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gY29uZmlncy5pdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChjLnN0YXRlIGluc3RhbmNlb2YgUnVsZVN0b3BTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGFsbCBjb25maWd1cmF0aW9ucyBpbiB7QGNvZGUgY29uZmlnc30gYXJlIGluIGFcbiAgICAgKiB7QGxpbmsgUnVsZVN0b3BTdGF0ZX0uIENvbmZpZ3VyYXRpb25zIG1lZXRpbmcgdGhpcyBjb25kaXRpb24gaGF2ZSByZWFjaGVkXG4gICAgICogdGhlIGVuZCBvZiB0aGUgZGVjaXNpb24gcnVsZSAobG9jYWwgY29udGV4dCkgb3IgZW5kIG9mIHN0YXJ0IHJ1bGUgKGZ1bGxcbiAgICAgKiBjb250ZXh0KS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWdzIHRoZSBjb25maWd1cmF0aW9uIHNldCB0byB0ZXN0XG4gICAgICogQHJldHVybiB7QGNvZGUgdHJ1ZX0gaWYgYWxsIGNvbmZpZ3VyYXRpb25zIGluIHtAY29kZSBjb25maWdzfSBhcmUgaW4gYVxuICAgICAqIHtAbGluayBSdWxlU3RvcFN0YXRlfSwgb3RoZXJ3aXNlIHtAY29kZSBmYWxzZX1cbiAgICAgKi9cbiAgICBhbGxDb25maWdzSW5SdWxlU3RvcFN0YXRlczogZnVuY3Rpb24oY29uZmlncykge1xuICAgICAgICBmb3IobGV0IGk9MDtpPGNvbmZpZ3MuaXRlbXMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgY29uc3QgYyA9IGNvbmZpZ3MuaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoIShjLnN0YXRlIGluc3RhbmNlb2YgUnVsZVN0b3BTdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogRnVsbCBMTCBwcmVkaWN0aW9uIHRlcm1pbmF0aW9uLlxuICAgICAqXG4gICAgICogPHA+Q2FuIHdlIHN0b3AgbG9va2luZyBhaGVhZCBkdXJpbmcgQVROIHNpbXVsYXRpb24gb3IgaXMgdGhlcmUgc29tZVxuICAgICAqIHVuY2VydGFpbnR5IGFzIHRvIHdoaWNoIGFsdGVybmF0aXZlIHdlIHdpbGwgdWx0aW1hdGVseSBwaWNrLCBhZnRlclxuICAgICAqIGNvbnN1bWluZyBtb3JlIGlucHV0PyBFdmVuIGlmIHRoZXJlIGFyZSBwYXJ0aWFsIGNvbmZsaWN0cywgd2UgbWlnaHQga25vd1xuICAgICAqIHRoYXQgZXZlcnl0aGluZyBpcyBnb2luZyB0byByZXNvbHZlIHRvIHRoZSBzYW1lIG1pbmltdW0gYWx0ZXJuYXRpdmUuIFRoYXRcbiAgICAgKiBtZWFucyB3ZSBjYW4gc3RvcCBzaW5jZSBubyBtb3JlIGxvb2thaGVhZCB3aWxsIGNoYW5nZSB0aGF0IGZhY3QuIE9uIHRoZVxuICAgICAqIG90aGVyIGhhbmQsIHRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlIGNvbmZsaWN0cyB0aGF0IHJlc29sdmUgdG8gZGlmZmVyZW50XG4gICAgICogbWluaW11bXMuIFRoYXQgbWVhbnMgd2UgbmVlZCBtb3JlIGxvb2sgYWhlYWQgdG8gZGVjaWRlIHdoaWNoIG9mIHRob3NlXG4gICAgICogYWx0ZXJuYXRpdmVzIHdlIHNob3VsZCBwcmVkaWN0LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPlRoZSBiYXNpYyBpZGVhIGlzIHRvIHNwbGl0IHRoZSBzZXQgb2YgY29uZmlndXJhdGlvbnMge0Bjb2RlIEN9LCBpbnRvXG4gICAgICogY29uZmxpY3Rpbmcgc3Vic2V0cyB7QGNvZGUgKHMsIF8sIGN0eCwgXyl9IGFuZCBzaW5nbGV0b24gc3Vic2V0cyB3aXRoXG4gICAgICogbm9uLWNvbmZsaWN0aW5nIGNvbmZpZ3VyYXRpb25zLiBUd28gY29uZmlndXJhdGlvbnMgY29uZmxpY3QgaWYgdGhleSBoYXZlXG4gICAgICogaWRlbnRpY2FsIHtAbGluayBBVE5Db25maWcvL3N0YXRlfSBhbmQge0BsaW5rIEFUTkNvbmZpZy8vY29udGV4dH0gdmFsdWVzXG4gICAgICogYnV0IGRpZmZlcmVudCB7QGxpbmsgQVROQ29uZmlnLy9hbHR9IHZhbHVlLCBlLmcuIHtAY29kZSAocywgaSwgY3R4LCBfKX1cbiAgICAgKiBhbmQge0Bjb2RlIChzLCBqLCBjdHgsIF8pfSBmb3Ige0Bjb2RlIGkhPWp9LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPlJlZHVjZSB0aGVzZSBjb25maWd1cmF0aW9uIHN1YnNldHMgdG8gdGhlIHNldCBvZiBwb3NzaWJsZSBhbHRlcm5hdGl2ZXMuXG4gICAgICogWW91IGNhbiBjb21wdXRlIHRoZSBhbHRlcm5hdGl2ZSBzdWJzZXRzIGluIG9uZSBwYXNzIGFzIGZvbGxvd3M6PC9wPlxuICAgICAqXG4gICAgICogPHA+e0Bjb2RlIEFfcyxjdHggPSB7aSB8IChzLCBpLCBjdHgsIF8pfX0gZm9yIGVhY2ggY29uZmlndXJhdGlvbiBpblxuICAgICAqIHtAY29kZSBDfSBob2xkaW5nIHtAY29kZSBzfSBhbmQge0Bjb2RlIGN0eH0gZml4ZWQuPC9wPlxuICAgICAqXG4gICAgICogPHA+T3IgaW4gcHNldWRvLWNvZGUsIGZvciBlYWNoIGNvbmZpZ3VyYXRpb24ge0Bjb2RlIGN9IGluIHtAY29kZSBDfTo8L3A+XG4gICAgICpcbiAgICAgKiA8cHJlPlxuICAgICAqIG1hcFtjXSBVPSBjLntAbGluayBBVE5Db25maWcvL2FsdCBhbHR9IC8vIG1hcCBoYXNoL2VxdWFscyB1c2VzIHMgYW5kIHgsIG5vdFxuICAgICAqIGFsdCBhbmQgbm90IHByZWRcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIDxwPlRoZSB2YWx1ZXMgaW4ge0Bjb2RlIG1hcH0gYXJlIHRoZSBzZXQgb2Yge0Bjb2RlIEFfcyxjdHh9IHNldHMuPC9wPlxuICAgICAqXG4gICAgICogPHA+SWYge0Bjb2RlIHxBX3MsY3R4fD0xfSB0aGVuIHRoZXJlIGlzIG5vIGNvbmZsaWN0IGFzc29jaWF0ZWQgd2l0aFxuICAgICAqIHtAY29kZSBzfSBhbmQge0Bjb2RlIGN0eH0uPC9wPlxuICAgICAqXG4gICAgICogPHA+UmVkdWNlIHRoZSBzdWJzZXRzIHRvIHNpbmdsZXRvbnMgYnkgY2hvb3NpbmcgYSBtaW5pbXVtIG9mIGVhY2ggc3Vic2V0LiBJZlxuICAgICAqIHRoZSB1bmlvbiBvZiB0aGVzZSBhbHRlcm5hdGl2ZSBzdWJzZXRzIGlzIGEgc2luZ2xldG9uLCB0aGVuIG5vIGFtb3VudCBvZlxuICAgICAqIG1vcmUgbG9va2FoZWFkIHdpbGwgaGVscCB1cy4gV2Ugd2lsbCBhbHdheXMgcGljayB0aGF0IGFsdGVybmF0aXZlLiBJZixcbiAgICAgKiBob3dldmVyLCB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGFsdGVybmF0aXZlLCB0aGVuIHdlIGFyZSB1bmNlcnRhaW4gd2hpY2hcbiAgICAgKiBhbHRlcm5hdGl2ZSB0byBwcmVkaWN0IGFuZCBtdXN0IGNvbnRpbnVlIGxvb2tpbmcgZm9yIHJlc29sdXRpb24uIFdlIG1heVxuICAgICAqIG9yIG1heSBub3QgZGlzY292ZXIgYW4gYW1iaWd1aXR5IGluIHRoZSBmdXR1cmUsIGV2ZW4gaWYgdGhlcmUgYXJlIG5vXG4gICAgICogY29uZmxpY3Rpbmcgc3Vic2V0cyB0aGlzIHJvdW5kLjwvcD5cbiAgICAgKlxuICAgICAqIDxwPlRoZSBiaWdnZXN0IHNpbiBpcyB0byB0ZXJtaW5hdGUgZWFybHkgYmVjYXVzZSBpdCBtZWFucyB3ZSd2ZSBtYWRlIGFcbiAgICAgKiBkZWNpc2lvbiBidXQgd2VyZSB1bmNlcnRhaW4gYXMgdG8gdGhlIGV2ZW50dWFsIG91dGNvbWUuIFdlIGhhdmVuJ3QgdXNlZFxuICAgICAqIGVub3VnaCBsb29rYWhlYWQuIE9uIHRoZSBvdGhlciBoYW5kLCBhbm5vdW5jaW5nIGEgY29uZmxpY3QgdG9vIGxhdGUgaXMgbm9cbiAgICAgKiBiaWcgZGVhbDsgeW91IHdpbGwgc3RpbGwgaGF2ZSB0aGUgY29uZmxpY3QuIEl0J3MganVzdCBpbmVmZmljaWVudC4gSXRcbiAgICAgKiBtaWdodCBldmVuIGxvb2sgdW50aWwgdGhlIGVuZCBvZiBmaWxlLjwvcD5cbiAgICAgKlxuICAgICAqIDxwPk5vIHNwZWNpYWwgY29uc2lkZXJhdGlvbiBmb3Igc2VtYW50aWMgcHJlZGljYXRlcyBpcyByZXF1aXJlZCBiZWNhdXNlXG4gICAgICogcHJlZGljYXRlcyBhcmUgZXZhbHVhdGVkIG9uLXRoZS1mbHkgZm9yIGZ1bGwgTEwgcHJlZGljdGlvbiwgZW5zdXJpbmcgdGhhdFxuICAgICAqIG5vIGNvbmZpZ3VyYXRpb24gY29udGFpbnMgYSBzZW1hbnRpYyBjb250ZXh0IGR1cmluZyB0aGUgdGVybWluYXRpb25cbiAgICAgKiBjaGVjay48L3A+XG4gICAgICpcbiAgICAgKiA8cD48c3Ryb25nPkNPTkZMSUNUSU5HIENPTkZJR1M8L3N0cm9uZz48L3A+XG4gICAgICpcbiAgICAgKiA8cD5Ud28gY29uZmlndXJhdGlvbnMge0Bjb2RlIChzLCBpLCB4KX0gYW5kIHtAY29kZSAocywgaiwgeCcpfSwgY29uZmxpY3RcbiAgICAgKiB3aGVuIHtAY29kZSBpIT1qfSBidXQge0Bjb2RlIHg9eCd9LiBCZWNhdXNlIHdlIG1lcmdlIGFsbFxuICAgICAqIHtAY29kZSAocywgaSwgXyl9IGNvbmZpZ3VyYXRpb25zIHRvZ2V0aGVyLCB0aGF0IG1lYW5zIHRoYXQgdGhlcmUgYXJlIGF0XG4gICAgICogbW9zdCB7QGNvZGUgbn0gY29uZmlndXJhdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHN0YXRlIHtAY29kZSBzfSBmb3JcbiAgICAgKiB7QGNvZGUgbn0gcG9zc2libGUgYWx0ZXJuYXRpdmVzIGluIHRoZSBkZWNpc2lvbi4gVGhlIG1lcmdlZCBzdGFja3NcbiAgICAgKiBjb21wbGljYXRlIHRoZSBjb21wYXJpc29uIG9mIGNvbmZpZ3VyYXRpb24gY29udGV4dHMge0Bjb2RlIHh9IGFuZFxuICAgICAqIHtAY29kZSB4J30uIFNhbSBjaGVja3MgdG8gc2VlIGlmIG9uZSBpcyBhIHN1YnNldCBvZiB0aGUgb3RoZXIgYnkgY2FsbGluZ1xuICAgICAqIG1lcmdlIGFuZCBjaGVja2luZyB0byBzZWUgaWYgdGhlIG1lcmdlZCByZXN1bHQgaXMgZWl0aGVyIHtAY29kZSB4fSBvclxuICAgICAqIHtAY29kZSB4J30uIElmIHRoZSB7QGNvZGUgeH0gYXNzb2NpYXRlZCB3aXRoIGxvd2VzdCBhbHRlcm5hdGl2ZSB7QGNvZGUgaX1cbiAgICAgKiBpcyB0aGUgc3VwZXJzZXQsIHRoZW4ge0Bjb2RlIGl9IGlzIHRoZSBvbmx5IHBvc3NpYmxlIHByZWRpY3Rpb24gc2luY2UgdGhlXG4gICAgICogb3RoZXJzIHJlc29sdmUgdG8ge0Bjb2RlIG1pbihpKX0gYXMgd2VsbC4gSG93ZXZlciwgaWYge0Bjb2RlIHh9IGlzXG4gICAgICogYXNzb2NpYXRlZCB3aXRoIHtAY29kZSBqPml9IHRoZW4gYXQgbGVhc3Qgb25lIHN0YWNrIGNvbmZpZ3VyYXRpb24gZm9yXG4gICAgICoge0Bjb2RlIGp9IGlzIG5vdCBpbiBjb25mbGljdCB3aXRoIGFsdGVybmF0aXZlIHtAY29kZSBpfS4gVGhlIGFsZ29yaXRobVxuICAgICAqIHNob3VsZCBrZWVwIGdvaW5nLCBsb29raW5nIGZvciBtb3JlIGxvb2thaGVhZCBkdWUgdG8gdGhlIHVuY2VydGFpbnR5LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPkZvciBzaW1wbGljaXR5LCBJJ20gZG9pbmcgYSBlcXVhbGl0eSBjaGVjayBiZXR3ZWVuIHtAY29kZSB4fSBhbmRcbiAgICAgKiB7QGNvZGUgeCd9IHRoYXQgbGV0cyB0aGUgYWxnb3JpdGhtIGNvbnRpbnVlIHRvIGNvbnN1bWUgbG9va2FoZWFkIGxvbmdlclxuICAgICAqIHRoYW4gbmVjZXNzYXJ5LiBUaGUgcmVhc29uIEkgbGlrZSB0aGUgZXF1YWxpdHkgaXMgb2YgY291cnNlIHRoZVxuICAgICAqIHNpbXBsaWNpdHkgYnV0IGFsc28gYmVjYXVzZSB0aGF0IGlzIHRoZSB0ZXN0IHlvdSBuZWVkIHRvIGRldGVjdCB0aGVcbiAgICAgKiBhbHRlcm5hdGl2ZXMgdGhhdCBhcmUgYWN0dWFsbHkgaW4gY29uZmxpY3QuPC9wPlxuICAgICAqXG4gICAgICogPHA+PHN0cm9uZz5DT05USU5VRS9TVE9QIFJVTEU8L3N0cm9uZz48L3A+XG4gICAgICpcbiAgICAgKiA8cD5Db250aW51ZSBpZiB1bmlvbiBvZiByZXNvbHZlZCBhbHRlcm5hdGl2ZSBzZXRzIGZyb20gbm9uLWNvbmZsaWN0aW5nIGFuZFxuICAgICAqIGNvbmZsaWN0aW5nIGFsdGVybmF0aXZlIHN1YnNldHMgaGFzIG1vcmUgdGhhbiBvbmUgYWx0ZXJuYXRpdmUuIFdlIGFyZVxuICAgICAqIHVuY2VydGFpbiBhYm91dCB3aGljaCBhbHRlcm5hdGl2ZSB0byBwcmVkaWN0LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPlRoZSBjb21wbGV0ZSBzZXQgb2YgYWx0ZXJuYXRpdmVzLCB7QGNvZGUgW2kgZm9yIChfLGksXyldfSwgdGVsbHMgdXMgd2hpY2hcbiAgICAgKiBhbHRlcm5hdGl2ZXMgYXJlIHN0aWxsIGluIHRoZSBydW5uaW5nIGZvciB0aGUgYW1vdW50IG9mIGlucHV0IHdlJ3ZlXG4gICAgICogY29uc3VtZWQgYXQgdGhpcyBwb2ludC4gVGhlIGNvbmZsaWN0aW5nIHNldHMgbGV0IHVzIHRvIHN0cmlwIGF3YXlcbiAgICAgKiBjb25maWd1cmF0aW9ucyB0aGF0IHdvbid0IGxlYWQgdG8gbW9yZSBzdGF0ZXMgYmVjYXVzZSB3ZSByZXNvbHZlXG4gICAgICogY29uZmxpY3RzIHRvIHRoZSBjb25maWd1cmF0aW9uIHdpdGggYSBtaW5pbXVtIGFsdGVybmF0ZSBmb3IgdGhlXG4gICAgICogY29uZmxpY3Rpbmcgc2V0LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPjxzdHJvbmc+Q0FTRVM8L3N0cm9uZz48L3A+XG4gICAgICpcbiAgICAgKiA8dWw+XG4gICAgICpcbiAgICAgKiA8bGk+bm8gY29uZmxpY3RzIGFuZCBtb3JlIHRoYW4gMSBhbHRlcm5hdGl2ZSBpbiBzZXQgPSZndDsgY29udGludWU8L2xpPlxuICAgICAqXG4gICAgICogPGxpPiB7QGNvZGUgKHMsIDEsIHgpfSwge0Bjb2RlIChzLCAyLCB4KX0sIHtAY29kZSAocywgMywgeil9LFxuICAgICAqIHtAY29kZSAocycsIDEsIHkpfSwge0Bjb2RlIChzJywgMiwgeSl9IHlpZWxkcyBub24tY29uZmxpY3Rpbmcgc2V0XG4gICAgICoge0Bjb2RlIHszfX0gVSBjb25mbGljdGluZyBzZXRzIHtAY29kZSBtaW4oezEsMn0pfSBVIHtAY29kZSBtaW4oezEsMn0pfSA9XG4gICAgICoge0Bjb2RlIHsxLDN9fSA9Jmd0OyBjb250aW51ZVxuICAgICAqIDwvbGk+XG4gICAgICpcbiAgICAgKiA8bGk+e0Bjb2RlIChzLCAxLCB4KX0sIHtAY29kZSAocywgMiwgeCl9LCB7QGNvZGUgKHMnLCAxLCB5KX0sXG4gICAgICoge0Bjb2RlIChzJywgMiwgeSl9LCB7QGNvZGUgKHMnJywgMSwgeil9IHlpZWxkcyBub24tY29uZmxpY3Rpbmcgc2V0XG4gICAgICoge0Bjb2RlIHsxfX0gVSBjb25mbGljdGluZyBzZXRzIHtAY29kZSBtaW4oezEsMn0pfSBVIHtAY29kZSBtaW4oezEsMn0pfSA9XG4gICAgICoge0Bjb2RlIHsxfX0gPSZndDsgc3RvcCBhbmQgcHJlZGljdCAxPC9saT5cbiAgICAgKlxuICAgICAqIDxsaT57QGNvZGUgKHMsIDEsIHgpfSwge0Bjb2RlIChzLCAyLCB4KX0sIHtAY29kZSAocycsIDEsIHkpfSxcbiAgICAgKiB7QGNvZGUgKHMnLCAyLCB5KX0geWllbGRzIGNvbmZsaWN0aW5nLCByZWR1Y2VkIHNldHMge0Bjb2RlIHsxfX0gVVxuICAgICAqIHtAY29kZSB7MX19ID0ge0Bjb2RlIHsxfX0gPSZndDsgc3RvcCBhbmQgcHJlZGljdCAxLCBjYW4gYW5ub3VuY2VcbiAgICAgKiBhbWJpZ3VpdHkge0Bjb2RlIHsxLDJ9fTwvbGk+XG4gICAgICpcbiAgICAgKiA8bGk+e0Bjb2RlIChzLCAxLCB4KX0sIHtAY29kZSAocywgMiwgeCl9LCB7QGNvZGUgKHMnLCAyLCB5KX0sXG4gICAgICoge0Bjb2RlIChzJywgMywgeSl9IHlpZWxkcyBjb25mbGljdGluZywgcmVkdWNlZCBzZXRzIHtAY29kZSB7MX19IFVcbiAgICAgKiB7QGNvZGUgezJ9fSA9IHtAY29kZSB7MSwyfX0gPSZndDsgY29udGludWU8L2xpPlxuICAgICAqXG4gICAgICogPGxpPntAY29kZSAocywgMSwgeCl9LCB7QGNvZGUgKHMsIDIsIHgpfSwge0Bjb2RlIChzJywgMywgeSl9LFxuICAgICAqIHtAY29kZSAocycsIDQsIHkpfSB5aWVsZHMgY29uZmxpY3RpbmcsIHJlZHVjZWQgc2V0cyB7QGNvZGUgezF9fSBVXG4gICAgICoge0Bjb2RlIHszfX0gPSB7QGNvZGUgezEsM319ID0mZ3Q7IGNvbnRpbnVlPC9saT5cbiAgICAgKlxuICAgICAqIDwvdWw+XG4gICAgICpcbiAgICAgKiA8cD48c3Ryb25nPkVYQUNUIEFNQklHVUlUWSBERVRFQ1RJT048L3N0cm9uZz48L3A+XG4gICAgICpcbiAgICAgKiA8cD5JZiBhbGwgc3RhdGVzIHJlcG9ydCB0aGUgc2FtZSBjb25mbGljdGluZyBzZXQgb2YgYWx0ZXJuYXRpdmVzLCB0aGVuIHdlXG4gICAgICoga25vdyB3ZSBoYXZlIHRoZSBleGFjdCBhbWJpZ3VpdHkgc2V0LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPjxjb2RlPnxBXzxlbT5pPC9lbT58Jmd0OzE8L2NvZGU+IGFuZFxuICAgICAqIDxjb2RlPkFfPGVtPmk8L2VtPiA9IEFfPGVtPmo8L2VtPjwvY29kZT4gZm9yIGFsbCA8ZW0+aTwvZW0+LCA8ZW0+ajwvZW0+LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPkluIG90aGVyIHdvcmRzLCB3ZSBjb250aW51ZSBleGFtaW5pbmcgbG9va2FoZWFkIHVudGlsIGFsbCB7QGNvZGUgQV9pfVxuICAgICAqIGhhdmUgbW9yZSB0aGFuIG9uZSBhbHRlcm5hdGl2ZSBhbmQgYWxsIHtAY29kZSBBX2l9IGFyZSB0aGUgc2FtZS4gSWZcbiAgICAgKiB7QGNvZGUgQT17ezEsMn0sIHsxLDN9fX0sIHRoZW4gcmVndWxhciBMTCBwcmVkaWN0aW9uIHdvdWxkIHRlcm1pbmF0ZVxuICAgICAqIGJlY2F1c2UgdGhlIHJlc29sdmVkIHNldCBpcyB7QGNvZGUgezF9fS4gVG8gZGV0ZXJtaW5lIHdoYXQgdGhlIHJlYWxcbiAgICAgKiBhbWJpZ3VpdHkgaXMsIHdlIGhhdmUgdG8ga25vdyB3aGV0aGVyIHRoZSBhbWJpZ3VpdHkgaXMgYmV0d2VlbiBvbmUgYW5kXG4gICAgICogdHdvIG9yIG9uZSBhbmQgdGhyZWUgc28gd2Uga2VlcCBnb2luZy4gV2UgY2FuIG9ubHkgc3RvcCBwcmVkaWN0aW9uIHdoZW5cbiAgICAgKiB3ZSBuZWVkIGV4YWN0IGFtYmlndWl0eSBkZXRlY3Rpb24gd2hlbiB0aGUgc2V0cyBsb29rIGxpa2VcbiAgICAgKiB7QGNvZGUgQT17ezEsMn19fSBvciB7QGNvZGUge3sxLDJ9LHsxLDJ9fX0sIGV0Yy4uLjwvcD5cbiAgICAgKi9cbiAgICByZXNvbHZlc1RvSnVzdE9uZVZpYWJsZUFsdDogZnVuY3Rpb24oYWx0c2V0cykge1xuICAgICAgICByZXR1cm4gUHJlZGljdGlvbk1vZGUuZ2V0U2luZ2xlVmlhYmxlQWx0KGFsdHNldHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGV2ZXJ5IGFsdGVybmF0aXZlIHN1YnNldCBpbiB7QGNvZGUgYWx0c2V0c30gY29udGFpbnMgbW9yZVxuICAgICAqIHRoYW4gb25lIGFsdGVybmF0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFsdHNldHMgYSBjb2xsZWN0aW9uIG9mIGFsdGVybmF0aXZlIHN1YnNldHNcbiAgICAgKiBAcmV0dXJuIHtAY29kZSB0cnVlfSBpZiBldmVyeSB7QGxpbmsgQml0U2V0fSBpbiB7QGNvZGUgYWx0c2V0c30gaGFzXG4gICAgICoge0BsaW5rIEJpdFNldC8vY2FyZGluYWxpdHkgY2FyZGluYWxpdHl9ICZndDsgMSwgb3RoZXJ3aXNlIHtAY29kZSBmYWxzZX1cbiAgICAgKi9cbiAgICBhbGxTdWJzZXRzQ29uZmxpY3Q6IGZ1bmN0aW9uKGFsdHNldHMpIHtcbiAgICAgICAgcmV0dXJuICEgUHJlZGljdGlvbk1vZGUuaGFzTm9uQ29uZmxpY3RpbmdBbHRTZXQoYWx0c2V0cyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGFueSBzaW5nbGUgYWx0ZXJuYXRpdmUgc3Vic2V0IGluIHtAY29kZSBhbHRzZXRzfSBjb250YWluc1xuICAgICAqIGV4YWN0bHkgb25lIGFsdGVybmF0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFsdHNldHMgYSBjb2xsZWN0aW9uIG9mIGFsdGVybmF0aXZlIHN1YnNldHNcbiAgICAgKiBAcmV0dXJuIHtAY29kZSB0cnVlfSBpZiB7QGNvZGUgYWx0c2V0c30gY29udGFpbnMgYSB7QGxpbmsgQml0U2V0fSB3aXRoXG4gICAgICoge0BsaW5rIEJpdFNldC8vY2FyZGluYWxpdHkgY2FyZGluYWxpdHl9IDEsIG90aGVyd2lzZSB7QGNvZGUgZmFsc2V9XG4gICAgICovXG4gICAgaGFzTm9uQ29uZmxpY3RpbmdBbHRTZXQ6IGZ1bmN0aW9uKGFsdHNldHMpIHtcbiAgICAgICAgZm9yKGxldCBpPTA7aTxhbHRzZXRzLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGFsdHMgPSBhbHRzZXRzW2ldO1xuICAgICAgICAgICAgaWYgKGFsdHMubGVuZ3RoPT09MSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGFueSBzaW5nbGUgYWx0ZXJuYXRpdmUgc3Vic2V0IGluIHtAY29kZSBhbHRzZXRzfSBjb250YWluc1xuICAgICAqIG1vcmUgdGhhbiBvbmUgYWx0ZXJuYXRpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWx0c2V0cyBhIGNvbGxlY3Rpb24gb2YgYWx0ZXJuYXRpdmUgc3Vic2V0c1xuICAgICAqIEByZXR1cm4ge0Bjb2RlIHRydWV9IGlmIHtAY29kZSBhbHRzZXRzfSBjb250YWlucyBhIHtAbGluayBCaXRTZXR9IHdpdGhcbiAgICAgKiB7QGxpbmsgQml0U2V0Ly9jYXJkaW5hbGl0eSBjYXJkaW5hbGl0eX0gJmd0OyAxLCBvdGhlcndpc2Uge0Bjb2RlIGZhbHNlfVxuICAgICAqL1xuICAgIGhhc0NvbmZsaWN0aW5nQWx0U2V0OiBmdW5jdGlvbihhbHRzZXRzKSB7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8YWx0c2V0cy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICBjb25zdCBhbHRzID0gYWx0c2V0c1tpXTtcbiAgICAgICAgICAgIGlmIChhbHRzLmxlbmd0aD4xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgZXZlcnkgYWx0ZXJuYXRpdmUgc3Vic2V0IGluIHtAY29kZSBhbHRzZXRzfSBpcyBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFsdHNldHMgYSBjb2xsZWN0aW9uIG9mIGFsdGVybmF0aXZlIHN1YnNldHNcbiAgICAgKiBAcmV0dXJuIHtAY29kZSB0cnVlfSBpZiBldmVyeSBtZW1iZXIgb2Yge0Bjb2RlIGFsdHNldHN9IGlzIGVxdWFsIHRvIHRoZVxuICAgICAqIG90aGVycywgb3RoZXJ3aXNlIHtAY29kZSBmYWxzZX1cbiAgICAgKi9cbiAgICBhbGxTdWJzZXRzRXF1YWw6IGZ1bmN0aW9uKGFsdHNldHMpIHtcbiAgICAgICAgbGV0IGZpcnN0ID0gbnVsbDtcbiAgICAgICAgZm9yKGxldCBpPTA7aTxhbHRzZXRzLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGFsdHMgPSBhbHRzZXRzW2ldO1xuICAgICAgICAgICAgaWYgKGZpcnN0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZmlyc3QgPSBhbHRzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbHRzIT09Zmlyc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5pcXVlIGFsdGVybmF0aXZlIHByZWRpY3RlZCBieSBhbGwgYWx0ZXJuYXRpdmUgc3Vic2V0cyBpblxuICAgICAqIHtAY29kZSBhbHRzZXRzfS4gSWYgbm8gc3VjaCBhbHRlcm5hdGl2ZSBleGlzdHMsIHRoaXMgbWV0aG9kIHJldHVybnNcbiAgICAgKiB7QGxpbmsgQVROLy9JTlZBTElEX0FMVF9OVU1CRVJ9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFsdHNldHMgYSBjb2xsZWN0aW9uIG9mIGFsdGVybmF0aXZlIHN1YnNldHNcbiAgICAgKi9cbiAgICBnZXRVbmlxdWVBbHQ6IGZ1bmN0aW9uKGFsdHNldHMpIHtcbiAgICAgICAgY29uc3QgYWxsID0gUHJlZGljdGlvbk1vZGUuZ2V0QWx0cyhhbHRzZXRzKTtcbiAgICAgICAgaWYgKGFsbC5sZW5ndGg9PT0xKSB7XG4gICAgICAgICAgICByZXR1cm4gYWxsLm1pblZhbHVlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gQVROLklOVkFMSURfQUxUX05VTUJFUjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjb21wbGV0ZSBzZXQgb2YgcmVwcmVzZW50ZWQgYWx0ZXJuYXRpdmVzIGZvciBhIGNvbGxlY3Rpb24gb2ZcbiAgICAgKiBhbHRlcm5hdGl2ZSBzdWJzZXRzLiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSB1bmlvbiBvZiBlYWNoIHtAbGluayBCaXRTZXR9XG4gICAgICogaW4ge0Bjb2RlIGFsdHNldHN9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFsdHNldHMgYSBjb2xsZWN0aW9uIG9mIGFsdGVybmF0aXZlIHN1YnNldHNcbiAgICAgKiBAcmV0dXJuIHRoZSBzZXQgb2YgcmVwcmVzZW50ZWQgYWx0ZXJuYXRpdmVzIGluIHtAY29kZSBhbHRzZXRzfVxuICAgICAqL1xuICAgIGdldEFsdHM6IGZ1bmN0aW9uKGFsdHNldHMpIHtcbiAgICAgICAgY29uc3QgYWxsID0gbmV3IEJpdFNldCgpO1xuICAgICAgICBhbHRzZXRzLm1hcCggZnVuY3Rpb24oYWx0cykgeyBhbGwub3IoYWx0cyk7IH0pO1xuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGdldHMgdGhlIGNvbmZsaWN0aW5nIGFsdCBzdWJzZXRzIGZyb20gYSBjb25maWd1cmF0aW9uIHNldC5cbiAgICAgKiBGb3IgZWFjaCBjb25maWd1cmF0aW9uIHtAY29kZSBjfSBpbiB7QGNvZGUgY29uZmlnc306XG4gICAgICpcbiAgICAgKiA8cHJlPlxuICAgICAqIG1hcFtjXSBVPSBjLntAbGluayBBVE5Db25maWcvL2FsdCBhbHR9IC8vIG1hcCBoYXNoL2VxdWFscyB1c2VzIHMgYW5kIHgsIG5vdFxuICAgICAqIGFsdCBhbmQgbm90IHByZWRcbiAgICAgKiA8L3ByZT5cbiAgICAgKi9cbiAgICBnZXRDb25mbGljdGluZ0FsdFN1YnNldHM6IGZ1bmN0aW9uKGNvbmZpZ3MpIHtcbiAgICAgICAgY29uc3QgY29uZmlnVG9BbHRzID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25maWdUb0FsdHMuaGFzaEZ1bmN0aW9uID0gZnVuY3Rpb24oY2ZnKSB7IGhhc2hTdHVmZihjZmcuc3RhdGUuc3RhdGVOdW1iZXIsIGNmZy5jb250ZXh0KTsgfTtcbiAgICAgICAgY29uZmlnVG9BbHRzLmVxdWFsc0Z1bmN0aW9uID0gZnVuY3Rpb24oYzEsIGMyKSB7IHJldHVybiBjMS5zdGF0ZS5zdGF0ZU51bWJlciA9PT0gYzIuc3RhdGUuc3RhdGVOdW1iZXIgJiYgYzEuY29udGV4dC5lcXVhbHMoYzIuY29udGV4dCk7fTtcbiAgICAgICAgY29uZmlncy5pdGVtcy5tYXAoZnVuY3Rpb24oY2ZnKSB7XG4gICAgICAgICAgICBsZXQgYWx0cyA9IGNvbmZpZ1RvQWx0cy5nZXQoY2ZnKTtcbiAgICAgICAgICAgIGlmIChhbHRzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYWx0cyA9IG5ldyBCaXRTZXQoKTtcbiAgICAgICAgICAgICAgICBjb25maWdUb0FsdHMucHV0KGNmZywgYWx0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbHRzLmFkZChjZmcuYWx0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb25maWdUb0FsdHMuZ2V0VmFsdWVzKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBhIG1hcCBmcm9tIHN0YXRlIHRvIGFsdCBzdWJzZXQgZnJvbSBhIGNvbmZpZ3VyYXRpb24gc2V0LiBGb3IgZWFjaFxuICAgICAqIGNvbmZpZ3VyYXRpb24ge0Bjb2RlIGN9IGluIHtAY29kZSBjb25maWdzfTpcbiAgICAgKlxuICAgICAqIDxwcmU+XG4gICAgICogbWFwW2Mue0BsaW5rIEFUTkNvbmZpZy8vc3RhdGUgc3RhdGV9XSBVPSBjLntAbGluayBBVE5Db25maWcvL2FsdCBhbHR9XG4gICAgICogPC9wcmU+XG4gICAgICovXG4gICAgZ2V0U3RhdGVUb0FsdE1hcDogZnVuY3Rpb24oY29uZmlncykge1xuICAgICAgICBjb25zdCBtID0gbmV3IEFsdERpY3QoKTtcbiAgICAgICAgY29uZmlncy5pdGVtcy5tYXAoZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgbGV0IGFsdHMgPSBtLmdldChjLnN0YXRlKTtcbiAgICAgICAgICAgIGlmIChhbHRzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYWx0cyA9IG5ldyBCaXRTZXQoKTtcbiAgICAgICAgICAgICAgICBtLnB1dChjLnN0YXRlLCBhbHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFsdHMuYWRkKGMuYWx0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtO1xuICAgIH0sXG5cbiAgICBoYXNTdGF0ZUFzc29jaWF0ZWRXaXRoT25lQWx0OiBmdW5jdGlvbihjb25maWdzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFByZWRpY3Rpb25Nb2RlLmdldFN0YXRlVG9BbHRNYXAoY29uZmlncykudmFsdWVzKCk7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8dmFsdWVzLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbaV0ubGVuZ3RoPT09MSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgZ2V0U2luZ2xlVmlhYmxlQWx0OiBmdW5jdGlvbihhbHRzZXRzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICBmb3IobGV0IGk9MDtpPGFsdHNldHMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgY29uc3QgYWx0cyA9IGFsdHNldHNbaV07XG4gICAgICAgICAgICBjb25zdCBtaW5BbHQgPSBhbHRzLm1pblZhbHVlKCk7XG4gICAgICAgICAgICBpZihyZXN1bHQ9PT1udWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbWluQWx0O1xuICAgICAgICAgICAgfSBlbHNlIGlmKHJlc3VsdCE9PW1pbkFsdCkgeyAvLyBtb3JlIHRoYW4gMSB2aWFibGUgYWx0XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFUTi5JTlZBTElEX0FMVF9OVU1CRVI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByZWRpY3Rpb25Nb2RlO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7IFNldCwgSGFzaCwgZXF1YWxBcnJheXMgfSA9IHJlcXVpcmUoJy4vLi4vVXRpbHMnKTtcblxuLyoqXG4gKiBBIHRyZWUgc3RydWN0dXJlIHVzZWQgdG8gcmVjb3JkIHRoZSBzZW1hbnRpYyBjb250ZXh0IGluIHdoaWNoXG4gKiBhbiBBVE4gY29uZmlndXJhdGlvbiBpcyB2YWxpZC4gIEl0J3MgZWl0aGVyIGEgc2luZ2xlIHByZWRpY2F0ZSxcbiAqIGEgY29uanVuY3Rpb24ge0Bjb2RlIHAxJiZwMn0sIG9yIGEgc3VtIG9mIHByb2R1Y3RzIHtAY29kZSBwMXx8cDJ9LlxuICpcbiAqIDxwPkkgaGF2ZSBzY29wZWQgdGhlIHtAbGluayBBTkR9LCB7QGxpbmsgT1J9LCBhbmQge0BsaW5rIFByZWRpY2F0ZX0gc3ViY2xhc3NlcyBvZlxuICoge0BsaW5rIFNlbWFudGljQ29udGV4dH0gd2l0aGluIHRoZSBzY29wZSBvZiB0aGlzIG91dGVyIGNsYXNzLjwvcD5cbiAqL1xuY2xhc3MgU2VtYW50aWNDb250ZXh0IHtcblxuXHRoYXNoQ29kZSgpIHtcblx0XHRjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcblx0XHR0aGlzLnVwZGF0ZUhhc2hDb2RlKGhhc2gpO1xuXHRcdHJldHVybiBoYXNoLmZpbmlzaCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZvciBjb250ZXh0IGluZGVwZW5kZW50IHByZWRpY2F0ZXMsIHdlIGV2YWx1YXRlIHRoZW0gd2l0aG91dCBhIGxvY2FsXG5cdCAqIGNvbnRleHQgKGkuZS4sIG51bGwgY29udGV4dCkuIFRoYXQgd2F5LCB3ZSBjYW4gZXZhbHVhdGUgdGhlbSB3aXRob3V0XG5cdCAqIGhhdmluZyB0byBjcmVhdGUgcHJvcGVyIHJ1bGUtc3BlY2lmaWMgY29udGV4dCBkdXJpbmcgcHJlZGljdGlvbiAoYXNcblx0ICogb3Bwb3NlZCB0byB0aGUgcGFyc2VyLCB3aGljaCBjcmVhdGVzIHRoZW0gbmF0dXJhbGx5KS4gSW4gYSBwcmFjdGljYWxcblx0ICogc2Vuc2UsIHRoaXMgYXZvaWRzIGEgY2FzdCBleGNlcHRpb24gZnJvbSBSdWxlQ29udGV4dCB0byBteXJ1bGVDb250ZXh0LlxuXHQgKlxuXHQgKiA8cD5Gb3IgY29udGV4dCBkZXBlbmRlbnQgcHJlZGljYXRlcywgd2UgbXVzdCBwYXNzIGluIGEgbG9jYWwgY29udGV4dCBzbyB0aGF0XG5cdCAqIHJlZmVyZW5jZXMgc3VjaCBhcyAkYXJnIGV2YWx1YXRlIHByb3Blcmx5IGFzIF9sb2NhbGN0eC5hcmcuIFdlIG9ubHlcblx0ICogY2FwdHVyZSBjb250ZXh0IGRlcGVuZGVudCBwcmVkaWNhdGVzIGluIHRoZSBjb250ZXh0IGluIHdoaWNoIHdlIGJlZ2luXG5cdCAqIHByZWRpY3Rpb24sIHNvIHdlIHBhc3NlZCBpbiB0aGUgb3V0ZXIgY29udGV4dCBoZXJlIGluIGNhc2Ugb2YgY29udGV4dFxuXHQgKiBkZXBlbmRlbnQgcHJlZGljYXRlIGV2YWx1YXRpb24uPC9wPlxuXHQgKi9cblx0ZXZhbHVhdGUocGFyc2VyLCBvdXRlckNvbnRleHQpIHt9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlIHRoZSBwcmVjZWRlbmNlIHByZWRpY2F0ZXMgZm9yIHRoZSBjb250ZXh0IGFuZCByZWR1Y2UgdGhlIHJlc3VsdC5cblx0ICpcblx0ICogQHBhcmFtIHBhcnNlciBUaGUgcGFyc2VyIGluc3RhbmNlLlxuXHQgKiBAcGFyYW0gb3V0ZXJDb250ZXh0IFRoZSBjdXJyZW50IHBhcnNlciBjb250ZXh0IG9iamVjdC5cblx0ICogQHJldHVybiBUaGUgc2ltcGxpZmllZCBzZW1hbnRpYyBjb250ZXh0IGFmdGVyIHByZWNlZGVuY2UgcHJlZGljYXRlcyBhcmVcblx0ICogZXZhbHVhdGVkLCB3aGljaCB3aWxsIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlcy5cblx0ICogPHVsPlxuXHQgKiA8bGk+e0BsaW5rIC8vTk9ORX06IGlmIHRoZSBwcmVkaWNhdGUgc2ltcGxpZmllcyB0byB7QGNvZGUgdHJ1ZX0gYWZ0ZXJcblx0ICogcHJlY2VkZW5jZSBwcmVkaWNhdGVzIGFyZSBldmFsdWF0ZWQuPC9saT5cblx0ICogPGxpPntAY29kZSBudWxsfTogaWYgdGhlIHByZWRpY2F0ZSBzaW1wbGlmaWVzIHRvIHtAY29kZSBmYWxzZX0gYWZ0ZXJcblx0ICogcHJlY2VkZW5jZSBwcmVkaWNhdGVzIGFyZSBldmFsdWF0ZWQuPC9saT5cblx0ICogPGxpPntAY29kZSB0aGlzfTogaWYgdGhlIHNlbWFudGljIGNvbnRleHQgaXMgbm90IGNoYW5nZWQgYXMgYSByZXN1bHQgb2Zcblx0ICogcHJlY2VkZW5jZSBwcmVkaWNhdGUgZXZhbHVhdGlvbi48L2xpPlxuXHQgKiA8bGk+QSBub24te0Bjb2RlIG51bGx9IHtAbGluayBTZW1hbnRpY0NvbnRleHR9OiB0aGUgbmV3IHNpbXBsaWZpZWRcblx0ICogc2VtYW50aWMgY29udGV4dCBhZnRlciBwcmVjZWRlbmNlIHByZWRpY2F0ZXMgYXJlIGV2YWx1YXRlZC48L2xpPlxuXHQgKiA8L3VsPlxuXHQgKi9cblx0ZXZhbFByZWNlZGVuY2UocGFyc2VyLCBvdXRlckNvbnRleHQpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHN0YXRpYyBhbmRDb250ZXh0KGEsIGIpIHtcblx0XHRpZiAoYSA9PT0gbnVsbCB8fCBhID09PSBTZW1hbnRpY0NvbnRleHQuTk9ORSkge1xuXHRcdFx0cmV0dXJuIGI7XG5cdFx0fVxuXHRcdGlmIChiID09PSBudWxsIHx8IGIgPT09IFNlbWFudGljQ29udGV4dC5OT05FKSB7XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IEFORChhLCBiKTtcblx0XHRpZiAocmVzdWx0Lm9wbmRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdC5vcG5kc1swXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgb3JDb250ZXh0KGEsIGIpIHtcblx0XHRpZiAoYSA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGI7XG5cdFx0fVxuXHRcdGlmIChiID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9XG5cdFx0aWYgKGEgPT09IFNlbWFudGljQ29udGV4dC5OT05FIHx8IGIgPT09IFNlbWFudGljQ29udGV4dC5OT05FKSB7XG5cdFx0XHRyZXR1cm4gU2VtYW50aWNDb250ZXh0Lk5PTkU7XG5cdFx0fVxuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBPUihhLCBiKTtcblx0XHRpZiAocmVzdWx0Lm9wbmRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdC5vcG5kc1swXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cbn1cblxuXG5jbGFzcyBQcmVkaWNhdGUgZXh0ZW5kcyBTZW1hbnRpY0NvbnRleHQge1xuXG5cdGNvbnN0cnVjdG9yKHJ1bGVJbmRleCwgcHJlZEluZGV4LCBpc0N0eERlcGVuZGVudCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5ydWxlSW5kZXggPSBydWxlSW5kZXggPT09IHVuZGVmaW5lZCA/IC0xIDogcnVsZUluZGV4O1xuXHRcdHRoaXMucHJlZEluZGV4ID0gcHJlZEluZGV4ID09PSB1bmRlZmluZWQgPyAtMSA6IHByZWRJbmRleDtcblx0XHR0aGlzLmlzQ3R4RGVwZW5kZW50ID0gaXNDdHhEZXBlbmRlbnQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogaXNDdHhEZXBlbmRlbnQ7IC8vIGUuZy4sICRpIHJlZiBpbiBwcmVkXG5cdH1cblxuXHRldmFsdWF0ZShwYXJzZXIsIG91dGVyQ29udGV4dCkge1xuXHRcdGNvbnN0IGxvY2FsY3R4ID0gdGhpcy5pc0N0eERlcGVuZGVudCA/IG91dGVyQ29udGV4dCA6IG51bGw7XG5cdFx0cmV0dXJuIHBhcnNlci5zZW1wcmVkKGxvY2FsY3R4LCB0aGlzLnJ1bGVJbmRleCwgdGhpcy5wcmVkSW5kZXgpO1xuXHR9XG5cblx0dXBkYXRlSGFzaENvZGUoaGFzaCkge1xuXHRcdGhhc2gudXBkYXRlKHRoaXMucnVsZUluZGV4LCB0aGlzLnByZWRJbmRleCwgdGhpcy5pc0N0eERlcGVuZGVudCk7XG5cdH1cblxuXHRlcXVhbHMob3RoZXIpIHtcblx0XHRpZiAodGhpcyA9PT0gb3RoZXIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFByZWRpY2F0ZSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMucnVsZUluZGV4ID09PSBvdGhlci5ydWxlSW5kZXggJiZcblx0XHRcdFx0XHR0aGlzLnByZWRJbmRleCA9PT0gb3RoZXIucHJlZEluZGV4ICYmXG5cdFx0XHRcdFx0dGhpcy5pc0N0eERlcGVuZGVudCA9PT0gb3RoZXIuaXNDdHhEZXBlbmRlbnQ7XG5cdFx0fVxuXHR9XG5cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIFwie1wiICsgdGhpcy5ydWxlSW5kZXggKyBcIjpcIiArIHRoaXMucHJlZEluZGV4ICsgXCJ9P1wiO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIGRlZmF1bHQge0BsaW5rIFNlbWFudGljQ29udGV4dH0sIHdoaWNoIGlzIHNlbWFudGljYWxseSBlcXVpdmFsZW50IHRvXG4gKiBhIHByZWRpY2F0ZSBvZiB0aGUgZm9ybSB7QGNvZGUge3RydWV9P31cbiAqL1xuU2VtYW50aWNDb250ZXh0Lk5PTkUgPSBuZXcgUHJlZGljYXRlKCk7XG5cblxuY2xhc3MgUHJlY2VkZW5jZVByZWRpY2F0ZSBleHRlbmRzIFNlbWFudGljQ29udGV4dCB7XG5cblx0Y29uc3RydWN0b3IocHJlY2VkZW5jZSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5wcmVjZWRlbmNlID0gcHJlY2VkZW5jZSA9PT0gdW5kZWZpbmVkID8gMCA6IHByZWNlZGVuY2U7XG5cdH1cblxuXHRldmFsdWF0ZShwYXJzZXIsIG91dGVyQ29udGV4dCkge1xuXHRcdHJldHVybiBwYXJzZXIucHJlY3ByZWQob3V0ZXJDb250ZXh0LCB0aGlzLnByZWNlZGVuY2UpO1xuXHR9XG5cblx0ZXZhbFByZWNlZGVuY2UocGFyc2VyLCBvdXRlckNvbnRleHQpIHtcblx0XHRpZiAocGFyc2VyLnByZWNwcmVkKG91dGVyQ29udGV4dCwgdGhpcy5wcmVjZWRlbmNlKSkge1xuXHRcdFx0cmV0dXJuIFNlbWFudGljQ29udGV4dC5OT05FO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRjb21wYXJlVG8ob3RoZXIpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmVjZWRlbmNlIC0gb3RoZXIucHJlY2VkZW5jZTtcblx0fVxuXG5cdHVwZGF0ZUhhc2hDb2RlKGhhc2gpIHtcblx0XHRoYXNoLnVwZGF0ZSh0aGlzLnByZWNlZGVuY2UpO1xuXHR9XG5cblx0ZXF1YWxzKG90aGVyKSB7XG5cdFx0aWYgKHRoaXMgPT09IG90aGVyKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBQcmVjZWRlbmNlUHJlZGljYXRlKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcmVjZWRlbmNlID09PSBvdGhlci5wcmVjZWRlbmNlO1xuXHRcdH1cblx0fVxuXG5cdHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiBcIntcIiArIHRoaXMucHJlY2VkZW5jZSArIFwiPj1wcmVjfT9cIjtcblx0fVxuXG5cdHN0YXRpYyBmaWx0ZXJQcmVjZWRlbmNlUHJlZGljYXRlcyhzZXQpIHtcblx0XHRjb25zdCByZXN1bHQgPSBbXTtcblx0XHRzZXQudmFsdWVzKCkubWFwKCBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0XHRpZiAoY29udGV4dCBpbnN0YW5jZW9mIFByZWNlZGVuY2VQcmVkaWNhdGUpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goY29udGV4dCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxufVxuXG5jbGFzcyBBTkQgZXh0ZW5kcyBTZW1hbnRpY0NvbnRleHQge1xuXHQvKipcblx0ICogQSBzZW1hbnRpYyBjb250ZXh0IHdoaWNoIGlzIHRydWUgd2hlbmV2ZXIgbm9uZSBvZiB0aGUgY29udGFpbmVkIGNvbnRleHRzXG5cdCAqIGlzIGZhbHNlXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihhLCBiKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRjb25zdCBvcGVyYW5kcyA9IG5ldyBTZXQoKTtcblx0XHRpZiAoYSBpbnN0YW5jZW9mIEFORCkge1xuXHRcdFx0YS5vcG5kcy5tYXAoZnVuY3Rpb24obykge1xuXHRcdFx0XHRvcGVyYW5kcy5hZGQobyk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3BlcmFuZHMuYWRkKGEpO1xuXHRcdH1cblx0XHRpZiAoYiBpbnN0YW5jZW9mIEFORCkge1xuXHRcdFx0Yi5vcG5kcy5tYXAoZnVuY3Rpb24obykge1xuXHRcdFx0XHRvcGVyYW5kcy5hZGQobyk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3BlcmFuZHMuYWRkKGIpO1xuXHRcdH1cblx0XHRjb25zdCBwcmVjZWRlbmNlUHJlZGljYXRlcyA9IFByZWNlZGVuY2VQcmVkaWNhdGUuZmlsdGVyUHJlY2VkZW5jZVByZWRpY2F0ZXMob3BlcmFuZHMpO1xuXHRcdGlmIChwcmVjZWRlbmNlUHJlZGljYXRlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHQvLyBpbnRlcmVzdGVkIGluIHRoZSB0cmFuc2l0aW9uIHdpdGggdGhlIGxvd2VzdCBwcmVjZWRlbmNlXG5cdFx0XHRsZXQgcmVkdWNlZCA9IG51bGw7XG5cdFx0XHRwcmVjZWRlbmNlUHJlZGljYXRlcy5tYXAoIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0aWYocmVkdWNlZD09PW51bGwgfHwgcC5wcmVjZWRlbmNlPHJlZHVjZWQucHJlY2VkZW5jZSkge1xuXHRcdFx0XHRcdHJlZHVjZWQgPSBwO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdG9wZXJhbmRzLmFkZChyZWR1Y2VkKTtcblx0XHR9XG5cdFx0dGhpcy5vcG5kcyA9IEFycmF5LmZyb20ob3BlcmFuZHMudmFsdWVzKCkpO1xuXHR9XG5cblx0ZXF1YWxzKG90aGVyKSB7XG5cdFx0aWYgKHRoaXMgPT09IG90aGVyKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBBTkQpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBlcXVhbEFycmF5cyh0aGlzLm9wbmRzLCBvdGhlci5vcG5kcyk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlSGFzaENvZGUoaGFzaCkge1xuXHRcdGhhc2gudXBkYXRlKHRoaXMub3BuZHMsIFwiQU5EXCIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIHtAaW5oZXJpdERvY31cblx0ICpcblx0ICogPHA+XG5cdCAqIFRoZSBldmFsdWF0aW9uIG9mIHByZWRpY2F0ZXMgYnkgdGhpcyBjb250ZXh0IGlzIHNob3J0LWNpcmN1aXRpbmcsIGJ1dFxuXHQgKiB1bm9yZGVyZWQuPC9wPlxuXHQgKi9cblx0ZXZhbHVhdGUocGFyc2VyLCBvdXRlckNvbnRleHQpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3BuZHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICghdGhpcy5vcG5kc1tpXS5ldmFsdWF0ZShwYXJzZXIsIG91dGVyQ29udGV4dCkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGV2YWxQcmVjZWRlbmNlKHBhcnNlciwgb3V0ZXJDb250ZXh0KSB7XG5cdFx0bGV0IGRpZmZlcnMgPSBmYWxzZTtcblx0XHRjb25zdCBvcGVyYW5kcyA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vcG5kcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY29udGV4dCA9IHRoaXMub3BuZHNbaV07XG5cdFx0XHRjb25zdCBldmFsdWF0ZWQgPSBjb250ZXh0LmV2YWxQcmVjZWRlbmNlKHBhcnNlciwgb3V0ZXJDb250ZXh0KTtcblx0XHRcdGRpZmZlcnMgfD0gKGV2YWx1YXRlZCAhPT0gY29udGV4dCk7XG5cdFx0XHRpZiAoZXZhbHVhdGVkID09PSBudWxsKSB7XG5cdFx0XHRcdC8vIFRoZSBBTkQgY29udGV4dCBpcyBmYWxzZSBpZiBhbnkgZWxlbWVudCBpcyBmYWxzZVxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH0gZWxzZSBpZiAoZXZhbHVhdGVkICE9PSBTZW1hbnRpY0NvbnRleHQuTk9ORSkge1xuXHRcdFx0XHQvLyBSZWR1Y2UgdGhlIHJlc3VsdCBieSBza2lwcGluZyB0cnVlIGVsZW1lbnRzXG5cdFx0XHRcdG9wZXJhbmRzLnB1c2goZXZhbHVhdGVkKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFkaWZmZXJzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKG9wZXJhbmRzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Ly8gYWxsIGVsZW1lbnRzIHdlcmUgdHJ1ZSwgc28gdGhlIEFORCBjb250ZXh0IGlzIHRydWVcblx0XHRcdHJldHVybiBTZW1hbnRpY0NvbnRleHQuTk9ORTtcblx0XHR9XG5cdFx0bGV0IHJlc3VsdCA9IG51bGw7XG5cdFx0b3BlcmFuZHMubWFwKGZ1bmN0aW9uKG8pIHtcblx0XHRcdHJlc3VsdCA9IHJlc3VsdCA9PT0gbnVsbCA/IG8gOiBTZW1hbnRpY0NvbnRleHQuYW5kQ29udGV4dChyZXN1bHQsIG8pO1xuXHRcdH0pO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRjb25zdCBzID0gdGhpcy5vcG5kcy5tYXAobyA9PiBvLnRvU3RyaW5nKCkpO1xuXHRcdHJldHVybiAocy5sZW5ndGggPiAzID8gcy5zbGljZSgzKSA6IHMpLmpvaW4oXCImJlwiKTtcblx0fVxufVxuXG5cbmNsYXNzIE9SIGV4dGVuZHMgU2VtYW50aWNDb250ZXh0IHtcblx0LyoqXG5cdCAqIEEgc2VtYW50aWMgY29udGV4dCB3aGljaCBpcyB0cnVlIHdoZW5ldmVyIGF0IGxlYXN0IG9uZSBvZiB0aGUgY29udGFpbmVkXG5cdCAqIGNvbnRleHRzIGlzIHRydWVcblx0ICovXG5cdGNvbnN0cnVjdG9yKGEsIGIpIHtcblx0XHRzdXBlcigpO1xuXHRcdGNvbnN0IG9wZXJhbmRzID0gbmV3IFNldCgpO1xuXHRcdGlmIChhIGluc3RhbmNlb2YgT1IpIHtcblx0XHRcdGEub3BuZHMubWFwKGZ1bmN0aW9uKG8pIHtcblx0XHRcdFx0b3BlcmFuZHMuYWRkKG8pO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9wZXJhbmRzLmFkZChhKTtcblx0XHR9XG5cdFx0aWYgKGIgaW5zdGFuY2VvZiBPUikge1xuXHRcdFx0Yi5vcG5kcy5tYXAoZnVuY3Rpb24obykge1xuXHRcdFx0XHRvcGVyYW5kcy5hZGQobyk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3BlcmFuZHMuYWRkKGIpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHByZWNlZGVuY2VQcmVkaWNhdGVzID0gUHJlY2VkZW5jZVByZWRpY2F0ZS5maWx0ZXJQcmVjZWRlbmNlUHJlZGljYXRlcyhvcGVyYW5kcyk7XG5cdFx0aWYgKHByZWNlZGVuY2VQcmVkaWNhdGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdC8vIGludGVyZXN0ZWQgaW4gdGhlIHRyYW5zaXRpb24gd2l0aCB0aGUgaGlnaGVzdCBwcmVjZWRlbmNlXG5cdFx0XHRjb25zdCBzID0gcHJlY2VkZW5jZVByZWRpY2F0ZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRcdHJldHVybiBhLmNvbXBhcmVUbyhiKTtcblx0XHRcdH0pO1xuXHRcdFx0Y29uc3QgcmVkdWNlZCA9IHNbcy5sZW5ndGgtMV07XG5cdFx0XHRvcGVyYW5kcy5hZGQocmVkdWNlZCk7XG5cdFx0fVxuXHRcdHRoaXMub3BuZHMgPSBBcnJheS5mcm9tKG9wZXJhbmRzLnZhbHVlcygpKTtcblx0fVxuXG5cdGVxdWFscyhvdGhlcikge1xuXHRcdGlmICh0aGlzID09PSBvdGhlcikge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIGlmICghKG90aGVyIGluc3RhbmNlb2YgT1IpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBlcXVhbEFycmF5cyh0aGlzLm9wbmRzLCBvdGhlci5vcG5kcyk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlSGFzaENvZGUoaGFzaCkge1xuXHRcdGhhc2gudXBkYXRlKHRoaXMub3BuZHMsIFwiT1JcIik7XG5cdH1cblxuXHQvKipcblx0ICogPHA+XG5cdCAqIFRoZSBldmFsdWF0aW9uIG9mIHByZWRpY2F0ZXMgYnkgdGhpcyBjb250ZXh0IGlzIHNob3J0LWNpcmN1aXRpbmcsIGJ1dFxuXHQgKiB1bm9yZGVyZWQuPC9wPlxuXHQgKi9cblx0ZXZhbHVhdGUocGFyc2VyLCBvdXRlckNvbnRleHQpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3BuZHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICh0aGlzLm9wbmRzW2ldLmV2YWx1YXRlKHBhcnNlciwgb3V0ZXJDb250ZXh0KSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZXZhbFByZWNlZGVuY2UocGFyc2VyLCBvdXRlckNvbnRleHQpIHtcblx0XHRsZXQgZGlmZmVycyA9IGZhbHNlO1xuXHRcdGNvbnN0IG9wZXJhbmRzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9wbmRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBjb250ZXh0ID0gdGhpcy5vcG5kc1tpXTtcblx0XHRcdGNvbnN0IGV2YWx1YXRlZCA9IGNvbnRleHQuZXZhbFByZWNlZGVuY2UocGFyc2VyLCBvdXRlckNvbnRleHQpO1xuXHRcdFx0ZGlmZmVycyB8PSAoZXZhbHVhdGVkICE9PSBjb250ZXh0KTtcblx0XHRcdGlmIChldmFsdWF0ZWQgPT09IFNlbWFudGljQ29udGV4dC5OT05FKSB7XG5cdFx0XHRcdC8vIFRoZSBPUiBjb250ZXh0IGlzIHRydWUgaWYgYW55IGVsZW1lbnQgaXMgdHJ1ZVxuXHRcdFx0XHRyZXR1cm4gU2VtYW50aWNDb250ZXh0Lk5PTkU7XG5cdFx0XHR9IGVsc2UgaWYgKGV2YWx1YXRlZCAhPT0gbnVsbCkge1xuXHRcdFx0XHQvLyBSZWR1Y2UgdGhlIHJlc3VsdCBieSBza2lwcGluZyBmYWxzZSBlbGVtZW50c1xuXHRcdFx0XHRvcGVyYW5kcy5wdXNoKGV2YWx1YXRlZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICghZGlmZmVycykge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmIChvcGVyYW5kcy5sZW5ndGggPT09IDApIHtcblx0XHRcdC8vIGFsbCBlbGVtZW50cyB3ZXJlIGZhbHNlLCBzbyB0aGUgT1IgY29udGV4dCBpcyBmYWxzZVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGNvbnN0IHJlc3VsdCA9IG51bGw7XG5cdFx0b3BlcmFuZHMubWFwKGZ1bmN0aW9uKG8pIHtcblx0XHRcdHJldHVybiByZXN1bHQgPT09IG51bGwgPyBvIDogU2VtYW50aWNDb250ZXh0Lm9yQ29udGV4dChyZXN1bHQsIG8pO1xuXHRcdH0pO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRjb25zdCBzID0gdGhpcy5vcG5kcy5tYXAobyA9PiBvLnRvU3RyaW5nKCkpO1xuXHRcdHJldHVybiAocy5sZW5ndGggPiAzID8gcy5zbGljZSgzKSA6IHMpLmpvaW4oXCJ8fFwiKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0U2VtYW50aWNDb250ZXh0LFxuXHRQcmVjZWRlbmNlUHJlZGljYXRlLFxuXHRQcmVkaWNhdGVcbn1cbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge1Rva2VufSA9IHJlcXVpcmUoJy4vLi4vVG9rZW4nKTtcbmNvbnN0IHtJbnRlcnZhbFNldH0gPSByZXF1aXJlKCcuLy4uL0ludGVydmFsU2V0Jyk7XG5jb25zdCB7UHJlZGljYXRlLCBQcmVjZWRlbmNlUHJlZGljYXRlfSA9IHJlcXVpcmUoJy4vU2VtYW50aWNDb250ZXh0Jyk7XG5cbi8qKlxuICogQW4gQVROIHRyYW5zaXRpb24gYmV0d2VlbiBhbnkgdHdvIEFUTiBzdGF0ZXMuICBTdWJjbGFzc2VzIGRlZmluZVxuICogYXRvbSwgc2V0LCBlcHNpbG9uLCBhY3Rpb24sIHByZWRpY2F0ZSwgcnVsZSB0cmFuc2l0aW9ucy5cbiAqXG4gKiA8cD5UaGlzIGlzIGEgb25lIHdheSBsaW5rLiAgSXQgZW1hbmF0ZXMgZnJvbSBhIHN0YXRlICh1c3VhbGx5IHZpYSBhIGxpc3Qgb2ZcbiAqIHRyYW5zaXRpb25zKSBhbmQgaGFzIGEgdGFyZ2V0IHN0YXRlLjwvcD5cbiAqXG4gKiA8cD5TaW5jZSB3ZSBuZXZlciBoYXZlIHRvIGNoYW5nZSB0aGUgQVROIHRyYW5zaXRpb25zIG9uY2Ugd2UgY29uc3RydWN0IGl0LFxuICogd2UgY2FuIGZpeCB0aGVzZSB0cmFuc2l0aW9ucyBhcyBzcGVjaWZpYyBjbGFzc2VzLiBUaGUgREZBIHRyYW5zaXRpb25zXG4gKiBvbiB0aGUgb3RoZXIgaGFuZCBuZWVkIHRvIHVwZGF0ZSB0aGUgbGFiZWxzIGFzIGl0IGFkZHMgdHJhbnNpdGlvbnMgdG9cbiAqIHRoZSBzdGF0ZXMuIFdlJ2xsIHVzZSB0aGUgdGVybSBFZGdlIGZvciB0aGUgREZBIHRvIGRpc3Rpbmd1aXNoIHRoZW0gZnJvbVxuICogQVROIHRyYW5zaXRpb25zLjwvcD5cbiAqL1xuY2xhc3MgVHJhbnNpdGlvbiB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0KSB7XG4gICAgICAgIC8vIFRoZSB0YXJnZXQgb2YgdGhpcyB0cmFuc2l0aW9uLlxuICAgICAgICBpZiAodGFyZ2V0PT09dW5kZWZpbmVkIHx8IHRhcmdldD09PW51bGwpIHtcbiAgICAgICAgICAgIHRocm93IFwidGFyZ2V0IGNhbm5vdCBiZSBudWxsLlwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAvLyBBcmUgd2UgZXBzaWxvbiwgYWN0aW9uLCBzZW1wcmVkP1xuICAgICAgICB0aGlzLmlzRXBzaWxvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxhYmVsID0gbnVsbDtcbiAgICB9XG59XG5cbi8vIGNvbnN0YW50cyBmb3Igc2VyaWFsaXphdGlvblxuXG5UcmFuc2l0aW9uLkVQU0lMT04gPSAxO1xuVHJhbnNpdGlvbi5SQU5HRSA9IDI7XG5UcmFuc2l0aW9uLlJVTEUgPSAzO1xuLy8gZS5nLiwge2lzVHlwZShpbnB1dC5MVCgxKSl9P1xuVHJhbnNpdGlvbi5QUkVESUNBVEUgPSA0O1xuVHJhbnNpdGlvbi5BVE9NID0gNTtcblRyYW5zaXRpb24uQUNUSU9OID0gNjtcbi8vIH4oQXxCKSBvciB+YXRvbSwgd2lsZGNhcmQsIHdoaWNoIGNvbnZlcnQgdG8gbmV4dCAyXG5UcmFuc2l0aW9uLlNFVCA9IDc7XG5UcmFuc2l0aW9uLk5PVF9TRVQgPSA4O1xuVHJhbnNpdGlvbi5XSUxEQ0FSRCA9IDk7XG5UcmFuc2l0aW9uLlBSRUNFREVOQ0UgPSAxMDtcblxuVHJhbnNpdGlvbi5zZXJpYWxpemF0aW9uTmFtZXMgPSBbXG4gICAgICAgICAgICBcIklOVkFMSURcIixcbiAgICAgICAgICAgIFwiRVBTSUxPTlwiLFxuICAgICAgICAgICAgXCJSQU5HRVwiLFxuICAgICAgICAgICAgXCJSVUxFXCIsXG4gICAgICAgICAgICBcIlBSRURJQ0FURVwiLFxuICAgICAgICAgICAgXCJBVE9NXCIsXG4gICAgICAgICAgICBcIkFDVElPTlwiLFxuICAgICAgICAgICAgXCJTRVRcIixcbiAgICAgICAgICAgIFwiTk9UX1NFVFwiLFxuICAgICAgICAgICAgXCJXSUxEQ0FSRFwiLFxuICAgICAgICAgICAgXCJQUkVDRURFTkNFXCJcbiAgICAgICAgXTtcblxuVHJhbnNpdGlvbi5zZXJpYWxpemF0aW9uVHlwZXMgPSB7XG4gICAgICAgIEVwc2lsb25UcmFuc2l0aW9uOiBUcmFuc2l0aW9uLkVQU0lMT04sXG4gICAgICAgIFJhbmdlVHJhbnNpdGlvbjogVHJhbnNpdGlvbi5SQU5HRSxcbiAgICAgICAgUnVsZVRyYW5zaXRpb246IFRyYW5zaXRpb24uUlVMRSxcbiAgICAgICAgUHJlZGljYXRlVHJhbnNpdGlvbjogVHJhbnNpdGlvbi5QUkVESUNBVEUsXG4gICAgICAgIEF0b21UcmFuc2l0aW9uOiBUcmFuc2l0aW9uLkFUT00sXG4gICAgICAgIEFjdGlvblRyYW5zaXRpb246IFRyYW5zaXRpb24uQUNUSU9OLFxuICAgICAgICBTZXRUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLlNFVCxcbiAgICAgICAgTm90U2V0VHJhbnNpdGlvbjogVHJhbnNpdGlvbi5OT1RfU0VULFxuICAgICAgICBXaWxkY2FyZFRyYW5zaXRpb246IFRyYW5zaXRpb24uV0lMRENBUkQsXG4gICAgICAgIFByZWNlZGVuY2VQcmVkaWNhdGVUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLlBSRUNFREVOQ0VcbiAgICB9O1xuXG5cbi8vIFRPRE86IG1ha2UgYWxsIHRyYW5zaXRpb25zIHNldHM/IG5vLCBzaG91bGQgcmVtb3ZlIHNldCBlZGdlc1xuXG5jbGFzcyBBdG9tVHJhbnNpdGlvbiBleHRlbmRzIFRyYW5zaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgbGFiZWwpIHtcbiAgICAgICAgc3VwZXIodGFyZ2V0KTtcbiAgICAgICAgLy8gVGhlIHRva2VuIHR5cGUgb3IgY2hhcmFjdGVyIHZhbHVlOyBvciwgc2lnbmlmaWVzIHNwZWNpYWwgbGFiZWwuXG4gICAgICAgIHRoaXMubGFiZWxfID0gbGFiZWw7XG4gICAgICAgIHRoaXMubGFiZWwgPSB0aGlzLm1ha2VMYWJlbCgpO1xuICAgICAgICB0aGlzLnNlcmlhbGl6YXRpb25UeXBlID0gVHJhbnNpdGlvbi5BVE9NO1xuICAgIH1cblxuICAgIG1ha2VMYWJlbCgpIHtcbiAgICAgICAgY29uc3QgcyA9IG5ldyBJbnRlcnZhbFNldCgpO1xuICAgICAgICBzLmFkZE9uZSh0aGlzLmxhYmVsXyk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIG1hdGNoZXMoc3ltYm9sLCBtaW5Wb2NhYlN5bWJvbCwgbWF4Vm9jYWJTeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWxfID09PSBzeW1ib2w7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhYmVsXztcbiAgICB9XG59XG5cblxuY2xhc3MgUnVsZVRyYW5zaXRpb24gZXh0ZW5kcyBUcmFuc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihydWxlU3RhcnQsIHJ1bGVJbmRleCwgcHJlY2VkZW5jZSwgZm9sbG93U3RhdGUpIHtcbiAgICAgICAgc3VwZXIocnVsZVN0YXJ0KTtcbiAgICAgICAgLy8gcHRyIHRvIHRoZSBydWxlIGRlZmluaXRpb24gb2JqZWN0IGZvciB0aGlzIHJ1bGUgcmVmXG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gcnVsZUluZGV4O1xuICAgICAgICB0aGlzLnByZWNlZGVuY2UgPSBwcmVjZWRlbmNlO1xuICAgICAgICAvLyB3aGF0IG5vZGUgdG8gYmVnaW4gY29tcHV0YXRpb25zIGZvbGxvd2luZyByZWYgdG8gcnVsZVxuICAgICAgICB0aGlzLmZvbGxvd1N0YXRlID0gZm9sbG93U3RhdGU7XG4gICAgICAgIHRoaXMuc2VyaWFsaXphdGlvblR5cGUgPSBUcmFuc2l0aW9uLlJVTEU7XG4gICAgICAgIHRoaXMuaXNFcHNpbG9uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBtYXRjaGVzKHN5bWJvbCwgbWluVm9jYWJTeW1ib2wsIG1heFZvY2FiU3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmNsYXNzIEVwc2lsb25UcmFuc2l0aW9uIGV4dGVuZHMgVHJhbnNpdGlvbiB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBvdXRlcm1vc3RQcmVjZWRlbmNlUmV0dXJuKSB7XG4gICAgICAgIHN1cGVyKHRhcmdldCk7XG4gICAgICAgIHRoaXMuc2VyaWFsaXphdGlvblR5cGUgPSBUcmFuc2l0aW9uLkVQU0lMT047XG4gICAgICAgIHRoaXMuaXNFcHNpbG9uID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vdXRlcm1vc3RQcmVjZWRlbmNlUmV0dXJuID0gb3V0ZXJtb3N0UHJlY2VkZW5jZVJldHVybjtcbiAgICB9XG5cbiAgICBtYXRjaGVzKHN5bWJvbCwgbWluVm9jYWJTeW1ib2wsIG1heFZvY2FiU3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiZXBzaWxvblwiO1xuICAgIH1cbn1cblxuXG5jbGFzcyBSYW5nZVRyYW5zaXRpb24gZXh0ZW5kcyBUcmFuc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIHN0YXJ0LCBzdG9wKSB7XG4gICAgICAgIHN1cGVyKHRhcmdldCk7XG4gICAgICAgIHRoaXMuc2VyaWFsaXphdGlvblR5cGUgPSBUcmFuc2l0aW9uLlJBTkdFO1xuICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuc3RvcCA9IHN0b3A7XG4gICAgICAgIHRoaXMubGFiZWwgPSB0aGlzLm1ha2VMYWJlbCgpO1xuICAgIH1cblxuICAgIG1ha2VMYWJlbCgpIHtcbiAgICAgICAgY29uc3QgcyA9IG5ldyBJbnRlcnZhbFNldCgpO1xuICAgICAgICBzLmFkZFJhbmdlKHRoaXMuc3RhcnQsIHRoaXMuc3RvcCk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIG1hdGNoZXMoc3ltYm9sLCBtaW5Wb2NhYlN5bWJvbCwgbWF4Vm9jYWJTeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbCA+PSB0aGlzLnN0YXJ0ICYmIHN5bWJvbCA8PSB0aGlzLnN0b3A7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIidcIiArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5zdGFydCkgKyBcIicuLidcIiArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5zdG9wKSArIFwiJ1wiO1xuICAgIH1cbn1cblxuXG5jbGFzcyBBYnN0cmFjdFByZWRpY2F0ZVRyYW5zaXRpb24gZXh0ZW5kcyBUcmFuc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICAgICAgc3VwZXIodGFyZ2V0KTtcbiAgICB9XG59XG5cbmNsYXNzIFByZWRpY2F0ZVRyYW5zaXRpb24gZXh0ZW5kcyBBYnN0cmFjdFByZWRpY2F0ZVRyYW5zaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgcnVsZUluZGV4LCBwcmVkSW5kZXgsIGlzQ3R4RGVwZW5kZW50KSB7XG4gICAgICAgIHN1cGVyKHRhcmdldCk7XG4gICAgICAgIHRoaXMuc2VyaWFsaXphdGlvblR5cGUgPSBUcmFuc2l0aW9uLlBSRURJQ0FURTtcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBydWxlSW5kZXg7XG4gICAgICAgIHRoaXMucHJlZEluZGV4ID0gcHJlZEluZGV4O1xuICAgICAgICB0aGlzLmlzQ3R4RGVwZW5kZW50ID0gaXNDdHhEZXBlbmRlbnQ7IC8vIGUuZy4sICRpIHJlZiBpbiBwcmVkXG4gICAgICAgIHRoaXMuaXNFcHNpbG9uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBtYXRjaGVzKHN5bWJvbCwgbWluVm9jYWJTeW1ib2wsIG1heFZvY2FiU3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRQcmVkaWNhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJlZGljYXRlKHRoaXMucnVsZUluZGV4LCB0aGlzLnByZWRJbmRleCwgdGhpcy5pc0N0eERlcGVuZGVudCk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcInByZWRfXCIgKyB0aGlzLnJ1bGVJbmRleCArIFwiOlwiICsgdGhpcy5wcmVkSW5kZXg7XG4gICAgfVxufVxuXG5cbmNsYXNzIEFjdGlvblRyYW5zaXRpb24gZXh0ZW5kcyBUcmFuc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIHJ1bGVJbmRleCwgYWN0aW9uSW5kZXgsIGlzQ3R4RGVwZW5kZW50KSB7XG4gICAgICAgIHN1cGVyKHRhcmdldCk7XG4gICAgICAgIHRoaXMuc2VyaWFsaXphdGlvblR5cGUgPSBUcmFuc2l0aW9uLkFDVElPTjtcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBydWxlSW5kZXg7XG4gICAgICAgIHRoaXMuYWN0aW9uSW5kZXggPSBhY3Rpb25JbmRleD09PXVuZGVmaW5lZCA/IC0xIDogYWN0aW9uSW5kZXg7XG4gICAgICAgIHRoaXMuaXNDdHhEZXBlbmRlbnQgPSBpc0N0eERlcGVuZGVudD09PXVuZGVmaW5lZCA/IGZhbHNlIDogaXNDdHhEZXBlbmRlbnQ7IC8vIGUuZy4sICRpIHJlZiBpbiBwcmVkXG4gICAgICAgIHRoaXMuaXNFcHNpbG9uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBtYXRjaGVzKHN5bWJvbCwgbWluVm9jYWJTeW1ib2wsIG1heFZvY2FiU3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiYWN0aW9uX1wiICsgdGhpcy5ydWxlSW5kZXggKyBcIjpcIiArIHRoaXMuYWN0aW9uSW5kZXg7XG4gICAgfVxufVxuXG5cbi8vIEEgdHJhbnNpdGlvbiBjb250YWluaW5nIGEgc2V0IG9mIHZhbHVlcy5cbmNsYXNzIFNldFRyYW5zaXRpb24gZXh0ZW5kcyBUcmFuc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIHNldCkge1xuICAgICAgICBzdXBlcih0YXJnZXQpO1xuICAgICAgICB0aGlzLnNlcmlhbGl6YXRpb25UeXBlID0gVHJhbnNpdGlvbi5TRVQ7XG4gICAgICAgIGlmIChzZXQgIT09dW5kZWZpbmVkICYmIHNldCAhPT1udWxsKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsID0gc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYWJlbCA9IG5ldyBJbnRlcnZhbFNldCgpO1xuICAgICAgICAgICAgdGhpcy5sYWJlbC5hZGRPbmUoVG9rZW4uSU5WQUxJRF9UWVBFKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1hdGNoZXMoc3ltYm9sLCBtaW5Wb2NhYlN5bWJvbCwgbWF4Vm9jYWJTeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWwuY29udGFpbnMoc3ltYm9sKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWwudG9TdHJpbmcoKTtcbiAgICB9XG59XG5cbmNsYXNzIE5vdFNldFRyYW5zaXRpb24gZXh0ZW5kcyBTZXRUcmFuc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIHNldCkge1xuICAgICAgICBzdXBlcih0YXJnZXQsIHNldCk7XG4gICAgICAgIHRoaXMuc2VyaWFsaXphdGlvblR5cGUgPSBUcmFuc2l0aW9uLk5PVF9TRVQ7XG4gICAgfVxuXG4gICAgbWF0Y2hlcyhzeW1ib2wsIG1pblZvY2FiU3ltYm9sLCBtYXhWb2NhYlN5bWJvbCkge1xuICAgICAgICByZXR1cm4gc3ltYm9sID49IG1pblZvY2FiU3ltYm9sICYmIHN5bWJvbCA8PSBtYXhWb2NhYlN5bWJvbCAmJlxuICAgICAgICAgICAgICAgICFzdXBlci5tYXRjaGVzKHN5bWJvbCwgbWluVm9jYWJTeW1ib2wsIG1heFZvY2FiU3ltYm9sKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICd+JyArIHN1cGVyLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuXG5jbGFzcyBXaWxkY2FyZFRyYW5zaXRpb24gZXh0ZW5kcyBUcmFuc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICAgICAgc3VwZXIodGFyZ2V0KTtcbiAgICAgICAgdGhpcy5zZXJpYWxpemF0aW9uVHlwZSA9IFRyYW5zaXRpb24uV0lMRENBUkQ7XG4gICAgfVxuXG4gICAgbWF0Y2hlcyhzeW1ib2wsIG1pblZvY2FiU3ltYm9sLCBtYXhWb2NhYlN5bWJvbCkge1xuICAgICAgICByZXR1cm4gc3ltYm9sID49IG1pblZvY2FiU3ltYm9sICYmIHN5bWJvbCA8PSBtYXhWb2NhYlN5bWJvbDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiLlwiO1xuICAgIH1cbn1cblxuY2xhc3MgUHJlY2VkZW5jZVByZWRpY2F0ZVRyYW5zaXRpb24gZXh0ZW5kcyBBYnN0cmFjdFByZWRpY2F0ZVRyYW5zaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgcHJlY2VkZW5jZSkge1xuICAgICAgICBzdXBlcih0YXJnZXQpO1xuICAgICAgICB0aGlzLnNlcmlhbGl6YXRpb25UeXBlID0gVHJhbnNpdGlvbi5QUkVDRURFTkNFO1xuICAgICAgICB0aGlzLnByZWNlZGVuY2UgPSBwcmVjZWRlbmNlO1xuICAgICAgICB0aGlzLmlzRXBzaWxvbiA9IHRydWU7XG4gICAgfVxuXG4gICAgbWF0Y2hlcyhzeW1ib2wsIG1pblZvY2FiU3ltYm9sLCBtYXhWb2NhYlN5bWJvbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0UHJlZGljYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByZWNlZGVuY2VQcmVkaWNhdGUodGhpcy5wcmVjZWRlbmNlKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlY2VkZW5jZSArIFwiID49IF9wXCI7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBUcmFuc2l0aW9uLFxuICAgIEF0b21UcmFuc2l0aW9uLFxuICAgIFNldFRyYW5zaXRpb24sXG4gICAgTm90U2V0VHJhbnNpdGlvbixcbiAgICBSdWxlVHJhbnNpdGlvbixcbiAgICBBY3Rpb25UcmFuc2l0aW9uLFxuICAgIEVwc2lsb25UcmFuc2l0aW9uLFxuICAgIFJhbmdlVHJhbnNpdGlvbixcbiAgICBXaWxkY2FyZFRyYW5zaXRpb24sXG4gICAgUHJlZGljYXRlVHJhbnNpdGlvbixcbiAgICBQcmVjZWRlbmNlUHJlZGljYXRlVHJhbnNpdGlvbixcbiAgICBBYnN0cmFjdFByZWRpY2F0ZVRyYW5zaXRpb25cbn1cbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuZXhwb3J0cy5BVE4gPSByZXF1aXJlKCcuL0FUTicpO1xuZXhwb3J0cy5BVE5EZXNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0FUTkRlc2VyaWFsaXplcicpO1xuZXhwb3J0cy5MZXhlckFUTlNpbXVsYXRvciA9IHJlcXVpcmUoJy4vTGV4ZXJBVE5TaW11bGF0b3InKTtcbmV4cG9ydHMuUGFyc2VyQVROU2ltdWxhdG9yID0gcmVxdWlyZSgnLi9QYXJzZXJBVE5TaW11bGF0b3InKTtcbmV4cG9ydHMuUHJlZGljdGlvbk1vZGUgPSByZXF1aXJlKCcuL1ByZWRpY3Rpb25Nb2RlJyk7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IHtTZXR9ID0gcmVxdWlyZShcIi4uL1V0aWxzXCIpO1xuY29uc3Qge0RGQVN0YXRlfSA9IHJlcXVpcmUoJy4vREZBU3RhdGUnKTtcbmNvbnN0IHtTdGFyTG9vcEVudHJ5U3RhdGV9ID0gcmVxdWlyZSgnLi4vYXRuL0FUTlN0YXRlJyk7XG5jb25zdCB7QVROQ29uZmlnU2V0fSA9IHJlcXVpcmUoJy4vLi4vYXRuL0FUTkNvbmZpZ1NldCcpO1xuY29uc3Qge0RGQVNlcmlhbGl6ZXJ9ID0gcmVxdWlyZSgnLi9ERkFTZXJpYWxpemVyJyk7XG5jb25zdCB7TGV4ZXJERkFTZXJpYWxpemVyfSA9IHJlcXVpcmUoJy4vREZBU2VyaWFsaXplcicpO1xuXG5jbGFzcyBERkEge1xuXHRjb25zdHJ1Y3RvcihhdG5TdGFydFN0YXRlLCBkZWNpc2lvbikge1xuXHRcdGlmIChkZWNpc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRkZWNpc2lvbiA9IDA7XG5cdFx0fVxuXHRcdC8qKlxuXHRcdCAqIEZyb20gd2hpY2ggQVROIHN0YXRlIGRpZCB3ZSBjcmVhdGUgdGhpcyBERkE/XG5cdFx0ICovXG5cdFx0dGhpcy5hdG5TdGFydFN0YXRlID0gYXRuU3RhcnRTdGF0ZTtcblx0XHR0aGlzLmRlY2lzaW9uID0gZGVjaXNpb247XG5cdFx0LyoqXG5cdFx0ICogQSBzZXQgb2YgYWxsIERGQSBzdGF0ZXMuIFVzZSB7QGxpbmsgTWFwfSBzbyB3ZSBjYW4gZ2V0IG9sZCBzdGF0ZSBiYWNrXG5cdFx0ICogKHtAbGluayBTZXR9IG9ubHkgYWxsb3dzIHlvdSB0byBzZWUgaWYgaXQncyB0aGVyZSkuXG5cdFx0ICovXG5cdFx0dGhpcy5fc3RhdGVzID0gbmV3IFNldCgpO1xuXHRcdHRoaXMuczAgPSBudWxsO1xuXHRcdC8qKlxuXHRcdCAqIHtAY29kZSB0cnVlfSBpZiB0aGlzIERGQSBpcyBmb3IgYSBwcmVjZWRlbmNlIGRlY2lzaW9uOyBvdGhlcndpc2UsXG5cdFx0ICoge0Bjb2RlIGZhbHNlfS4gVGhpcyBpcyB0aGUgYmFja2luZyBmaWVsZCBmb3Ige0BsaW5rIC8vaXNQcmVjZWRlbmNlRGZhfSxcblx0XHQgKiB7QGxpbmsgLy9zZXRQcmVjZWRlbmNlRGZhfVxuXHRcdCAqL1xuXHRcdHRoaXMucHJlY2VkZW5jZURmYSA9IGZhbHNlO1xuXHRcdGlmIChhdG5TdGFydFN0YXRlIGluc3RhbmNlb2YgU3Rhckxvb3BFbnRyeVN0YXRlKVxuXHRcdHtcblx0XHRcdGlmIChhdG5TdGFydFN0YXRlLmlzUHJlY2VkZW5jZURlY2lzaW9uKSB7XG5cdFx0XHRcdHRoaXMucHJlY2VkZW5jZURmYSA9IHRydWU7XG5cdFx0XHRcdGNvbnN0IHByZWNlZGVuY2VTdGF0ZSA9IG5ldyBERkFTdGF0ZShudWxsLCBuZXcgQVROQ29uZmlnU2V0KCkpO1xuXHRcdFx0XHRwcmVjZWRlbmNlU3RhdGUuZWRnZXMgPSBbXTtcblx0XHRcdFx0cHJlY2VkZW5jZVN0YXRlLmlzQWNjZXB0U3RhdGUgPSBmYWxzZTtcblx0XHRcdFx0cHJlY2VkZW5jZVN0YXRlLnJlcXVpcmVzRnVsbENvbnRleHQgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5zMCA9IHByZWNlZGVuY2VTdGF0ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBzdGFydCBzdGF0ZSBmb3IgYSBzcGVjaWZpYyBwcmVjZWRlbmNlIHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0gcHJlY2VkZW5jZSBUaGUgY3VycmVudCBwcmVjZWRlbmNlLlxuXHQgKiBAcmV0dXJuIFRoZSBzdGFydCBzdGF0ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBzcGVjaWZpZWQgcHJlY2VkZW5jZSwgb3Jcblx0ICoge0Bjb2RlIG51bGx9IGlmIG5vIHN0YXJ0IHN0YXRlIGV4aXN0cyBmb3IgdGhlIHNwZWNpZmllZCBwcmVjZWRlbmNlLlxuXHQgKlxuXHQgKiBAdGhyb3dzIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiBpZiB0aGlzIGlzIG5vdCBhIHByZWNlZGVuY2UgREZBLlxuXHQgKiBAc2VlIC8vaXNQcmVjZWRlbmNlRGZhKClcblx0ICovXG5cdGdldFByZWNlZGVuY2VTdGFydFN0YXRlKHByZWNlZGVuY2UpIHtcblx0XHRpZiAoISh0aGlzLnByZWNlZGVuY2VEZmEpKSB7XG5cdFx0XHR0aHJvdyAoXCJPbmx5IHByZWNlZGVuY2UgREZBcyBtYXkgY29udGFpbiBhIHByZWNlZGVuY2Ugc3RhcnQgc3RhdGUuXCIpO1xuXHRcdH1cblx0XHQvLyBzMC5lZGdlcyBpcyBuZXZlciBudWxsIGZvciBhIHByZWNlZGVuY2UgREZBXG5cdFx0aWYgKHByZWNlZGVuY2UgPCAwIHx8IHByZWNlZGVuY2UgPj0gdGhpcy5zMC5lZGdlcy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5zMC5lZGdlc1twcmVjZWRlbmNlXSB8fCBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldCB0aGUgc3RhcnQgc3RhdGUgZm9yIGEgc3BlY2lmaWMgcHJlY2VkZW5jZSB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHByZWNlZGVuY2UgVGhlIGN1cnJlbnQgcHJlY2VkZW5jZS5cblx0ICogQHBhcmFtIHN0YXJ0U3RhdGUgVGhlIHN0YXJ0IHN0YXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNwZWNpZmllZFxuXHQgKiBwcmVjZWRlbmNlLlxuXHQgKlxuXHQgKiBAdGhyb3dzIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiBpZiB0aGlzIGlzIG5vdCBhIHByZWNlZGVuY2UgREZBLlxuXHQgKiBAc2VlIC8vaXNQcmVjZWRlbmNlRGZhKClcblx0ICovXG5cdHNldFByZWNlZGVuY2VTdGFydFN0YXRlKHByZWNlZGVuY2UsIHN0YXJ0U3RhdGUpIHtcblx0XHRpZiAoISh0aGlzLnByZWNlZGVuY2VEZmEpKSB7XG5cdFx0XHR0aHJvdyAoXCJPbmx5IHByZWNlZGVuY2UgREZBcyBtYXkgY29udGFpbiBhIHByZWNlZGVuY2Ugc3RhcnQgc3RhdGUuXCIpO1xuXHRcdH1cblx0XHRpZiAocHJlY2VkZW5jZSA8IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBzeW5jaHJvbml6YXRpb24gb24gczAgaGVyZSBpcyBvay4gd2hlbiB0aGUgREZBIGlzIHR1cm5lZCBpbnRvIGFcblx0XHQgKiBwcmVjZWRlbmNlIERGQSwgczAgd2lsbCBiZSBpbml0aWFsaXplZCBvbmNlIGFuZCBub3QgdXBkYXRlZCBhZ2FpblxuXHRcdCAqIHMwLmVkZ2VzIGlzIG5ldmVyIG51bGwgZm9yIGEgcHJlY2VkZW5jZSBERkFcblx0XHQgKi9cblx0XHR0aGlzLnMwLmVkZ2VzW3ByZWNlZGVuY2VdID0gc3RhcnRTdGF0ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHdoZXRoZXIgdGhpcyBpcyBhIHByZWNlZGVuY2UgREZBLiBJZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGRpZmZlcnNcblx0ICogZnJvbSB0aGUgY3VycmVudCBERkEgY29uZmlndXJhdGlvbiwgdGhlIGZvbGxvd2luZyBhY3Rpb25zIGFyZSB0YWtlbjtcblx0ICogb3RoZXJ3aXNlIG5vIGNoYW5nZXMgYXJlIG1hZGUgdG8gdGhlIGN1cnJlbnQgREZBLlxuXHQgKlxuXHQgKiA8dWw+XG5cdCAqIDxsaT5UaGUge0BsaW5rIC8vc3RhdGVzfSBtYXAgaXMgY2xlYXJlZDwvbGk+XG5cdCAqIDxsaT5JZiB7QGNvZGUgcHJlY2VkZW5jZURmYX0gaXMge0Bjb2RlIGZhbHNlfSwgdGhlIGluaXRpYWwgc3RhdGVcblx0ICoge0BsaW5rIC8vczB9IGlzIHNldCB0byB7QGNvZGUgbnVsbH07IG90aGVyd2lzZSwgaXQgaXMgaW5pdGlhbGl6ZWQgdG8gYSBuZXdcblx0ICoge0BsaW5rIERGQVN0YXRlfSB3aXRoIGFuIGVtcHR5IG91dGdvaW5nIHtAbGluayBERkFTdGF0ZS8vZWRnZXN9IGFycmF5IHRvXG5cdCAqIHN0b3JlIHRoZSBzdGFydCBzdGF0ZXMgZm9yIGluZGl2aWR1YWwgcHJlY2VkZW5jZSB2YWx1ZXMuPC9saT5cblx0ICogPGxpPlRoZSB7QGxpbmsgLy9wcmVjZWRlbmNlRGZhfSBmaWVsZCBpcyB1cGRhdGVkPC9saT5cblx0ICogPC91bD5cblx0ICpcblx0ICogQHBhcmFtIHByZWNlZGVuY2VEZmEge0Bjb2RlIHRydWV9IGlmIHRoaXMgaXMgYSBwcmVjZWRlbmNlIERGQTsgb3RoZXJ3aXNlLFxuXHQgKiB7QGNvZGUgZmFsc2V9XG5cdCAqL1xuXHRzZXRQcmVjZWRlbmNlRGZhKHByZWNlZGVuY2VEZmEpIHtcblx0XHRpZiAodGhpcy5wcmVjZWRlbmNlRGZhIT09cHJlY2VkZW5jZURmYSkge1xuXHRcdFx0dGhpcy5fc3RhdGVzID0gbmV3IFNldCgpO1xuXHRcdFx0aWYgKHByZWNlZGVuY2VEZmEpIHtcblx0XHRcdFx0Y29uc3QgcHJlY2VkZW5jZVN0YXRlID0gbmV3IERGQVN0YXRlKG51bGwsIG5ldyBBVE5Db25maWdTZXQoKSk7XG5cdFx0XHRcdHByZWNlZGVuY2VTdGF0ZS5lZGdlcyA9IFtdO1xuXHRcdFx0XHRwcmVjZWRlbmNlU3RhdGUuaXNBY2NlcHRTdGF0ZSA9IGZhbHNlO1xuXHRcdFx0XHRwcmVjZWRlbmNlU3RhdGUucmVxdWlyZXNGdWxsQ29udGV4dCA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLnMwID0gcHJlY2VkZW5jZVN0YXRlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zMCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnByZWNlZGVuY2VEZmEgPSBwcmVjZWRlbmNlRGZhO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gYSBsaXN0IG9mIGFsbCBzdGF0ZXMgaW4gdGhpcyBERkEsIG9yZGVyZWQgYnkgc3RhdGUgbnVtYmVyLlxuXHQgKi9cblx0c29ydGVkU3RhdGVzKCkge1xuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLl9zdGF0ZXMudmFsdWVzKCk7XG5cdFx0cmV0dXJuIGxpc3Quc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRyZXR1cm4gYS5zdGF0ZU51bWJlciAtIGIuc3RhdGVOdW1iZXI7XG5cdFx0fSk7XG5cdH1cblxuXHR0b1N0cmluZyhsaXRlcmFsTmFtZXMsIHN5bWJvbGljTmFtZXMpIHtcblx0XHRsaXRlcmFsTmFtZXMgPSBsaXRlcmFsTmFtZXMgfHwgbnVsbDtcblx0XHRzeW1ib2xpY05hbWVzID0gc3ltYm9saWNOYW1lcyB8fCBudWxsO1xuXHRcdGlmICh0aGlzLnMwID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gXCJcIjtcblx0XHR9XG5cdFx0Y29uc3Qgc2VyaWFsaXplciA9IG5ldyBERkFTZXJpYWxpemVyKHRoaXMsIGxpdGVyYWxOYW1lcywgc3ltYm9saWNOYW1lcyk7XG5cdFx0cmV0dXJuIHNlcmlhbGl6ZXIudG9TdHJpbmcoKTtcblx0fVxuXG5cdHRvTGV4ZXJTdHJpbmcoKSB7XG5cdFx0aWYgKHRoaXMuczAgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblx0XHRjb25zdCBzZXJpYWxpemVyID0gbmV3IExleGVyREZBU2VyaWFsaXplcih0aGlzKTtcblx0XHRyZXR1cm4gc2VyaWFsaXplci50b1N0cmluZygpO1xuXHR9XG5cblx0Z2V0IHN0YXRlcygpe1xuXHRcdHJldHVybiB0aGlzLl9zdGF0ZXM7XG5cdH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IERGQTtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi8uLi9VdGlscycpO1xuXG4vKipcbiAqIEEgREZBIHdhbGtlciB0aGF0IGtub3dzIGhvdyB0byBkdW1wIHRoZW0gdG8gc2VyaWFsaXplZCBzdHJpbmdzLlxuICovXG5jbGFzcyBERkFTZXJpYWxpemVyIHtcbiAgICBjb25zdHJ1Y3RvcihkZmEsIGxpdGVyYWxOYW1lcywgc3ltYm9saWNOYW1lcykge1xuICAgICAgICB0aGlzLmRmYSA9IGRmYTtcbiAgICAgICAgdGhpcy5saXRlcmFsTmFtZXMgPSBsaXRlcmFsTmFtZXMgfHwgW107XG4gICAgICAgIHRoaXMuc3ltYm9saWNOYW1lcyA9IHN5bWJvbGljTmFtZXMgfHwgW107XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgaWYodGhpcy5kZmEuczAgPT09IG51bGwpIHtcbiAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgfVxuICAgICAgIGxldCBidWYgPSBcIlwiO1xuICAgICAgIGNvbnN0IHN0YXRlcyA9IHRoaXMuZGZhLnNvcnRlZFN0YXRlcygpO1xuICAgICAgIGZvcihsZXQgaT0wOyBpPHN0YXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICBjb25zdCBzID0gc3RhdGVzW2ldO1xuICAgICAgICAgICBpZihzLmVkZ2VzIT09bnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBzLmVkZ2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo9MDtqPG47aisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzLmVkZ2VzW2pdIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmKHQhPT1udWxsICYmIHQuc3RhdGVOdW1iZXIgIT09IDB4N0ZGRkZGRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQodGhpcy5nZXRTdGF0ZVN0cmluZyhzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWYgPSBidWYuY29uY2F0KFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQodGhpcy5nZXRFZGdlTGFiZWwoaikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmID0gYnVmLmNvbmNhdChcIi0+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmID0gYnVmLmNvbmNhdCh0aGlzLmdldFN0YXRlU3RyaW5nKHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgfVxuICAgICAgIHJldHVybiBidWYubGVuZ3RoPT09MCA/IG51bGwgOiBidWY7XG4gICAgfVxuXG4gICAgZ2V0RWRnZUxhYmVsKGkpIHtcbiAgICAgICAgaWYgKGk9PT0wKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJFT0ZcIjtcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMubGl0ZXJhbE5hbWVzICE9PW51bGwgfHwgdGhpcy5zeW1ib2xpY05hbWVzIT09bnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbE5hbWVzW2ktMV0gfHwgdGhpcy5zeW1ib2xpY05hbWVzW2ktMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShpLTEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0U3RhdGVTdHJpbmcocykge1xuICAgICAgICBjb25zdCBiYXNlU3RhdGVTdHIgPSAoIHMuaXNBY2NlcHRTdGF0ZSA/IFwiOlwiIDogXCJcIikgKyBcInNcIiArIHMuc3RhdGVOdW1iZXIgKyAoIHMucmVxdWlyZXNGdWxsQ29udGV4dCA/IFwiXlwiIDogXCJcIik7XG4gICAgICAgIGlmKHMuaXNBY2NlcHRTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHMucHJlZGljYXRlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHIgKyBcIj0+XCIgKyBVdGlscy5hcnJheVRvU3RyaW5nKHMucHJlZGljYXRlcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHIgKyBcIj0+XCIgKyBzLnByZWRpY3Rpb24udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIExleGVyREZBU2VyaWFsaXplciBleHRlbmRzIERGQVNlcmlhbGl6ZXIge1xuICAgIGNvbnN0cnVjdG9yKGRmYSkge1xuICAgICAgICBzdXBlcihkZmEsIG51bGwpO1xuICAgIH1cblxuICAgIGdldEVkZ2VMYWJlbChpKSB7XG4gICAgICAgIHJldHVybiBcIidcIiArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSkgKyBcIidcIjtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBERkFTZXJpYWxpemVyICwgTGV4ZXJERkFTZXJpYWxpemVyIH07XG5cbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge0FUTkNvbmZpZ1NldH0gPSByZXF1aXJlKCcuLy4uL2F0bi9BVE5Db25maWdTZXQnKTtcbmNvbnN0IHtIYXNoLCBTZXR9ID0gcmVxdWlyZSgnLi8uLi9VdGlscycpO1xuXG4vKipcbiAqIE1hcCBhIHByZWRpY2F0ZSB0byBhIHByZWRpY3RlZCBhbHRlcm5hdGl2ZS5cbiAqL1xuY2xhc3MgUHJlZFByZWRpY3Rpb24ge1xuXHRjb25zdHJ1Y3RvcihwcmVkLCBhbHQpIHtcblx0XHR0aGlzLmFsdCA9IGFsdDtcblx0XHR0aGlzLnByZWQgPSBwcmVkO1xuXHR9XG5cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIFwiKFwiICsgdGhpcy5wcmVkICsgXCIsIFwiICsgdGhpcy5hbHQgKyBcIilcIjtcblx0fVxufVxuXG4vKipcbiAqIEEgREZBIHN0YXRlIHJlcHJlc2VudHMgYSBzZXQgb2YgcG9zc2libGUgQVROIGNvbmZpZ3VyYXRpb25zLlxuICogQXMgQWhvLCBTZXRoaSwgVWxsbWFuIHAuIDExNyBzYXlzIFwiVGhlIERGQSB1c2VzIGl0cyBzdGF0ZVxuICogdG8ga2VlcCB0cmFjayBvZiBhbGwgcG9zc2libGUgc3RhdGVzIHRoZSBBVE4gY2FuIGJlIGluIGFmdGVyXG4gKiByZWFkaW5nIGVhY2ggaW5wdXQgc3ltYm9sLiBUaGF0IGlzIHRvIHNheSwgYWZ0ZXIgcmVhZGluZ1xuICogaW5wdXQgYTFhMi4uYW4sIHRoZSBERkEgaXMgaW4gYSBzdGF0ZSB0aGF0IHJlcHJlc2VudHMgdGhlXG4gKiBzdWJzZXQgVCBvZiB0aGUgc3RhdGVzIG9mIHRoZSBBVE4gdGhhdCBhcmUgcmVhY2hhYmxlIGZyb20gdGhlXG4gKiBBVE4ncyBzdGFydCBzdGF0ZSBhbG9uZyBzb21lIHBhdGggbGFiZWxlZCBhMWEyLi5hbi5cIlxuICogSW4gY29udmVudGlvbmFsIE5GQSZyYXJyO0RGQSBjb252ZXJzaW9uLCB0aGVyZWZvcmUsIHRoZSBzdWJzZXQgVFxuICogd291bGQgYmUgYSBiaXRzZXQgcmVwcmVzZW50aW5nIHRoZSBzZXQgb2Ygc3RhdGVzIHRoZVxuICogQVROIGNvdWxkIGJlIGluLiBXZSBuZWVkIHRvIHRyYWNrIHRoZSBhbHQgcHJlZGljdGVkIGJ5IGVhY2hcbiAqIHN0YXRlIGFzIHdlbGwsIGhvd2V2ZXIuIE1vcmUgaW1wb3J0YW50bHksIHdlIG5lZWQgdG8gbWFpbnRhaW5cbiAqIGEgc3RhY2sgb2Ygc3RhdGVzLCB0cmFja2luZyB0aGUgY2xvc3VyZSBvcGVyYXRpb25zIGFzIHRoZXlcbiAqIGp1bXAgZnJvbSBydWxlIHRvIHJ1bGUsIGVtdWxhdGluZyBydWxlIGludm9jYXRpb25zIChtZXRob2QgY2FsbHMpLlxuICogSSBoYXZlIHRvIGFkZCBhIHN0YWNrIHRvIHNpbXVsYXRlIHRoZSBwcm9wZXIgbG9va2FoZWFkIHNlcXVlbmNlcyBmb3JcbiAqIHRoZSB1bmRlcmx5aW5nIExMIGdyYW1tYXIgZnJvbSB3aGljaCB0aGUgQVROIHdhcyBkZXJpdmVkLlxuICpcbiAqIDxwPkkgdXNlIGEgc2V0IG9mIEFUTkNvbmZpZyBvYmplY3RzIG5vdCBzaW1wbGUgc3RhdGVzLiBBbiBBVE5Db25maWdcbiAqIGlzIGJvdGggYSBzdGF0ZSAoYWxhIG5vcm1hbCBjb252ZXJzaW9uKSBhbmQgYSBSdWxlQ29udGV4dCBkZXNjcmliaW5nXG4gKiB0aGUgY2hhaW4gb2YgcnVsZXMgKGlmIGFueSkgZm9sbG93ZWQgdG8gYXJyaXZlIGF0IHRoYXQgc3RhdGUuPC9wPlxuICpcbiAqIDxwPkEgREZBIHN0YXRlIG1heSBoYXZlIG11bHRpcGxlIHJlZmVyZW5jZXMgdG8gYSBwYXJ0aWN1bGFyIHN0YXRlLFxuICogYnV0IHdpdGggZGlmZmVyZW50IEFUTiBjb250ZXh0cyAod2l0aCBzYW1lIG9yIGRpZmZlcmVudCBhbHRzKVxuICogbWVhbmluZyB0aGF0IHN0YXRlIHdhcyByZWFjaGVkIHZpYSBhIGRpZmZlcmVudCBzZXQgb2YgcnVsZSBpbnZvY2F0aW9ucy48L3A+XG4gKi9cbmNsYXNzIERGQVN0YXRlIHtcblx0Y29uc3RydWN0b3Ioc3RhdGVOdW1iZXIsIGNvbmZpZ3MpIHtcblx0XHRpZiAoc3RhdGVOdW1iZXIgPT09IG51bGwpIHtcblx0XHRcdHN0YXRlTnVtYmVyID0gLTE7XG5cdFx0fVxuXHRcdGlmIChjb25maWdzID09PSBudWxsKSB7XG5cdFx0XHRjb25maWdzID0gbmV3IEFUTkNvbmZpZ1NldCgpO1xuXHRcdH1cblx0XHR0aGlzLnN0YXRlTnVtYmVyID0gc3RhdGVOdW1iZXI7XG5cdFx0dGhpcy5jb25maWdzID0gY29uZmlncztcblx0XHQvKipcblx0XHQgKiB7QGNvZGUgZWRnZXNbc3ltYm9sXX0gcG9pbnRzIHRvIHRhcmdldCBvZiBzeW1ib2wuIFNoaWZ0IHVwIGJ5IDEgc28gKC0xKVxuXHRcdCAqIHtAbGluayBUb2tlbi8vRU9GfSBtYXBzIHRvIHtAY29kZSBlZGdlc1swXX0uXG5cdFx0ICovXG5cdFx0dGhpcy5lZGdlcyA9IG51bGw7XG5cdFx0dGhpcy5pc0FjY2VwdFN0YXRlID0gZmFsc2U7XG5cdFx0LyoqXG5cdFx0ICogaWYgYWNjZXB0IHN0YXRlLCB3aGF0IHR0eXBlIGRvIHdlIG1hdGNoIG9yIGFsdCBkbyB3ZSBwcmVkaWN0P1xuXHRcdCAqIFRoaXMgaXMgc2V0IHRvIHtAbGluayBBVE4vL0lOVkFMSURfQUxUX05VTUJFUn0gd2hlbiB7QGxpbmsvL3ByZWRpY2F0ZXN9XG5cdFx0ICoge0Bjb2RlICE9bnVsbH0gb3Ige0BsaW5rIC8vcmVxdWlyZXNGdWxsQ29udGV4dH0uXG5cdFx0ICovXG5cdFx0dGhpcy5wcmVkaWN0aW9uID0gMDtcblx0XHR0aGlzLmxleGVyQWN0aW9uRXhlY3V0b3IgPSBudWxsO1xuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlcyB0aGF0IHRoaXMgc3RhdGUgd2FzIGNyZWF0ZWQgZHVyaW5nIFNMTCBwcmVkaWN0aW9uIHRoYXRcblx0XHQgKiBkaXNjb3ZlcmVkIGEgY29uZmxpY3QgYmV0d2VlbiB0aGUgY29uZmlndXJhdGlvbnMgaW4gdGhlIHN0YXRlLiBGdXR1cmVcblx0XHQgKiB7QGxpbmsgUGFyc2VyQVROU2ltdWxhdG9yLy9leGVjQVROfSBpbnZvY2F0aW9ucyBpbW1lZGlhdGVseSBqdW1wZWQgZG9pbmdcblx0XHQgKiBmdWxsIGNvbnRleHQgcHJlZGljdGlvbiBpZiB0aGlzIGZpZWxkIGlzIHRydWUuXG5cdFx0ICovXG5cdFx0dGhpcy5yZXF1aXJlc0Z1bGxDb250ZXh0ID0gZmFsc2U7XG5cdFx0LyoqXG5cdFx0ICogRHVyaW5nIFNMTCBwYXJzaW5nLCB0aGlzIGlzIGEgbGlzdCBvZiBwcmVkaWNhdGVzIGFzc29jaWF0ZWQgd2l0aCB0aGVcblx0XHQgKiBBVE4gY29uZmlndXJhdGlvbnMgb2YgdGhlIERGQSBzdGF0ZS4gV2hlbiB3ZSBoYXZlIHByZWRpY2F0ZXMsXG5cdFx0ICoge0BsaW5rIC8vcmVxdWlyZXNGdWxsQ29udGV4dH0gaXMge0Bjb2RlIGZhbHNlfSBzaW5jZSBmdWxsIGNvbnRleHRcblx0XHQgKiBwcmVkaWN0aW9uIGV2YWx1YXRlcyBwcmVkaWNhdGVzXG5cdFx0ICogb24tdGhlLWZseS4gSWYgdGhpcyBpcyBub3QgbnVsbCwgdGhlbiB7QGxpbmsgLy9wcmVkaWN0aW9ufSBpc1xuXHRcdCAqIHtAbGluayBBVE4vL0lOVkFMSURfQUxUX05VTUJFUn0uXG5cdFx0ICpcblx0XHQgKiA8cD5XZSBvbmx5IHVzZSB0aGVzZSBmb3Igbm9uLXtAbGluayAvL3JlcXVpcmVzRnVsbENvbnRleHR9IGJ1dFxuXHRcdCAqIGNvbmZsaWN0aW5nIHN0YXRlcy4gVGhhdFxuXHRcdCAqIG1lYW5zIHdlIGtub3cgZnJvbSB0aGUgY29udGV4dCAoaXQncyAkIG9yIHdlIGRvbid0IGRpcCBpbnRvIG91dGVyXG5cdFx0ICogY29udGV4dCkgdGhhdCBpdCdzIGFuIGFtYmlndWl0eSBub3QgYSBjb25mbGljdC48L3A+XG5cdFx0ICpcblx0XHQgKiA8cD5UaGlzIGxpc3QgaXMgY29tcHV0ZWQgYnkge0BsaW5rXG5cdFx0ICogUGFyc2VyQVROU2ltdWxhdG9yLy9wcmVkaWNhdGVERkFTdGF0ZX0uPC9wPlxuXHRcdCAqL1xuXHRcdHRoaXMucHJlZGljYXRlcyA9IG51bGw7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBzZXQgb2YgYWxsIGFsdHMgbWVudGlvbmVkIGJ5IGFsbCBBVE4gY29uZmlndXJhdGlvbnMgaW4gdGhpc1xuXHQgKiBERkEgc3RhdGUuXG5cdCAqL1xuXHRnZXRBbHRTZXQoKSB7XG5cdFx0Y29uc3QgYWx0cyA9IG5ldyBTZXQoKTtcblx0XHRpZiAodGhpcy5jb25maWdzICE9PSBudWxsKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29uZmlncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBjID0gdGhpcy5jb25maWdzW2ldO1xuXHRcdFx0XHRhbHRzLmFkZChjLmFsdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChhbHRzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBhbHRzO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBUd28ge0BsaW5rIERGQVN0YXRlfSBpbnN0YW5jZXMgYXJlIGVxdWFsIGlmIHRoZWlyIEFUTiBjb25maWd1cmF0aW9uIHNldHNcblx0ICogYXJlIHRoZSBzYW1lLiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHNlZSBpZiBhIHN0YXRlIGFscmVhZHkgZXhpc3RzLlxuXHQgKlxuXHQgKiA8cD5CZWNhdXNlIHRoZSBudW1iZXIgb2YgYWx0ZXJuYXRpdmVzIGFuZCBudW1iZXIgb2YgQVROIGNvbmZpZ3VyYXRpb25zIGFyZVxuXHQgKiBmaW5pdGUsIHRoZXJlIGlzIGEgZmluaXRlIG51bWJlciBvZiBERkEgc3RhdGVzIHRoYXQgY2FuIGJlIHByb2Nlc3NlZC5cblx0ICogVGhpcyBpcyBuZWNlc3NhcnkgdG8gc2hvdyB0aGF0IHRoZSBhbGdvcml0aG0gdGVybWluYXRlcy48L3A+XG5cdCAqXG5cdCAqIDxwPkNhbm5vdCB0ZXN0IHRoZSBERkEgc3RhdGUgbnVtYmVycyBoZXJlIGJlY2F1c2UgaW5cblx0ICoge0BsaW5rIFBhcnNlckFUTlNpbXVsYXRvci8vYWRkREZBU3RhdGV9IHdlIG5lZWQgdG8ga25vdyBpZiBhbnkgb3RoZXIgc3RhdGVcblx0ICogZXhpc3RzIHRoYXQgaGFzIHRoaXMgZXhhY3Qgc2V0IG9mIEFUTiBjb25maWd1cmF0aW9ucy4gVGhlXG5cdCAqIHtAbGluayAvL3N0YXRlTnVtYmVyfSBpcyBpcnJlbGV2YW50LjwvcD5cblx0ICovXG5cdGVxdWFscyhvdGhlcikge1xuXHRcdC8vIGNvbXBhcmUgc2V0IG9mIEFUTiBjb25maWd1cmF0aW9ucyBpbiB0aGlzIHNldCB3aXRoIG90aGVyXG5cdFx0cmV0dXJuIHRoaXMgPT09IG90aGVyIHx8XG5cdFx0XHRcdChvdGhlciBpbnN0YW5jZW9mIERGQVN0YXRlICYmXG5cdFx0XHRcdFx0dGhpcy5jb25maWdzLmVxdWFscyhvdGhlci5jb25maWdzKSk7XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRsZXQgcyA9IFwiXCIgKyB0aGlzLnN0YXRlTnVtYmVyICsgXCI6XCIgKyB0aGlzLmNvbmZpZ3M7XG5cdFx0aWYodGhpcy5pc0FjY2VwdFN0YXRlKSB7XG5cdFx0XHRzID0gcyArIFwiPT5cIjtcblx0XHRcdGlmICh0aGlzLnByZWRpY2F0ZXMgIT09IG51bGwpXG5cdFx0XHRcdHMgPSBzICsgdGhpcy5wcmVkaWNhdGVzO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRzID0gcyArIHRoaXMucHJlZGljdGlvbjtcblx0XHR9XG5cdFx0cmV0dXJuIHM7XG5cdH1cblxuXHRoYXNoQ29kZSgpIHtcblx0XHRjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcblx0XHRoYXNoLnVwZGF0ZSh0aGlzLmNvbmZpZ3MpO1xuXHRcdHJldHVybiBoYXNoLmZpbmlzaCgpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBERkFTdGF0ZSwgUHJlZFByZWRpY3Rpb24gfTtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuZXhwb3J0cy5ERkEgPSByZXF1aXJlKCcuL0RGQScpO1xuZXhwb3J0cy5ERkFTZXJpYWxpemVyID0gcmVxdWlyZSgnLi9ERkFTZXJpYWxpemVyJykuREZBU2VyaWFsaXplcjtcbmV4cG9ydHMuTGV4ZXJERkFTZXJpYWxpemVyID0gcmVxdWlyZSgnLi9ERkFTZXJpYWxpemVyJykuTGV4ZXJERkFTZXJpYWxpemVyO1xuZXhwb3J0cy5QcmVkUHJlZGljdGlvbiA9IHJlcXVpcmUoJy4vREZBU3RhdGUnKS5QcmVkUHJlZGljdGlvbjtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge0JpdFNldH0gPSByZXF1aXJlKCcuLy4uL1V0aWxzJyk7XG5jb25zdCB7RXJyb3JMaXN0ZW5lcn0gPSByZXF1aXJlKCcuL0Vycm9yTGlzdGVuZXInKVxuY29uc3Qge0ludGVydmFsfSA9IHJlcXVpcmUoJy4vLi4vSW50ZXJ2YWxTZXQnKVxuXG5cbi8qKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQU5UTFJFcnJvckxpc3RlbmVyfSBjYW4gYmUgdXNlZCB0byBpZGVudGlmeVxuICogIGNlcnRhaW4gcG90ZW50aWFsIGNvcnJlY3RuZXNzIGFuZCBwZXJmb3JtYW5jZSBwcm9ibGVtcyBpbiBncmFtbWFycy4gXCJSZXBvcnRzXCJcbiAqICBhcmUgbWFkZSBieSBjYWxsaW5nIHtAbGluayBQYXJzZXIvL25vdGlmeUVycm9yTGlzdGVuZXJzfSB3aXRoIHRoZSBhcHByb3ByaWF0ZVxuICogIG1lc3NhZ2UuXG4gKlxuICogIDx1bD5cbiAqICA8bGk+PGI+QW1iaWd1aXRpZXM8L2I+OiBUaGVzZSBhcmUgY2FzZXMgd2hlcmUgbW9yZSB0aGFuIG9uZSBwYXRoIHRocm91Z2ggdGhlXG4gKiAgZ3JhbW1hciBjYW4gbWF0Y2ggdGhlIGlucHV0LjwvbGk+XG4gKiAgPGxpPjxiPldlYWsgY29udGV4dCBzZW5zaXRpdml0eTwvYj46IFRoZXNlIGFyZSBjYXNlcyB3aGVyZSBmdWxsLWNvbnRleHRcbiAqICBwcmVkaWN0aW9uIHJlc29sdmVkIGFuIFNMTCBjb25mbGljdCB0byBhIHVuaXF1ZSBhbHRlcm5hdGl2ZSB3aGljaCBlcXVhbGVkIHRoZVxuICogIG1pbmltdW0gYWx0ZXJuYXRpdmUgb2YgdGhlIFNMTCBjb25mbGljdC48L2xpPlxuICogIDxsaT48Yj5TdHJvbmcgKGZvcmNlZCkgY29udGV4dCBzZW5zaXRpdml0eTwvYj46IFRoZXNlIGFyZSBjYXNlcyB3aGVyZSB0aGVcbiAqICBmdWxsLWNvbnRleHQgcHJlZGljdGlvbiByZXNvbHZlZCBhbiBTTEwgY29uZmxpY3QgdG8gYSB1bmlxdWUgYWx0ZXJuYXRpdmUsXG4gKiAgPGVtPmFuZDwvZW0+IHRoZSBtaW5pbXVtIGFsdGVybmF0aXZlIG9mIHRoZSBTTEwgY29uZmxpY3Qgd2FzIGZvdW5kIHRvIG5vdCBiZVxuICogIGEgdHJ1bHkgdmlhYmxlIGFsdGVybmF0aXZlLiBUd28tc3RhZ2UgcGFyc2luZyBjYW5ub3QgYmUgdXNlZCBmb3IgaW5wdXRzIHdoZXJlXG4gKiAgdGhpcyBzaXR1YXRpb24gb2NjdXJzLjwvbGk+XG4gKiAgPC91bD5cbiAqL1xuY2xhc3MgRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIgZXh0ZW5kcyBFcnJvckxpc3RlbmVyIHtcblx0Y29uc3RydWN0b3IoZXhhY3RPbmx5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHRleGFjdE9ubHkgPSBleGFjdE9ubHkgfHwgdHJ1ZTtcblx0XHQvLyB3aGV0aGVyIGFsbCBhbWJpZ3VpdGllcyBvciBvbmx5IGV4YWN0IGFtYmlndWl0aWVzIGFyZSByZXBvcnRlZC5cblx0XHR0aGlzLmV4YWN0T25seSA9IGV4YWN0T25seTtcblx0fVxuXG5cdHJlcG9ydEFtYmlndWl0eShyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncykge1xuXHRcdGlmICh0aGlzLmV4YWN0T25seSAmJiAhZXhhY3QpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgbXNnID0gXCJyZXBvcnRBbWJpZ3VpdHkgZD1cIiArXG5cdFx0XHR0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24ocmVjb2duaXplciwgZGZhKSArXG5cdFx0XHRcIjogYW1iaWdBbHRzPVwiICtcblx0XHRcdHRoaXMuZ2V0Q29uZmxpY3RpbmdBbHRzKGFtYmlnQWx0cywgY29uZmlncykgK1xuXHRcdFx0XCIsIGlucHV0PSdcIiArXG5cdFx0XHRyZWNvZ25pemVyLmdldFRva2VuU3RyZWFtKCkuZ2V0VGV4dChuZXcgSW50ZXJ2YWwoc3RhcnRJbmRleCwgc3RvcEluZGV4KSkgKyBcIidcIlxuXHRcdHJlY29nbml6ZXIubm90aWZ5RXJyb3JMaXN0ZW5lcnMobXNnKTtcblx0fVxuXG5cdHJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzKSB7XG5cdFx0Y29uc3QgbXNnID0gXCJyZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQgZD1cIiArXG5cdFx0XHR0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24ocmVjb2duaXplciwgZGZhKSArXG5cdFx0XHRcIiwgaW5wdXQ9J1wiICtcblx0XHRcdHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KG5ldyBJbnRlcnZhbChzdGFydEluZGV4LCBzdG9wSW5kZXgpKSArIFwiJ1wiXG5cdFx0cmVjb2duaXplci5ub3RpZnlFcnJvckxpc3RlbmVycyhtc2cpO1xuXHR9XG5cblx0cmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5KHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKSB7XG5cdFx0Y29uc3QgbXNnID0gXCJyZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHkgZD1cIiArXG5cdFx0XHR0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24ocmVjb2duaXplciwgZGZhKSArXG5cdFx0XHRcIiwgaW5wdXQ9J1wiICtcblx0XHRcdHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KG5ldyBJbnRlcnZhbChzdGFydEluZGV4LCBzdG9wSW5kZXgpKSArIFwiJ1wiXG5cdFx0cmVjb2duaXplci5ub3RpZnlFcnJvckxpc3RlbmVycyhtc2cpO1xuXHR9XG5cblx0Z2V0RGVjaXNpb25EZXNjcmlwdGlvbihyZWNvZ25pemVyLCBkZmEpIHtcblx0XHRjb25zdCBkZWNpc2lvbiA9IGRmYS5kZWNpc2lvblxuXHRcdGNvbnN0IHJ1bGVJbmRleCA9IGRmYS5hdG5TdGFydFN0YXRlLnJ1bGVJbmRleFxuXG5cdFx0Y29uc3QgcnVsZU5hbWVzID0gcmVjb2duaXplci5ydWxlTmFtZXNcblx0XHRpZiAocnVsZUluZGV4IDwgMCB8fCBydWxlSW5kZXggPj0gcnVsZU5hbWVzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIFwiXCIgKyBkZWNpc2lvbjtcblx0XHR9XG5cdFx0Y29uc3QgcnVsZU5hbWUgPSBydWxlTmFtZXNbcnVsZUluZGV4XSB8fCBudWxsXG5cdFx0aWYgKHJ1bGVOYW1lID09PSBudWxsIHx8IHJ1bGVOYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIFwiXCIgKyBkZWNpc2lvbjtcblx0XHR9XG5cdFx0cmV0dXJuIGAke2RlY2lzaW9ufSAoJHtydWxlTmFtZX0pYDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgc2V0IG9mIGNvbmZsaWN0aW5nIG9yIGFtYmlndW91cyBhbHRlcm5hdGl2ZXMgZnJvbSBhXG5cdCAqIGNvbmZpZ3VyYXRpb24gc2V0LCBpZiB0aGF0IGluZm9ybWF0aW9uIHdhcyBub3QgYWxyZWFkeSBwcm92aWRlZCBieSB0aGVcblx0ICogcGFyc2VyLlxuXHQgKlxuXHQgKiBAcGFyYW0gcmVwb3J0ZWRBbHRzIFRoZSBzZXQgb2YgY29uZmxpY3Rpbmcgb3IgYW1iaWd1b3VzIGFsdGVybmF0aXZlcywgYXNcblx0ICogcmVwb3J0ZWQgYnkgdGhlIHBhcnNlci5cblx0ICogQHBhcmFtIGNvbmZpZ3MgVGhlIGNvbmZsaWN0aW5nIG9yIGFtYmlndW91cyBjb25maWd1cmF0aW9uIHNldC5cblx0ICogQHJldHVybiBSZXR1cm5zIHtAY29kZSByZXBvcnRlZEFsdHN9IGlmIGl0IGlzIG5vdCB7QGNvZGUgbnVsbH0sIG90aGVyd2lzZVxuXHQgKiByZXR1cm5zIHRoZSBzZXQgb2YgYWx0ZXJuYXRpdmVzIHJlcHJlc2VudGVkIGluIHtAY29kZSBjb25maWdzfS5cbiAgICAgKi9cblx0Z2V0Q29uZmxpY3RpbmdBbHRzKHJlcG9ydGVkQWx0cywgY29uZmlncykge1xuXHRcdGlmIChyZXBvcnRlZEFsdHMgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiByZXBvcnRlZEFsdHM7XG5cdFx0fVxuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBCaXRTZXQoKVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlncy5pdGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0cmVzdWx0LmFkZChjb25maWdzLml0ZW1zW2ldLmFsdCk7XG5cdFx0fVxuXHRcdHJldHVybiBgeyR7cmVzdWx0LnZhbHVlcygpLmpvaW4oXCIsIFwiKX19YDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERpYWdub3N0aWNFcnJvckxpc3RlbmVyXG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbi8qKlxuICogUHJvdmlkZXMgYW4gZW1wdHkgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQU5UTFJFcnJvckxpc3RlbmVyfS4gVGhlXG4gKiBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGVhY2ggbWV0aG9kIGRvZXMgbm90aGluZywgYnV0IGNhbiBiZSBvdmVycmlkZGVuIGFzXG4gKiBuZWNlc3NhcnkuXG4gKi9cbmNsYXNzIEVycm9yTGlzdGVuZXIge1xuICAgIHN5bnRheEVycm9yKHJlY29nbml6ZXIsIG9mZmVuZGluZ1N5bWJvbCwgbGluZSwgY29sdW1uLCBtc2csIGUpIHtcbiAgICB9XG5cbiAgICByZXBvcnRBbWJpZ3VpdHkocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MpIHtcbiAgICB9XG5cbiAgICByZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGNvbmZsaWN0aW5nQWx0cywgY29uZmlncykge1xuICAgIH1cblxuICAgIHJlcG9ydENvbnRleHRTZW5zaXRpdml0eShyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgcHJlZGljdGlvbiwgY29uZmlncykge1xuICAgIH1cbn1cblxuLyoqXG4gKiB7QGluaGVyaXREb2N9XG4gKlxuICogPHA+XG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIHByaW50cyBtZXNzYWdlcyB0byB7QGxpbmsgU3lzdGVtLy9lcnJ9IGNvbnRhaW5pbmcgdGhlXG4gKiB2YWx1ZXMgb2Yge0Bjb2RlIGxpbmV9LCB7QGNvZGUgY2hhclBvc2l0aW9uSW5MaW5lfSwgYW5kIHtAY29kZSBtc2d9IHVzaW5nXG4gKiB0aGUgZm9sbG93aW5nIGZvcm1hdC48L3A+XG4gKlxuICogPHByZT5cbiAqIGxpbmUgPGVtPmxpbmU8L2VtPjo8ZW0+Y2hhclBvc2l0aW9uSW5MaW5lPC9lbT4gPGVtPm1zZzwvZW0+XG4gKiA8L3ByZT5cbiAqXG4gKi9cbmNsYXNzIENvbnNvbGVFcnJvckxpc3RlbmVyIGV4dGVuZHMgRXJyb3JMaXN0ZW5lciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgc3ludGF4RXJyb3IocmVjb2duaXplciwgb2ZmZW5kaW5nU3ltYm9sLCBsaW5lLCBjb2x1bW4sIG1zZywgZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwibGluZSBcIiArIGxpbmUgKyBcIjpcIiArIGNvbHVtbiArIFwiIFwiICsgbXNnKTtcbiAgICB9XG59XG5cblxuLyoqXG4gKiBQcm92aWRlcyBhIGRlZmF1bHQgaW5zdGFuY2Ugb2Yge0BsaW5rIENvbnNvbGVFcnJvckxpc3RlbmVyfS5cbiAqL1xuQ29uc29sZUVycm9yTGlzdGVuZXIuSU5TVEFOQ0UgPSBuZXcgQ29uc29sZUVycm9yTGlzdGVuZXIoKTtcblxuY2xhc3MgUHJveHlFcnJvckxpc3RlbmVyIGV4dGVuZHMgRXJyb3JMaXN0ZW5lciB7XG4gICAgY29uc3RydWN0b3IoZGVsZWdhdGVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmIChkZWxlZ2F0ZXM9PT1udWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBcImRlbGVnYXRlc1wiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsZWdhdGVzID0gZGVsZWdhdGVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzeW50YXhFcnJvcihyZWNvZ25pemVyLCBvZmZlbmRpbmdTeW1ib2wsIGxpbmUsIGNvbHVtbiwgbXNnLCBlKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVzLm1hcChkID0+IGQuc3ludGF4RXJyb3IocmVjb2duaXplciwgb2ZmZW5kaW5nU3ltYm9sLCBsaW5lLCBjb2x1bW4sIG1zZywgZSkpO1xuICAgIH1cblxuICAgIHJlcG9ydEFtYmlndWl0eShyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncykge1xuICAgICAgICB0aGlzLmRlbGVnYXRlcy5tYXAoZCA9PiBkLnJlcG9ydEFtYmlndWl0eShyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncykpO1xuICAgIH1cblxuICAgIHJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVzLm1hcChkID0+IGQucmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0KHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBjb25mbGljdGluZ0FsdHMsIGNvbmZpZ3MpKTtcbiAgICB9XG5cbiAgICByZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHkocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIHByZWRpY3Rpb24sIGNvbmZpZ3MpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZXMubWFwKGQgPT4gZC5yZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHkocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIHByZWRpY3Rpb24sIGNvbmZpZ3MpKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge0Vycm9yTGlzdGVuZXIsIENvbnNvbGVFcnJvckxpc3RlbmVyLCBQcm94eUVycm9yTGlzdGVuZXJ9XG5cbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge1Rva2VufSA9IHJlcXVpcmUoJy4vLi4vVG9rZW4nKVxuY29uc3Qge05vVmlhYmxlQWx0RXhjZXB0aW9uLCBJbnB1dE1pc21hdGNoRXhjZXB0aW9uLCBGYWlsZWRQcmVkaWNhdGVFeGNlcHRpb24sIFBhcnNlQ2FuY2VsbGF0aW9uRXhjZXB0aW9ufSA9IHJlcXVpcmUoJy4vRXJyb3JzJylcbmNvbnN0IHtBVE5TdGF0ZX0gPSByZXF1aXJlKCcuLy4uL2F0bi9BVE5TdGF0ZScpXG5jb25zdCB7SW50ZXJ2YWwsIEludGVydmFsU2V0fSA9IHJlcXVpcmUoJy4vLi4vSW50ZXJ2YWxTZXQnKVxuXG5jbGFzcyBFcnJvclN0cmF0ZWd5IHtcblxuICAgIHJlc2V0KHJlY29nbml6ZXIpIHtcbiAgICB9XG5cbiAgICByZWNvdmVySW5saW5lKHJlY29nbml6ZXIpIHtcbiAgICB9XG5cbiAgICByZWNvdmVyKHJlY29nbml6ZXIsIGUpIHtcbiAgICB9XG5cbiAgICBzeW5jKHJlY29nbml6ZXIpIHtcbiAgICB9XG5cbiAgICBpbkVycm9yUmVjb3ZlcnlNb2RlKHJlY29nbml6ZXIpIHtcbiAgICB9XG5cbiAgICByZXBvcnRFcnJvcihyZWNvZ25pemVyKSB7XG4gICAgfVxufVxuXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQU5UTFJFcnJvclN0cmF0ZWd5fSB1c2VkIGZvclxuICogZXJyb3IgcmVwb3J0aW5nIGFuZCByZWNvdmVyeSBpbiBBTlRMUiBwYXJzZXJzLlxuKi9cbmNsYXNzIERlZmF1bHRFcnJvclN0cmF0ZWd5IGV4dGVuZHMgRXJyb3JTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZXJyb3Igc3RyYXRlZ3kgaXMgY3VycmVudGx5IFwicmVjb3ZlcmluZyBmcm9tIGFuXG4gICAgICAgICAqIGVycm9yXCIuIFRoaXMgaXMgdXNlZCB0byBzdXBwcmVzcyByZXBvcnRpbmcgbXVsdGlwbGUgZXJyb3IgbWVzc2FnZXMgd2hpbGVcbiAgICAgICAgICogYXR0ZW1wdGluZyB0byByZWNvdmVyIGZyb20gYSBkZXRlY3RlZCBzeW50YXggZXJyb3IuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzZWUgLy9pbkVycm9yUmVjb3ZlcnlNb2RlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVycm9yUmVjb3ZlcnlNb2RlID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbmRleCBpbnRvIHRoZSBpbnB1dCBzdHJlYW0gd2hlcmUgdGhlIGxhc3QgZXJyb3Igb2NjdXJyZWQuXG4gICAgICAgICAqIFRoaXMgaXMgdXNlZCB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzIHdoZXJlIGFuIGVycm9yIGlzIGZvdW5kXG4gICAgICAgICAqIGJ1dCBubyB0b2tlbiBpcyBjb25zdW1lZCBkdXJpbmcgcmVjb3ZlcnkuLi5hbm90aGVyIGVycm9yIGlzIGZvdW5kLFxuICAgICAgICAgKiBhZCBuYXVzZXVtLiBUaGlzIGlzIGEgZmFpbHNhZmUgbWVjaGFuaXNtIHRvIGd1YXJhbnRlZSB0aGF0IGF0IGxlYXN0XG4gICAgICAgICAqIG9uZSB0b2tlbi90cmVlIG5vZGUgaXMgY29uc3VtZWQgZm9yIHR3byBlcnJvcnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RFcnJvckluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMubGFzdEVycm9yU3RhdGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW5zQ29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMubmV4dFRva2VuU3RhdGUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDxwPlRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBjYWxscyB7QGxpbmsgLy9lbmRFcnJvckNvbmRpdGlvbn0gdG9cbiAgICAgKiBlbnN1cmUgdGhhdCB0aGUgaGFuZGxlciBpcyBub3QgaW4gZXJyb3IgcmVjb3ZlcnkgbW9kZS48L3A+XG4gICAgKi9cbiAgICByZXNldChyZWNvZ25pemVyKSB7XG4gICAgICAgIHRoaXMuZW5kRXJyb3JDb25kaXRpb24ocmVjb2duaXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIGVudGVyIGVycm9yIHJlY292ZXJ5IG1vZGUgd2hlbiBhIHJlY29nbml0aW9uXG4gICAgICogZXhjZXB0aW9uIGlzIHJlcG9ydGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlY29nbml6ZXIgdGhlIHBhcnNlciBpbnN0YW5jZVxuICAgICovXG4gICAgYmVnaW5FcnJvckNvbmRpdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgIHRoaXMuZXJyb3JSZWNvdmVyeU1vZGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGluRXJyb3JSZWNvdmVyeU1vZGUocmVjb2duaXplcikge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvclJlY292ZXJ5TW9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gbGVhdmUgZXJyb3IgcmVjb3ZlcnkgbW9kZSBhZnRlciByZWNvdmVyaW5nIGZyb21cbiAgICAgKiBhIHJlY29nbml0aW9uIGV4Y2VwdGlvbi5cbiAgICAgKiBAcGFyYW0gcmVjb2duaXplclxuICAgICAqL1xuICAgIGVuZEVycm9yQ29uZGl0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgdGhpcy5lcnJvclJlY292ZXJ5TW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxhc3RFcnJvclN0YXRlcyA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdEVycm9ySW5kZXggPSAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB7QGluaGVyaXREb2N9XG4gICAgICogPHA+VGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2ltcGx5IGNhbGxzIHtAbGluayAvL2VuZEVycm9yQ29uZGl0aW9ufS48L3A+XG4gICAgICovXG4gICAgcmVwb3J0TWF0Y2gocmVjb2duaXplcikge1xuICAgICAgICB0aGlzLmVuZEVycm9yQ29uZGl0aW9uKHJlY29nbml6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHtAaW5oZXJpdERvY31cbiAgICAgKlxuICAgICAqIDxwPlRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHJldHVybnMgaW1tZWRpYXRlbHkgaWYgdGhlIGhhbmRsZXIgaXMgYWxyZWFkeVxuICAgICAqIGluIGVycm9yIHJlY292ZXJ5IG1vZGUuIE90aGVyd2lzZSwgaXQgY2FsbHMge0BsaW5rIC8vYmVnaW5FcnJvckNvbmRpdGlvbn1cbiAgICAgKiBhbmQgZGlzcGF0Y2hlcyB0aGUgcmVwb3J0aW5nIHRhc2sgYmFzZWQgb24gdGhlIHJ1bnRpbWUgdHlwZSBvZiB7QGNvZGUgZX1cbiAgICAgKiBhY2NvcmRpbmcgdG8gdGhlIGZvbGxvd2luZyB0YWJsZS48L3A+XG4gICAgICpcbiAgICAgKiA8dWw+XG4gICAgICogPGxpPntAbGluayBOb1ZpYWJsZUFsdEV4Y2VwdGlvbn06IERpc3BhdGNoZXMgdGhlIGNhbGwgdG9cbiAgICAgKiB7QGxpbmsgLy9yZXBvcnROb1ZpYWJsZUFsdGVybmF0aXZlfTwvbGk+XG4gICAgICogPGxpPntAbGluayBJbnB1dE1pc21hdGNoRXhjZXB0aW9ufTogRGlzcGF0Y2hlcyB0aGUgY2FsbCB0b1xuICAgICAqIHtAbGluayAvL3JlcG9ydElucHV0TWlzbWF0Y2h9PC9saT5cbiAgICAgKiA8bGk+e0BsaW5rIEZhaWxlZFByZWRpY2F0ZUV4Y2VwdGlvbn06IERpc3BhdGNoZXMgdGhlIGNhbGwgdG9cbiAgICAgKiB7QGxpbmsgLy9yZXBvcnRGYWlsZWRQcmVkaWNhdGV9PC9saT5cbiAgICAgKiA8bGk+QWxsIG90aGVyIHR5cGVzOiBjYWxscyB7QGxpbmsgUGFyc2VyLy9ub3RpZnlFcnJvckxpc3RlbmVyc30gdG8gcmVwb3J0XG4gICAgICogdGhlIGV4Y2VwdGlvbjwvbGk+XG4gICAgICogPC91bD5cbiAgICAgKi9cbiAgICByZXBvcnRFcnJvcihyZWNvZ25pemVyLCBlKSB7XG4gICAgICAgLy8gaWYgd2UndmUgYWxyZWFkeSByZXBvcnRlZCBhbiBlcnJvciBhbmQgaGF2ZSBub3QgbWF0Y2hlZCBhIHRva2VuXG4gICAgICAgLy8geWV0IHN1Y2Nlc3NmdWxseSwgZG9uJ3QgcmVwb3J0IGFueSBlcnJvcnMuXG4gICAgICAgIGlmKHRoaXMuaW5FcnJvclJlY292ZXJ5TW9kZShyZWNvZ25pemVyKSkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBkb24ndCByZXBvcnQgc3B1cmlvdXMgZXJyb3JzXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWdpbkVycm9yQ29uZGl0aW9uKHJlY29nbml6ZXIpO1xuICAgICAgICBpZiAoIGUgaW5zdGFuY2VvZiBOb1ZpYWJsZUFsdEV4Y2VwdGlvbiApIHtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0Tm9WaWFibGVBbHRlcm5hdGl2ZShyZWNvZ25pemVyLCBlKTtcbiAgICAgICAgfSBlbHNlIGlmICggZSBpbnN0YW5jZW9mIElucHV0TWlzbWF0Y2hFeGNlcHRpb24gKSB7XG4gICAgICAgICAgICB0aGlzLnJlcG9ydElucHV0TWlzbWF0Y2gocmVjb2duaXplciwgZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIGUgaW5zdGFuY2VvZiBGYWlsZWRQcmVkaWNhdGVFeGNlcHRpb24gKSB7XG4gICAgICAgICAgICB0aGlzLnJlcG9ydEZhaWxlZFByZWRpY2F0ZShyZWNvZ25pemVyLCBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidW5rbm93biByZWNvZ25pdGlvbiBlcnJvciB0eXBlOiBcIiArIGUuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLnN0YWNrKTtcbiAgICAgICAgICAgIHJlY29nbml6ZXIubm90aWZ5RXJyb3JMaXN0ZW5lcnMoZS5nZXRPZmZlbmRpbmdUb2tlbigpLCBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIHtAaW5oZXJpdERvY31cbiAgICAgKlxuICAgICAqIDxwPlRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHJlc3luY2hyb25pemVzIHRoZSBwYXJzZXIgYnkgY29uc3VtaW5nIHRva2Vuc1xuICAgICAqIHVudGlsIHdlIGZpbmQgb25lIGluIHRoZSByZXN5bmNocm9uaXphdGlvbiBzZXQtLWxvb3NlbHkgdGhlIHNldCBvZiB0b2tlbnNcbiAgICAgKiB0aGF0IGNhbiBmb2xsb3cgdGhlIGN1cnJlbnQgcnVsZS48L3A+XG4gICAgICpcbiAgICAgKi9cbiAgICByZWNvdmVyKHJlY29nbml6ZXIsIGUpIHtcbiAgICAgICAgaWYgKHRoaXMubGFzdEVycm9ySW5kZXg9PT1yZWNvZ25pemVyLmdldElucHV0U3RyZWFtKCkuaW5kZXggJiZcbiAgICAgICAgICAgIHRoaXMubGFzdEVycm9yU3RhdGVzICE9PSBudWxsICYmIHRoaXMubGFzdEVycm9yU3RhdGVzLmluZGV4T2YocmVjb2duaXplci5zdGF0ZSk+PTApIHtcbiAgICAgICAgICAgIC8vIHVoIG9oLCBhbm90aGVyIGVycm9yIGF0IHNhbWUgdG9rZW4gaW5kZXggYW5kIHByZXZpb3VzbHktdmlzaXRlZFxuICAgICAgICAgICAgLy8gc3RhdGUgaW4gQVROOyBtdXN0IGJlIGEgY2FzZSB3aGVyZSBMVCgxKSBpcyBpbiB0aGUgcmVjb3ZlcnlcbiAgICAgICAgICAgIC8vIHRva2VuIHNldCBzbyBub3RoaW5nIGdvdCBjb25zdW1lZC4gQ29uc3VtZSBhIHNpbmdsZSB0b2tlblxuICAgICAgICAgICAgLy8gYXQgbGVhc3QgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wOyB0aGlzIGlzIGEgZmFpbHNhZmUuXG4gICAgICAgICAgICByZWNvZ25pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhc3RFcnJvckluZGV4ID0gcmVjb2duaXplci5faW5wdXQuaW5kZXg7XG4gICAgICAgIGlmICh0aGlzLmxhc3RFcnJvclN0YXRlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0RXJyb3JTdGF0ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhc3RFcnJvclN0YXRlcy5wdXNoKHJlY29nbml6ZXIuc3RhdGUpO1xuICAgICAgICBjb25zdCBmb2xsb3dTZXQgPSB0aGlzLmdldEVycm9yUmVjb3ZlcnlTZXQocmVjb2duaXplcilcbiAgICAgICAgdGhpcy5jb25zdW1lVW50aWwocmVjb2duaXplciwgZm9sbG93U2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQU5UTFJFcnJvclN0cmF0ZWd5Ly9zeW5jfSBtYWtlcyBzdXJlXG4gICAgICogdGhhdCB0aGUgY3VycmVudCBsb29rYWhlYWQgc3ltYm9sIGlzIGNvbnNpc3RlbnQgd2l0aCB3aGF0IHdlcmUgZXhwZWN0aW5nXG4gICAgICogYXQgdGhpcyBwb2ludCBpbiB0aGUgQVROLiBZb3UgY2FuIGNhbGwgdGhpcyBhbnl0aW1lIGJ1dCBBTlRMUiBvbmx5XG4gICAgICogZ2VuZXJhdGVzIGNvZGUgdG8gY2hlY2sgYmVmb3JlIHN1YnJ1bGVzL2xvb3BzIGFuZCBlYWNoIGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIDxwPkltcGxlbWVudHMgSmltIElkbGUncyBtYWdpYyBzeW5jIG1lY2hhbmlzbSBpbiBjbG9zdXJlcyBhbmQgb3B0aW9uYWxcbiAgICAgKiBzdWJydWxlcy4gRS5nLiw8L3A+XG4gICAgICpcbiAgICAgKiA8cHJlPlxuICAgICAqIGEgOiBzeW5jICggc3R1ZmYgc3luYyApKiA7XG4gICAgICogc3luYyA6IHtjb25zdW1lIHRvIHdoYXQgY2FuIGZvbGxvdyBzeW5jfSA7XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBBdCB0aGUgc3RhcnQgb2YgYSBzdWIgcnVsZSB1cG9uIGVycm9yLCB7QGxpbmsgLy9zeW5jfSBwZXJmb3JtcyBzaW5nbGVcbiAgICAgKiB0b2tlbiBkZWxldGlvbiwgaWYgcG9zc2libGUuIElmIGl0IGNhbid0IGRvIHRoYXQsIGl0IGJhaWxzIG9uIHRoZSBjdXJyZW50XG4gICAgICogcnVsZSBhbmQgdXNlcyB0aGUgZGVmYXVsdCBlcnJvciByZWNvdmVyeSwgd2hpY2ggY29uc3VtZXMgdW50aWwgdGhlXG4gICAgICogcmVzeW5jaHJvbml6YXRpb24gc2V0IG9mIHRoZSBjdXJyZW50IHJ1bGUuXG4gICAgICpcbiAgICAgKiA8cD5JZiB0aGUgc3ViIHJ1bGUgaXMgb3B0aW9uYWwgKHtAY29kZSAoLi4uKT99LCB7QGNvZGUgKC4uLikqfSwgb3IgYmxvY2tcbiAgICAgKiB3aXRoIGFuIGVtcHR5IGFsdGVybmF0aXZlKSwgdGhlbiB0aGUgZXhwZWN0ZWQgc2V0IGluY2x1ZGVzIHdoYXQgZm9sbG93c1xuICAgICAqIHRoZSBzdWJydWxlLjwvcD5cbiAgICAgKlxuICAgICAqIDxwPkR1cmluZyBsb29wIGl0ZXJhdGlvbiwgaXQgY29uc3VtZXMgdW50aWwgaXQgc2VlcyBhIHRva2VuIHRoYXQgY2FuIHN0YXJ0IGFcbiAgICAgKiBzdWIgcnVsZSBvciB3aGF0IGZvbGxvd3MgbG9vcC4gWWVzLCB0aGF0IGlzIHByZXR0eSBhZ2dyZXNzaXZlLiBXZSBvcHQgdG9cbiAgICAgKiBzdGF5IGluIHRoZSBsb29wIGFzIGxvbmcgYXMgcG9zc2libGUuPC9wPlxuICAgICAqXG4gICAgICogPHA+PHN0cm9uZz5PUklHSU5TPC9zdHJvbmc+PC9wPlxuICAgICAqXG4gICAgICogPHA+UHJldmlvdXMgdmVyc2lvbnMgb2YgQU5UTFIgZGlkIGEgcG9vciBqb2Igb2YgdGhlaXIgcmVjb3Zlcnkgd2l0aGluIGxvb3BzLlxuICAgICAqIEEgc2luZ2xlIG1pc21hdGNoIHRva2VuIG9yIG1pc3NpbmcgdG9rZW4gd291bGQgZm9yY2UgdGhlIHBhcnNlciB0byBiYWlsXG4gICAgICogb3V0IG9mIHRoZSBlbnRpcmUgcnVsZXMgc3Vycm91bmRpbmcgdGhlIGxvb3AuIFNvLCBmb3IgcnVsZTwvcD5cbiAgICAgKlxuICAgICAqIDxwcmU+XG4gICAgICogY2xhc3NEZWYgOiAnY2xhc3MnIElEICd7JyBtZW1iZXIqICd9J1xuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogaW5wdXQgd2l0aCBhbiBleHRyYSB0b2tlbiBiZXR3ZWVuIG1lbWJlcnMgd291bGQgZm9yY2UgdGhlIHBhcnNlciB0b1xuICAgICAqIGNvbnN1bWUgdW50aWwgaXQgZm91bmQgdGhlIG5leHQgY2xhc3MgZGVmaW5pdGlvbiByYXRoZXIgdGhhbiB0aGUgbmV4dFxuICAgICAqIG1lbWJlciBkZWZpbml0aW9uIG9mIHRoZSBjdXJyZW50IGNsYXNzLlxuICAgICAqXG4gICAgICogPHA+VGhpcyBmdW5jdGlvbmFsaXR5IGNvc3QgYSBsaXR0bGUgYml0IG9mIGVmZm9ydCBiZWNhdXNlIHRoZSBwYXJzZXIgaGFzIHRvXG4gICAgICogY29tcGFyZSB0b2tlbiBzZXQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBsb29wIGFuZCBhdCBlYWNoIGl0ZXJhdGlvbi4gSWYgZm9yXG4gICAgICogc29tZSByZWFzb24gc3BlZWQgaXMgc3VmZmVyaW5nIGZvciB5b3UsIHlvdSBjYW4gdHVybiBvZmYgdGhpc1xuICAgICAqIGZ1bmN0aW9uYWxpdHkgYnkgc2ltcGx5IG92ZXJyaWRpbmcgdGhpcyBtZXRob2QgYXMgYSBibGFuayB7IH0uPC9wPlxuICAgICAqXG4gICAgICovXG4gICAgc3luYyhyZWNvZ25pemVyKSB7XG4gICAgICAgIC8vIElmIGFscmVhZHkgcmVjb3ZlcmluZywgZG9uJ3QgdHJ5IHRvIHN5bmNcbiAgICAgICAgaWYgKHRoaXMuaW5FcnJvclJlY292ZXJ5TW9kZShyZWNvZ25pemVyKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHMgPSByZWNvZ25pemVyLl9pbnRlcnAuYXRuLnN0YXRlc1tyZWNvZ25pemVyLnN0YXRlXTtcbiAgICAgICAgY29uc3QgbGEgPSByZWNvZ25pemVyLmdldFRva2VuU3RyZWFtKCkuTEEoMSk7XG4gICAgICAgIC8vIHRyeSBjaGVhcGVyIHN1YnNldCBmaXJzdDsgbWlnaHQgZ2V0IGx1Y2t5LiBzZWVtcyB0byBzaGF2ZSBhIHdlZSBiaXQgb2ZmXG4gICAgICAgIGNvbnN0IG5leHRUb2tlbnMgPSByZWNvZ25pemVyLmF0bi5uZXh0VG9rZW5zKHMpO1xuICAgICAgICBpZihuZXh0VG9rZW5zLmNvbnRhaW5zKGxhKSkge1xuICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW5zQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm5leHRUb2tlblN0YXRlID0gQVROU3RhdGUuSU5WQUxJRF9TVEFURV9OVU1CRVI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAobmV4dFRva2Vucy5jb250YWlucyhUb2tlbi5FUFNJTE9OKSkge1xuICAgICAgICAgICAgaWYodGhpcy5uZXh0VG9rZW5zQ29udGV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhlIG5leHQgdG9rZW4gd29uJ3QgbWF0Y2ggaW5mb3JtYXRpb24gdHJhY2tlZFxuICAgICAgICAgICAgICAgIC8vIGJ5IHN5bmMgaXMgcmVzdHJpY3RlZCBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW5zQ29udGV4dCA9IHJlY29nbml6ZXIuX2N0eDtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbnNTdGF0ZSA9IHJlY29nbml6ZXIuX3N0YXRlTnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAocy5zdGF0ZVR5cGUpIHtcbiAgICAgICAgY2FzZSBBVE5TdGF0ZS5CTE9DS19TVEFSVDpcbiAgICAgICAgY2FzZSBBVE5TdGF0ZS5TVEFSX0JMT0NLX1NUQVJUOlxuICAgICAgICBjYXNlIEFUTlN0YXRlLlBMVVNfQkxPQ0tfU1RBUlQ6XG4gICAgICAgIGNhc2UgQVROU3RhdGUuU1RBUl9MT09QX0VOVFJZOlxuICAgICAgICAgICAvLyByZXBvcnQgZXJyb3IgYW5kIHJlY292ZXIgaWYgcG9zc2libGVcbiAgICAgICAgICAgIGlmKCB0aGlzLnNpbmdsZVRva2VuRGVsZXRpb24ocmVjb2duaXplcikgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnB1dE1pc21hdGNoRXhjZXB0aW9uKHJlY29nbml6ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIEFUTlN0YXRlLlBMVVNfTE9PUF9CQUNLOlxuICAgICAgICBjYXNlIEFUTlN0YXRlLlNUQVJfTE9PUF9CQUNLOlxuICAgICAgICAgICAgdGhpcy5yZXBvcnRVbndhbnRlZFRva2VuKHJlY29nbml6ZXIpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0aW5nID0gbmV3IEludGVydmFsU2V0KClcbiAgICAgICAgICAgIGV4cGVjdGluZy5hZGRTZXQocmVjb2duaXplci5nZXRFeHBlY3RlZFRva2VucygpKTtcbiAgICAgICAgICAgIGNvbnN0IHdoYXRGb2xsb3dzTG9vcEl0ZXJhdGlvbk9yUnVsZSA9IGV4cGVjdGluZy5hZGRTZXQodGhpcy5nZXRFcnJvclJlY292ZXJ5U2V0KHJlY29nbml6ZXIpKVxuICAgICAgICAgICAgdGhpcy5jb25zdW1lVW50aWwocmVjb2duaXplciwgd2hhdEZvbGxvd3NMb29wSXRlcmF0aW9uT3JSdWxlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gZG8gbm90aGluZyBpZiB3ZSBjYW4ndCBpZGVudGlmeSB0aGUgZXhhY3Qga2luZCBvZiBBVE4gc3RhdGVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgY2FsbGVkIGJ5IHtAbGluayAvL3JlcG9ydEVycm9yfSB3aGVuIHRoZSBleGNlcHRpb24gaXMgYVxuICAgICAqIHtAbGluayBOb1ZpYWJsZUFsdEV4Y2VwdGlvbn0uXG4gICAgICpcbiAgICAgKiBAc2VlIC8vcmVwb3J0RXJyb3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWNvZ25pemVyIHRoZSBwYXJzZXIgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gZSB0aGUgcmVjb2duaXRpb24gZXhjZXB0aW9uXG4gICAgICovXG4gICAgcmVwb3J0Tm9WaWFibGVBbHRlcm5hdGl2ZShyZWNvZ25pemVyLCBlKSB7XG4gICAgICAgIGNvbnN0IHRva2VucyA9IHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKVxuICAgICAgICBsZXQgaW5wdXRcbiAgICAgICAgaWYodG9rZW5zICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoZS5zdGFydFRva2VuLnR5cGU9PT1Ub2tlbi5FT0YpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IFwiPEVPRj5cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSB0b2tlbnMuZ2V0VGV4dChuZXcgSW50ZXJ2YWwoZS5zdGFydFRva2VuLnRva2VuSW5kZXgsIGUub2ZmZW5kaW5nVG9rZW4udG9rZW5JbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXQgPSBcIjx1bmtub3duIGlucHV0PlwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1zZyA9IFwibm8gdmlhYmxlIGFsdGVybmF0aXZlIGF0IGlucHV0IFwiICsgdGhpcy5lc2NhcGVXU0FuZFF1b3RlKGlucHV0KVxuICAgICAgICByZWNvZ25pemVyLm5vdGlmeUVycm9yTGlzdGVuZXJzKG1zZywgZS5vZmZlbmRpbmdUb2tlbiwgZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBjYWxsZWQgYnkge0BsaW5rIC8vcmVwb3J0RXJyb3J9IHdoZW4gdGhlIGV4Y2VwdGlvbiBpcyBhblxuICAgICAqIHtAbGluayBJbnB1dE1pc21hdGNoRXhjZXB0aW9ufS5cbiAgICAgKlxuICAgICAqIEBzZWUgLy9yZXBvcnRFcnJvclxuICAgICAqXG4gICAgICogQHBhcmFtIHJlY29nbml6ZXIgdGhlIHBhcnNlciBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBlIHRoZSByZWNvZ25pdGlvbiBleGNlcHRpb25cbiAgICAgKi9cbiAgICByZXBvcnRJbnB1dE1pc21hdGNoKHJlY29nbml6ZXIsIGUpIHtcbiAgICAgICAgY29uc3QgbXNnID0gXCJtaXNtYXRjaGVkIGlucHV0IFwiICsgdGhpcy5nZXRUb2tlbkVycm9yRGlzcGxheShlLm9mZmVuZGluZ1Rva2VuKSArXG4gICAgICAgICAgICBcIiBleHBlY3RpbmcgXCIgKyBlLmdldEV4cGVjdGVkVG9rZW5zKCkudG9TdHJpbmcocmVjb2duaXplci5saXRlcmFsTmFtZXMsIHJlY29nbml6ZXIuc3ltYm9saWNOYW1lcylcbiAgICAgICAgcmVjb2duaXplci5ub3RpZnlFcnJvckxpc3RlbmVycyhtc2csIGUub2ZmZW5kaW5nVG9rZW4sIGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgY2FsbGVkIGJ5IHtAbGluayAvL3JlcG9ydEVycm9yfSB3aGVuIHRoZSBleGNlcHRpb24gaXMgYVxuICAgICAqIHtAbGluayBGYWlsZWRQcmVkaWNhdGVFeGNlcHRpb259LlxuICAgICAqXG4gICAgICogQHNlZSAvL3JlcG9ydEVycm9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVjb2duaXplciB0aGUgcGFyc2VyIGluc3RhbmNlXG4gICAgICogQHBhcmFtIGUgdGhlIHJlY29nbml0aW9uIGV4Y2VwdGlvblxuICAgICAqL1xuICAgIHJlcG9ydEZhaWxlZFByZWRpY2F0ZShyZWNvZ25pemVyLCBlKSB7XG4gICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcmVjb2duaXplci5ydWxlTmFtZXNbcmVjb2duaXplci5fY3R4LnJ1bGVJbmRleF1cbiAgICAgICAgY29uc3QgbXNnID0gXCJydWxlIFwiICsgcnVsZU5hbWUgKyBcIiBcIiArIGUubWVzc2FnZVxuICAgICAgICByZWNvZ25pemVyLm5vdGlmeUVycm9yTGlzdGVuZXJzKG1zZywgZS5vZmZlbmRpbmdUb2tlbiwgZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIHJlcG9ydCBhIHN5bnRheCBlcnJvciB3aGljaCByZXF1aXJlcyB0aGUgcmVtb3ZhbFxuICAgICAqIG9mIGEgdG9rZW4gZnJvbSB0aGUgaW5wdXQgc3RyZWFtLiBBdCB0aGUgdGltZSB0aGlzIG1ldGhvZCBpcyBjYWxsZWQsIHRoZVxuICAgICAqIGVycm9uZW91cyBzeW1ib2wgaXMgY3VycmVudCB7QGNvZGUgTFQoMSl9IHN5bWJvbCBhbmQgaGFzIG5vdCB5ZXQgYmVlblxuICAgICAqIHJlbW92ZWQgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLiBXaGVuIHRoaXMgbWV0aG9kIHJldHVybnMsXG4gICAgICoge0Bjb2RlIHJlY29nbml6ZXJ9IGlzIGluIGVycm9yIHJlY292ZXJ5IG1vZGUuXG4gICAgICpcbiAgICAgKiA8cD5UaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB7QGxpbmsgLy9zaW5nbGVUb2tlbkRlbGV0aW9ufSBpZGVudGlmaWVzXG4gICAgICogc2luZ2xlLXRva2VuIGRlbGV0aW9uIGFzIGEgdmlhYmxlIHJlY292ZXJ5IHN0cmF0ZWd5IGZvciBhIG1pc21hdGNoZWRcbiAgICAgKiBpbnB1dCBlcnJvci48L3A+XG4gICAgICpcbiAgICAgKiA8cD5UaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgcmV0dXJucyBpZiB0aGUgaGFuZGxlciBpcyBhbHJlYWR5IGluXG4gICAgICogZXJyb3IgcmVjb3ZlcnkgbW9kZS4gT3RoZXJ3aXNlLCBpdCBjYWxscyB7QGxpbmsgLy9iZWdpbkVycm9yQ29uZGl0aW9ufSB0b1xuICAgICAqIGVudGVyIGVycm9yIHJlY292ZXJ5IG1vZGUsIGZvbGxvd2VkIGJ5IGNhbGxpbmdcbiAgICAgKiB7QGxpbmsgUGFyc2VyLy9ub3RpZnlFcnJvckxpc3RlbmVyc30uPC9wPlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlY29nbml6ZXIgdGhlIHBhcnNlciBpbnN0YW5jZVxuICAgICAqXG4gICAgICovXG4gICAgcmVwb3J0VW53YW50ZWRUb2tlbihyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmICh0aGlzLmluRXJyb3JSZWNvdmVyeU1vZGUocmVjb2duaXplcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZ2luRXJyb3JDb25kaXRpb24ocmVjb2duaXplcik7XG4gICAgICAgIGNvbnN0IHQgPSByZWNvZ25pemVyLmdldEN1cnJlbnRUb2tlbigpXG4gICAgICAgIGNvbnN0IHRva2VuTmFtZSA9IHRoaXMuZ2V0VG9rZW5FcnJvckRpc3BsYXkodClcbiAgICAgICAgY29uc3QgZXhwZWN0aW5nID0gdGhpcy5nZXRFeHBlY3RlZFRva2VucyhyZWNvZ25pemVyKVxuICAgICAgICBjb25zdCBtc2cgPSBcImV4dHJhbmVvdXMgaW5wdXQgXCIgKyB0b2tlbk5hbWUgKyBcIiBleHBlY3RpbmcgXCIgK1xuICAgICAgICAgICAgZXhwZWN0aW5nLnRvU3RyaW5nKHJlY29nbml6ZXIubGl0ZXJhbE5hbWVzLCByZWNvZ25pemVyLnN5bWJvbGljTmFtZXMpXG4gICAgICAgIHJlY29nbml6ZXIubm90aWZ5RXJyb3JMaXN0ZW5lcnMobXNnLCB0LCBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gcmVwb3J0IGEgc3ludGF4IGVycm9yIHdoaWNoIHJlcXVpcmVzIHRoZVxuICAgICAqIGluc2VydGlvbiBvZiBhIG1pc3NpbmcgdG9rZW4gaW50byB0aGUgaW5wdXQgc3RyZWFtLiBBdCB0aGUgdGltZSB0aGlzXG4gICAgICogbWV0aG9kIGlzIGNhbGxlZCwgdGhlIG1pc3NpbmcgdG9rZW4gaGFzIG5vdCB5ZXQgYmVlbiBpbnNlcnRlZC4gV2hlbiB0aGlzXG4gICAgICogbWV0aG9kIHJldHVybnMsIHtAY29kZSByZWNvZ25pemVyfSBpcyBpbiBlcnJvciByZWNvdmVyeSBtb2RlLlxuICAgICAqXG4gICAgICogPHA+VGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4ge0BsaW5rIC8vc2luZ2xlVG9rZW5JbnNlcnRpb259IGlkZW50aWZpZXNcbiAgICAgKiBzaW5nbGUtdG9rZW4gaW5zZXJ0aW9uIGFzIGEgdmlhYmxlIHJlY292ZXJ5IHN0cmF0ZWd5IGZvciBhIG1pc21hdGNoZWRcbiAgICAgKiBpbnB1dCBlcnJvci48L3A+XG4gICAgICpcbiAgICAgKiA8cD5UaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgcmV0dXJucyBpZiB0aGUgaGFuZGxlciBpcyBhbHJlYWR5IGluXG4gICAgICogZXJyb3IgcmVjb3ZlcnkgbW9kZS4gT3RoZXJ3aXNlLCBpdCBjYWxscyB7QGxpbmsgLy9iZWdpbkVycm9yQ29uZGl0aW9ufSB0b1xuICAgICAqIGVudGVyIGVycm9yIHJlY292ZXJ5IG1vZGUsIGZvbGxvd2VkIGJ5IGNhbGxpbmdcbiAgICAgKiB7QGxpbmsgUGFyc2VyLy9ub3RpZnlFcnJvckxpc3RlbmVyc30uPC9wPlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlY29nbml6ZXIgdGhlIHBhcnNlciBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlcG9ydE1pc3NpbmdUb2tlbihyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmICggdGhpcy5pbkVycm9yUmVjb3ZlcnlNb2RlKHJlY29nbml6ZXIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWdpbkVycm9yQ29uZGl0aW9uKHJlY29nbml6ZXIpO1xuICAgICAgICBjb25zdCB0ID0gcmVjb2duaXplci5nZXRDdXJyZW50VG9rZW4oKVxuICAgICAgICBjb25zdCBleHBlY3RpbmcgPSB0aGlzLmdldEV4cGVjdGVkVG9rZW5zKHJlY29nbml6ZXIpXG4gICAgICAgIGNvbnN0IG1zZyA9IFwibWlzc2luZyBcIiArIGV4cGVjdGluZy50b1N0cmluZyhyZWNvZ25pemVyLmxpdGVyYWxOYW1lcywgcmVjb2duaXplci5zeW1ib2xpY05hbWVzKSArXG4gICAgICAgICAgICBcIiBhdCBcIiArIHRoaXMuZ2V0VG9rZW5FcnJvckRpc3BsYXkodClcbiAgICAgICAgcmVjb2duaXplci5ub3RpZnlFcnJvckxpc3RlbmVycyhtc2csIHQsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDxwPlRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGF0dGVtcHRzIHRvIHJlY292ZXIgZnJvbSB0aGUgbWlzbWF0Y2hlZCBpbnB1dFxuICAgICAqIGJ5IHVzaW5nIHNpbmdsZSB0b2tlbiBpbnNlcnRpb24gYW5kIGRlbGV0aW9uIGFzIGRlc2NyaWJlZCBiZWxvdy4gSWYgdGhlXG4gICAgICogcmVjb3ZlcnkgYXR0ZW1wdCBmYWlscywgdGhpcyBtZXRob2QgdGhyb3dzIGFuXG4gICAgICoge0BsaW5rIElucHV0TWlzbWF0Y2hFeGNlcHRpb259LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPjxzdHJvbmc+RVhUUkEgVE9LRU48L3N0cm9uZz4gKHNpbmdsZSB0b2tlbiBkZWxldGlvbik8L3A+XG4gICAgICpcbiAgICAgKiA8cD57QGNvZGUgTEEoMSl9IGlzIG5vdCB3aGF0IHdlIGFyZSBsb29raW5nIGZvci4gSWYge0Bjb2RlIExBKDIpfSBoYXMgdGhlXG4gICAgICogcmlnaHQgdG9rZW4sIGhvd2V2ZXIsIHRoZW4gYXNzdW1lIHtAY29kZSBMQSgxKX0gaXMgc29tZSBleHRyYSBzcHVyaW91c1xuICAgICAqIHRva2VuIGFuZCBkZWxldGUgaXQuIFRoZW4gY29uc3VtZSBhbmQgcmV0dXJuIHRoZSBuZXh0IHRva2VuICh3aGljaCB3YXNcbiAgICAgKiB0aGUge0Bjb2RlIExBKDIpfSB0b2tlbikgYXMgdGhlIHN1Y2Nlc3NmdWwgcmVzdWx0IG9mIHRoZSBtYXRjaCBvcGVyYXRpb24uPC9wPlxuICAgICAqXG4gICAgICogPHA+VGhpcyByZWNvdmVyeSBzdHJhdGVneSBpcyBpbXBsZW1lbnRlZCBieSB7QGxpbmtcbiAgICAgKiAvL3NpbmdsZVRva2VuRGVsZXRpb259LjwvcD5cbiAgICAgKlxuICAgICAqIDxwPjxzdHJvbmc+TUlTU0lORyBUT0tFTjwvc3Ryb25nPiAoc2luZ2xlIHRva2VuIGluc2VydGlvbik8L3A+XG4gICAgICpcbiAgICAgKiA8cD5JZiBjdXJyZW50IHRva2VuIChhdCB7QGNvZGUgTEEoMSl9KSBpcyBjb25zaXN0ZW50IHdpdGggd2hhdCBjb3VsZCBjb21lXG4gICAgICogYWZ0ZXIgdGhlIGV4cGVjdGVkIHtAY29kZSBMQSgxKX0gdG9rZW4sIHRoZW4gYXNzdW1lIHRoZSB0b2tlbiBpcyBtaXNzaW5nXG4gICAgICogYW5kIHVzZSB0aGUgcGFyc2VyJ3Mge0BsaW5rIFRva2VuRmFjdG9yeX0gdG8gY3JlYXRlIGl0IG9uIHRoZSBmbHkuIFRoZVxuICAgICAqIFwiaW5zZXJ0aW9uXCIgaXMgcGVyZm9ybWVkIGJ5IHJldHVybmluZyB0aGUgY3JlYXRlZCB0b2tlbiBhcyB0aGUgc3VjY2Vzc2Z1bFxuICAgICAqIHJlc3VsdCBvZiB0aGUgbWF0Y2ggb3BlcmF0aW9uLjwvcD5cbiAgICAgKlxuICAgICAqIDxwPlRoaXMgcmVjb3Zlcnkgc3RyYXRlZ3kgaXMgaW1wbGVtZW50ZWQgYnkge0BsaW5rXG4gICAgICogLy9zaW5nbGVUb2tlbkluc2VydGlvbn0uPC9wPlxuICAgICAqXG4gICAgICogPHA+PHN0cm9uZz5FWEFNUExFPC9zdHJvbmc+PC9wPlxuICAgICAqXG4gICAgICogPHA+Rm9yIGV4YW1wbGUsIElucHV0IHtAY29kZSBpPSgzO30gaXMgY2xlYXJseSBtaXNzaW5nIHRoZSB7QGNvZGUgJyknfS4gV2hlblxuICAgICAqIHRoZSBwYXJzZXIgcmV0dXJucyBmcm9tIHRoZSBuZXN0ZWQgY2FsbCB0byB7QGNvZGUgZXhwcn0sIGl0IHdpbGwgaGF2ZVxuICAgICAqIGNhbGwgY2hhaW46PC9wPlxuICAgICAqXG4gICAgICogPHByZT5cbiAgICAgKiBzdGF0ICZyYXJyOyBleHByICZyYXJyOyBhdG9tXG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBhbmQgaXQgd2lsbCBiZSB0cnlpbmcgdG8gbWF0Y2ggdGhlIHtAY29kZSAnKSd9IGF0IHRoaXMgcG9pbnQgaW4gdGhlXG4gICAgICogZGVyaXZhdGlvbjpcbiAgICAgKlxuICAgICAqIDxwcmU+XG4gICAgICogPSZndDsgSUQgJz0nICcoJyBJTlQgJyknICgnKycgYXRvbSkqICc7J1xuICAgICAqIF5cbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIFRoZSBhdHRlbXB0IHRvIG1hdGNoIHtAY29kZSAnKSd9IHdpbGwgZmFpbCB3aGVuIGl0IHNlZXMge0Bjb2RlICc7J30gYW5kXG4gICAgICogY2FsbCB7QGxpbmsgLy9yZWNvdmVySW5saW5lfS4gVG8gcmVjb3ZlciwgaXQgc2VlcyB0aGF0IHtAY29kZSBMQSgxKT09JzsnfVxuICAgICAqIGlzIGluIHRoZSBzZXQgb2YgdG9rZW5zIHRoYXQgY2FuIGZvbGxvdyB0aGUge0Bjb2RlICcpJ30gdG9rZW4gcmVmZXJlbmNlXG4gICAgICogaW4gcnVsZSB7QGNvZGUgYXRvbX0uIEl0IGNhbiBhc3N1bWUgdGhhdCB5b3UgZm9yZ290IHRoZSB7QGNvZGUgJyknfS5cbiAgICAgKi9cbiAgICByZWNvdmVySW5saW5lKHJlY29nbml6ZXIpIHtcbiAgICAgICAgLy8gU0lOR0xFIFRPS0VOIERFTEVUSU9OXG4gICAgICAgIGNvbnN0IG1hdGNoZWRTeW1ib2wgPSB0aGlzLnNpbmdsZVRva2VuRGVsZXRpb24ocmVjb2duaXplcilcbiAgICAgICAgaWYgKG1hdGNoZWRTeW1ib2wgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHdlIGhhdmUgZGVsZXRlZCB0aGUgZXh0cmEgdG9rZW4uXG4gICAgICAgICAgICAvLyBub3csIG1vdmUgcGFzdCB0dHlwZSB0b2tlbiBhcyBpZiBhbGwgd2VyZSBva1xuICAgICAgICAgICAgcmVjb2duaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlZFN5bWJvbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBTSU5HTEUgVE9LRU4gSU5TRVJUSU9OXG4gICAgICAgIGlmICh0aGlzLnNpbmdsZVRva2VuSW5zZXJ0aW9uKHJlY29nbml6ZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNaXNzaW5nU3ltYm9sKHJlY29nbml6ZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGV2ZW4gdGhhdCBkaWRuJ3Qgd29yazsgbXVzdCB0aHJvdyB0aGUgZXhjZXB0aW9uXG4gICAgICAgIHRocm93IG5ldyBJbnB1dE1pc21hdGNoRXhjZXB0aW9uKHJlY29nbml6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGltcGxlbWVudHMgdGhlIHNpbmdsZS10b2tlbiBpbnNlcnRpb24gaW5saW5lIGVycm9yIHJlY292ZXJ5XG4gICAgICogc3RyYXRlZ3kuIEl0IGlzIGNhbGxlZCBieSB7QGxpbmsgLy9yZWNvdmVySW5saW5lfSBpZiB0aGUgc2luZ2xlLXRva2VuXG4gICAgICogZGVsZXRpb24gc3RyYXRlZ3kgZmFpbHMgdG8gcmVjb3ZlciBmcm9tIHRoZSBtaXNtYXRjaGVkIGlucHV0LiBJZiB0aGlzXG4gICAgICogbWV0aG9kIHJldHVybnMge0Bjb2RlIHRydWV9LCB7QGNvZGUgcmVjb2duaXplcn0gd2lsbCBiZSBpbiBlcnJvciByZWNvdmVyeVxuICAgICAqIG1vZGUuXG4gICAgICpcbiAgICAgKiA8cD5UaGlzIG1ldGhvZCBkZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHNpbmdsZS10b2tlbiBpbnNlcnRpb24gaXMgdmlhYmxlIGJ5XG4gICAgICogY2hlY2tpbmcgaWYgdGhlIHtAY29kZSBMQSgxKX0gaW5wdXQgc3ltYm9sIGNvdWxkIGJlIHN1Y2Nlc3NmdWxseSBtYXRjaGVkXG4gICAgICogaWYgaXQgd2VyZSBpbnN0ZWFkIHRoZSB7QGNvZGUgTEEoMil9IHN5bWJvbC4gSWYgdGhpcyBtZXRob2QgcmV0dXJuc1xuICAgICAqIHtAY29kZSB0cnVlfSwgdGhlIGNhbGxlciBpcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgYW5kIGluc2VydGluZyBhXG4gICAgICogdG9rZW4gd2l0aCB0aGUgY29ycmVjdCB0eXBlIHRvIHByb2R1Y2UgdGhpcyBiZWhhdmlvci48L3A+XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVjb2duaXplciB0aGUgcGFyc2VyIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7QGNvZGUgdHJ1ZX0gaWYgc2luZ2xlLXRva2VuIGluc2VydGlvbiBpcyBhIHZpYWJsZSByZWNvdmVyeVxuICAgICAqIHN0cmF0ZWd5IGZvciB0aGUgY3VycmVudCBtaXNtYXRjaGVkIGlucHV0LCBvdGhlcndpc2Uge0Bjb2RlIGZhbHNlfVxuICAgICAqL1xuICAgIHNpbmdsZVRva2VuSW5zZXJ0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFN5bWJvbFR5cGUgPSByZWNvZ25pemVyLmdldFRva2VuU3RyZWFtKCkuTEEoMSlcbiAgICAgICAgLy8gaWYgY3VycmVudCB0b2tlbiBpcyBjb25zaXN0ZW50IHdpdGggd2hhdCBjb3VsZCBjb21lIGFmdGVyIGN1cnJlbnRcbiAgICAgICAgLy8gQVROIHN0YXRlLCB0aGVuIHdlIGtub3cgd2UncmUgbWlzc2luZyBhIHRva2VuOyBlcnJvciByZWNvdmVyeVxuICAgICAgICAvLyBpcyBmcmVlIHRvIGNvbmp1cmUgdXAgYW5kIGluc2VydCB0aGUgbWlzc2luZyB0b2tlblxuICAgICAgICBjb25zdCBhdG4gPSByZWNvZ25pemVyLl9pbnRlcnAuYXRuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGF0bi5zdGF0ZXNbcmVjb2duaXplci5zdGF0ZV1cbiAgICAgICAgY29uc3QgbmV4dCA9IGN1cnJlbnRTdGF0ZS50cmFuc2l0aW9uc1swXS50YXJnZXRcbiAgICAgICAgY29uc3QgZXhwZWN0aW5nQXRMTDIgPSBhdG4ubmV4dFRva2VucyhuZXh0LCByZWNvZ25pemVyLl9jdHgpXG4gICAgICAgIGlmIChleHBlY3RpbmdBdExMMi5jb250YWlucyhjdXJyZW50U3ltYm9sVHlwZSkgKXtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0TWlzc2luZ1Rva2VuKHJlY29nbml6ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzIHRoZSBzaW5nbGUtdG9rZW4gZGVsZXRpb24gaW5saW5lIGVycm9yIHJlY292ZXJ5XG4gICAgICogc3RyYXRlZ3kuIEl0IGlzIGNhbGxlZCBieSB7QGxpbmsgLy9yZWNvdmVySW5saW5lfSB0byBhdHRlbXB0IHRvIHJlY292ZXJcbiAgICAgKiBmcm9tIG1pc21hdGNoZWQgaW5wdXQuIElmIHRoaXMgbWV0aG9kIHJldHVybnMgbnVsbCwgdGhlIHBhcnNlciBhbmQgZXJyb3JcbiAgICAgKiBoYW5kbGVyIHN0YXRlIHdpbGwgbm90IGhhdmUgY2hhbmdlZC4gSWYgdGhpcyBtZXRob2QgcmV0dXJucyBub24tbnVsbCxcbiAgICAgKiB7QGNvZGUgcmVjb2duaXplcn0gd2lsbCA8ZW0+bm90PC9lbT4gYmUgaW4gZXJyb3IgcmVjb3ZlcnkgbW9kZSBzaW5jZSB0aGVcbiAgICAgKiByZXR1cm5lZCB0b2tlbiB3YXMgYSBzdWNjZXNzZnVsIG1hdGNoLlxuICAgICAqXG4gICAgICogPHA+SWYgdGhlIHNpbmdsZS10b2tlbiBkZWxldGlvbiBpcyBzdWNjZXNzZnVsLCB0aGlzIG1ldGhvZCBjYWxsc1xuICAgICAqIHtAbGluayAvL3JlcG9ydFVud2FudGVkVG9rZW59IHRvIHJlcG9ydCB0aGUgZXJyb3IsIGZvbGxvd2VkIGJ5XG4gICAgICoge0BsaW5rIFBhcnNlci8vY29uc3VtZX0gdG8gYWN0dWFsbHkgXCJkZWxldGVcIiB0aGUgZXh0cmFuZW91cyB0b2tlbi4gVGhlbixcbiAgICAgKiBiZWZvcmUgcmV0dXJuaW5nIHtAbGluayAvL3JlcG9ydE1hdGNofSBpcyBjYWxsZWQgdG8gc2lnbmFsIGEgc3VjY2Vzc2Z1bFxuICAgICAqIG1hdGNoLjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWNvZ25pemVyIHRoZSBwYXJzZXIgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHRoZSBzdWNjZXNzZnVsbHkgbWF0Y2hlZCB7QGxpbmsgVG9rZW59IGluc3RhbmNlIGlmIHNpbmdsZS10b2tlblxuICAgICAqIGRlbGV0aW9uIHN1Y2Nlc3NmdWxseSByZWNvdmVycyBmcm9tIHRoZSBtaXNtYXRjaGVkIGlucHV0LCBvdGhlcndpc2VcbiAgICAgKiB7QGNvZGUgbnVsbH1cbiAgICAgKi9cbiAgICBzaW5nbGVUb2tlbkRlbGV0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgY29uc3QgbmV4dFRva2VuVHlwZSA9IHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5MQSgyKVxuICAgICAgICBjb25zdCBleHBlY3RpbmcgPSB0aGlzLmdldEV4cGVjdGVkVG9rZW5zKHJlY29nbml6ZXIpXG4gICAgICAgIGlmIChleHBlY3RpbmcuY29udGFpbnMobmV4dFRva2VuVHlwZSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0VW53YW50ZWRUb2tlbihyZWNvZ25pemVyKTtcbiAgICAgICAgICAgIC8vIHByaW50KFwicmVjb3ZlckZyb21NaXNtYXRjaGVkVG9rZW4gZGVsZXRpbmcgXCIgXFxcbiAgICAgICAgICAgIC8vICsgc3RyKHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5MVCgxKSkgXFxcbiAgICAgICAgICAgIC8vICsgXCIgc2luY2UgXCIgKyBzdHIocmVjb2duaXplci5nZXRUb2tlblN0cmVhbSgpLkxUKDIpKSBcXFxuICAgICAgICAgICAgLy8gKyBcIiBpcyB3aGF0IHdlIHdhbnRcIiwgZmlsZT1zeXMuc3RkZXJyKVxuICAgICAgICAgICAgcmVjb2duaXplci5jb25zdW1lKCk7IC8vIHNpbXBseSBkZWxldGUgZXh0cmEgdG9rZW5cbiAgICAgICAgICAgIC8vIHdlIHdhbnQgdG8gcmV0dXJuIHRoZSB0b2tlbiB3ZSdyZSBhY3R1YWxseSBtYXRjaGluZ1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlZFN5bWJvbCA9IHJlY29nbml6ZXIuZ2V0Q3VycmVudFRva2VuKClcbiAgICAgICAgICAgIHRoaXMucmVwb3J0TWF0Y2gocmVjb2duaXplcik7IC8vIHdlIGtub3cgY3VycmVudCB0b2tlbiBpcyBjb3JyZWN0XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlZFN5bWJvbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uanVyZSB1cCBhIG1pc3NpbmcgdG9rZW4gZHVyaW5nIGVycm9yIHJlY292ZXJ5LlxuICAgICAqXG4gICAgICogVGhlIHJlY29nbml6ZXIgYXR0ZW1wdHMgdG8gcmVjb3ZlciBmcm9tIHNpbmdsZSBtaXNzaW5nXG4gICAgICogc3ltYm9scy4gQnV0LCBhY3Rpb25zIG1pZ2h0IHJlZmVyIHRvIHRoYXQgbWlzc2luZyBzeW1ib2wuXG4gICAgICogRm9yIGV4YW1wbGUsIHg9SUQge2YoJHgpO30uIFRoZSBhY3Rpb24gY2xlYXJseSBhc3N1bWVzXG4gICAgICogdGhhdCB0aGVyZSBoYXMgYmVlbiBhbiBpZGVudGlmaWVyIG1hdGNoZWQgcHJldmlvdXNseSBhbmQgdGhhdFxuICAgICAqICR4IHBvaW50cyBhdCB0aGF0IHRva2VuLiBJZiB0aGF0IHRva2VuIGlzIG1pc3NpbmcsIGJ1dFxuICAgICAqIHRoZSBuZXh0IHRva2VuIGluIHRoZSBzdHJlYW0gaXMgd2hhdCB3ZSB3YW50IHdlIGFzc3VtZSB0aGF0XG4gICAgICogdGhpcyB0b2tlbiBpcyBtaXNzaW5nIGFuZCB3ZSBrZWVwIGdvaW5nLiBCZWNhdXNlIHdlXG4gICAgICogaGF2ZSB0byByZXR1cm4gc29tZSB0b2tlbiB0byByZXBsYWNlIHRoZSBtaXNzaW5nIHRva2VuLFxuICAgICAqIHdlIGhhdmUgdG8gY29uanVyZSBvbmUgdXAuIFRoaXMgbWV0aG9kIGdpdmVzIHRoZSB1c2VyIGNvbnRyb2xcbiAgICAgKiBvdmVyIHRoZSB0b2tlbnMgcmV0dXJuZWQgZm9yIG1pc3NpbmcgdG9rZW5zLiBNb3N0bHksXG4gICAgICogeW91IHdpbGwgd2FudCB0byBjcmVhdGUgc29tZXRoaW5nIHNwZWNpYWwgZm9yIGlkZW50aWZpZXJcbiAgICAgKiB0b2tlbnMuIEZvciBsaXRlcmFscyBzdWNoIGFzICd7JyBhbmQgJywnLCB0aGUgZGVmYXVsdFxuICAgICAqIGFjdGlvbiBpbiB0aGUgcGFyc2VyIG9yIHRyZWUgcGFyc2VyIHdvcmtzLiBJdCBzaW1wbHkgY3JlYXRlc1xuICAgICAqIGEgQ29tbW9uVG9rZW4gb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUuIFRoZSB0ZXh0IHdpbGwgYmUgdGhlIHRva2VuLlxuICAgICAqIElmIHlvdSBjaGFuZ2Ugd2hhdCB0b2tlbnMgbXVzdCBiZSBjcmVhdGVkIGJ5IHRoZSBsZXhlcixcbiAgICAgKiBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBjcmVhdGUgdGhlIGFwcHJvcHJpYXRlIHRva2Vucy5cbiAgICAgKlxuICAgICAqL1xuICAgIGdldE1pc3NpbmdTeW1ib2wocmVjb2duaXplcikge1xuICAgICAgICBjb25zdCBjdXJyZW50U3ltYm9sID0gcmVjb2duaXplci5nZXRDdXJyZW50VG9rZW4oKVxuICAgICAgICBjb25zdCBleHBlY3RpbmcgPSB0aGlzLmdldEV4cGVjdGVkVG9rZW5zKHJlY29nbml6ZXIpXG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVG9rZW5UeXBlID0gZXhwZWN0aW5nLmZpcnN0KCkgLy8gZ2V0IGFueSBlbGVtZW50XG4gICAgICAgIGxldCB0b2tlblRleHRcbiAgICAgICAgaWYgKGV4cGVjdGVkVG9rZW5UeXBlPT09VG9rZW4uRU9GKSB7XG4gICAgICAgICAgICB0b2tlblRleHQgPSBcIjxtaXNzaW5nIEVPRj5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2VuVGV4dCA9IFwiPG1pc3NpbmcgXCIgKyByZWNvZ25pemVyLmxpdGVyYWxOYW1lc1tleHBlY3RlZFRva2VuVHlwZV0gKyBcIj5cIjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3VycmVudCA9IGN1cnJlbnRTeW1ib2xcbiAgICAgICAgY29uc3QgbG9va2JhY2sgPSByZWNvZ25pemVyLmdldFRva2VuU3RyZWFtKCkuTFQoLTEpXG4gICAgICAgIGlmIChjdXJyZW50LnR5cGU9PT1Ub2tlbi5FT0YgJiYgbG9va2JhY2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBsb29rYmFjaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVjb2duaXplci5nZXRUb2tlbkZhY3RvcnkoKS5jcmVhdGUoY3VycmVudC5zb3VyY2UsXG4gICAgICAgICAgICBleHBlY3RlZFRva2VuVHlwZSwgdG9rZW5UZXh0LCBUb2tlbi5ERUZBVUxUX0NIQU5ORUwsXG4gICAgICAgICAgICAtMSwgLTEsIGN1cnJlbnQubGluZSwgY3VycmVudC5jb2x1bW4pO1xuICAgIH1cblxuICAgIGdldEV4cGVjdGVkVG9rZW5zKHJlY29nbml6ZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlY29nbml6ZXIuZ2V0RXhwZWN0ZWRUb2tlbnMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIb3cgc2hvdWxkIGEgdG9rZW4gYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIG1lc3NhZ2U/IFRoZSBkZWZhdWx0XG4gICAgICogaXMgdG8gZGlzcGxheSBqdXN0IHRoZSB0ZXh0LCBidXQgZHVyaW5nIGRldmVsb3BtZW50IHlvdSBtaWdodFxuICAgICAqIHdhbnQgdG8gaGF2ZSBhIGxvdCBvZiBpbmZvcm1hdGlvbiBzcGl0IG91dC4gT3ZlcnJpZGUgaW4gdGhhdCBjYXNlXG4gICAgICogdG8gdXNlIHQudG9TdHJpbmcoKSAod2hpY2gsIGZvciBDb21tb25Ub2tlbiwgZHVtcHMgZXZlcnl0aGluZyBhYm91dFxuICAgICAqIHRoZSB0b2tlbikuIFRoaXMgaXMgYmV0dGVyIHRoYW4gZm9yY2luZyB5b3UgdG8gb3ZlcnJpZGUgYSBtZXRob2QgaW5cbiAgICAgKiB5b3VyIHRva2VuIG9iamVjdHMgYmVjYXVzZSB5b3UgZG9uJ3QgaGF2ZSB0byBnbyBtb2RpZnkgeW91ciBsZXhlclxuICAgICAqIHNvIHRoYXQgaXQgY3JlYXRlcyBhIG5ldyBKYXZhIHR5cGUuXG4gICAgICovXG4gICAgZ2V0VG9rZW5FcnJvckRpc3BsYXkodCkge1xuICAgICAgICBpZiAodCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiPG5vIHRva2VuPlwiO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzID0gdC50ZXh0XG4gICAgICAgIGlmIChzID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodC50eXBlPT09VG9rZW4uRU9GKSB7XG4gICAgICAgICAgICAgICAgcyA9IFwiPEVPRj5cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcyA9IFwiPFwiICsgdC50eXBlICsgXCI+XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZXNjYXBlV1NBbmRRdW90ZShzKTtcbiAgICB9XG5cbiAgICBlc2NhcGVXU0FuZFF1b3RlKHMpIHtcbiAgICAgICAgcyA9IHMucmVwbGFjZSgvXFxuL2csXCJcXFxcblwiKTtcbiAgICAgICAgcyA9IHMucmVwbGFjZSgvXFxyL2csXCJcXFxcclwiKTtcbiAgICAgICAgcyA9IHMucmVwbGFjZSgvXFx0L2csXCJcXFxcdFwiKTtcbiAgICAgICAgcmV0dXJuIFwiJ1wiICsgcyArIFwiJ1wiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIGVycm9yIHJlY292ZXJ5IHNldCBmb3IgdGhlIGN1cnJlbnQgcnVsZS4gRHVyaW5nXG4gICAgICogcnVsZSBpbnZvY2F0aW9uLCB0aGUgcGFyc2VyIHB1c2hlcyB0aGUgc2V0IG9mIHRva2VucyB0aGF0IGNhblxuICAgICAqIGZvbGxvdyB0aGF0IHJ1bGUgcmVmZXJlbmNlIG9uIHRoZSBzdGFjazsgdGhpcyBhbW91bnRzIHRvXG4gICAgICogY29tcHV0aW5nIEZJUlNUIG9mIHdoYXQgZm9sbG93cyB0aGUgcnVsZSByZWZlcmVuY2UgaW4gdGhlXG4gICAgICogZW5jbG9zaW5nIHJ1bGUuIFNlZSBMaW5lYXJBcHByb3hpbWF0b3IuRklSU1QoKS5cbiAgICAgKiBUaGlzIGxvY2FsIGZvbGxvdyBzZXQgb25seSBpbmNsdWRlcyB0b2tlbnNcbiAgICAgKiBmcm9tIHdpdGhpbiB0aGUgcnVsZTsgaS5lLiwgdGhlIEZJUlNUIGNvbXB1dGF0aW9uIGRvbmUgYnlcbiAgICAgKiBBTlRMUiBzdG9wcyBhdCB0aGUgZW5kIG9mIGEgcnVsZS5cbiAgICAgKlxuICAgICAqIEVYQU1QTEVcbiAgICAgKlxuICAgICAqIFdoZW4geW91IGZpbmQgYSBcIm5vIHZpYWJsZSBhbHQgZXhjZXB0aW9uXCIsIHRoZSBpbnB1dCBpcyBub3RcbiAgICAgKiBjb25zaXN0ZW50IHdpdGggYW55IG9mIHRoZSBhbHRlcm5hdGl2ZXMgZm9yIHJ1bGUgci4gVGhlIGJlc3RcbiAgICAgKiB0aGluZyB0byBkbyBpcyB0byBjb25zdW1lIHRva2VucyB1bnRpbCB5b3Ugc2VlIHNvbWV0aGluZyB0aGF0XG4gICAgICogY2FuIGxlZ2FsbHkgZm9sbG93IGEgY2FsbCB0byByLy9vciogYW55IHJ1bGUgdGhhdCBjYWxsZWQgci5cbiAgICAgKiBZb3UgZG9uJ3Qgd2FudCB0aGUgZXhhY3Qgc2V0IG9mIHZpYWJsZSBuZXh0IHRva2VucyBiZWNhdXNlIHRoZVxuICAgICAqIGlucHV0IG1pZ2h0IGp1c3QgYmUgbWlzc2luZyBhIHRva2VuLS15b3UgbWlnaHQgY29uc3VtZSB0aGVcbiAgICAgKiByZXN0IG9mIHRoZSBpbnB1dCBsb29raW5nIGZvciBvbmUgb2YgdGhlIG1pc3NpbmcgdG9rZW5zLlxuICAgICAqXG4gICAgICogQ29uc2lkZXIgZ3JhbW1hcjpcbiAgICAgKlxuICAgICAqIGEgOiAnWycgYiAnXSdcbiAgICAgKiB8ICcoJyBiICcpJ1xuICAgICAqIDtcbiAgICAgKiBiIDogYyAnXicgSU5UIDtcbiAgICAgKiBjIDogSURcbiAgICAgKiB8IElOVFxuICAgICAqIDtcbiAgICAgKlxuICAgICAqIEF0IGVhY2ggcnVsZSBpbnZvY2F0aW9uLCB0aGUgc2V0IG9mIHRva2VucyB0aGF0IGNvdWxkIGZvbGxvd1xuICAgICAqIHRoYXQgcnVsZSBpcyBwdXNoZWQgb24gYSBzdGFjay4gSGVyZSBhcmUgdGhlIHZhcmlvdXNcbiAgICAgKiBjb250ZXh0LXNlbnNpdGl2ZSBmb2xsb3cgc2V0czpcbiAgICAgKlxuICAgICAqIEZPTExPVyhiMV9pbl9hKSA9IEZJUlNUKCddJykgPSAnXSdcbiAgICAgKiBGT0xMT1coYjJfaW5fYSkgPSBGSVJTVCgnKScpID0gJyknXG4gICAgICogRk9MTE9XKGNfaW5fYikgPSBGSVJTVCgnXicpID0gJ14nXG4gICAgICpcbiAgICAgKiBVcG9uIGVycm9uZW91cyBpbnB1dCBcIltdXCIsIHRoZSBjYWxsIGNoYWluIGlzXG4gICAgICpcbiAgICAgKiBhIC0+IGIgLT4gY1xuICAgICAqXG4gICAgICogYW5kLCBoZW5jZSwgdGhlIGZvbGxvdyBjb250ZXh0IHN0YWNrIGlzOlxuICAgICAqXG4gICAgICogZGVwdGggZm9sbG93IHNldCBzdGFydCBvZiBydWxlIGV4ZWN1dGlvblxuICAgICAqIDAgPEVPRj4gYSAoZnJvbSBtYWluKCkpXG4gICAgICogMSAnXScgYlxuICAgICAqIDIgJ14nIGNcbiAgICAgKlxuICAgICAqIE5vdGljZSB0aGF0ICcpJyBpcyBub3QgaW5jbHVkZWQsIGJlY2F1c2UgYiB3b3VsZCBoYXZlIHRvIGhhdmVcbiAgICAgKiBiZWVuIGNhbGxlZCBmcm9tIGEgZGlmZmVyZW50IGNvbnRleHQgaW4gcnVsZSBhIGZvciAnKScgdG8gYmVcbiAgICAgKiBpbmNsdWRlZC5cbiAgICAgKlxuICAgICAqIEZvciBlcnJvciByZWNvdmVyeSwgd2UgY2Fubm90IGNvbnNpZGVyIEZPTExPVyhjKVxuICAgICAqIChjb250ZXh0LXNlbnNpdGl2ZSBvciBvdGhlcndpc2UpLiBXZSBuZWVkIHRoZSBjb21iaW5lZCBzZXQgb2ZcbiAgICAgKiBhbGwgY29udGV4dC1zZW5zaXRpdmUgRk9MTE9XIHNldHMtLXRoZSBzZXQgb2YgYWxsIHRva2VucyB0aGF0XG4gICAgICogY291bGQgZm9sbG93IGFueSByZWZlcmVuY2UgaW4gdGhlIGNhbGwgY2hhaW4uIFdlIG5lZWQgdG9cbiAgICAgKiByZXN5bmMgdG8gb25lIG9mIHRob3NlIHRva2Vucy4gTm90ZSB0aGF0IEZPTExPVyhjKT0nXicgYW5kIGlmXG4gICAgICogd2UgcmVzeW5jJ2QgdG8gdGhhdCB0b2tlbiwgd2UnZCBjb25zdW1lIHVudGlsIEVPRi4gV2UgbmVlZCB0b1xuICAgICAqIHN5bmMgdG8gY29udGV4dC1zZW5zaXRpdmUgRk9MTE9XcyBmb3IgYSwgYiwgYW5kIGM6IHsnXScsJ14nfS5cbiAgICAgKiBJbiB0aGlzIGNhc2UsIGZvciBpbnB1dCBcIltdXCIsIExBKDEpIGlzICddJyBhbmQgaW4gdGhlIHNldCwgc28gd2Ugd291bGRcbiAgICAgKiBub3QgY29uc3VtZSBhbnl0aGluZy4gQWZ0ZXIgcHJpbnRpbmcgYW4gZXJyb3IsIHJ1bGUgYyB3b3VsZFxuICAgICAqIHJldHVybiBub3JtYWxseS4gUnVsZSBiIHdvdWxkIG5vdCBmaW5kIHRoZSByZXF1aXJlZCAnXicgdGhvdWdoLlxuICAgICAqIEF0IHRoaXMgcG9pbnQsIGl0IGdldHMgYSBtaXNtYXRjaGVkIHRva2VuIGVycm9yIGFuZCB0aHJvd3MgYW5cbiAgICAgKiBleGNlcHRpb24gKHNpbmNlIExBKDEpIGlzIG5vdCBpbiB0aGUgdmlhYmxlIGZvbGxvd2luZyB0b2tlblxuICAgICAqIHNldCkuIFRoZSBydWxlIGV4Y2VwdGlvbiBoYW5kbGVyIHRyaWVzIHRvIHJlY292ZXIsIGJ1dCBmaW5kc1xuICAgICAqIHRoZSBzYW1lIHJlY292ZXJ5IHNldCBhbmQgZG9lc24ndCBjb25zdW1lIGFueXRoaW5nLiBSdWxlIGJcbiAgICAgKiBleGl0cyBub3JtYWxseSByZXR1cm5pbmcgdG8gcnVsZSBhLiBOb3cgaXQgZmluZHMgdGhlICddJyAoYW5kXG4gICAgICogd2l0aCB0aGUgc3VjY2Vzc2Z1bCBtYXRjaCBleGl0cyBlcnJvclJlY292ZXJ5IG1vZGUpLlxuICAgICAqXG4gICAgICogU28sIHlvdSBjYW4gc2VlIHRoYXQgdGhlIHBhcnNlciB3YWxrcyB1cCB0aGUgY2FsbCBjaGFpbiBsb29raW5nXG4gICAgICogZm9yIHRoZSB0b2tlbiB0aGF0IHdhcyBhIG1lbWJlciBvZiB0aGUgcmVjb3Zlcnkgc2V0LlxuICAgICAqXG4gICAgICogRXJyb3JzIGFyZSBub3QgZ2VuZXJhdGVkIGluIGVycm9yUmVjb3ZlcnkgbW9kZS5cbiAgICAgKlxuICAgICAqIEFOVExSJ3MgZXJyb3IgcmVjb3ZlcnkgbWVjaGFuaXNtIGlzIGJhc2VkIHVwb24gb3JpZ2luYWwgaWRlYXM6XG4gICAgICpcbiAgICAgKiBcIkFsZ29yaXRobXMgKyBEYXRhIFN0cnVjdHVyZXMgPSBQcm9ncmFtc1wiIGJ5IE5pa2xhdXMgV2lydGhcbiAgICAgKlxuICAgICAqIGFuZFxuICAgICAqXG4gICAgICogXCJBIG5vdGUgb24gZXJyb3IgcmVjb3ZlcnkgaW4gcmVjdXJzaXZlIGRlc2NlbnQgcGFyc2Vyc1wiOlxuICAgICAqIGh0dHA6Ly9wb3J0YWwuYWNtLm9yZy9jaXRhdGlvbi5jZm0/aWQ9OTQ3OTAyLjk0NzkwNVxuICAgICAqXG4gICAgICogTGF0ZXIsIEpvc2VmIEdyb3NjaCBoYWQgc29tZSBnb29kIGlkZWFzOlxuICAgICAqXG4gICAgICogXCJFZmZpY2llbnQgYW5kIENvbWZvcnRhYmxlIEVycm9yIFJlY292ZXJ5IGluIFJlY3Vyc2l2ZSBEZXNjZW50XG4gICAgICogUGFyc2Vyc1wiOlxuICAgICAqIGZ0cDovL3d3dy5jb2NvbGFiLmNvbS9wcm9kdWN0cy9jb2NrdGFpbC9kb2NhNC5wcy9lbGwucHMuemlwXG4gICAgICpcbiAgICAgKiBMaWtlIEdyb3NjaCBJIGltcGxlbWVudCBjb250ZXh0LXNlbnNpdGl2ZSBGT0xMT1cgc2V0cyB0aGF0IGFyZSBjb21iaW5lZFxuICAgICAqIGF0IHJ1bi10aW1lIHVwb24gZXJyb3IgdG8gYXZvaWQgb3ZlcmhlYWQgZHVyaW5nIHBhcnNpbmcuXG4gICAgICovXG4gICAgZ2V0RXJyb3JSZWNvdmVyeVNldChyZWNvZ25pemVyKSB7XG4gICAgICAgIGNvbnN0IGF0biA9IHJlY29nbml6ZXIuX2ludGVycC5hdG5cbiAgICAgICAgbGV0IGN0eCA9IHJlY29nbml6ZXIuX2N0eFxuICAgICAgICBjb25zdCByZWNvdmVyU2V0ID0gbmV3IEludGVydmFsU2V0KClcbiAgICAgICAgd2hpbGUgKGN0eCAhPT0gbnVsbCAmJiBjdHguaW52b2tpbmdTdGF0ZT49MCkge1xuICAgICAgICAgICAgLy8gY29tcHV0ZSB3aGF0IGZvbGxvd3Mgd2hvIGludm9rZWQgdXNcbiAgICAgICAgICAgIGNvbnN0IGludm9raW5nU3RhdGUgPSBhdG4uc3RhdGVzW2N0eC5pbnZva2luZ1N0YXRlXVxuICAgICAgICAgICAgY29uc3QgcnQgPSBpbnZva2luZ1N0YXRlLnRyYW5zaXRpb25zWzBdXG4gICAgICAgICAgICBjb25zdCBmb2xsb3cgPSBhdG4ubmV4dFRva2VucyhydC5mb2xsb3dTdGF0ZSlcbiAgICAgICAgICAgIHJlY292ZXJTZXQuYWRkU2V0KGZvbGxvdyk7XG4gICAgICAgICAgICBjdHggPSBjdHgucGFyZW50Q3R4O1xuICAgICAgICB9XG4gICAgICAgIHJlY292ZXJTZXQucmVtb3ZlT25lKFRva2VuLkVQU0lMT04pO1xuICAgICAgICByZXR1cm4gcmVjb3ZlclNldDtcbiAgICB9XG5cbi8vIENvbnN1bWUgdG9rZW5zIHVudGlsIG9uZSBtYXRjaGVzIHRoZSBnaXZlbiB0b2tlbiBzZXQuLy9cbiAgICBjb25zdW1lVW50aWwocmVjb2duaXplciwgc2V0KSB7XG4gICAgICAgIGxldCB0dHlwZSA9IHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5MQSgxKVxuICAgICAgICB3aGlsZSggdHR5cGUgIT09IFRva2VuLkVPRiAmJiAhc2V0LmNvbnRhaW5zKHR0eXBlKSkge1xuICAgICAgICAgICAgcmVjb2duaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICB0dHlwZSA9IHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5MQSgxKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vKipcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIEFOVExSRXJyb3JTdHJhdGVneX0gcmVzcG9uZHMgdG8gc3ludGF4IGVycm9yc1xuICogYnkgaW1tZWRpYXRlbHkgY2FuY2VsaW5nIHRoZSBwYXJzZSBvcGVyYXRpb24gd2l0aCBhXG4gKiB7QGxpbmsgUGFyc2VDYW5jZWxsYXRpb25FeGNlcHRpb259LiBUaGUgaW1wbGVtZW50YXRpb24gZW5zdXJlcyB0aGF0IHRoZVxuICoge0BsaW5rIFBhcnNlclJ1bGVDb250ZXh0Ly9leGNlcHRpb259IGZpZWxkIGlzIHNldCBmb3IgYWxsIHBhcnNlIHRyZWUgbm9kZXNcbiAqIHRoYXQgd2VyZSBub3QgY29tcGxldGVkIHByaW9yIHRvIGVuY291bnRlcmluZyB0aGUgZXJyb3IuXG4gKlxuICogPHA+XG4gKiBUaGlzIGVycm9yIHN0cmF0ZWd5IGlzIHVzZWZ1bCBpbiB0aGUgZm9sbG93aW5nIHNjZW5hcmlvcy48L3A+XG4gKlxuICogPHVsPlxuICogPGxpPjxzdHJvbmc+VHdvLXN0YWdlIHBhcnNpbmc6PC9zdHJvbmc+IFRoaXMgZXJyb3Igc3RyYXRlZ3kgYWxsb3dzIHRoZSBmaXJzdFxuICogc3RhZ2Ugb2YgdHdvLXN0YWdlIHBhcnNpbmcgdG8gaW1tZWRpYXRlbHkgdGVybWluYXRlIGlmIGFuIGVycm9yIGlzXG4gKiBlbmNvdW50ZXJlZCwgYW5kIGltbWVkaWF0ZWx5IGZhbGwgYmFjayB0byB0aGUgc2Vjb25kIHN0YWdlLiBJbiBhZGRpdGlvbiB0b1xuICogYXZvaWRpbmcgd2FzdGVkIHdvcmsgYnkgYXR0ZW1wdGluZyB0byByZWNvdmVyIGZyb20gZXJyb3JzIGhlcmUsIHRoZSBlbXB0eVxuICogaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIEJhaWxFcnJvclN0cmF0ZWd5Ly9zeW5jfSBpbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2Ugb2ZcbiAqIHRoZSBmaXJzdCBzdGFnZS48L2xpPlxuICogPGxpPjxzdHJvbmc+U2lsZW50IHZhbGlkYXRpb246PC9zdHJvbmc+IFdoZW4gc3ludGF4IGVycm9ycyBhcmUgbm90IGJlaW5nXG4gKiByZXBvcnRlZCBvciBsb2dnZWQsIGFuZCB0aGUgcGFyc2UgcmVzdWx0IGlzIHNpbXBseSBpZ25vcmVkIGlmIGVycm9ycyBvY2N1cixcbiAqIHRoZSB7QGxpbmsgQmFpbEVycm9yU3RyYXRlZ3l9IGF2b2lkcyB3YXN0aW5nIHdvcmsgb24gcmVjb3ZlcmluZyBmcm9tIGVycm9yc1xuICogd2hlbiB0aGUgcmVzdWx0IHdpbGwgYmUgaWdub3JlZCBlaXRoZXIgd2F5LjwvbGk+XG4gKiA8L3VsPlxuICpcbiAqIDxwPlxuICoge0Bjb2RlIG15cGFyc2VyLnNldEVycm9ySGFuZGxlcihuZXcgQmFpbEVycm9yU3RyYXRlZ3koKSk7fTwvcD5cbiAqXG4gKiBAc2VlIFBhcnNlci8vc2V0RXJyb3JIYW5kbGVyKEFOVExSRXJyb3JTdHJhdGVneSlcbiAqICovXG5jbGFzcyBCYWlsRXJyb3JTdHJhdGVneSBleHRlbmRzIERlZmF1bHRFcnJvclN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnN0ZWFkIG9mIHJlY292ZXJpbmcgZnJvbSBleGNlcHRpb24ge0Bjb2RlIGV9LCByZS10aHJvdyBpdCB3cmFwcGVkXG4gICAgICogaW4gYSB7QGxpbmsgUGFyc2VDYW5jZWxsYXRpb25FeGNlcHRpb259IHNvIGl0IGlzIG5vdCBjYXVnaHQgYnkgdGhlXG4gICAgICogcnVsZSBmdW5jdGlvbiBjYXRjaGVzLiBVc2Uge0BsaW5rIEV4Y2VwdGlvbi8vZ2V0Q2F1c2UoKX0gdG8gZ2V0IHRoZVxuICAgICAqIG9yaWdpbmFsIHtAbGluayBSZWNvZ25pdGlvbkV4Y2VwdGlvbn0uXG4gICAgICovXG4gICAgcmVjb3ZlcihyZWNvZ25pemVyLCBlKSB7XG4gICAgICAgIGxldCBjb250ZXh0ID0gcmVjb2duaXplci5fY3R4XG4gICAgICAgIHdoaWxlIChjb250ZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb250ZXh0LmV4Y2VwdGlvbiA9IGU7XG4gICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC5wYXJlbnRDdHg7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlQ2FuY2VsbGF0aW9uRXhjZXB0aW9uKGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2Ugc3VyZSB3ZSBkb24ndCBhdHRlbXB0IHRvIHJlY292ZXIgaW5saW5lOyBpZiB0aGUgcGFyc2VyXG4gICAgICogc3VjY2Vzc2Z1bGx5IHJlY292ZXJzLCBpdCB3b24ndCB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAgICovXG4gICAgcmVjb3ZlcklubGluZShyZWNvZ25pemVyKSB7XG4gICAgICAgIHRoaXMucmVjb3ZlcihyZWNvZ25pemVyLCBuZXcgSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbihyZWNvZ25pemVyKSk7XG4gICAgfVxuXG4vLyBNYWtlIHN1cmUgd2UgZG9uJ3QgYXR0ZW1wdCB0byByZWNvdmVyIGZyb20gcHJvYmxlbXMgaW4gc3VicnVsZXMuLy9cbiAgICBzeW5jKHJlY29nbml6ZXIpIHtcbiAgICAgICAgLy8gcGFzc1xuICAgIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtCYWlsRXJyb3JTdHJhdGVneSwgRGVmYXVsdEVycm9yU3RyYXRlZ3l9O1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG4vKipcbiAqIFRoZSByb290IG9mIHRoZSBBTlRMUiBleGNlcHRpb24gaGllcmFyY2h5LiBJbiBnZW5lcmFsLCBBTlRMUiB0cmFja3MganVzdFxuICogIDMga2luZHMgb2YgZXJyb3JzOiBwcmVkaWN0aW9uIGVycm9ycywgZmFpbGVkIHByZWRpY2F0ZSBlcnJvcnMsIGFuZFxuICogIG1pc21hdGNoZWQgaW5wdXQgZXJyb3JzLiBJbiBlYWNoIGNhc2UsIHRoZSBwYXJzZXIga25vd3Mgd2hlcmUgaXQgaXNcbiAqICBpbiB0aGUgaW5wdXQsIHdoZXJlIGl0IGlzIGluIHRoZSBBVE4sIHRoZSBydWxlIGludm9jYXRpb24gc3RhY2ssXG4gKiAgYW5kIHdoYXQga2luZCBvZiBwcm9ibGVtIG9jY3VycmVkLlxuICovXG5cbmNvbnN0IHtQcmVkaWNhdGVUcmFuc2l0aW9ufSA9IHJlcXVpcmUoJy4vLi4vYXRuL1RyYW5zaXRpb24nKTtcbmNvbnN0IHtJbnRlcnZhbH0gPSByZXF1aXJlKCcuLi9JbnRlcnZhbFNldCcpLkludGVydmFsO1xuXG5jbGFzcyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1zLm1lc3NhZ2UpO1xuICAgICAgICBpZiAoISFFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgUmVjb2duaXRpb25FeGNlcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZXNzYWdlID0gcGFyYW1zLm1lc3NhZ2U7XG4gICAgICAgIHRoaXMucmVjb2duaXplciA9IHBhcmFtcy5yZWNvZ25pemVyO1xuICAgICAgICB0aGlzLmlucHV0ID0gcGFyYW1zLmlucHV0O1xuICAgICAgICB0aGlzLmN0eCA9IHBhcmFtcy5jdHg7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY3VycmVudCB7QGxpbmsgVG9rZW59IHdoZW4gYW4gZXJyb3Igb2NjdXJyZWQuIFNpbmNlIG5vdCBhbGwgc3RyZWFtc1xuICAgICAgICAgKiBzdXBwb3J0IGFjY2Vzc2luZyBzeW1ib2xzIGJ5IGluZGV4LCB3ZSBoYXZlIHRvIHRyYWNrIHRoZSB7QGxpbmsgVG9rZW59XG4gICAgICAgICAqIGluc3RhbmNlIGl0c2VsZlxuICAgICAgICAqL1xuICAgICAgICB0aGlzLm9mZmVuZGluZ1Rva2VuID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgQVROIHN0YXRlIG51bWJlciB0aGUgcGFyc2VyIHdhcyBpbiBhdCB0aGUgdGltZSB0aGUgZXJyb3JcbiAgICAgICAgICogb2NjdXJyZWQuIEZvciB7QGxpbmsgTm9WaWFibGVBbHRFeGNlcHRpb259IGFuZFxuICAgICAgICAgKiB7QGxpbmsgTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbn0gZXhjZXB0aW9ucywgdGhpcyBpcyB0aGVcbiAgICAgICAgICoge0BsaW5rIERlY2lzaW9uU3RhdGV9IG51bWJlci4gRm9yIG90aGVycywgaXQgaXMgdGhlIHN0YXRlIHdob3NlIG91dGdvaW5nXG4gICAgICAgICAqIGVkZ2Ugd2UgY291bGRuJ3QgbWF0Y2guXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9mZmVuZGluZ1N0YXRlID0gLTE7XG4gICAgICAgIGlmICh0aGlzLnJlY29nbml6ZXIhPT1udWxsKSB7XG4gICAgICAgICAgICB0aGlzLm9mZmVuZGluZ1N0YXRlID0gdGhpcy5yZWNvZ25pemVyLnN0YXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2V0IG9mIGlucHV0IHN5bWJvbHMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgZm9sbG93IHRoZVxuICAgICAqIHByZXZpb3VzbHkgbWF0Y2hlZCBzeW1ib2wgYXQgdGhlIHRpbWUgdGhpcyBleGNlcHRpb24gd2FzIHRocm93bi5cbiAgICAgKlxuICAgICAqIDxwPklmIHRoZSBzZXQgb2YgZXhwZWN0ZWQgdG9rZW5zIGlzIG5vdCBrbm93biBhbmQgY291bGQgbm90IGJlIGNvbXB1dGVkLFxuICAgICAqIHRoaXMgbWV0aG9kIHJldHVybnMge0Bjb2RlIG51bGx9LjwvcD5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gVGhlIHNldCBvZiB0b2tlbiB0eXBlcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGZvbGxvdyB0aGUgY3VycmVudFxuICAgICAqIHN0YXRlIGluIHRoZSBBVE4sIG9yIHtAY29kZSBudWxsfSBpZiB0aGUgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZS5cbiAgICAgKi9cbiAgICBnZXRFeHBlY3RlZFRva2VucygpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjb2duaXplciE9PW51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlY29nbml6ZXIuYXRuLmdldEV4cGVjdGVkVG9rZW5zKHRoaXMub2ZmZW5kaW5nU3RhdGUsIHRoaXMuY3R4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gPHA+SWYgdGhlIHN0YXRlIG51bWJlciBpcyBub3Qga25vd24sIHRoaXMgbWV0aG9kIHJldHVybnMgLTEuPC9wPlxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICAgIH1cbn1cblxuY2xhc3MgTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbiBleHRlbmRzIFJlY29nbml0aW9uRXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihsZXhlciwgaW5wdXQsIHN0YXJ0SW5kZXgsIGRlYWRFbmRDb25maWdzKSB7XG4gICAgICAgIHN1cGVyKHttZXNzYWdlOiBcIlwiLCByZWNvZ25pemVyOiBsZXhlciwgaW5wdXQ6IGlucHV0LCBjdHg6IG51bGx9KTtcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gc3RhcnRJbmRleDtcbiAgICAgICAgdGhpcy5kZWFkRW5kQ29uZmlncyA9IGRlYWRFbmRDb25maWdzO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgc3ltYm9sID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRJbmRleCA+PSAwICYmIHRoaXMuc3RhcnRJbmRleCA8IHRoaXMuaW5wdXQuc2l6ZSkge1xuICAgICAgICAgICAgc3ltYm9sID0gdGhpcy5pbnB1dC5nZXRUZXh0KG5ldyBJbnRlcnZhbCh0aGlzLnN0YXJ0SW5kZXgsdGhpcy5zdGFydEluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvblwiICsgc3ltYm9sO1xuICAgIH1cbn1cblxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSBwYXJzZXIgY291bGQgbm90IGRlY2lkZSB3aGljaCBvZiB0d28gb3IgbW9yZSBwYXRoc1xuICogdG8gdGFrZSBiYXNlZCB1cG9uIHRoZSByZW1haW5pbmcgaW5wdXQuIEl0IHRyYWNrcyB0aGUgc3RhcnRpbmcgdG9rZW5cbiAqIG9mIHRoZSBvZmZlbmRpbmcgaW5wdXQgYW5kIGFsc28ga25vd3Mgd2hlcmUgdGhlIHBhcnNlciB3YXNcbiAqIGluIHRoZSB2YXJpb3VzIHBhdGhzIHdoZW4gdGhlIGVycm9yLiBSZXBvcnRlZCBieSByZXBvcnROb1ZpYWJsZUFsdGVybmF0aXZlKClcbiAqL1xuY2xhc3MgTm9WaWFibGVBbHRFeGNlcHRpb24gZXh0ZW5kcyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3IocmVjb2duaXplciwgaW5wdXQsIHN0YXJ0VG9rZW4sIG9mZmVuZGluZ1Rva2VuLCBkZWFkRW5kQ29uZmlncywgY3R4KSB7XG4gICAgICAgIGN0eCA9IGN0eCB8fCByZWNvZ25pemVyLl9jdHg7XG4gICAgICAgIG9mZmVuZGluZ1Rva2VuID0gb2ZmZW5kaW5nVG9rZW4gfHwgcmVjb2duaXplci5nZXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgc3RhcnRUb2tlbiA9IHN0YXJ0VG9rZW4gfHwgcmVjb2duaXplci5nZXRDdXJyZW50VG9rZW4oKTtcbiAgICAgICAgaW5wdXQgPSBpbnB1dCB8fCByZWNvZ25pemVyLmdldElucHV0U3RyZWFtKCk7XG4gICAgICAgIHN1cGVyKHttZXNzYWdlOiBcIlwiLCByZWNvZ25pemVyOiByZWNvZ25pemVyLCBpbnB1dDogaW5wdXQsIGN0eDogY3R4fSk7XG4gICAgICAgIC8vIFdoaWNoIGNvbmZpZ3VyYXRpb25zIGRpZCB3ZSB0cnkgYXQgaW5wdXQuaW5kZXgoKSB0aGF0IGNvdWxkbid0IG1hdGNoXG4gICAgICAgIC8vIGlucHV0LkxUKDEpPy8vXG4gICAgICAgIHRoaXMuZGVhZEVuZENvbmZpZ3MgPSBkZWFkRW5kQ29uZmlncztcbiAgICAgICAgLy8gVGhlIHRva2VuIG9iamVjdCBhdCB0aGUgc3RhcnQgaW5kZXg7IHRoZSBpbnB1dCBzdHJlYW0gbWlnaHRcbiAgICAgICAgLy8gbm90IGJlIGJ1ZmZlcmluZyB0b2tlbnMgc28gZ2V0IGEgcmVmZXJlbmNlIHRvIGl0LiAoQXQgdGhlXG4gICAgICAgIC8vIHRpbWUgdGhlIGVycm9yIG9jY3VycmVkLCBvZiBjb3Vyc2UgdGhlIHN0cmVhbSBuZWVkcyB0byBrZWVwIGFcbiAgICAgICAgLy8gYnVmZmVyIGFsbCBvZiB0aGUgdG9rZW5zIGJ1dCBsYXRlciB3ZSBtaWdodCBub3QgaGF2ZSBhY2Nlc3MgdG8gdGhvc2UuKVxuICAgICAgICB0aGlzLnN0YXJ0VG9rZW4gPSBzdGFydFRva2VuO1xuICAgICAgICB0aGlzLm9mZmVuZGluZ1Rva2VuID0gb2ZmZW5kaW5nVG9rZW47XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgc2lnbmlmaWVzIGFueSBraW5kIG9mIG1pc21hdGNoZWQgaW5wdXQgZXhjZXB0aW9ucyBzdWNoIGFzXG4gKiB3aGVuIHRoZSBjdXJyZW50IGlucHV0IGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RlZCB0b2tlbi5cbiovXG5jbGFzcyBJbnB1dE1pc21hdGNoRXhjZXB0aW9uIGV4dGVuZHMgUmVjb2duaXRpb25FeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHJlY29nbml6ZXIpIHtcbiAgICAgICAgc3VwZXIoe21lc3NhZ2U6IFwiXCIsIHJlY29nbml6ZXI6IHJlY29nbml6ZXIsIGlucHV0OiByZWNvZ25pemVyLmdldElucHV0U3RyZWFtKCksIGN0eDogcmVjb2duaXplci5fY3R4fSk7XG4gICAgICAgIHRoaXMub2ZmZW5kaW5nVG9rZW4gPSByZWNvZ25pemVyLmdldEN1cnJlbnRUb2tlbigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShwcmVkaWNhdGUsIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSAhPT1udWxsKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImZhaWxlZCBwcmVkaWNhdGU6IHtcIiArIHByZWRpY2F0ZSArIFwifT9cIjtcbiAgICB9XG59XG5cbi8qKlxuICogQSBzZW1hbnRpYyBwcmVkaWNhdGUgZmFpbGVkIGR1cmluZyB2YWxpZGF0aW9uLiBWYWxpZGF0aW9uIG9mIHByZWRpY2F0ZXNcbiAqIG9jY3VycyB3aGVuIG5vcm1hbGx5IHBhcnNpbmcgdGhlIGFsdGVybmF0aXZlIGp1c3QgbGlrZSBtYXRjaGluZyBhIHRva2VuLlxuICogRGlzYW1iaWd1YXRpbmcgcHJlZGljYXRlIGV2YWx1YXRpb24gb2NjdXJzIHdoZW4gd2UgdGVzdCBhIHByZWRpY2F0ZSBkdXJpbmdcbiAqIHByZWRpY3Rpb24uXG4qL1xuY2xhc3MgRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uIGV4dGVuZHMgUmVjb2duaXRpb25FeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHJlY29nbml6ZXIsIHByZWRpY2F0ZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBtZXNzYWdlOiBmb3JtYXRNZXNzYWdlKHByZWRpY2F0ZSwgbWVzc2FnZSB8fCBudWxsKSwgcmVjb2duaXplcjogcmVjb2duaXplcixcbiAgICAgICAgICAgIGlucHV0OiByZWNvZ25pemVyLmdldElucHV0U3RyZWFtKCksIGN0eDogcmVjb2duaXplci5fY3R4XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzID0gcmVjb2duaXplci5faW50ZXJwLmF0bi5zdGF0ZXNbcmVjb2duaXplci5zdGF0ZV1cbiAgICAgICAgY29uc3QgdHJhbnMgPSBzLnRyYW5zaXRpb25zWzBdXG4gICAgICAgIGlmICh0cmFucyBpbnN0YW5jZW9mIFByZWRpY2F0ZVRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMucnVsZUluZGV4ID0gdHJhbnMucnVsZUluZGV4O1xuICAgICAgICAgICAgdGhpcy5wcmVkaWNhdGVJbmRleCA9IHRyYW5zLnByZWRJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucnVsZUluZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMucHJlZGljYXRlSW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLm9mZmVuZGluZ1Rva2VuID0gcmVjb2duaXplci5nZXRDdXJyZW50VG9rZW4oKTtcbiAgICB9XG59XG5cblxuY2xhc3MgUGFyc2VDYW5jZWxsYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBFcnJvcntcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBQYXJzZUNhbmNlbGxhdGlvbkV4Y2VwdGlvbik7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBSZWNvZ25pdGlvbkV4Y2VwdGlvbixcbiAgICBOb1ZpYWJsZUFsdEV4Y2VwdGlvbixcbiAgICBMZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uLFxuICAgIElucHV0TWlzbWF0Y2hFeGNlcHRpb24sXG4gICAgRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uLFxuICAgIFBhcnNlQ2FuY2VsbGF0aW9uRXhjZXB0aW9uXG59O1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5SZWNvZ25pdGlvbkV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuUmVjb2duaXRpb25FeGNlcHRpb247XG5tb2R1bGUuZXhwb3J0cy5Ob1ZpYWJsZUFsdEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuTm9WaWFibGVBbHRFeGNlcHRpb247XG5tb2R1bGUuZXhwb3J0cy5MZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uID0gcmVxdWlyZSgnLi9FcnJvcnMnKS5MZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uO1xubW9kdWxlLmV4cG9ydHMuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbjtcbm1vZHVsZS5leHBvcnRzLkZhaWxlZFByZWRpY2F0ZUV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uO1xubW9kdWxlLmV4cG9ydHMuRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIgPSByZXF1aXJlKCcuL0RpYWdub3N0aWNFcnJvckxpc3RlbmVyJyk7XG5tb2R1bGUuZXhwb3J0cy5CYWlsRXJyb3JTdHJhdGVneSA9IHJlcXVpcmUoJy4vRXJyb3JTdHJhdGVneScpLkJhaWxFcnJvclN0cmF0ZWd5O1xubW9kdWxlLmV4cG9ydHMuRGVmYXVsdEVycm9yU3RyYXRlZ3kgPSByZXF1aXJlKCcuL0Vycm9yU3RyYXRlZ3knKS5EZWZhdWx0RXJyb3JTdHJhdGVneTtcbm1vZHVsZS5leHBvcnRzLkVycm9yTGlzdGVuZXIgPSByZXF1aXJlKCcuL0Vycm9yTGlzdGVuZXInKS5FcnJvckxpc3RlbmVyO1xuIiwiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuZXhwb3J0cy5hdG4gPSByZXF1aXJlKCcuL2F0bi9pbmRleCcpO1xuZXhwb3J0cy5jb2RlcG9pbnRhdCA9IHJlcXVpcmUoJy4vcG9seWZpbGxzL2NvZGVwb2ludGF0Jyk7XG5leHBvcnRzLmRmYSA9IHJlcXVpcmUoJy4vZGZhL2luZGV4Jyk7XG5leHBvcnRzLmZyb21jb2RlcG9pbnQgPSByZXF1aXJlKCcuL3BvbHlmaWxscy9mcm9tY29kZXBvaW50Jyk7XG5leHBvcnRzLnRyZWUgPSByZXF1aXJlKCcuL3RyZWUvaW5kZXgnKTtcbmV4cG9ydHMuZXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yL2luZGV4Jyk7XG5leHBvcnRzLlRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLlRva2VuO1xuZXhwb3J0cy5DaGFyU3RyZWFtcyA9IHJlcXVpcmUoJy4vQ2hhclN0cmVhbXMnKTtcbmV4cG9ydHMuQ29tbW9uVG9rZW4gPSByZXF1aXJlKCcuL1Rva2VuJykuQ29tbW9uVG9rZW47XG5leHBvcnRzLklucHV0U3RyZWFtID0gcmVxdWlyZSgnLi9JbnB1dFN0cmVhbScpO1xuZXhwb3J0cy5GaWxlU3RyZWFtID0gcmVxdWlyZSgnLi9GaWxlU3RyZWFtJyk7XG5leHBvcnRzLkNvbW1vblRva2VuU3RyZWFtID0gcmVxdWlyZSgnLi9Db21tb25Ub2tlblN0cmVhbScpO1xuZXhwb3J0cy5MZXhlciA9IHJlcXVpcmUoJy4vTGV4ZXInKTtcbmV4cG9ydHMuUGFyc2VyID0gcmVxdWlyZSgnLi9QYXJzZXInKTtcbnZhciBwYyA9IHJlcXVpcmUoJy4vUHJlZGljdGlvbkNvbnRleHQnKTtcbmV4cG9ydHMuUHJlZGljdGlvbkNvbnRleHRDYWNoZSA9IHBjLlByZWRpY3Rpb25Db250ZXh0Q2FjaGU7XG5leHBvcnRzLlBhcnNlclJ1bGVDb250ZXh0ID0gcmVxdWlyZSgnLi9QYXJzZXJSdWxlQ29udGV4dCcpO1xuZXhwb3J0cy5JbnRlcnZhbCA9IHJlcXVpcmUoJy4vSW50ZXJ2YWxTZXQnKS5JbnRlcnZhbDtcbmV4cG9ydHMuSW50ZXJ2YWxTZXQgPSByZXF1aXJlKCcuL0ludGVydmFsU2V0JykuSW50ZXJ2YWxTZXQ7XG5leHBvcnRzLlV0aWxzID0gcmVxdWlyZSgnLi9VdGlscycpO1xuZXhwb3J0cy5MTDFBbmFseXplciA9IHJlcXVpcmUoJy4vTEwxQW5hbHl6ZXInKS5MTDFBbmFseXplcjtcbiIsIi8qISBodHRwczovL210aHMuYmUvY29kZXBvaW50YXQgdjAuMi4wIGJ5IEBtYXRoaWFzICovXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQpIHtcblx0KGZ1bmN0aW9uKCkge1xuXHRcdCd1c2Ugc3RyaWN0JzsgLy8gbmVlZGVkIHRvIHN1cHBvcnQgYGFwcGx5YC9gY2FsbGAgd2l0aCBgdW5kZWZpbmVkYC9gbnVsbGBcblx0XHR2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBJRSA4IG9ubHkgc3VwcG9ydHMgYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgb24gRE9NIGVsZW1lbnRzXG5cdFx0XHRsZXQgcmVzdWx0O1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29uc3Qgb2JqZWN0ID0ge307XG5cdFx0XHRcdGNvbnN0ICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblx0XHRcdFx0cmVzdWx0ID0gJGRlZmluZVByb3BlcnR5KG9iamVjdCwgb2JqZWN0LCBvYmplY3QpICYmICRkZWZpbmVQcm9wZXJ0eTtcblx0XHRcdH0gY2F0Y2goZXJyb3IpIHtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSgpKTtcblx0XHRjb25zdCBjb2RlUG9pbnRBdCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0XHRpZiAodGhpcyA9PSBudWxsKSB7XG5cdFx0XHRcdHRocm93IFR5cGVFcnJvcigpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuXHRcdFx0Y29uc3Qgc2l6ZSA9IHN0cmluZy5sZW5ndGg7XG5cdFx0XHQvLyBgVG9JbnRlZ2VyYFxuXHRcdFx0bGV0IGluZGV4ID0gcG9zaXRpb24gPyBOdW1iZXIocG9zaXRpb24pIDogMDtcblx0XHRcdGlmIChpbmRleCAhPT0gaW5kZXgpIHsgLy8gYmV0dGVyIGBpc05hTmBcblx0XHRcdFx0aW5kZXggPSAwO1xuXHRcdFx0fVxuXHRcdFx0Ly8gQWNjb3VudCBmb3Igb3V0LW9mLWJvdW5kcyBpbmRpY2VzOlxuXHRcdFx0aWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBzaXplKSB7XG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHQvLyBHZXQgdGhlIGZpcnN0IGNvZGUgdW5pdFxuXHRcdFx0Y29uc3QgZmlyc3QgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG5cdFx0XHRsZXQgc2Vjb25kO1xuXHRcdFx0aWYgKCAvLyBjaGVjayBpZiBpdOKAmXMgdGhlIHN0YXJ0IG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0Zmlyc3QgPj0gMHhEODAwICYmIGZpcnN0IDw9IDB4REJGRiAmJiAvLyBoaWdoIHN1cnJvZ2F0ZVxuXHRcdFx0XHRzaXplID4gaW5kZXggKyAxIC8vIHRoZXJlIGlzIGEgbmV4dCBjb2RlIHVuaXRcblx0XHRcdCkge1xuXHRcdFx0XHRzZWNvbmQgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCArIDEpO1xuXHRcdFx0XHRpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHQvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcblx0XHRcdFx0XHRyZXR1cm4gKGZpcnN0IC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZpcnN0O1xuXHRcdH07XG5cdFx0aWYgKGRlZmluZVByb3BlcnR5KSB7XG5cdFx0XHRkZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCAnY29kZVBvaW50QXQnLCB7XG5cdFx0XHRcdCd2YWx1ZSc6IGNvZGVQb2ludEF0LFxuXHRcdFx0XHQnY29uZmlndXJhYmxlJzogdHJ1ZSxcblx0XHRcdFx0J3dyaXRhYmxlJzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQgPSBjb2RlUG9pbnRBdDtcblx0XHR9XG5cdH0oKSk7XG59XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL2Zyb21jb2RlcG9pbnQgdjAuMi4xIGJ5IEBtYXRoaWFzICovXG5pZiAoIVN0cmluZy5mcm9tQ29kZVBvaW50KSB7XG5cdChmdW5jdGlvbigpIHtcblx0XHRjb25zdCBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcblx0XHRcdC8vIElFIDggb25seSBzdXBwb3J0cyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBvbiBET00gZWxlbWVudHNcblx0XHRcdGxldCByZXN1bHQ7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBvYmplY3QgPSB7fTtcblx0XHRcdFx0Y29uc3QgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXHRcdFx0XHRyZXN1bHQgPSAkZGVmaW5lUHJvcGVydHkob2JqZWN0LCBvYmplY3QsIG9iamVjdCkgJiYgJGRlZmluZVByb3BlcnR5O1xuXHRcdFx0fSBjYXRjaChlcnJvcikge31cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSgpKTtcblx0XHRjb25zdCBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXHRcdGNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcblx0XHRjb25zdCBmcm9tQ29kZVBvaW50ID0gZnVuY3Rpb24oXykge1xuXHRcdFx0Y29uc3QgTUFYX1NJWkUgPSAweDQwMDA7XG5cdFx0XHRjb25zdCBjb2RlVW5pdHMgPSBbXTtcblx0XHRcdGxldCBoaWdoU3Vycm9nYXRlO1xuXHRcdFx0bGV0IGxvd1N1cnJvZ2F0ZTtcblx0XHRcdGxldCBpbmRleCA9IC0xO1xuXHRcdFx0Y29uc3QgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0XHRcdGlmICghbGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH1cblx0XHRcdGxldCByZXN1bHQgPSAnJztcblx0XHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRcdGxldCBjb2RlUG9pbnQgPSBOdW1iZXIoYXJndW1lbnRzW2luZGV4XSk7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhaXNGaW5pdGUoY29kZVBvaW50KSB8fCAvLyBgTmFOYCwgYCtJbmZpbml0eWAsIG9yIGAtSW5maW5pdHlgXG5cdFx0XHRcdFx0Y29kZVBvaW50IDwgMCB8fCAvLyBub3QgYSB2YWxpZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdFx0XHRjb2RlUG9pbnQgPiAweDEwRkZGRiB8fCAvLyBub3QgYSB2YWxpZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdFx0XHRmbG9vcihjb2RlUG9pbnQpICE9PSBjb2RlUG9pbnQgLy8gbm90IGFuIGludGVnZXJcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0dGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCBjb2RlIHBvaW50OiAnICsgY29kZVBvaW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY29kZVBvaW50IDw9IDB4RkZGRikgeyAvLyBCTVAgY29kZSBwb2ludFxuXHRcdFx0XHRcdGNvZGVVbml0cy5wdXNoKGNvZGVQb2ludCk7XG5cdFx0XHRcdH0gZWxzZSB7IC8vIEFzdHJhbCBjb2RlIHBvaW50OyBzcGxpdCBpbiBzdXJyb2dhdGUgaGFsdmVzXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmcjc3Vycm9nYXRlLWZvcm11bGFlXG5cdFx0XHRcdFx0Y29kZVBvaW50IC09IDB4MTAwMDA7XG5cdFx0XHRcdFx0aGlnaFN1cnJvZ2F0ZSA9IChjb2RlUG9pbnQgPj4gMTApICsgMHhEODAwO1xuXHRcdFx0XHRcdGxvd1N1cnJvZ2F0ZSA9IChjb2RlUG9pbnQgJSAweDQwMCkgKyAweERDMDA7XG5cdFx0XHRcdFx0Y29kZVVuaXRzLnB1c2goaGlnaFN1cnJvZ2F0ZSwgbG93U3Vycm9nYXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaW5kZXggKyAxID09PSBsZW5ndGggfHwgY29kZVVuaXRzLmxlbmd0aCA+IE1BWF9TSVpFKSB7XG5cdFx0XHRcdFx0cmVzdWx0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZS5hcHBseShudWxsLCBjb2RlVW5pdHMpO1xuXHRcdFx0XHRcdGNvZGVVbml0cy5sZW5ndGggPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH07XG5cdFx0aWYgKGRlZmluZVByb3BlcnR5KSB7XG5cdFx0XHRkZWZpbmVQcm9wZXJ0eShTdHJpbmcsICdmcm9tQ29kZVBvaW50Jywge1xuXHRcdFx0XHQndmFsdWUnOiBmcm9tQ29kZVBvaW50LFxuXHRcdFx0XHQnY29uZmlndXJhYmxlJzogdHJ1ZSxcblx0XHRcdFx0J3dyaXRhYmxlJzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFN0cmluZy5mcm9tQ29kZVBvaW50ID0gZnJvbUNvZGVQb2ludDtcblx0XHR9XG5cdH0oKSk7XG59XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuLy4uL1Rva2VuJyk7XG5jb25zdCB7SW50ZXJ2YWx9ID0gcmVxdWlyZSgnLi8uLi9JbnRlcnZhbFNldCcpO1xuY29uc3QgSU5WQUxJRF9JTlRFUlZBTCA9IG5ldyBJbnRlcnZhbCgtMSwgLTIpO1xuXG4vKipcbiAqIFRoZSBiYXNpYyBub3Rpb24gb2YgYSB0cmVlIGhhcyBhIHBhcmVudCwgYSBwYXlsb2FkLCBhbmQgYSBsaXN0IG9mIGNoaWxkcmVuLlxuICogSXQgaXMgdGhlIG1vc3QgYWJzdHJhY3QgaW50ZXJmYWNlIGZvciBhbGwgdGhlIHRyZWVzIHVzZWQgYnkgQU5UTFIuXG4gKi9cbmNsYXNzIFRyZWUge31cblxuY2xhc3MgU3ludGF4VHJlZSBleHRlbmRzIFRyZWUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHR9XG59XG5cbmNsYXNzIFBhcnNlVHJlZSBleHRlbmRzIFN5bnRheFRyZWUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHR9XG59XG5cbmNsYXNzIFJ1bGVOb2RlIGV4dGVuZHMgUGFyc2VUcmVlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdGdldFJ1bGVDb250ZXh0KCl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBpbnRlcmZhY2UgaW1wbGVtZW50YXRpb25cIilcblx0fVxufVxuXG5jbGFzcyBUZXJtaW5hbE5vZGUgZXh0ZW5kcyBQYXJzZVRyZWUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHR9XG59XG5cbmNsYXNzIEVycm9yTm9kZSBleHRlbmRzIFRlcm1pbmFsTm9kZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cbn1cblxuY2xhc3MgUGFyc2VUcmVlVmlzaXRvciB7XG5cdHZpc2l0KGN0eCkge1xuXHRcdCBpZiAoQXJyYXkuaXNBcnJheShjdHgpKSB7XG5cdFx0XHRyZXR1cm4gY3R4Lm1hcChmdW5jdGlvbihjaGlsZCkge1xuXHRcdFx0XHRyZXR1cm4gY2hpbGQuYWNjZXB0KHRoaXMpO1xuXHRcdFx0fSwgdGhpcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBjdHguYWNjZXB0KHRoaXMpO1xuXHRcdH1cblx0fVxuXG5cdHZpc2l0Q2hpbGRyZW4oY3R4KSB7XG5cdFx0aWYgKGN0eC5jaGlsZHJlbikge1xuXHRcdFx0cmV0dXJuIHRoaXMudmlzaXQoY3R4LmNoaWxkcmVuKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cblx0dmlzaXRUZXJtaW5hbChub2RlKSB7XG5cdH1cblxuXHR2aXNpdEVycm9yTm9kZShub2RlKSB7XG5cdH1cbn1cblxuY2xhc3MgUGFyc2VUcmVlTGlzdGVuZXIge1xuXHR2aXNpdFRlcm1pbmFsKG5vZGUpIHtcblx0fVxuXG5cdHZpc2l0RXJyb3JOb2RlKG5vZGUpIHtcblx0fVxuXG5cdGVudGVyRXZlcnlSdWxlKG5vZGUpIHtcblx0fVxuXG5cdGV4aXRFdmVyeVJ1bGUobm9kZSkge1xuXHR9XG59XG5cbmNsYXNzIFRlcm1pbmFsTm9kZUltcGwgZXh0ZW5kcyBUZXJtaW5hbE5vZGUge1xuXHRjb25zdHJ1Y3RvcihzeW1ib2wpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMucGFyZW50Q3R4ID0gbnVsbDtcblx0XHR0aGlzLnN5bWJvbCA9IHN5bWJvbDtcblx0fVxuXG5cdGdldENoaWxkKGkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGdldFN5bWJvbCgpIHtcblx0XHRyZXR1cm4gdGhpcy5zeW1ib2w7XG5cdH1cblxuXHRnZXRQYXJlbnQoKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50Q3R4O1xuXHR9XG5cblx0Z2V0UGF5bG9hZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5zeW1ib2w7XG5cdH1cblxuXHRnZXRTb3VyY2VJbnRlcnZhbCgpIHtcblx0XHRpZiAodGhpcy5zeW1ib2wgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBJTlZBTElEX0lOVEVSVkFMO1xuXHRcdH1cblx0XHRjb25zdCB0b2tlbkluZGV4ID0gdGhpcy5zeW1ib2wudG9rZW5JbmRleDtcblx0XHRyZXR1cm4gbmV3IEludGVydmFsKHRva2VuSW5kZXgsIHRva2VuSW5kZXgpO1xuXHR9XG5cblx0Z2V0Q2hpbGRDb3VudCgpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGFjY2VwdCh2aXNpdG9yKSB7XG5cdFx0cmV0dXJuIHZpc2l0b3IudmlzaXRUZXJtaW5hbCh0aGlzKTtcblx0fVxuXG5cdGdldFRleHQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc3ltYm9sLnRleHQ7XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRpZiAodGhpcy5zeW1ib2wudHlwZSA9PT0gVG9rZW4uRU9GKSB7XG5cdFx0XHRyZXR1cm4gXCI8RU9GPlwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zeW1ib2wudGV4dDtcblx0XHR9XG5cdH1cbn1cblxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSB0b2tlbiB0aGF0IHdhcyBjb25zdW1lZCBkdXJpbmcgcmVzeW5jaHJvbml6YXRpb25cbiAqIHJhdGhlciB0aGFuIGR1cmluZyBhIHZhbGlkIG1hdGNoIG9wZXJhdGlvbi4gRm9yIGV4YW1wbGUsXG4gKiB3ZSB3aWxsIGNyZWF0ZSB0aGlzIGtpbmQgb2YgYSBub2RlIGR1cmluZyBzaW5nbGUgdG9rZW4gaW5zZXJ0aW9uXG4gKiBhbmQgZGVsZXRpb24gYXMgd2VsbCBhcyBkdXJpbmcgXCJjb25zdW1lIHVudGlsIGVycm9yIHJlY292ZXJ5IHNldFwiXG4gKiB1cG9uIG5vIHZpYWJsZSBhbHRlcm5hdGl2ZSBleGNlcHRpb25zLlxuICovXG5jbGFzcyBFcnJvck5vZGVJbXBsIGV4dGVuZHMgVGVybWluYWxOb2RlSW1wbCB7XG5cdGNvbnN0cnVjdG9yKHRva2VuKSB7XG5cdFx0c3VwZXIodG9rZW4pO1xuXHR9XG5cblx0aXNFcnJvck5vZGUoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRhY2NlcHQodmlzaXRvcikge1xuXHRcdHJldHVybiB2aXNpdG9yLnZpc2l0RXJyb3JOb2RlKHRoaXMpO1xuXHR9XG59XG5cbmNsYXNzIFBhcnNlVHJlZVdhbGtlciB7XG5cblx0LyoqXG5cdCAqIFBlcmZvcm1zIGEgd2FsayBvbiB0aGUgZ2l2ZW4gcGFyc2UgdHJlZSBzdGFydGluZyBhdCB0aGUgcm9vdCBhbmQgZ29pbmcgZG93biByZWN1cnNpdmVseVxuXHQgKiB3aXRoIGRlcHRoLWZpcnN0IHNlYXJjaC4gT24gZWFjaCBub2RlLCB7QGxpbmsgUGFyc2VUcmVlV2Fsa2VyLy9lbnRlclJ1bGV9IGlzIGNhbGxlZCBiZWZvcmVcblx0ICogcmVjdXJzaXZlbHkgd2Fsa2luZyBkb3duIGludG8gY2hpbGQgbm9kZXMsIHRoZW5cblx0ICoge0BsaW5rIFBhcnNlVHJlZVdhbGtlci8vZXhpdFJ1bGV9IGlzIGNhbGxlZCBhZnRlciB0aGUgcmVjdXJzaXZlIGNhbGwgdG8gd2luZCB1cC5cblx0ICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB1c2VkIGJ5IHRoZSB3YWxrZXIgdG8gcHJvY2VzcyBncmFtbWFyIHJ1bGVzXG5cdCAqIEBwYXJhbSB0IFRoZSBwYXJzZSB0cmVlIHRvIGJlIHdhbGtlZCBvblxuXHQgKi9cblx0d2FsayhsaXN0ZW5lciwgdCkge1xuXHRcdGNvbnN0IGVycm9yTm9kZSA9IHQgaW5zdGFuY2VvZiBFcnJvck5vZGUgfHxcblx0XHRcdFx0KHQuaXNFcnJvck5vZGUgIT09IHVuZGVmaW5lZCAmJiB0LmlzRXJyb3JOb2RlKCkpO1xuXHRcdGlmIChlcnJvck5vZGUpIHtcblx0XHRcdGxpc3RlbmVyLnZpc2l0RXJyb3JOb2RlKHQpO1xuXHRcdH0gZWxzZSBpZiAodCBpbnN0YW5jZW9mIFRlcm1pbmFsTm9kZSkge1xuXHRcdFx0bGlzdGVuZXIudmlzaXRUZXJtaW5hbCh0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lbnRlclJ1bGUobGlzdGVuZXIsIHQpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0LmdldENoaWxkQ291bnQoKTsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IGNoaWxkID0gdC5nZXRDaGlsZChpKTtcblx0XHRcdFx0dGhpcy53YWxrKGxpc3RlbmVyLCBjaGlsZCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmV4aXRSdWxlKGxpc3RlbmVyLCB0KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRW50ZXJzIGEgZ3JhbW1hciBydWxlIGJ5IGZpcnN0IHRyaWdnZXJpbmcgdGhlIGdlbmVyaWMgZXZlbnQge0BsaW5rIFBhcnNlVHJlZUxpc3RlbmVyLy9lbnRlckV2ZXJ5UnVsZX1cblx0ICogdGhlbiBieSB0cmlnZ2VyaW5nIHRoZSBldmVudCBzcGVjaWZpYyB0byB0aGUgZ2l2ZW4gcGFyc2UgdHJlZSBub2RlXG5cdCAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgcmVzcG9uZGluZyB0byB0aGUgdHJpZ2dlciBldmVudHNcblx0ICogQHBhcmFtIHIgVGhlIGdyYW1tYXIgcnVsZSBjb250YWluaW5nIHRoZSBydWxlIGNvbnRleHRcblx0ICovXG5cdGVudGVyUnVsZShsaXN0ZW5lciwgcikge1xuXHRcdGNvbnN0IGN0eCA9IHIuZ2V0UnVsZUNvbnRleHQoKTtcblx0XHRsaXN0ZW5lci5lbnRlckV2ZXJ5UnVsZShjdHgpO1xuXHRcdGN0eC5lbnRlclJ1bGUobGlzdGVuZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4aXRzIGEgZ3JhbW1hciBydWxlIGJ5IGZpcnN0IHRyaWdnZXJpbmcgdGhlIGV2ZW50IHNwZWNpZmljIHRvIHRoZSBnaXZlbiBwYXJzZSB0cmVlIG5vZGVcblx0ICogdGhlbiBieSB0cmlnZ2VyaW5nIHRoZSBnZW5lcmljIGV2ZW50IHtAbGluayBQYXJzZVRyZWVMaXN0ZW5lci8vZXhpdEV2ZXJ5UnVsZX1cblx0ICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciByZXNwb25kaW5nIHRvIHRoZSB0cmlnZ2VyIGV2ZW50c1xuXHQgKiBAcGFyYW0gciBUaGUgZ3JhbW1hciBydWxlIGNvbnRhaW5pbmcgdGhlIHJ1bGUgY29udGV4dFxuXHQgKi9cblx0ZXhpdFJ1bGUobGlzdGVuZXIsIHIpIHtcblx0XHRjb25zdCBjdHggPSByLmdldFJ1bGVDb250ZXh0KCk7XG5cdFx0Y3R4LmV4aXRSdWxlKGxpc3RlbmVyKTtcblx0XHRsaXN0ZW5lci5leGl0RXZlcnlSdWxlKGN0eCk7XG5cdH1cbn1cblxuUGFyc2VUcmVlV2Fsa2VyLkRFRkFVTFQgPSBuZXcgUGFyc2VUcmVlV2Fsa2VyKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRSdWxlTm9kZSxcblx0RXJyb3JOb2RlLFxuXHRUZXJtaW5hbE5vZGUsXG5cdEVycm9yTm9kZUltcGwsXG5cdFRlcm1pbmFsTm9kZUltcGwsXG5cdFBhcnNlVHJlZUxpc3RlbmVyLFxuXHRQYXJzZVRyZWVWaXNpdG9yLFxuXHRQYXJzZVRyZWVXYWxrZXIsXG5cdElOVkFMSURfSU5URVJWQUxcbn1cbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuLy4uL1V0aWxzJyk7XG5jb25zdCB7VG9rZW59ID0gcmVxdWlyZSgnLi8uLi9Ub2tlbicpO1xuY29uc3Qge0Vycm9yTm9kZSwgVGVybWluYWxOb2RlLCBSdWxlTm9kZX0gPSByZXF1aXJlKCcuL1RyZWUnKTtcblxuLyoqIEEgc2V0IG9mIHV0aWxpdHkgcm91dGluZXMgdXNlZnVsIGZvciBhbGwga2luZHMgb2YgQU5UTFIgdHJlZXMuICovXG5jb25zdCBUcmVlcyA9IHtcbiAgICAvKipcbiAgICAgKiBQcmludCBvdXQgYSB3aG9sZSB0cmVlIGluIExJU1AgZm9ybS4ge0BsaW5rIC8vZ2V0Tm9kZVRleHR9IGlzIHVzZWQgb24gdGhlXG4gICAgICogIG5vZGUgcGF5bG9hZHMgdG8gZ2V0IHRoZSB0ZXh0IGZvciB0aGUgbm9kZXMuICBEZXRlY3RcbiAgICAgKiAgcGFyc2UgdHJlZXMgYW5kIGV4dHJhY3QgZGF0YSBhcHByb3ByaWF0ZWx5LlxuICAgICAqL1xuICAgIHRvU3RyaW5nVHJlZTogZnVuY3Rpb24odHJlZSwgcnVsZU5hbWVzLCByZWNvZykge1xuICAgICAgICBydWxlTmFtZXMgPSBydWxlTmFtZXMgfHwgbnVsbDtcbiAgICAgICAgcmVjb2cgPSByZWNvZyB8fCBudWxsO1xuICAgICAgICBpZihyZWNvZyE9PW51bGwpIHtcbiAgICAgICAgICAgIHJ1bGVOYW1lcyA9IHJlY29nLnJ1bGVOYW1lcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgcyA9IFRyZWVzLmdldE5vZGVUZXh0KHRyZWUsIHJ1bGVOYW1lcyk7XG4gICAgICAgIHMgPSBVdGlscy5lc2NhcGVXaGl0ZXNwYWNlKHMsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgYyA9IHRyZWUuZ2V0Q2hpbGRDb3VudCgpO1xuICAgICAgICBpZihjPT09MCkge1xuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlcyA9IFwiKFwiICsgcyArICcgJztcbiAgICAgICAgaWYoYz4wKSB7XG4gICAgICAgICAgICBzID0gVHJlZXMudG9TdHJpbmdUcmVlKHRyZWUuZ2V0Q2hpbGQoMCksIHJ1bGVOYW1lcyk7XG4gICAgICAgICAgICByZXMgPSByZXMuY29uY2F0KHMpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgaT0xO2k8YztpKyspIHtcbiAgICAgICAgICAgIHMgPSBUcmVlcy50b1N0cmluZ1RyZWUodHJlZS5nZXRDaGlsZChpKSwgcnVsZU5hbWVzKTtcbiAgICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQoJyAnICsgcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gcmVzLmNvbmNhdChcIilcIik7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSxcblxuICAgIGdldE5vZGVUZXh0OiBmdW5jdGlvbih0LCBydWxlTmFtZXMsIHJlY29nKSB7XG4gICAgICAgIHJ1bGVOYW1lcyA9IHJ1bGVOYW1lcyB8fCBudWxsO1xuICAgICAgICByZWNvZyA9IHJlY29nIHx8IG51bGw7XG4gICAgICAgIGlmKHJlY29nIT09bnVsbCkge1xuICAgICAgICAgICAgcnVsZU5hbWVzID0gcmVjb2cucnVsZU5hbWVzO1xuICAgICAgICB9XG4gICAgICAgIGlmKHJ1bGVOYW1lcyE9PW51bGwpIHtcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgUnVsZU5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdC5nZXRSdWxlQ29udGV4dCgpXG4gICAgICAgICAgICAgICAgY29uc3QgYWx0TnVtYmVyID0gY29udGV4dC5nZXRBbHROdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAvLyB1c2UgY29uc3QgdmFsdWUgb2YgQVROLklOVkFMSURfQUxUX05VTUJFUiB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5XG4gICAgICAgICAgICAgICAgaWYgKCBhbHROdW1iZXIgIT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVOYW1lc1t0LnJ1bGVJbmRleF0rXCI6XCIrYWx0TnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZU5hbWVzW3QucnVsZUluZGV4XTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHQgaW5zdGFuY2VvZiBFcnJvck5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC50b1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKHQgaW5zdGFuY2VvZiBUZXJtaW5hbE5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZih0LnN5bWJvbCE9PW51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc3ltYm9sLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG5vIHJlY29nIGZvciBydWxlIG5hbWVzXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB0LmdldFBheWxvYWQoKTtcbiAgICAgICAgaWYgKHBheWxvYWQgaW5zdGFuY2VvZiBUb2tlbiApIHtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQuZ2V0UGF5bG9hZCgpLnRvU3RyaW5nKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBvcmRlcmVkIGxpc3Qgb2YgYWxsIGNoaWxkcmVuIG9mIHRoaXMgbm9kZVxuICAgICAqL1xuICAgIGdldENoaWxkcmVuOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpPTA7aTx0LmdldENoaWxkQ291bnQoKTtpKyspIHtcbiAgICAgICAgICAgIGxpc3QucHVzaCh0LmdldENoaWxkKGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgbGlzdCBvZiBhbGwgYW5jZXN0b3JzIG9mIHRoaXMgbm9kZS4gIFRoZSBmaXJzdCBub2RlIG9mXG4gICAgICogbGlzdCBpcyB0aGUgcm9vdCBhbmQgdGhlIGxhc3QgaXMgdGhlIHBhcmVudCBvZiB0aGlzIG5vZGUuXG4gICAgICovXG4gICAgZ2V0QW5jZXN0b3JzOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIGxldCBhbmNlc3RvcnMgPSBbXTtcbiAgICAgICAgdCA9IHQuZ2V0UGFyZW50KCk7XG4gICAgICAgIHdoaWxlKHQhPT1udWxsKSB7XG4gICAgICAgICAgICBhbmNlc3RvcnMgPSBbdF0uY29uY2F0KGFuY2VzdG9ycyk7XG4gICAgICAgICAgICB0ID0gdC5nZXRQYXJlbnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5jZXN0b3JzO1xuICAgIH0sXG5cbiAgICBmaW5kQWxsVG9rZW5Ob2RlczogZnVuY3Rpb24odCwgdHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIFRyZWVzLmZpbmRBbGxOb2Rlcyh0LCB0dHlwZSwgdHJ1ZSk7XG4gICAgfSxcblxuICAgIGZpbmRBbGxSdWxlTm9kZXM6IGZ1bmN0aW9uKHQsIHJ1bGVJbmRleCkge1xuICAgICAgICByZXR1cm4gVHJlZXMuZmluZEFsbE5vZGVzKHQsIHJ1bGVJbmRleCwgZmFsc2UpO1xuICAgIH0sXG5cbiAgICBmaW5kQWxsTm9kZXM6IGZ1bmN0aW9uKHQsIGluZGV4LCBmaW5kVG9rZW5zKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gW107XG4gICAgICAgIFRyZWVzLl9maW5kQWxsTm9kZXModCwgaW5kZXgsIGZpbmRUb2tlbnMsIG5vZGVzKTtcbiAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH0sXG5cbiAgICBfZmluZEFsbE5vZGVzOiBmdW5jdGlvbih0LCBpbmRleCwgZmluZFRva2Vucywgbm9kZXMpIHtcbiAgICAgICAgLy8gY2hlY2sgdGhpcyBub2RlICh0aGUgcm9vdCkgZmlyc3RcbiAgICAgICAgaWYoZmluZFRva2VucyAmJiAodCBpbnN0YW5jZW9mIFRlcm1pbmFsTm9kZSkpIHtcbiAgICAgICAgICAgIGlmKHQuc3ltYm9sLnR5cGU9PT1pbmRleCkge1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2godCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZighZmluZFRva2VucyAmJiAodCBpbnN0YW5jZW9mIFJ1bGVOb2RlKSkge1xuICAgICAgICAgICAgaWYodC5ydWxlSW5kZXg9PT1pbmRleCkge1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2godCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgY2hpbGRyZW5cbiAgICAgICAgZm9yKGxldCBpPTA7aTx0LmdldENoaWxkQ291bnQoKTtpKyspIHtcbiAgICAgICAgICAgIFRyZWVzLl9maW5kQWxsTm9kZXModC5nZXRDaGlsZChpKSwgaW5kZXgsIGZpbmRUb2tlbnMsIG5vZGVzKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkZXNjZW5kYW50czogZnVuY3Rpb24odCkge1xuICAgICAgICBsZXQgbm9kZXMgPSBbdF07XG4gICAgICAgIGZvcihsZXQgaT0wO2k8dC5nZXRDaGlsZENvdW50KCk7aSsrKSB7XG4gICAgICAgICAgICBub2RlcyA9IG5vZGVzLmNvbmNhdChUcmVlcy5kZXNjZW5kYW50cyh0LmdldENoaWxkKGkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmVlcztcbiIsIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3QgVHJlZSA9IHJlcXVpcmUoJy4vVHJlZScpO1xuY29uc3QgVHJlZXMgPSByZXF1aXJlKCcuL1RyZWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHsuLi5UcmVlLCBUcmVlc31cbiIsImltcG9ydCB7IFR5cGVkUHJvZ3JhbSB9IGZyb20gXCIuL1R5cGVkRnVuY3Rpb25cIjtcclxuaW1wb3J0IHsgSVJGdW5jdGlvbiwgbWFrZV9JUkZ1bmN0aW9ucyB9IGZyb20gXCIuL1NTQUZ1bmN0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSVJSZXByZXNlbnRhdGlvbiB7XHJcbiAgICBmdW5jczogSVJGdW5jdGlvbltdO1xyXG4gICAgY29uc3RydWN0b3IocHJvZzogVHlwZWRQcm9ncmFtKXtcclxuICAgICAgICB0aGlzLmZ1bmNzID0gbWFrZV9JUkZ1bmN0aW9ucyhwcm9nLmZ1bmNzKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7VHlwZX0gZnJvbSAnLi4vdHlwZSdcclxuaW1wb3J0ICogYXMgVW50eXBlZCBmcm9tIFwiLi4vcGFyc2UvZXhwcmVzc2lvblwiXHJcbmltcG9ydCAqIGFzIEkgZnJvbSBcIi4uL2luc3RydWN0aW9uc1wiXHJcblxyXG5leHBvcnQgY2xhc3MgT3BlcmF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0eXBlOiBUeXBlLCBwdWJsaWMgYXJnczogVHlwZVtdLCBwdWJsaWMgY29kZTogVWludDhBcnJheSl7fTtcclxufVxyXG5cclxuY29uc3QgYmluYXJ5X29wX3RhYmxlID0gW1xyXG4gICAge286IFwiK1wiLCBsOiBcImkzMlwiLCByOiBcImkzMlwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiaTMyXCIsIFtcImkzMlwiLCBcImkzMlwiXSwgSS5pMzIuYWRkKX0sXHJcbiAgICB7bzogXCItXCIsIGw6IFwiaTMyXCIsIHI6IFwiaTMyXCIsIHY6IG5ldyBPcGVyYXRpb24oXCJpMzJcIiwgW1wiaTMyXCIsIFwiaTMyXCJdLCBJLmkzMi5zdWIpfSxcclxuICAgIHtvOiBcIipcIiwgbDogXCJpMzJcIiwgcjogXCJpMzJcIiwgdjogbmV3IE9wZXJhdGlvbihcImkzMlwiLCBbXCJpMzJcIiwgXCJpMzJcIl0sIEkuaTMyLm11bCl9LFxyXG4gICAge286IFwiL1wiLCBsOiBcImkzMlwiLCByOiBcImkzMlwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiaTMyXCIsIFtcImkzMlwiLCBcImkzMlwiXSwgSS5pMzIuZGl2X3MpfSxcclxuICAgIHtvOiBcIiVcIiwgbDogXCJpMzJcIiwgcjogXCJpMzJcIiwgdjogbmV3IE9wZXJhdGlvbihcImkzMlwiLCBbXCJpMzJcIiwgXCJpMzJcIl0sIEkuaTMyLnJlbV9zKX0sXHJcbiAgICB7bzogXCI9PVwiLCBsOiBcImkzMlwiLCByOiBcImkzMlwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiYm9vbFwiLCBbXCJpMzJcIiwgXCJpMzJcIl0sIEkuaTMyLmVxKX0sXHJcbiAgICB7bzogXCIhPVwiLCBsOiBcImkzMlwiLCByOiBcImkzMlwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiYm9vbFwiLCBbXCJpMzJcIiwgXCJpMzJcIl0sIEkuaTMyLm5lKX0sXHJcbiAgICB7bzogXCI8XCIsIGw6IFwiaTMyXCIsIHI6IFwiaTMyXCIsIHY6IG5ldyBPcGVyYXRpb24oXCJib29sXCIsIFtcImkzMlwiLCBcImkzMlwiXSwgSS5pMzIubHRfcyl9LFxyXG4gICAge286IFwiPD1cIiwgbDogXCJpMzJcIiwgcjogXCJpMzJcIiwgdjogbmV3IE9wZXJhdGlvbihcImJvb2xcIiwgW1wiaTMyXCIsIFwiaTMyXCJdLCBJLmkzMi5sZV9zKX0sXHJcbiAgICB7bzogXCI+XCIsIGw6IFwiaTMyXCIsIHI6IFwiaTMyXCIsIHY6IG5ldyBPcGVyYXRpb24oXCJib29sXCIsIFtcImkzMlwiLCBcImkzMlwiXSwgSS5pMzIuZ3Rfcyl9LFxyXG4gICAge286IFwiPj1cIiwgbDogXCJpMzJcIiwgcjogXCJpMzJcIiwgdjogbmV3IE9wZXJhdGlvbihcImJvb2xcIiwgW1wiaTMyXCIsIFwiaTMyXCJdLCBJLmkzMi5nZV9zKX0sXHJcblxyXG4gICAge286IFwiK1wiLCBsOiBcImk2NFwiLCByOiBcImk2NFwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiaTY0XCIsIFtcImk2NFwiLCBcImk2NFwiXSwgSS5pNjQuYWRkKX0sXHJcbiAgICB7bzogXCItXCIsIGw6IFwiaTY0XCIsIHI6IFwiaTY0XCIsIHY6IG5ldyBPcGVyYXRpb24oXCJpNjRcIiwgW1wiaTY0XCIsIFwiaTY0XCJdLCBJLmk2NC5zdWIpfSxcclxuICAgIHtvOiBcIipcIiwgbDogXCJpNjRcIiwgcjogXCJpNjRcIiwgdjogbmV3IE9wZXJhdGlvbihcImk2NFwiLCBbXCJpNjRcIiwgXCJpNjRcIl0sIEkuaTY0Lm11bCl9LFxyXG4gICAge286IFwiL1wiLCBsOiBcImk2NFwiLCByOiBcImk2NFwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiaTY0XCIsIFtcImk2NFwiLCBcImk2NFwiXSwgSS5pNjQuZGl2X3MpfSxcclxuICAgIHtvOiBcIiVcIiwgbDogXCJpNjRcIiwgcjogXCJpNjRcIiwgdjogbmV3IE9wZXJhdGlvbihcImk2NFwiLCBbXCJpNjRcIiwgXCJpNjRcIl0sIEkuaTY0LnJlbV9zKX0sXHJcbiAgICB7bzogXCI9PVwiLCBsOiBcImk2NFwiLCByOiBcImk2NFwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiYm9vbFwiLCBbXCJpNjRcIiwgXCJpNjRcIl0sIEkuaTY0LmVxKX0sXHJcbiAgICB7bzogXCIhPVwiLCBsOiBcImk2NFwiLCByOiBcImk2NFwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiYm9vbFwiLCBbXCJpNjRcIiwgXCJpNjRcIl0sIEkuaTY0Lm5lKX0sXHJcbiAgICB7bzogXCI8XCIsIGw6IFwiaTY0XCIsIHI6IFwiaTY0XCIsIHY6IG5ldyBPcGVyYXRpb24oXCJib29sXCIsIFtcImk2NFwiLCBcImk2NFwiXSwgSS5pNjQubHRfcyl9LFxyXG4gICAge286IFwiPD1cIiwgbDogXCJpNjRcIiwgcjogXCJpNjRcIiwgdjogbmV3IE9wZXJhdGlvbihcImJvb2xcIiwgW1wiaTY0XCIsIFwiaTY0XCJdLCBJLmk2NC5sZV9zKX0sXHJcbiAgICB7bzogXCI+XCIsIGw6IFwiaTY0XCIsIHI6IFwiaTY0XCIsIHY6IG5ldyBPcGVyYXRpb24oXCJib29sXCIsIFtcImk2NFwiLCBcImk2NFwiXSwgSS5pNjQuZ3Rfcyl9LFxyXG4gICAge286IFwiPj1cIiwgbDogXCJpNjRcIiwgcjogXCJpNjRcIiwgdjogbmV3IE9wZXJhdGlvbihcImJvb2xcIiwgW1wiaTY0XCIsIFwiaTY0XCJdLCBJLmk2NC5nZV9zKX0sXHJcblxyXG4gICAge286IFwiK1wiLCBsOiBcImYzMlwiLCByOiBcImYzMlwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiZjMyXCIsIFtcImYzMlwiLCBcImYzMlwiXSwgSS5mMzIuYWRkKX0sXHJcbiAgICB7bzogXCItXCIsIGw6IFwiZjMyXCIsIHI6IFwiZjMyXCIsIHY6IG5ldyBPcGVyYXRpb24oXCJmMzJcIiwgW1wiZjMyXCIsIFwiZjMyXCJdLCBJLmYzMi5zdWIpfSxcclxuICAgIHtvOiBcIipcIiwgbDogXCJmMzJcIiwgcjogXCJmMzJcIiwgdjogbmV3IE9wZXJhdGlvbihcImYzMlwiLCBbXCJmMzJcIiwgXCJmMzJcIl0sIEkuZjMyLm11bCl9LFxyXG4gICAge286IFwiL1wiLCBsOiBcImYzMlwiLCByOiBcImYzMlwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiZjMyXCIsIFtcImYzMlwiLCBcImYzMlwiXSwgSS5mMzIuZGl2KX0sXHJcbiAgICB7bzogXCI9PVwiLCBsOiBcImYzMlwiLCByOiBcImYzMlwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiYm9vbFwiLCBbXCJmMzJcIiwgXCJmMzJcIl0sIEkuZjMyLmVxKX0sXHJcbiAgICB7bzogXCIhPVwiLCBsOiBcImYzMlwiLCByOiBcImYzMlwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiYm9vbFwiLCBbXCJmMzJcIiwgXCJmMzJcIl0sIEkuZjMyLm5lKX0sXHJcbiAgICB7bzogXCI8XCIsIGw6IFwiZjMyXCIsIHI6IFwiZjMyXCIsIHY6IG5ldyBPcGVyYXRpb24oXCJib29sXCIsIFtcImYzMlwiLCBcImYzMlwiXSwgSS5mMzIubHQpfSxcclxuICAgIHtvOiBcIjw9XCIsIGw6IFwiZjMyXCIsIHI6IFwiZjMyXCIsIHY6IG5ldyBPcGVyYXRpb24oXCJib29sXCIsIFtcImYzMlwiLCBcImYzMlwiXSwgSS5mMzIubGUpfSxcclxuICAgIHtvOiBcIj5cIiwgbDogXCJmMzJcIiwgcjogXCJmMzJcIiwgdjogbmV3IE9wZXJhdGlvbihcImJvb2xcIiwgW1wiZjMyXCIsIFwiZjMyXCJdLCBJLmYzMi5ndCl9LFxyXG4gICAge286IFwiPj1cIiwgbDogXCJmMzJcIiwgcjogXCJmMzJcIiwgdjogbmV3IE9wZXJhdGlvbihcImJvb2xcIiwgW1wiZjMyXCIsIFwiZjMyXCJdLCBJLmYzMi5nZSl9LFxyXG5cclxuICAgIHtvOiBcIitcIiwgbDogXCJmNjRcIiwgcjogXCJmNjRcIiwgdjogbmV3IE9wZXJhdGlvbihcImY2NFwiLCBbXCJmNjRcIiwgXCJmNjRcIl0sIEkuZjY0LmFkZCl9LFxyXG4gICAge286IFwiLVwiLCBsOiBcImY2NFwiLCByOiBcImY2NFwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiZjY0XCIsIFtcImY2NFwiLCBcImY2NFwiXSwgSS5mNjQuc3ViKX0sXHJcbiAgICB7bzogXCIqXCIsIGw6IFwiZjY0XCIsIHI6IFwiZjY0XCIsIHY6IG5ldyBPcGVyYXRpb24oXCJmNjRcIiwgW1wiZjY0XCIsIFwiZjY0XCJdLCBJLmY2NC5tdWwpfSxcclxuICAgIHtvOiBcIi9cIiwgbDogXCJmNjRcIiwgcjogXCJmNjRcIiwgdjogbmV3IE9wZXJhdGlvbihcImY2NFwiLCBbXCJmNjRcIiwgXCJmNjRcIl0sIEkuZjY0LmRpdil9LFxyXG4gICAge286IFwiPT1cIiwgbDogXCJmNjRcIiwgcjogXCJmNjRcIiwgdjogbmV3IE9wZXJhdGlvbihcImJvb2xcIiwgW1wiZjY0XCIsIFwiZjY0XCJdLCBJLmY2NC5lcSl9LFxyXG4gICAge286IFwiIT1cIiwgbDogXCJmNjRcIiwgcjogXCJmNjRcIiwgdjogbmV3IE9wZXJhdGlvbihcImJvb2xcIiwgW1wiZjY0XCIsIFwiZjY0XCJdLCBJLmY2NC5uZSl9LFxyXG4gICAge286IFwiPFwiLCBsOiBcImY2NFwiLCByOiBcImY2NFwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiYm9vbFwiLCBbXCJmNjRcIiwgXCJmNjRcIl0sIEkuZjY0Lmx0KX0sXHJcbiAgICB7bzogXCI8PVwiLCBsOiBcImY2NFwiLCByOiBcImY2NFwiLCB2OiBuZXcgT3BlcmF0aW9uKFwiYm9vbFwiLCBbXCJmNjRcIiwgXCJmNjRcIl0sIEkuZjY0LmxlKX0sXHJcbiAgICB7bzogXCI+XCIsIGw6IFwiZjY0XCIsIHI6IFwiZjY0XCIsIHY6IG5ldyBPcGVyYXRpb24oXCJib29sXCIsIFtcImY2NFwiLCBcImY2NFwiXSwgSS5mNjQuZ3QpfSxcclxuICAgIHtvOiBcIj49XCIsIGw6IFwiZjY0XCIsIHI6IFwiZjY0XCIsIHY6IG5ldyBPcGVyYXRpb24oXCJib29sXCIsIFtcImY2NFwiLCBcImY2NFwiXSwgSS5mNjQuZ2UpfSxcclxuXVxyXG5cclxuLy8gZXhwb3J0IHR5cGUgT3BlcmF0aW9uID0gSTMyT3BlcmF0aW9uO1xyXG5leHBvcnQgZnVuY3Rpb24gbWFrZV9iaW5hcnlfb3AobGVmdDogVHlwZSwgb3A6IFVudHlwZWQuT3BlcmF0aW9uLCByaWdodDogVHlwZSk6IE9wZXJhdGlvbntcclxuICAgIGZvcihjb25zdCBvcGVyYXRpb24gb2YgYmluYXJ5X29wX3RhYmxlKXtcclxuICAgICAgICBpZihvcGVyYXRpb24ubyA9PSBvcCAmJiBvcGVyYXRpb24ubCA9PSBsZWZ0ICYmIG9wZXJhdGlvbi5yID09IHJpZ2h0KXtcclxuICAgICAgICAgICAgcmV0dXJuIG9wZXJhdGlvbi52O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBgbm8gYmluYXJ5IG9wZXJhdGlvbiBcIiR7b3B9XCIgZXhpc3RzIGJldHdlZW4gdHlwZXMgXCIke2xlZnR9XCIgYW5kIFwiJHtyaWdodH1cImA7XHJcbn0iLCJpbXBvcnQgeyBQcmltaXRpdmVUeXBlIH0gZnJvbSBcIi4uL2NvZGVnZW4vcHJpbWl0aXZlVHlwZXNcIjtcclxuaW1wb3J0IHsgSWRlbnRpZmllciwgVHlwZSB9IGZyb20gXCIuLi90eXBlXCI7XHJcbmltcG9ydCB7IE9wZXJhdGlvbiBhcyBXYXNtT3BlcmF0aW9ufSBmcm9tIFwiLi9PcGVyYXRpb25cIjtcclxuXHJcbmV4cG9ydCB0eXBlIEV4cHJlc3Npb24gPSBDb25zdGFudCB8IE9wZXJhdGlvbiB8IExvY2FsSWRlbnRpZmllciB8IEFyZ0lkZW50aWZpZXIgfCBGdW5jdGlvbklkZW50aWZpZXIgfCBJZkJyYW5jaDtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25zdGFudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaWR4OiBudW1iZXIsIHB1YmxpYyB2YWw6IG51bWJlciwgcHVibGljIHR5cGU6IFByaW1pdGl2ZVR5cGUpe31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvY2FsSWRlbnRpZmllciB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaWR4OiBudW1iZXIsIHB1YmxpYyBzcmNfaWR4OiBudW1iZXIsIHB1YmxpYyB0eXBlOiBQcmltaXRpdmVUeXBlKXt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBcmdJZGVudGlmaWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBpZHg6IG51bWJlciwgcHVibGljIHNyY19pZHg6IG51bWJlciwgcHVibGljIHR5cGU6IFByaW1pdGl2ZVR5cGUpe31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uSWRlbnRpZmllciB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaWR4OiBudW1iZXIsIHB1YmxpYyBmdW5jOiBJZGVudGlmaWVyLCBwdWJsaWMgYXJnczogbnVtYmVyW10sIHB1YmxpYyB0eXBlOiBQcmltaXRpdmVUeXBlKXt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPcGVyYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGlkeDogbnVtYmVyLCBwdWJsaWMgc291cmNlczogbnVtYmVyW10sIHB1YmxpYyBvcDogV2FzbU9wZXJhdGlvbiwgcHVibGljIHR5cGU6IFByaW1pdGl2ZVR5cGUpe31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIElmQnJhbmNoIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBpZHg6IG51bWJlciwgcHVibGljIHByZWRfaWR4OiBudW1iZXIsIHB1YmxpYyB0aGVuX2lkeDogbnVtYmVyLCBwdWJsaWMgZWxzZV9pZHg6IG51bWJlciwgcHVibGljIHR5cGU6IFByaW1pdGl2ZVR5cGUpe31cclxufVxyXG4iLCJpbXBvcnQgeyBJZGVudGlmaWVyIH0gZnJvbSBcIi4uL3R5cGVcIjtcclxuaW1wb3J0IHsgRnVuY3Rpb24sIEV4cHJlc3Npb24sIEJpbmFyeU9wLCBGdW5jdGlvbkNhbGwsIEludENvbnN0YW50LCBWYWx1ZSwgSWZFeHByZXNzaW9uLCBTdGF0ZW1lbnQsIExldFN0YXRlbWVudH0gZnJvbSBcIi4vVHlwZWRGdW5jdGlvblwiO1xyXG5pbXBvcnQgeyBUeXBlLCBBcmd1bWVudCB9IGZyb20gXCIuLi90eXBlXCI7XHJcbmltcG9ydCAqIGFzIFNTQSBmcm9tIFwiLi9TU0FcIlxyXG5pbXBvcnQgeyBtYWtlX2JpbmFyeV9vcCB9IGZyb20gXCIuL09wZXJhdGlvblwiO1xyXG5pbXBvcnQgeyBnZXRfcHJpbWl0aXZlX3R5cGUgfSBmcm9tIFwiLi4vY29kZWdlbi9wcmltaXRpdmVUeXBlc1wiO1xyXG5cclxuLy8gZXhwb3J0IGNsYXNzIFdhc21GdW5jdGlvbntcclxuLy8gICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBJZGVudGlmaWVyLCBwdWJsaWMgYXJnczogQXJndW1lbnRbXSwgcHVibGljIHR5cGU6IFR5cGUsIHB1YmxpYyBjb2RlOiBVaW50OEFycmF5KXt9XHJcbi8vIH1cclxuXHJcbmNsYXNzIEZ1bmN0aW9uU3ltYm9se1xyXG4gICAgY29uc3RydWN0b3IoZnVuYzogRnVuY3Rpb24pe1xyXG4gICAgICAgIHRoaXMubmFtZSA9IGZ1bmMubmFtZTtcclxuICAgICAgICB0aGlzLmFyZ3MgPSBmdW5jLmFyZ3M7XHJcbiAgICAgICAgdGhpcy5yZXR1cm5fdHlwZSA9IGZ1bmMudHlwZTtcclxuICAgIH1cclxuICAgIG5hbWU6IElkZW50aWZpZXI7XHJcbiAgICBhcmdzOiBBcmd1bWVudFtdO1xyXG4gICAgcmV0dXJuX3R5cGU6IFR5cGU7XHJcbn1cclxuXHJcbmNsYXNzIFZhbHVlU3ltYm9se1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IElkZW50aWZpZXIsIHB1YmxpYyBzc2FfaW5kZXg6IG51bWJlciwgcHVibGljIHR5cGU6IFR5cGUpe31cclxufVxyXG5cclxuY2xhc3MgQXJnU3ltYm9seyAgXHJcbiAgICBjb25zdHJ1Y3Rvcihhcmc6IEFyZ3VtZW50LCBpZHg6IG51bWJlcil7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gYXJnLm5hbWU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gYXJnLnR5cGU7XHJcbiAgICAgICAgdGhpcy5hcmdfaWR4ID0gaWR4O1xyXG4gICAgfVxyXG4gICAgbmFtZTogSWRlbnRpZmllcjtcclxuICAgIHR5cGU6IFR5cGU7XHJcbiAgICBhcmdfaWR4OiBudW1iZXI7XHJcbn1cclxuXHJcbnR5cGUgU3ltYm9sID0gVmFsdWVTeW1ib2wgfCBBcmdTeW1ib2wgfCBGdW5jdGlvblN5bWJvbDtcclxuXHJcbmNsYXNzIFN5bWJvbExvb2t1cFRhYmxle1xyXG4gICAgc3ltYm9sczogTWFwPHN0cmluZywgU3ltYm9sPjtcclxuICAgIHBhcmVudDogU3ltYm9sTG9va3VwVGFibGUgfCBudWxsO1xyXG4gICAgY29uc3RydWN0b3IocGFyZW50OiBTeW1ib2xMb29rdXBUYWJsZSB8IG51bGwpe1xyXG4gICAgICAgIHRoaXMuc3ltYm9scyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgIH1cclxuXHJcbiAgICBhZGRfc3ltYm9sKHM6IFN5bWJvbCl7XHJcbiAgICAgICAgaWYodGhpcy5zeW1ib2xzLmhhcyhzLm5hbWUubmFtZSkpIHRocm93IFwiYWxyZWFkeSBhZGRlZCBzeW1ib2xcIjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnN5bWJvbHMuc2V0KHMubmFtZS5uYW1lLCBzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfc3ltYm9sKGk6IElkZW50aWZpZXIpIDogU3ltYm9sIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBzeW1ib2wgPSB0aGlzLnN5bWJvbHMuZ2V0KGkubmFtZSk7XHJcbiAgICAgICAgaWYoIXN5bWJvbCAmJiB0aGlzLnBhcmVudCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRfc3ltYm9sKGkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2w7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZV9JUkZ1bmN0aW9ucyhwYXJzZXJfZnVuY3Rpb25zOiBGdW5jdGlvbltdKTogSVJGdW5jdGlvbltde1xyXG4gICAgY29uc3QgbG9va3VwID0gbmV3IFN5bWJvbExvb2t1cFRhYmxlKG51bGwpO1xyXG4gICAgZm9yKGNvbnN0IGZ1bmMgb2YgcGFyc2VyX2Z1bmN0aW9ucyl7XHJcbiAgICAgICAgbG9va3VwLmFkZF9zeW1ib2wobmV3IEZ1bmN0aW9uU3ltYm9sKGZ1bmMpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGFyc2VyX2Z1bmN0aW9ucy5tYXAoZnVuYz0+bWFrZV9JUkZ1bmN0aW9uKGZ1bmMsIGxvb2t1cCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlX2lyKGV4cHJlc3Npb25zOiBTU0EuRXhwcmVzc2lvbltdLCBleHByOiBFeHByZXNzaW9uLCBzeW1fbG9va3VwOiBTeW1ib2xMb29rdXBUYWJsZSl7XHJcbiAgICBpZihleHByIGluc3RhbmNlb2YgQmluYXJ5T3Ape1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSBtYWtlX2lyKGV4cHJlc3Npb25zLCBleHByLmxlZnQsIHN5bV9sb29rdXApO1xyXG4gICAgICAgIGNvbnN0IG9wID0gZXhwci5vcDtcclxuICAgICAgICBjb25zdCByaWdodCA9IG1ha2VfaXIoZXhwcmVzc2lvbnMsIGV4cHIucmlnaHQsIHN5bV9sb29rdXApO1xyXG4gICAgICAgIGV4cHJlc3Npb25zLnB1c2gobmV3IFNTQS5PcGVyYXRpb24oZXhwcmVzc2lvbnMubGVuZ3RoLCBbbGVmdCwgcmlnaHRdLCBleHByLm9wLCBnZXRfcHJpbWl0aXZlX3R5cGUob3AudHlwZSkpKTtcclxuICAgIH0gZWxzZSBpZihleHByIGluc3RhbmNlb2YgSW50Q29uc3RhbnQpe1xyXG4gICAgICAgIGV4cHJlc3Npb25zLnB1c2gobmV3IFNTQS5Db25zdGFudChleHByZXNzaW9ucy5sZW5ndGgsIGV4cHIudmFsLCBnZXRfcHJpbWl0aXZlX3R5cGUoXCJpMzJcIikpKTtcclxuICAgIH0gZWxzZSBpZihleHByIGluc3RhbmNlb2YgVmFsdWUpe1xyXG4gICAgICAgIGNvbnN0IHN5bSA9IHN5bV9sb29rdXAuZ2V0X3N5bWJvbChleHByLm5hbWUpO1xyXG4gICAgICAgIGlmKCFzeW0pIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJjYW4ndCBmaW5kIHN5bWJvbDogXCIgKyBleHByLm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHN5bSBpbnN0YW5jZW9mIEFyZ1N5bWJvbCl7XHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2gobmV3IFNTQS5BcmdJZGVudGlmaWVyKGV4cHJlc3Npb25zLmxlbmd0aCwgc3ltLmFyZ19pZHgsIGdldF9wcmltaXRpdmVfdHlwZShzeW0udHlwZSkpKTtcclxuICAgICAgICB9IGVsc2UgaWYoc3ltIGluc3RhbmNlb2YgVmFsdWVTeW1ib2wpe1xyXG4gICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKG5ldyBTU0EuTG9jYWxJZGVudGlmaWVyKGV4cHJlc3Npb25zLmxlbmd0aCwgc3ltLnNzYV9pbmRleCwgZ2V0X3ByaW1pdGl2ZV90eXBlKHN5bS50eXBlKSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IFwidW5leHBlY3RlZCBzeW1ib2wgdHlwZSwgZXhwZWN0ZWQgdmFsdWVcIjtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYoZXhwciBpbnN0YW5jZW9mIEZ1bmN0aW9uQ2FsbCl7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IGV4cHIuYXJncy5tYXAoYT0+bWFrZV9pcihleHByZXNzaW9ucywgYSwgc3ltX2xvb2t1cCkpO1xyXG4gICAgICAgIGV4cHJlc3Npb25zLnB1c2gobmV3IFNTQS5GdW5jdGlvbklkZW50aWZpZXIoZXhwcmVzc2lvbnMubGVuZ3RoLCBleHByLm5hbWUsIGFyZ3MsIGdldF9wcmltaXRpdmVfdHlwZShleHByLnR5cGUpKSk7XHJcbiAgICB9IGVsc2UgaWYoZXhwciBpbnN0YW5jZW9mIElmRXhwcmVzc2lvbil7XHJcbiAgICAgICAgY29uc3QgcHJlZF9pZHggPSBtYWtlX2lyKGV4cHJlc3Npb25zLCBleHByLnByZWQsIHN5bV9sb29rdXApO1xyXG4gICAgICAgIGNvbnN0IHRoZW5faWR4ID0gbWFrZV9JckJvZHkoZXhwcmVzc2lvbnMsIGV4cHIudGhlbl9ib2R5LCBzeW1fbG9va3VwKTtcclxuICAgICAgICBjb25zdCBlbHNlX2lkeCA9IG1ha2VfSXJCb2R5KGV4cHJlc3Npb25zLCBleHByLmVsc2VfYm9keSwgc3ltX2xvb2t1cCk7XHJcbiAgICAgICAgZXhwcmVzc2lvbnMucHVzaChuZXcgU1NBLklmQnJhbmNoKGV4cHJlc3Npb25zLmxlbmd0aCwgcHJlZF9pZHgsIHRoZW5faWR4LCBlbHNlX2lkeCwgZ2V0X3ByaW1pdGl2ZV90eXBlKGV4cHIudHlwZSkpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgXCJ1bmV4cGVjdGVkIGV4cHJlc3Npb24gdHlwZVwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4cHJlc3Npb25zLmxlbmd0aCAtIDE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1ha2VfSXJCb2R5KGV4cHJlc3Npb25zOiBTU0EuRXhwcmVzc2lvbltdLCBzdGF0ZW1lbnRzOiBTdGF0ZW1lbnRbXSwgc3ltX2xvb2t1cDogU3ltYm9sTG9va3VwVGFibGUpOiBudW1iZXJ7XHJcbiAgICBjb25zdCBzY29wZWRfbG9va3VwID0gbmV3IFN5bWJvbExvb2t1cFRhYmxlKHN5bV9sb29rdXApO1xyXG4gICAgbGV0IGlkeCA9IDA7XHJcbiAgICBzdGF0ZW1lbnRzLmZvckVhY2gocz0+e1xyXG4gICAgICAgIGlkeCA9IG1ha2VfaXIoZXhwcmVzc2lvbnMsIHMuZXhwciwgc2NvcGVkX2xvb2t1cCk7XHJcbiAgICAgICAgaWYocyBpbnN0YW5jZW9mIExldFN0YXRlbWVudCl7XHJcbiAgICAgICAgICAgIHNjb3BlZF9sb29rdXAuYWRkX3N5bWJvbChuZXcgVmFsdWVTeW1ib2wocy5uYW1lLm5hbWUsIGlkeCwgcy5leHByLnR5cGUpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gaWR4O1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlX0lSRnVuY3Rpb24oZnVuYzogRnVuY3Rpb24sIHN5bV9sb29rdXA6IFN5bWJvbExvb2t1cFRhYmxlKTogSVJGdW5jdGlvbntcclxuICAgIGNvbnN0IGxvb2t1cCA9IG5ldyBTeW1ib2xMb29rdXBUYWJsZShzeW1fbG9va3VwKTtcclxuICAgIGZ1bmMuYXJncy5mb3JFYWNoKChhcmcsaWR4KT0+e1xyXG4gICAgICAgIGxvb2t1cC5hZGRfc3ltYm9sKG5ldyBBcmdTeW1ib2woYXJnLCBpZHgpKTtcclxuICAgIH0pO1xyXG4gICAgbGV0IGV4cHJlc3Npb25zOiBTU0EuRXhwcmVzc2lvbltdID0gW107XHJcblxyXG4gICAgbWFrZV9JckJvZHkoZXhwcmVzc2lvbnMsIGZ1bmMuYm9keSwgbG9va3VwKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IElSRnVuY3Rpb24oZnVuYy5uYW1lLCBmdW5jLmFyZ3MubWFwKGE9PmEudHlwZSksIGZ1bmMudHlwZSwgZXhwcmVzc2lvbnMpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIElSRnVuY3Rpb257XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogSWRlbnRpZmllciwgcHVibGljIGFyZ3M6IFR5cGVbXSwgcHVibGljIHJldHVybl90eXBlOiBUeXBlLCBwdWJsaWMgU1NBOiBTU0EuRXhwcmVzc2lvbltdKXt9O1xyXG59IiwiaW1wb3J0IHsgQnVpbHRpbkZ1bmN0aW9uIH0gZnJvbSBcIi4uL2NvZGVnZW4vZGVjb21waWxlXCI7XHJcbmltcG9ydCAqIGFzIFVudHlwZWQgZnJvbSBcIi4uL3BhcnNlL2V4cHJlc3Npb25cIjtcclxuaW1wb3J0IHsgSWRlbnRpZmllciwgVHlwZSwgQXJndW1lbnQgfSBmcm9tIFwiLi4vdHlwZVwiO1xyXG5pbXBvcnQgeyBTdGF0ZW1lbnQgYXMgVW50eXBlZFN0YXRlbWVudCwgTGV0U3RhdG1lbnQgYXMgVW50eXBlZExldFN0YXRlbWVudCwgUmV0dXJuU3RhdGVtZW50IGFzIFVudHlwZWRSZXR1cm5TdGF0ZW1lbnR9IGZyb20gXCIuLi9wYXJzZS9zdGF0bWVudFwiXHJcbmltcG9ydCB7IFBhcnNlckZ1bmN0aW9uIH0gZnJvbSBcIi4uL3BhcnNlL3N0YXRtZW50XCI7XHJcbmltcG9ydCB7IE9wZXJhdGlvbiwgbWFrZV9iaW5hcnlfb3AgfSBmcm9tIFwiLi9PcGVyYXRpb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWYWx1ZUlkZW50aWZpZXIge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHR5cGU6IFR5cGUsIHB1YmxpYyBuYW1lOiBJZGVudGlmaWVyKXt9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVmFsdWUge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHR5cGU6IFR5cGUsIHB1YmxpYyBuYW1lOiBJZGVudGlmaWVyKXt9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25JZGVudGlmaWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0eXBlOiBUeXBlLCBwdWJsaWMgbmFtZTogSWRlbnRpZmllciwgcHVibGljIGFyZ3M6IFR5cGVbXSl7fTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEludENvbnN0YW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0eXBlOiBUeXBlLCBwdWJsaWMgdmFsOiBudW1iZXIpe307XHJcbn1cclxuICAgIFxyXG5leHBvcnQgY2xhc3MgQmluYXJ5T3Age1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHR5cGU6IFR5cGUsIHB1YmxpYyBsZWZ0OiBFeHByZXNzaW9uLCBwdWJsaWMgb3A6IE9wZXJhdGlvbiwgcHVibGljIHJpZ2h0OiBFeHByZXNzaW9uKXt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGdW5jdGlvbkNhbGwge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHR5cGU6IFR5cGUsIHB1YmxpYyBuYW1lOiBJZGVudGlmaWVyLCBwdWJsaWMgYXJnczogRXhwcmVzc2lvbltdKXt9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSWZFeHByZXNzaW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0eXBlOiBUeXBlLCBwdWJsaWMgcHJlZDogRXhwcmVzc2lvbiwgcHVibGljIHRoZW5fYm9keTogU3RhdGVtZW50W10sIHB1YmxpYyBlbHNlX2JvZHk6IFN0YXRlbWVudFtdKXt9O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBFeHByZXNzaW9uID0gSW50Q29uc3RhbnQgfCBCaW5hcnlPcCB8IEZ1bmN0aW9uQ2FsbCB8IFZhbHVlIHwgSWZFeHByZXNzaW9uO1xyXG5cclxuZXhwb3J0IGNsYXNzIExldFN0YXRlbWVudHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBWYWx1ZUlkZW50aWZpZXIsIHB1YmxpYyBleHByOiBFeHByZXNzaW9uKXt9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmV0dXJuU3RhdGVtZW50e1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGV4cHI6IEV4cHJlc3Npb24pe307XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFN0YXRlbWVudCA9IExldFN0YXRlbWVudCB8IFJldHVyblN0YXRlbWVudDtcclxuXHJcbmV4cG9ydCBjbGFzcyBGdW5jdGlvbntcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBJZGVudGlmaWVyLCBwdWJsaWMgYXJnczogQXJndW1lbnRbXSwgcHVibGljIHR5cGU6IFR5cGUsIHB1YmxpYyBib2R5OiBTdGF0ZW1lbnRbXSl7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRfcmV0dXJuX3R5cGUoc3RhdGVtZW50czogU3RhdGVtZW50W10pe1xyXG4gICAgaWYoc3RhdGVtZW50cy5sZW5ndGggPT0gMCkgdGhyb3cgXCJubyByZXR1cm4gc3RhdG1lbnRcIlxyXG4gICAgZm9yKGNvbnN0IHN0YXRlbWVudCBvZiBzdGF0ZW1lbnRzKXtcclxuICAgICAgICBjb25zdCBpc19lbmQgPSAoc3RhdGVtZW50ID09IHN0YXRlbWVudHNbc3RhdGVtZW50cy5sZW5ndGggLTFdKTtcclxuICAgICAgICBjb25zdCBpc19yZXR1cm4gPSAoc3RhdGVtZW50IGluc3RhbmNlb2YgUmV0dXJuU3RhdGVtZW50KTtcclxuICAgICAgICBpZihpc19lbmQgIT0gaXNfcmV0dXJuKXtcclxuICAgICAgICAgICAgdGhyb3cgXCJyZXR1cm4gc3RhdG1lbnQgbm90IGF0IGVuZCBvZiBmdW5jdGlvblwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RhdGVtZW50c1tzdGF0ZW1lbnRzLmxlbmd0aCAtIDFdLmV4cHIudHlwZTtcclxufVxyXG5cclxuY2xhc3MgSWRlbnRpZmllckxvb2t1cFRhYmxle1xyXG4gICAgc3ltYm9sczogTWFwPHN0cmluZywgVmFsdWVJZGVudGlmaWVyIHwgRnVuY3Rpb25JZGVudGlmaWVyPjtcclxuICAgIHBhcmVudDogSWRlbnRpZmllckxvb2t1cFRhYmxlIHwgbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudDogSWRlbnRpZmllckxvb2t1cFRhYmxlIHwgbnVsbCl7XHJcbiAgICAgICAgdGhpcy5zeW1ib2xzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZF9zeW1ib2woczogVmFsdWVJZGVudGlmaWVyIHwgRnVuY3Rpb25JZGVudGlmaWVyKXtcclxuICAgICAgICBpZih0aGlzLnN5bWJvbHMuaGFzKHMubmFtZS5uYW1lKSkgdGhyb3cgXCJhbHJlYWR5IGFkZGVkIGlkZW50aWZpZXJcIjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnN5bWJvbHMuc2V0KHMubmFtZS5uYW1lLCBzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfc3ltYm9sKGk6IElkZW50aWZpZXIpIDogVmFsdWVJZGVudGlmaWVyIHwgRnVuY3Rpb25JZGVudGlmaWVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gdGhpcy5zeW1ib2xzLmdldChpLm5hbWUpO1xyXG4gICAgICAgIGlmKCFpZGVudGlmaWVyICYmIHRoaXMucGFyZW50KXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldF9zeW1ib2woaSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gbWFrZV90eXBlZF9leHByZXNzaW9uKGV4cHI6IFVudHlwZWQuRXhwcmVzc2lvbiwgbG9va3VwOiBJZGVudGlmaWVyTG9va3VwVGFibGUpOiBFeHByZXNzaW9ue1xyXG4gICAgaWYoZXhwciBpbnN0YW5jZW9mIFVudHlwZWQuQ29uc3RhbnQpe1xyXG4gICAgICAgIHJldHVybiBuZXcgSW50Q29uc3RhbnQoXCJpMzJcIiwgZXhwci52YWwpO1xyXG4gICAgfSBlbHNlIGlmKGV4cHIgaW5zdGFuY2VvZiBJZGVudGlmaWVyKSB7XHJcbiAgICAgICAgY29uc3Qgc3ltYm9sID0gbG9va3VwLmdldF9zeW1ib2woZXhwcik7XHJcbiAgICAgICAgaWYoIXN5bWJvbCkgdGhyb3cgXCJzeW1ib2wgbm90IGZvdW5kOiBcIiArIGV4cHIubmFtZTtcclxuICAgICAgICBpZighKHN5bWJvbCBpbnN0YW5jZW9mIFZhbHVlSWRlbnRpZmllcikpIHRocm93IGBzeW1ib2wgJHtleHByLm5hbWV9IGlzIGEgJHtzeW1ib2x9IGV4cGVjdGVkIGEgVmFsdWVJZGVudGlmaWVyYDtcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKHN5bWJvbC50eXBlLCBleHByKTtcclxuXHJcbiAgICB9IGVsc2UgaWYoZXhwciBpbnN0YW5jZW9mIFVudHlwZWQuRnVuY3Rpb25DYWxsKSB7XHJcbiAgICAgICAgY29uc3Qgc3ltYm9sID0gbG9va3VwLmdldF9zeW1ib2woZXhwci5uYW1lKTtcclxuICAgICAgICBpZighc3ltYm9sKSB0aHJvdyBcInN5bWJvbCBub3QgZm91bmQ6IFwiICsgZXhwci5uYW1lLm5hbWU7XHJcbiAgICAgICAgaWYoIShzeW1ib2wgaW5zdGFuY2VvZiBGdW5jdGlvbklkZW50aWZpZXIpKSB0aHJvdyBgc3ltYm9sICR7ZXhwci5uYW1lfSBpcyBhICR7c3ltYm9sfSBleHBlY3RlZCBhIFwiZnVuY1wiYDtcclxuICAgICAgICBjb25zdCBhcmdzID0gZXhwci5hcmdzLm1hcChhPT5tYWtlX3R5cGVkX2V4cHJlc3Npb24oYSwgbG9va3VwKSlcclxuXHJcbiAgICAgICAgaWYoYXJncy5sZW5ndGggIT0gc3ltYm9sLmFyZ3MubGVuZ3RoKXtcclxuICAgICAgICAgICAgdGhyb3cgYG51bWJlciBvZiBhcmd1bWVudHMgdG8gZnVuY3Rpb24gXCIke2V4cHIubmFtZS5uYW1lfVwiIGRvbid0IG1hdGNoIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9uYDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgY29uc3QgZnVuY190eXBlID0gc3ltYm9sLmFyZ3NbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWxfdHlwZSA9IGFyZ3NbaV0udHlwZTtcclxuICAgICAgICAgICAgaWYoZnVuY190eXBlICE9IHJlYWxfdHlwZSl7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBgYXJndW1lbnQgb2YgZnVuY3Rpb24gXCIke2V4cHIubmFtZS5uYW1lfVwiIGF0IHBvc2l0aW9uICR7aX0gaGFzIHdyb25nIHR5cGU6IEdvdCBcIiR7cmVhbF90eXBlfVwiIGV4cGVjdGVkIFwiJHtmdW5jX3R5cGV9XCJgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uQ2FsbChzeW1ib2wudHlwZSwgZXhwci5uYW1lLCBhcmdzKTtcclxuXHJcbiAgICB9IGVsc2UgaWYoZXhwciBpbnN0YW5jZW9mIFVudHlwZWQuQmluYXJ5T3ApIHtcclxuICAgICAgICBjb25zdCBsZWZ0ID0gbWFrZV90eXBlZF9leHByZXNzaW9uKGV4cHIubGVmdCwgbG9va3VwKTtcclxuICAgICAgICBjb25zdCByaWdodCA9IG1ha2VfdHlwZWRfZXhwcmVzc2lvbihleHByLnJpZ2h0LCBsb29rdXApO1xyXG4gICAgICAgIGNvbnN0IG9wID0gbWFrZV9iaW5hcnlfb3AobGVmdC50eXBlLCBleHByLm9wLCByaWdodC50eXBlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5hcnlPcChvcC50eXBlLCBsZWZ0LCBvcCwgcmlnaHQpO1xyXG5cclxuICAgIH0gZWxzZSBpZihleHByIGluc3RhbmNlb2YgVW50eXBlZC5JZkV4cHJlc3Npb24pe1xyXG4gICAgICAgIGNvbnN0IHByZWQgPSBtYWtlX3R5cGVkX2V4cHJlc3Npb24oZXhwci5wcmVkLCBsb29rdXApO1xyXG4gICAgICAgIGNvbnN0IHRoZW5fYm9keSA9IG1ha2VfdHlwZWRfYm9keShleHByLnRoZW5fYm9keSwgbG9va3VwKTtcclxuICAgICAgICBjb25zdCBlbHNlX2JvZHkgPSBtYWtlX3R5cGVkX2JvZHkoZXhwci5lbHNlX2JvZHksIGxvb2t1cCk7XHJcbiAgICAgICAgY29uc3QgdGhlbl9yZXR1cm4gPSBnZXRfcmV0dXJuX3R5cGUodGhlbl9ib2R5KTtcclxuICAgICAgICBjb25zdCBlbHNlX3JldHVybiA9IGdldF9yZXR1cm5fdHlwZShlbHNlX2JvZHkpO1xyXG5cclxuICAgICAgICBpZihwcmVkLnR5cGUgIT0gXCJib29sXCIpIHRocm93IGBwcmVkaWNhdGUgdG8gaWYgc3RhdG1lbnQgaGFzIHR5cGUgJHtwcmVkLnR5cGV9IGV4cGVjdGVkIHR5cGUgXCJib29sXCJgXHJcbiAgICAgICAgaWYodGhlbl9yZXR1cm4gIT0gZWxzZV9yZXR1cm4pIHRocm93IGBpZiBleHByZXNzaW9uIHR5cGUgbWlzbWF0Y2g6ICR7dGhlbl9yZXR1cm59ICE9ICR7ZWxzZV9yZXR1cm59YFxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IElmRXhwcmVzc2lvbih0aGVuX3JldHVybiwgcHJlZCwgdGhlbl9ib2R5LCBlbHNlX2JvZHkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBcInVuZXhwZWN0ZWQgZXhwcmVzc2lvbiB0eXBlXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gbWFrZV90eXBlZF9zdGF0ZW1lbnQoc3RhdGVtZW50OiBVbnR5cGVkU3RhdGVtZW50LCBsb29rdXA6IElkZW50aWZpZXJMb29rdXBUYWJsZSl7XHJcbiAgICBpZihzdGF0ZW1lbnQgaW5zdGFuY2VvZiBVbnR5cGVkTGV0U3RhdGVtZW50KXtcclxuICAgICAgICBjb25zdCBleHByID0gbWFrZV90eXBlZF9leHByZXNzaW9uKHN0YXRlbWVudC5leHByLCBsb29rdXApO1xyXG4gICAgICAgIGNvbnN0IGlkID0gbmV3IFZhbHVlSWRlbnRpZmllcihleHByLnR5cGUsIHN0YXRlbWVudC5uYW1lKTtcclxuICAgICAgICBsb29rdXAuYWRkX3N5bWJvbChpZCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMZXRTdGF0ZW1lbnQoaWQsIGV4cHIpO1xyXG4gICAgfSBlbHNlIGlmKHN0YXRlbWVudCBpbnN0YW5jZW9mIFVudHlwZWRSZXR1cm5TdGF0ZW1lbnQpe1xyXG4gICAgICAgIHJldHVybiBuZXcgUmV0dXJuU3RhdGVtZW50KG1ha2VfdHlwZWRfZXhwcmVzc2lvbihzdGF0ZW1lbnQuZXhwciwgbG9va3VwKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IFwidW5leHBlY3RlZCBzdGF0ZW1lbnQgdHlwZVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlX3R5cGVkX2JvZHkoc3RhdGVtZW50czogVW50eXBlZFN0YXRlbWVudFtdLCBsb29rdXA6IElkZW50aWZpZXJMb29rdXBUYWJsZSk6IFN0YXRlbWVudFtde1xyXG4gICAgbGV0IHNjb3BlZF9sb29rdXAgPSBuZXcgSWRlbnRpZmllckxvb2t1cFRhYmxlKGxvb2t1cCk7XHJcbiAgICByZXR1cm4gc3RhdGVtZW50cy5tYXAocz0+bWFrZV90eXBlZF9zdGF0ZW1lbnQocywgc2NvcGVkX2xvb2t1cCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlX3R5cGVkX2Z1bmN0aW9uKGZ1bmM6IFBhcnNlckZ1bmN0aW9uLCBmdW5jX2xvb2t1cDogSWRlbnRpZmllckxvb2t1cFRhYmxlKTogRnVuY3Rpb257XHJcbiAgICBjb25zdCBuYW1lID0gZnVuYy5uYW1lO1xyXG4gICAgY29uc3QgYXJncyA9IGZ1bmMuYXJncztcclxuICAgIGNvbnN0IHR5cGUgPSBmdW5jLnJldHVybl90eXBlO1xyXG4gICAgY29uc3QgbG9va3VwID0gbmV3IElkZW50aWZpZXJMb29rdXBUYWJsZShmdW5jX2xvb2t1cCk7XHJcbiAgICBmb3IoY29uc3QgYXJnIG9mIGZ1bmMuYXJncyl7XHJcbiAgICAgICAgbG9va3VwLmFkZF9zeW1ib2wobmV3IFZhbHVlSWRlbnRpZmllcihhcmcudHlwZSwgYXJnLm5hbWUpKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJvZHkgPSBtYWtlX3R5cGVkX2JvZHkoZnVuYy5ib2R5LCBsb29rdXApO1xyXG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihuYW1lLCBhcmdzLCB0eXBlLCBib2R5KTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFR5cGVkUHJvZ3JhbSB7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZnVuY3M6IEZ1bmN0aW9uW107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZnVuY19tYXA6IE1hcDxzdHJpbmcsIEZ1bmN0aW9uPjtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoZnVuY3M6IFBhcnNlckZ1bmN0aW9uW10sIGJ1aWx0aW5zOiBCdWlsdGluRnVuY3Rpb25bXSl7XHJcbiAgICAgICAgbGV0IGxvb2t1cCA9IG5ldyBJZGVudGlmaWVyTG9va3VwVGFibGUobnVsbCk7XHJcbiAgICAgICAgZm9yKGNvbnN0IGZ1bmMgb2YgYnVpbHRpbnMpe1xyXG4gICAgICAgICAgICBsb29rdXAuYWRkX3N5bWJvbChuZXcgRnVuY3Rpb25JZGVudGlmaWVyKGZ1bmMudHlwZSwgZnVuYy5uYW1lLCBmdW5jLmFyZ3MpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yKGNvbnN0IGZ1bmMgb2YgZnVuY3Mpe1xyXG4gICAgICAgICAgICBsb29rdXAuYWRkX3N5bWJvbChuZXcgRnVuY3Rpb25JZGVudGlmaWVyKGZ1bmMucmV0dXJuX3R5cGUsIGZ1bmMubmFtZSwgZnVuYy5hcmdzLm1hcChhcmc9PmFyZy50eXBlKSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mdW5jcyA9IGZ1bmNzLm1hcChmPT5tYWtlX3R5cGVkX2Z1bmN0aW9uKGYsIGxvb2t1cCkpO1xyXG4gICAgICAgIHRoaXMuZnVuY19tYXAgPSBuZXcgTWFwPHN0cmluZywgRnVuY3Rpb24+KCk7XHJcbiAgICAgICAgZm9yKGNvbnN0IGZ1bmMgb2YgdGhpcy5mdW5jcyl7XHJcbiAgICAgICAgICAgIHRoaXMuZnVuY19tYXAuc2V0KGZ1bmMubmFtZS5uYW1lLCBmdW5jKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBJUkZ1bmN0aW9uIH0gZnJvbSBcIi4uL2FueWxhc2lzL1NTQUZ1bmN0aW9uXCI7XHJcbmltcG9ydCB7IGVuY29kZUludDMyLCBlbmNvZGVJbnQ2NCB9IGZyb20gXCIuL2xlYi9sZWJcIjtcclxuaW1wb3J0ICogYXMgU1NBIGZyb20gXCIuLi9hbnlsYXNpcy9TU0FcIlxyXG5pbXBvcnQgeyBCdWlsdGluRnVuY3Rpb24gfSBmcm9tIFwiLi9kZWNvbXBpbGVcIjtcclxuaW1wb3J0IHsgVHlwZSB9IGZyb20gXCIuLi90eXBlXCI7XHJcbmltcG9ydCAqIGFzIEkgZnJvbSBcIi4uL2luc3RydWN0aW9uc1wiXHJcbmltcG9ydCB7IFQsIFByaW1pdGl2ZVR5cGUsIGdldF9wcmltaXRpdmVfdHlwZSB9IGZyb20gXCIuL3ByaW1pdGl2ZVR5cGVzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBFeHBvcnRLaW5kID0gVWludDhBcnJheTtcclxuXHJcbmZ1bmN0aW9uIGVuY29kZUYzMihmOiBudW1iZXIpOiBVaW50OEFycmF5IHtcclxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgRmxvYXQzMkFycmF5KFtmXSkuYnVmZmVyKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGVuY29kZUY2NChmOiBudW1iZXIpOiBVaW50OEFycmF5IHtcclxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgRmxvYXQ2NEFycmF5KFtmXSkuYnVmZmVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWVyZ2VfYnVmZmVycyhidWZmZXJzOiBVaW50OEFycmF5W10pOiBVaW50OEFycmF5e1xyXG4gICAgY29uc3QgbGVuZ3RoID0gYnVmZmVycy5yZWR1Y2UoKGEsYik9PmEgKyBiLmJ5dGVMZW5ndGgsIDApO1xyXG4gICAgY29uc3QgbWVyZ2VkID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcclxuICAgIFxyXG4gICAgbGV0IGlkeCA9IDA7XHJcbiAgICBmb3IoY29uc3QgYnVmZmVyIG9mIGJ1ZmZlcnMpe1xyXG4gICAgICAgIG1lcmdlZC5zZXQoYnVmZmVyLCBpZHgpO1xyXG4gICAgICAgIGlkeCArPSBidWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWVyZ2VkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlX2xlbnRoX2VuY29kaW5nKGJ1ZmZlcnM6IFVpbnQ4QXJyYXlbXSk6IFVpbnQ4QXJyYXkge1xyXG4gICAgY29uc3QgbGVuZ3RoID0gYnVmZmVycy5yZWR1Y2UoKGEsYik9PmEgKyBiLmJ5dGVMZW5ndGgsIDApO1xyXG4gICAgcmV0dXJuIG1lcmdlX2J1ZmZlcnMoW2VuY29kZUludDMyKGxlbmd0aCksIC4uLmJ1ZmZlcnNdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFrZV92ZWMoYnVmZmVyczogVWludDhBcnJheVtdKTogVWludDhBcnJheSB7XHJcbiAgICByZXR1cm4gbWVyZ2VfYnVmZmVycyhbZW5jb2RlSW50MzIoYnVmZmVycy5sZW5ndGgpLCAuLi5idWZmZXJzXSlcclxufVxyXG5cclxuZnVuY3Rpb24gbWFrZV9zaXplZF92ZWMoYnVmZmVyczogVWludDhBcnJheVtdKTogVWludDhBcnJheSB7XHJcbiAgICBjb25zdCBsZW5ndGhfYnVmZmVycyA9IGJ1ZmZlcnMucmVkdWNlKChhLGIpPT5hICsgYi5ieXRlTGVuZ3RoLCAwKTtcclxuICAgIGNvbnN0IGNvdW50ID0gZW5jb2RlSW50MzIoYnVmZmVycy5sZW5ndGgpO1xyXG4gICAgY29uc3QgbGVuZ3RoID0gZW5jb2RlSW50MzIobGVuZ3RoX2J1ZmZlcnMgKyBjb3VudC5sZW5ndGgpO1xyXG4gICAgcmV0dXJuIG1lcmdlX2J1ZmZlcnMoW2xlbmd0aCwgY291bnQsIC4uLmJ1ZmZlcnNdKVxyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlX2NvbnN0YW50KGNvbnN0YW50OiBTU0EuQ29uc3RhbnQpe1xyXG4gICAgc3dpdGNoKGNvbnN0YW50LnR5cGUpe1xyXG4gICAgICAgIGNhc2UgVC5pMzI6XHJcbiAgICAgICAgICAgIHJldHVybiBbSS5pMzIuY29uc3QsIGVuY29kZUludDMyKGNvbnN0YW50LnZhbCldO1xyXG4gICAgICAgIGNhc2UgVC5mMzI6XHJcbiAgICAgICAgICAgIHJldHVybiBbSS5mMzIuY29uc3QsIGVuY29kZUYzMihjb25zdGFudC52YWwpXTtcclxuICAgICAgICBjYXNlIFQuaTY0OlxyXG4gICAgICAgICAgICByZXR1cm4gW0kuaTY0LmNvbnN0LCBlbmNvZGVJbnQ2NChjb25zdGFudC52YWwpXTtcclxuICAgICAgICBjYXNlIFQuZjY0OlxyXG4gICAgICAgICAgICByZXR1cm4gW0kuZjY0LmNvbnN0LCBlbmNvZGVGNjQoY29uc3RhbnQudmFsKV07XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgXCJubyBrbm93biBjb25zdGFudCBzY2hlbWUgZm9yIHR5cGU6IFwiICsgY29uc3RhbnQudHlwZTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuX2lmKGNvZGU6IFNTQS5FeHByZXNzaW9uW10sIGV4cHI6IFNTQS5JZkJyYW5jaCwgZnVuY3Rpb25fbWFwOiBNYXA8c3RyaW5nLCBudW1iZXI+LCBkZXB0aDogbnVtYmVyKTogVWludDhBcnJheVtde1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICAuLi5nZW5fY29kZShjb2RlLCBleHByLnByZWRfaWR4LCBmdW5jdGlvbl9tYXAsIGRlcHRoKSwgXHJcbiAgICAgICAgVC5icmFuY2hfaWZfZWxzZSwgVC5pMzIsICAgICAgICAgXHJcbiAgICAgICAgICAgIC4uLmdlbl9jb2RlKGNvZGUsIGV4cHIudGhlbl9pZHgsIGZ1bmN0aW9uX21hcCwgZGVwdGggKyAxKSwgXHJcbiAgICAgICAgVC5icmFuY2hfZWxzZSxcclxuICAgICAgICAgICAgLi4uZ2VuX2NvZGUoY29kZSwgZXhwci5lbHNlX2lkeCwgZnVuY3Rpb25fbWFwLCBkZXB0aCArIDEpLFxyXG4gICAgICAgIFQuYnJhbmNoX2VuZCxcclxuICAgIF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbl9jb2RlKGNvZGU6IFNTQS5FeHByZXNzaW9uW10sIGlkeDogbnVtYmVyLCBmdW5jdGlvbl9tYXA6IE1hcDxzdHJpbmcsIG51bWJlcj4sIGRlcHRoOiBudW1iZXIpIDogVWludDhBcnJheVtde1xyXG4gICAgY29uc3QgZXhwciA9IGNvZGVbaWR4XTtcclxuICAgIGlmKGV4cHIgaW5zdGFuY2VvZiBTU0EuQ29uc3RhbnQpe1xyXG4gICAgICAgIHJldHVybiBtYWtlX2NvbnN0YW50KGV4cHIpO1xyXG4gICAgfSBlbHNlIGlmKGV4cHIgaW5zdGFuY2VvZiBTU0EuQXJnSWRlbnRpZmllcil7XHJcbiAgICAgICAgcmV0dXJuIFtJLmxvY2FsLmdldCwgZW5jb2RlSW50MzIoZXhwci5zcmNfaWR4KV07XHJcbiAgICB9IGVsc2UgaWYoZXhwciBpbnN0YW5jZW9mIFNTQS5Mb2NhbElkZW50aWZpZXIpe1xyXG4gICAgICAgIHJldHVybiBnZW5fY29kZShjb2RlLCBleHByLnNyY19pZHgsIGZ1bmN0aW9uX21hcCwgZGVwdGgpO1xyXG4gICAgfSBlbHNlIGlmKGV4cHIgaW5zdGFuY2VvZiBTU0EuRnVuY3Rpb25JZGVudGlmaWVyKXtcclxuICAgICAgICByZXR1cm4gWy4uLmV4cHIuYXJncy5mbGF0TWFwKG49Pmdlbl9jb2RlKGNvZGUsIG4sIGZ1bmN0aW9uX21hcCwgZGVwdGgpKSwgSS5jYWxsLCBlbmNvZGVJbnQzMihmdW5jdGlvbl9tYXAuZ2V0KGV4cHIuZnVuYy5uYW1lKSldO1xyXG4gICAgfSBlbHNlIGlmKGV4cHIgaW5zdGFuY2VvZiBTU0EuT3BlcmF0aW9uKXtcclxuICAgICAgICByZXR1cm4gWy4uLmV4cHIuc291cmNlcy5mbGF0TWFwKHM9Pmdlbl9jb2RlKGNvZGUsIHMsIGZ1bmN0aW9uX21hcCwgZGVwdGgpKSwgZXhwci5vcC5jb2RlXTtcclxuICAgIH0gZWxzZSBpZihleHByIGluc3RhbmNlb2YgU1NBLklmQnJhbmNoKXtcclxuICAgICAgICByZXR1cm4gZ2VuX2lmKGNvZGUsIGV4cHIsIGZ1bmN0aW9uX21hcCwgZGVwdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBcInVuZXhwZWN0ZWQgc3NhIGV4cHJlc3Npb25cIjtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0X3ByaW1pdHZlX3R5cGVfb3Jfdm9pZCh0OiBUeXBlKTogUHJpbWl0aXZlVHlwZSB8IDAge1xyXG4gICAgaWYodCA9PSBcInZvaWRcIikgcmV0dXJuIDA7XHJcbiAgICByZXR1cm4gZ2V0X3ByaW1pdGl2ZV90eXBlKHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlX3dhc21fZnVuY3Rpb24oZnVuYzogSVJGdW5jdGlvbiwgZnVuY3Rpb25fbWFwOiBNYXA8c3RyaW5nLCBudW1iZXI+KTogV2FzbUZ1bmN0aW9uIHtcclxuICAgIGxldCBjb2RlOiBVaW50OEFycmF5W10gPSBnZW5fY29kZShmdW5jLlNTQSwgZnVuYy5TU0EubGVuZ3RoIC0gMSwgZnVuY3Rpb25fbWFwLCAwKTtcclxuICAgIGNvZGUucHVzaChJLmVuZF9mdW5jKTtcclxuICAgIHJldHVybiBuZXcgV2FzbUZ1bmN0aW9uKGZ1bmMubmFtZS5uYW1lLCBmdW5jLmFyZ3MubWFwKGdldF9wcmltaXRpdmVfdHlwZSksIGdldF9wcmltaXR2ZV90eXBlX29yX3ZvaWQoZnVuYy5yZXR1cm5fdHlwZSksIG1lcmdlX2J1ZmZlcnMoY29kZSksIFtdKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdhc21GdW5jdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nLCBwdWJsaWMgaW5wdXRzOiBQcmltaXRpdmVUeXBlW10sIHB1YmxpYyBvdXRwdXQ6IFByaW1pdGl2ZVR5cGUgfCAwLCBwdWJsaWMgY29kZTogVWludDhBcnJheSwgcHVibGljIGxvY2FsczogUHJpbWl0aXZlVHlwZVtdKXt9XHJcblxyXG4gICAgZW5jb2RlVHlwZSgpOiBVaW50OEFycmF5IHtcclxuICAgICAgICBjb25zdCBmdW5jX3R5cGUgPSBULmZ1bmM7XHJcbiAgICAgICAgY29uc3QgbnVtX2lucHV0cyA9IGVuY29kZUludDMyKHRoaXMuaW5wdXRzLmxlbmd0aCk7XHJcbiAgICAgICAgY29uc3QgbnVtX291dHB1dHMgPSBlbmNvZGVJbnQzMigodGhpcy5vdXRwdXQgIT0gMCkgPyAxIDogMCk7XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gdGhpcy5vdXRwdXQgfHwgbmV3IFVpbnQ4QXJyYXkoMCk7XHJcblxyXG4gICAgICAgIHJldHVybiBtZXJnZV9idWZmZXJzKFtmdW5jX3R5cGUsIG51bV9pbnB1dHMsIC4uLnRoaXMuaW5wdXRzLCBudW1fb3V0cHV0cywgb3V0cHV0XSk7XHJcbiAgICB9XHJcblxyXG4gICAgZW5jb2RlQ29kZSgpOiBVaW50OEFycmF5IHtcclxuICAgICAgICBjb25zdCBsb2NhbF9kZWNsYXJhdGlvbnMgPSBtYWtlX3ZlYyh0aGlzLmxvY2Fscyk7XHJcbiAgICAgIFxyXG4gICAgICAgIHJldHVybiBtYWtlX2xlbnRoX2VuY29kaW5nKFtsb2NhbF9kZWNsYXJhdGlvbnMsIHRoaXMuY29kZV0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBUeXBlU2VjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZnVuY3Rpb25zOiBXYXNtRnVuY3Rpb25bXSl7fVxyXG5cclxuICAgIGVuY29kZSgpOiBVaW50OEFycmF5IHtcclxuICAgICAgICBjb25zdCBpZCA9IGVuY29kZUludDMyKDEpO1xyXG4gICAgICAgIGNvbnN0IHR5cGVfZW5jb2RpbmdzID0gdGhpcy5mdW5jdGlvbnMubWFwKGY9PmYuZW5jb2RlVHlwZSgpKVxyXG5cclxuICAgICAgICByZXR1cm4gbWVyZ2VfYnVmZmVycyhbaWQsIG1ha2Vfc2l6ZWRfdmVjKHR5cGVfZW5jb2RpbmdzKV0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBGdW5jdGlvblNlY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGZ1bmN0aW9uczogV2FzbUZ1bmN0aW9uW10pe31cclxuXHJcbiAgICBlbmNvZGUoKTogVWludDhBcnJheSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBULmZ1bmN0aW9uX3NlY3Rpb247XHJcbiAgICAgICAgY29uc3QgaW5kZXhfZnVuY3Rpb25zID0gdGhpcy5mdW5jdGlvbnMubWFwKChfLGkpPT5lbmNvZGVJbnQzMihpKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtZXJnZV9idWZmZXJzKFtpZCwgbWFrZV9zaXplZF92ZWMoaW5kZXhfZnVuY3Rpb25zKV0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBGdW5jdGlvbkV4cG9ydCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZnVuYzogV2FzbUZ1bmN0aW9uLCBwdWJsaWMgZXhwb3J0SW5kZXg6IG51bWJlcil7fVxyXG5cclxuICAgIGVuY29kZSgpOiBVaW50OEFycmF5IHtcclxuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IGVuY29kZXIuZW5jb2RlKHRoaXMuZnVuYy5uYW1lKTtcclxuICAgICAgICBjb25zdCBuYW1lX3NpemUgPSBlbmNvZGVJbnQzMihuYW1lLmxlbmd0aCk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBlbmNvZGVJbnQzMih0aGlzLmV4cG9ydEluZGV4KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1lcmdlX2J1ZmZlcnMoW25hbWVfc2l6ZSwgbmFtZSwgVC5leHBvcnRfZnVuYywgaW5kZXhdKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgTWVtb3J5RXhwb3J0IHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBzdHJpbmcpe31cclxuICAgIGVuY29kZSgpOiBVaW50OEFycmF5IHtcclxuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IGVuY29kZXIuZW5jb2RlKHRoaXMubmFtZSk7XHJcbiAgICAgICAgY29uc3QgbmFtZV9zaXplID0gZW5jb2RlSW50MzIobmFtZS5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gZW5jb2RlSW50MzIoMCk7XHJcblxyXG4gICAgICAgIHJldHVybiBtZXJnZV9idWZmZXJzKFtuYW1lX3NpemUsIG5hbWUsIFQuZXhwb3J0X21lbSwgaW5kZXhdKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgRXhwb3J0U2VjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZXhwb3J0czogKEZ1bmN0aW9uRXhwb3J0IHwgTWVtb3J5RXhwb3J0KVtdKXt9XHJcblxyXG4gICAgZW5jb2RlKCk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGNvbnN0IGlkID0gVC5leHBvcnRfc2VjdGlvbjtcclxuICAgICAgICBjb25zdCBleHBvcnRzID0gdGhpcy5leHBvcnRzLm1hcChlPT5lLmVuY29kZSgpKTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBtZXJnZV9idWZmZXJzKFtpZCwgbWFrZV9zaXplZF92ZWMoZXhwb3J0cyldKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgQ29kZVNlY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGZ1bmN0aW9uczogV2FzbUZ1bmN0aW9uW10pe31cclxuXHJcbiAgICBlbmNvZGUoKTogVWludDhBcnJheSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBULmNvZGVfc2VjdGlvbjtcclxuICAgICAgICBjb25zdCBmdW5jcyA9IHRoaXMuZnVuY3Rpb25zLm1hcChmPT5mLmVuY29kZUNvZGUoKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG1lcmdlX2J1ZmZlcnMoW2lkLCBtYWtlX3NpemVkX3ZlYyhmdW5jcyldKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgTWVtb3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBtaW46IG51bWJlciwgcHVibGljIG1heDogbnVtYmVyIHwgdW5kZWZpbmVkKXt9XHJcblxyXG4gICAgZW5jb2RlKCk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGlmKHRoaXMubWF4ICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IGVuY29kZUludDMyKHRoaXMubWluKTtcclxuICAgICAgICAgICAgY29uc3QgbWF4ID0gZW5jb2RlSW50MzIodGhpcy5tYXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VfYnVmZmVycyhbVC5saW1pdF9taW5fbWF4LCBtaW4sIG1heF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IGVuY29kZUludDMyKHRoaXMubWluKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlX2J1ZmZlcnMoW1QubGltaXRfbWluLCBtaW5dKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE1lbW9yeVNlY3Rpb257XHJcbiAgICBlbmNvZGUoKTogVWludDhBcnJheSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBULm1lbW9yeV9zZWN0aW9uO1xyXG4gICAgICAgIGNvbnN0IG1lbSA9IG5ldyBNZW1vcnkoMSwgdW5kZWZpbmVkKS5lbmNvZGUoKVxyXG5cclxuICAgICAgICByZXR1cm4gbWVyZ2VfYnVmZmVycyhbaWQsIG1ha2Vfc2l6ZWRfdmVjKFttZW1dKV0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBEYXRhU2VjdGlvbntcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzdGF0aWNfZGF0YTogVWludDhBcnJheSl7fVxyXG5cclxuICAgIGVuY29kZSgpOiBVaW50OEFycmF5IHtcclxuICAgICAgICBjb25zdCBpZCA9IFQuZGF0YV9zZWN0aW9uO1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IGVuY29kZUludDMyKHRoaXMuc3RhdGljX2RhdGEubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gbWVyZ2VfYnVmZmVycyhbaWQsIGxlbiwgdGhpcy5zdGF0aWNfZGF0YV0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBEYXRhQ291bnRTZWN0aW9ue1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGRhdGFfY291bnQ6IG51bWJlcil7fVxyXG5cclxuICAgIGVuY29kZSgpOiBVaW50OEFycmF5IHtcclxuICAgICAgICBjb25zdCBpZCA9IFQuZGF0YV9jb3VudF9zZWN0aW9uO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVJbnQzMih0aGlzLmRhdGFfY291bnQpO1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IGVuY29kZUludDMyKGRhdGEubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gbWVyZ2VfYnVmZmVycyhbaWQsIGxlbiwgZGF0YV0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgV2FzbU91dHB1dCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZnVuY3M6IElSRnVuY3Rpb25bXSwgcHVibGljIGJ1aWx0aW5zOiBCdWlsdGluRnVuY3Rpb25bXSwgcHVibGljIGRhdGFfY291bnQ6IG51bWJlciwgcHVibGljIHN0YXRpY19kYXRhOiBVaW50OEFycmF5KXt9XHJcblxyXG4gICAgZW5jb2RlKCk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuXHJcbiAgICAgICAgY29uc3QgaGVhZGVyID0gZW5jb2Rlci5lbmNvZGUoXCJcXDBhc21cIik7XHJcbiAgICAgICAgY29uc3QgYmluYXJ5X3ZlcnNpb24gPSBuZXcgVWludDhBcnJheShuZXcgVWludDMyQXJyYXkoWzFdKS5idWZmZXIpO1xyXG4gICAgICAgIGxldCBmdW5jX21hcCA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XHJcbiAgICAgICAgdGhpcy5idWlsdGlucy5mb3JFYWNoKChmLGkpPT5mdW5jX21hcC5zZXQoZi5uYW1lLm5hbWUsIGkpKTtcclxuICAgICAgICB0aGlzLmZ1bmNzLmZvckVhY2goKGYsaSk9PmZ1bmNfbWFwLnNldChmLm5hbWUubmFtZSwgaSArIHRoaXMuYnVpbHRpbnMubGVuZ3RoKSk7XHJcbiAgICAgICAgY29uc3QgZnVuY3MgPSBbLi4udGhpcy5idWlsdGlucy5tYXAoYj0+Yi53YXNtKSwgLi4udGhpcy5mdW5jcy5tYXAoZj0+bWFrZV93YXNtX2Z1bmN0aW9uKGYsIGZ1bmNfbWFwKSldO1xyXG4gICAgICAgIGNvbnN0IHR5cGVfZGF0YSA9IG5ldyBUeXBlU2VjdGlvbihmdW5jcykuZW5jb2RlKCk7XHJcbiAgICAgICAgY29uc3QgZnVuY3Rpb25fZGF0YSA9IG5ldyBGdW5jdGlvblNlY3Rpb24oZnVuY3MpLmVuY29kZSgpO1xyXG4gICAgICAgIGNvbnN0IGV4cG9ydF9kYXRhID0gbmV3IEV4cG9ydFNlY3Rpb24oWy4uLmZ1bmNzLm1hcCgoZixpKT0+bmV3IEZ1bmN0aW9uRXhwb3J0KGYsIGkpKSwgbmV3IE1lbW9yeUV4cG9ydChcIm1lbW9yeVwiKV0pLmVuY29kZSgpO1xyXG4gICAgICAgIGNvbnN0IGNvZGVfZGF0YSA9IG5ldyBDb2RlU2VjdGlvbihmdW5jcykuZW5jb2RlKCk7XHJcbiAgICAgICAgY29uc3QgbWVtb3J5X2RhdGEgPSBuZXcgTWVtb3J5U2VjdGlvbigpLmVuY29kZSgpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRpY19kYXRhID0gbmV3IERhdGFTZWN0aW9uKHRoaXMuc3RhdGljX2RhdGEpLmVuY29kZSgpO1xyXG4gICAgICAgIGNvbnN0IGRhdGFfY291bnRfZGF0YSA9IG5ldyBEYXRhQ291bnRTZWN0aW9uKHRoaXMuZGF0YV9jb3VudCkuZW5jb2RlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBtZXJnZV9idWZmZXJzKFtoZWFkZXIsIGJpbmFyeV92ZXJzaW9uLCB0eXBlX2RhdGEsIGZ1bmN0aW9uX2RhdGEsIG1lbW9yeV9kYXRhLCBleHBvcnRfZGF0YSwgZGF0YV9jb3VudF9kYXRhLCBjb2RlX2RhdGEsIHN0YXRpY19kYXRhXSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBkZWNvZGVJbnQzMiwgZGVjb2RlVUludDMyIH0gZnJvbSBcIi4vbGViL2xlYlwiO1xyXG5pbXBvcnQgeyBXYXNtRnVuY3Rpb24gfSBmcm9tIFwiLi9jb2RlZ2VuXCJcclxuaW1wb3J0IHsgVCB9IGZyb20gXCIuL3ByaW1pdGl2ZVR5cGVzXCI7XHJcbmltcG9ydCB7IElkZW50aWZpZXIsIFR5cGUgfSBmcm9tIFwiLi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJ1aWx0aW5GdW5jdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogSWRlbnRpZmllciwgcHVibGljIHR5cGU6IFR5cGUsIHB1YmxpYyBhcmdzOiBUeXBlW10sIHB1YmxpYyB3YXNtOiBXYXNtRnVuY3Rpb24pe31cclxufVxyXG5cclxuY29uc3QgYnVpbHRpbnMgPSBbXHJcbiAgICB7bmFtZTogXCJzdGFja19hbGxvY1wiLCBhcmdzOiBbXCJpMzJcIl0sIHR5cGU6IFwiaTMyXCJ9LFxyXG4gICAge25hbWU6IFwicmVzZXRfYWxsb2NcIiwgYXJnczogW10sIHR5cGU6IFwidm9pZFwifSxcclxuICAgIHtuYW1lOiBcInNxdWFyZVwiLCBhcmdzOiBbXCJpMzJcIl0sIHR5cGU6IFwiaTMyXCJ9LFxyXG5dXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVjb21waWxlKHBhdGg6IHN0cmluZyk6IFByb21pc2U8e2Z1bmN0aW9uczogQnVpbHRpbkZ1bmN0aW9uW10sIGRhdGFfY291bnQ6IG51bWJlciwgc3RhdGljX2RhdGE6IFVpbnQ4QXJyYXl9PiB7XHJcbiAgICBjb25zdCBiaW4gPSBhd2FpdCAoYXdhaXQgZmV0Y2gocGF0aCkpLmFycmF5QnVmZmVyKCk7XHJcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShiaW4pO1xyXG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xyXG4gICAgY29uc3QgaGVhZGVyID0gZW5jb2Rlci5lbmNvZGUoXCJcXDBhc21cIik7XHJcblxyXG4gICAgY29uc3Qge3ZhbHVlOiBoZWFkZXJfbWF0Y2gsIG5leHRJbmRleDogdmVyc2lvbl9pZHh9ID0gbWF0Y2goYXJyLCAwLCBoZWFkZXIpO1xyXG4gICAgaWYoIWhlYWRlcl9tYXRjaCkgdGhyb3cgXCJiYWQgbWFnaWMgbnVtYmVyXCI7XHJcbiAgICBjb25zdCB3YXNtX3ZlcnNpb24gPSBuZXcgVWludDMyQXJyYXkoYXJyLmJ1ZmZlciwgNCwgNClbMF07XHJcbiAgICBjb25zdCB7dmFsdWU6IHR5cGVzLCBuZXh0SW5kZXg6IGltcG9ydF9pZHh9ID0gZGVjb21waWxlX3R5cGVzKGFyciwgOCk7XHJcbiAgICBjb25zdCB7bmV4dEluZGV4OiBmdW5jdGlvbl9pZHh9ID0gZGVjb21waWxlX2ltcG9ydHMoYXJyLCBpbXBvcnRfaWR4KTtcclxuICAgIGNvbnN0IHt2YWx1ZTogZnVuY19pZHMsIG5leHRJbmRleDogZGF0YWNvdW50X2lkeH0gPSBkZWNvbXBpbGVfZnVuY3Rpb25zKGFyciwgZnVuY3Rpb25faWR4KTtcclxuICAgIGNvbnN0IHtkYXRhY291bnQsIG5leHRJbmRleDogY29kZV9pZHh9ID0gZGVjb21waWxlX2RhdGFjb3VudChhcnIsIGRhdGFjb3VudF9pZHgpO1xyXG4gICAgY29uc3Qge2Z1bmN0aW9ucywgbmV4dEluZGV4OiBkYXRhX2lkeH0gPSBkZWNvbXBpbGVfY29kZShhcnIsIGNvZGVfaWR4KTtcclxuICAgIGNvbnN0IHt2YWx1ZTogZGF0YSwgbmV4dEluZGV4OiBffSA9IGRlY29tcGlsZV9kYXRhKGFyciwgZGF0YV9pZHgpO1xyXG4gICAgXHJcbiAgICBsZXQgd2FzbV9mdW5jdGlvbnMgPSBbXTtcclxuICAgIGlmKGZ1bmNfaWRzLmxlbmd0aCAhPSBmdW5jdGlvbnMubGVuZ3RoKXtcclxuICAgICAgICB0aHJvdyBcIm1pc21hdGNoZWQgZnVuY3Rpb24gaWRzXCI7XHJcbiAgICB9XHJcbiAgICBpZihmdW5jX2lkcy5sZW5ndGggIT0gYnVpbHRpbnMubGVuZ3RoKXtcclxuICAgICAgICB0aHJvdyBcIndyb25nIG51bWJlciBvZiBmdW5jdGlvbiBuYW1lc1wiO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGZ1bmNfaWRzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBjb25zdCBhcmdzID0gdHlwZXNbZnVuY19pZHNbaV1dLmFyZ3M7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVzW2Z1bmNfaWRzW2ldXS50eXBlO1xyXG4gICAgICAgIGNvbnN0IHdhc21fZnVuYyA9IG5ldyBXYXNtRnVuY3Rpb24oYnVpbHRpbnNbaV0ubmFtZSwgYXJncywgdHlwZSwgZnVuY3Rpb25zW2ldLmNvZGUsIGZ1bmN0aW9uc1tpXS5sb2NhbHMpO1xyXG4gICAgICAgIHdhc21fZnVuY3Rpb25zLnB1c2gobmV3IEJ1aWx0aW5GdW5jdGlvbihuZXcgSWRlbnRpZmllcihidWlsdGluc1tpXS5uYW1lKSwgYnVpbHRpbnNbaV0udHlwZSBhcyBUeXBlLCBidWlsdGluc1tpXS5hcmdzIGFzIFR5cGVbXSwgd2FzbV9mdW5jKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtmdW5jdGlvbnM6IHdhc21fZnVuY3Rpb25zLCBkYXRhX2NvdW50OiBkYXRhY291bnQsIHN0YXRpY19kYXRhOiBkYXRhfTtcclxufVxyXG5cclxuY2xhc3MgRnVuY1R5cGUge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGFyZ3M6IFVpbnQ4QXJyYXlbXSwgcHVibGljIHR5cGU6IFVpbnQ4QXJyYXkpe307XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlY29tcGlsZV9kYXRhKGFycjogVWludDhBcnJheSwgc3RhcnRfaWR4OiBudW1iZXIpOiB7dmFsdWU6IFVpbnQ4QXJyYXksIG5leHRJbmRleDogbnVtYmVyfSB7XHJcbiAgICBjb25zdCB7dmFsdWU6IGlkLCBuZXh0SW5kZXg6IHNpemVfaWR4fSA9IGRlY29kZUludDMyKGFyciwgc3RhcnRfaWR4KTtcclxuICAgIGlmKGlkICE9IDExKSB0aHJvdyBcIm5vdCBhIGRhdGEgc2VjdGlvblwiO1xyXG4gICAgXHJcbiAgICBjb25zdCB7dmFsdWU6IHNlY3Rpb25fc2l6ZSwgbmV4dEluZGV4OiBkYXRhX2lkeH0gPSBkZWNvZGVJbnQzMihhcnIsIHNpemVfaWR4KTtcclxuXHJcbiAgICByZXR1cm4ge3ZhbHVlOiBhcnIuc3ViYXJyYXkoZGF0YV9pZHgsIGRhdGFfaWR4ICsgc2VjdGlvbl9zaXplKSwgbmV4dEluZGV4OiBkYXRhX2lkeCArIHNlY3Rpb25fc2l6ZX07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hdGNoKGFycjogVWludDhBcnJheSwgc3RhcnRfaWR4OiBudW1iZXIsIGRlc3Q6IFVpbnQ4QXJyYXkpOiB7dmFsdWU6IGJvb2xlYW4sIG5leHRJbmRleDogbnVtYmVyfXtcclxuICAgIGlmKGFyci5sZW5ndGggPCBkZXN0Lmxlbmd0aCArIHN0YXJ0X2lkeCkgcmV0dXJuIHt2YWx1ZTogZmFsc2UsIG5leHRJbmRleDogc3RhcnRfaWR4ICsgZGVzdC5sZW5ndGh9O1xyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGRlc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGlmKGRlc3RbaV0gIT0gYXJyW2krIHN0YXJ0X2lkeF0pIHJldHVybiB7dmFsdWU6IGZhbHNlLCBuZXh0SW5kZXg6IHN0YXJ0X2lkeCArIGRlc3QubGVuZ3RofTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge3ZhbHVlOiB0cnVlLCBuZXh0SW5kZXg6IHN0YXJ0X2lkeCArIGRlc3QubGVuZ3RofVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNvbXBpbGVfbG9jYWxzKGFycjogVWludDhBcnJheSwgc3RhcnRfaWR4OiBudW1iZXIpIDoge2xvY2FsczogVWludDhBcnJheVtdLCBuZXh0SW5kZXg6IG51bWJlcn0ge1xyXG4gICAgY29uc3Qge3ZhbHVlOiBjb3VudCwgbmV4dEluZGV4OiBsb2NhbHNfc3RhcnR9ID0gZGVjb2RlSW50MzIoYXJyLCBzdGFydF9pZHgpO1xyXG5cclxuICAgIGxldCBsb2NhbHMgPSBbXTtcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKXtcclxuICAgICAgICBsb2NhbHMucHVzaChuZXcgVWludDhBcnJheShbYXJyW2xvY2Fsc19zdGFydCArIGldXSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7bG9jYWxzLCBuZXh0SW5kZXg6IGxvY2Fsc19zdGFydCArIGNvdW50fTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVjb21waWxlX2NvZGUoYXJyOiBVaW50OEFycmF5LCBzdGFydF9pZHg6IG51bWJlcikgOiB7ZnVuY3Rpb25zOiB7bG9jYWxzOiBVaW50OEFycmF5W10sIGNvZGU6IFVpbnQ4QXJyYXl9W10sIG5leHRJbmRleDogbnVtYmVyfSB7XHJcbiAgICBjb25zdCB7dmFsdWU6IGlkLCBuZXh0SW5kZXg6IHNpemVfaWR4fSA9IGRlY29kZUludDMyKGFyciwgc3RhcnRfaWR4KTtcclxuICAgIGlmKGlkICE9IDEwKSB0aHJvdyBcIm5vdCBhIGNvZGUgc2VjdGlvblwiO1xyXG4gICAgY29uc3Qge3ZhbHVlOiBzZWN0aW9uX3NpemUsIG5leHRJbmRleDogY29kZV92ZWNfaWR4fSA9IGRlY29kZUludDMyKGFyciwgc2l6ZV9pZHgpO1xyXG4gICAgY29uc3Qge3ZhbHVlOiBjb2RlX2NvdW50LCBuZXh0SW5kZXg6IHZlY19zdGFydF9pZHh9ID0gZGVjb2RlSW50MzIoYXJyLCBjb2RlX3ZlY19pZHgpO1xyXG4gICAgXHJcbiAgICBcclxuICAgIGxldCBmdW5jcyA9IFtdO1xyXG4gICAgbGV0IG5leHRfdmVjX2lkeCA9IHZlY19zdGFydF9pZHg7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgY29kZV9jb3VudDsgaSsrKXtcclxuICAgICAgICBjb25zdCB7dmFsdWU6IGNvZGVfbGVuLCBuZXh0SW5kZXg6IGxvY2Fsc19zdGFydH0gPSBkZWNvZGVVSW50MzIoYXJyLCBuZXh0X3ZlY19pZHgpO1xyXG4gICAgICAgIGNvbnN0IHtsb2NhbHM6IGxvY2FscywgbmV4dEluZGV4OiBjb2RlX3N0YXJ0fSA9IGRlY29tcGlsZV9sb2NhbHMoYXJyLCBsb2NhbHNfc3RhcnQpO1xyXG4gICAgICAgIGZ1bmNzLnB1c2goe2xvY2FscywgY29kZTogYXJyLnN1YmFycmF5KGNvZGVfc3RhcnQsIGNvZGVfc3RhcnQgKyBjb2RlX2xlbiAtIGxvY2Fscy5sZW5ndGggLSAxKX0pO1xyXG4gICAgICAgIG5leHRfdmVjX2lkeCA9IGxvY2Fsc19zdGFydCArIGNvZGVfbGVuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7ZnVuY3Rpb25zOiBmdW5jcywgbmV4dEluZGV4OiBzZWN0aW9uX3NpemUgKyBjb2RlX3ZlY19pZHh9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNvbXBpbGVfZGF0YWNvdW50KGFycjogVWludDhBcnJheSwgc3RhcnRfaWR4OiBudW1iZXIpIDoge2RhdGFjb3VudDogbnVtYmVyLCBuZXh0SW5kZXg6IG51bWJlcn0ge1xyXG4gICAgY29uc3Qge3ZhbHVlOiBpZCwgbmV4dEluZGV4OiBzaXplX2lkeH0gPSBkZWNvZGVJbnQzMihhcnIsIHN0YXJ0X2lkeCk7XHJcbiAgICBpZihpZCAhPSAxMikgcmV0dXJuIHtkYXRhY291bnQ6IC0xLCBuZXh0SW5kZXg6IHN0YXJ0X2lkeH07XHJcbiAgICBjb25zdCB7dmFsdWU6IHNlY3Rpb25fc2l6ZSwgbmV4dEluZGV4OiBkYXRhY291bnRfaWR4fSA9IGRlY29kZUludDMyKGFyciwgc2l6ZV9pZHgpO1xyXG4gICAgY29uc3Qge3ZhbHVlOiBkYXRhY291bnQsIG5leHRJbmRleDogZW5kX2lkeH0gPSBkZWNvZGVJbnQzMihhcnIsIGRhdGFjb3VudF9pZHgpO1xyXG4gICAgcmV0dXJuIHtkYXRhY291bnQ6IGRhdGFjb3VudCwgbmV4dEluZGV4OiBlbmRfaWR4fTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVjb21waWxlX2ltcG9ydHMoYXJyOiBVaW50OEFycmF5LCBzdGFydF9pZHg6IG51bWJlcikgOiB7bmV4dEluZGV4OiBudW1iZXJ9IHtcclxuICAgIGNvbnN0IHt2YWx1ZTogaWQsIG5leHRJbmRleDogbGVuZ3RoX2lkeH0gPSBkZWNvZGVJbnQzMihhcnIsIHN0YXJ0X2lkeCk7XHJcbiAgICBpZihpZCAhPSAyKSB0aHJvdyBcIm5vdCBhIGltcG9ydCBzZWN0aW9uXCI7XHJcbiAgICBjb25zdCB7dmFsdWU6IGxlbmd0aCwgbmV4dEluZGV4OiBpZHh9ID0gZGVjb2RlSW50MzIoYXJyLCBsZW5ndGhfaWR4KTtcclxuICAgIGNvbnN0IGVuZF9pZHggPSBsZW5ndGggKyBpZHg7XHJcbiAgICByZXR1cm4ge25leHRJbmRleDogZW5kX2lkeH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlY29tcGlsZV9mdW5jdGlvbnMoYXJyOiBVaW50OEFycmF5LCBzdGFydF9pZHg6IG51bWJlcikgOiB7dmFsdWU6IG51bWJlcltdLCBuZXh0SW5kZXg6IG51bWJlcn0ge1xyXG4gICAgY29uc3Qge3ZhbHVlOiBpZCwgbmV4dEluZGV4OiBsZW5ndGhfaWR4fSA9IGRlY29kZUludDMyKGFyciwgc3RhcnRfaWR4KTtcclxuICAgIGlmKGlkICE9IDMpIHRocm93IFwibm90IGEgZnVuY3Rpb24gc2VjdGlvblwiO1xyXG4gICAgY29uc3Qge3ZhbHVlOiBsZW5ndGgsIG5leHRJbmRleDogaWR4fSA9IGRlY29kZUludDMyKGFyciwgbGVuZ3RoX2lkeCk7XHJcbiAgICBjb25zdCBlbmRfaWR4ID0gbGVuZ3RoICsgaWR4O1xyXG4gICAgY29uc3Qge3ZhbHVlOiBmdW5jX2NvdW50LCBuZXh0SW5kZXg6IHZlY19zdGFydF9pZHh9ID0gZGVjb2RlSW50MzIoYXJyLCBpZHgpO1xyXG5cclxuICAgIGxldCBmdW5jX2lkcyA9IFtdO1xyXG4gICAgbGV0IG5leHRfdmVjX2lkeCA9IHZlY19zdGFydF9pZHg7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgZnVuY19jb3VudDsgaSsrKXtcclxuICAgICAgICBjb25zdCB7dmFsdWU6IGlkLCBuZXh0SW5kZXg6IG5leHRfaWR4fSA9IGRlY29kZVVJbnQzMihhcnIsIG5leHRfdmVjX2lkeCk7XHJcbiAgICAgICAgbmV4dF92ZWNfaWR4ID0gbmV4dF9pZHg7XHJcbiAgICAgICAgZnVuY19pZHMucHVzaChpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHt2YWx1ZTogZnVuY19pZHMsIG5leHRJbmRleDogZW5kX2lkeH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlY29tcGlsZV90eXBlcyhhcnI6IFVpbnQ4QXJyYXksIHN0YXJ0X2lkeDogbnVtYmVyKToge3ZhbHVlOiBGdW5jVHlwZVtdLCBuZXh0SW5kZXg6IG51bWJlcn17XHJcbiAgICBjb25zdCB7dmFsdWU6IGlkLCBuZXh0SW5kZXg6IGxlbmd0aF9pZHh9ID0gZGVjb2RlSW50MzIoYXJyLCBzdGFydF9pZHgpO1xyXG4gICAgaWYoaWQgIT0gMSkgdGhyb3cgXCJub3QgYSB0eXBlIHNlY3Rpb25cIjtcclxuICAgIGNvbnN0IHt2YWx1ZTogbGVuZ3RoLCBuZXh0SW5kZXg6IGlkeH0gPSBkZWNvZGVJbnQzMihhcnIsIGxlbmd0aF9pZHgpO1xyXG4gICAgY29uc3QgZW5kX2lkeCA9IGlkeCArIGxlbmd0aDtcclxuICAgIGNvbnN0IHt2YWx1ZTogdHlwZV9jb3VudCwgbmV4dEluZGV4OiB2ZWNfc3RhcnRfaWR4fSA9IGRlY29kZUludDMyKGFyciwgaWR4KTtcclxuXHJcbiAgICBsZXQgdHlwZXMgPSBbXTtcclxuICAgIGxldCBuZXh0X3ZlY19pZHggPSB2ZWNfc3RhcnRfaWR4O1xyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHR5cGVfY291bnQ7IGkrKyl7XHJcbiAgICAgICAgY29uc3Qge3ZhbHVlOiB0eXBlLCBuZXh0SW5kZXg6IG5leHRfaWR4fSA9IGRlY29tcGlsZV90eXBlKGFyciwgbmV4dF92ZWNfaWR4KTtcclxuICAgICAgICBuZXh0X3ZlY19pZHggPSBuZXh0X2lkeDtcclxuICAgICAgICB0eXBlcy5wdXNoKHR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7dmFsdWU6IHR5cGVzLCBuZXh0SW5kZXg6IGVuZF9pZHh9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNvZGVfdHlwZShhcnI6IFVpbnQ4QXJyYXksIHN0YXJ0X2lkeDogbnVtYmVyKTogVWludDhBcnJheSB7XHJcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW2FycltzdGFydF9pZHhdXSk7XHJcbiAgICAvLyBpZihtYXRjaChhcnIsIHN0YXJ0X2lkeCwgVC5pMzIpLnZhbHVlKSByZXR1cm4gXCJpMzJcIjtcclxuICAgIC8vIGlmKG1hdGNoKGFyciwgc3RhcnRfaWR4LCBULmk2NCkudmFsdWUpIHJldHVybiBcImk2NFwiO1xyXG4gICAgLy8gaWYobWF0Y2goYXJyLCBzdGFydF9pZHgsIFQuZjMyKS52YWx1ZSkgcmV0dXJuIFwiZjMyXCI7XHJcbiAgICAvLyBpZihtYXRjaChhcnIsIHN0YXJ0X2lkeCwgVC5mNjQpLnZhbHVlKSByZXR1cm4gXCJmNjRcIjtcclxuICAgIC8vIHRocm93IFwidW5leHBlY3RlZCB0eXBlXCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlY29tcGlsZV90eXBlKGFycjogVWludDhBcnJheSwgc3RhcnRfaWR4OiBudW1iZXIpOiB7dmFsdWU6IEZ1bmNUeXBlLCBuZXh0SW5kZXg6IG51bWJlcn0ge1xyXG4gICAgY29uc3Qge3ZhbHVlOiBpc19mdW5jLCBuZXh0SW5kZXg6IGlucHV0c19pZHh9ID0gbWF0Y2goYXJyLCBzdGFydF9pZHgsIFQuZnVuYyk7XHJcbiAgICBpZighaXNfZnVuYykgdGhyb3cgXCJvbmx5IGZ1bmN0aW9uIHR5cGVzIGFsbG93ZWRcIjtcclxuICAgIFxyXG4gICAgY29uc3Qge3ZhbHVlOiBudW1faW5wdXRzLCBuZXh0SW5kZXg6IGlucHV0X3ZlY19pZHh9ID0gZGVjb2RlSW50MzIoYXJyLCBpbnB1dHNfaWR4KTtcclxuICAgIGxldCBhcmdzID0gW107XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbnVtX2lucHV0czsgaSsrKXtcclxuICAgICAgICBhcmdzLnB1c2goZGVjb2RlX3R5cGUoYXJyLCBpbnB1dF92ZWNfaWR4ICsgaSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHt2YWx1ZTogbnVtX291dHB1cywgbmV4dEluZGV4OiBvdXRwdXRfdmVjX2lkeH0gPSBkZWNvZGVJbnQzMihhcnIsIGlucHV0X3ZlY19pZHggKyBudW1faW5wdXRzKTtcclxuICAgIGlmKG51bV9vdXRwdXMgPiAxKSB0aHJvdyBcInRvbyBtYW55IG91dHB1dHNcIjtcclxuICAgIGxldCByZXR1cm5fdHlwZXMgPSBbXTtcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBudW1fb3V0cHVzOyBpKyspe1xyXG4gICAgICAgIHJldHVybl90eXBlcy5wdXNoKGRlY29kZV90eXBlKGFyciwgb3V0cHV0X3ZlY19pZHggKyBpKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGxldCByZXR1cm5fdHlwZSA9IHJldHVybl90eXBlcy5sZW5ndGggPyByZXR1cm5fdHlwZXNbMF0gOiBuZXcgVWludDhBcnJheSgwKTtcclxuICAgIHJldHVybiB7dmFsdWU6IG5ldyBGdW5jVHlwZShhcmdzLCByZXR1cm5fdHlwZSksIG5leHRJbmRleDogb3V0cHV0X3ZlY19pZHggKyBudW1fb3V0cHVzfTtcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgMjAxMiBUaGUgT2J2aW91cyBDb3Jwb3JhdGlvbi5cblxuLypcbiAqIGxlYjogTEVCMTI4IHV0aWxpdGllcy5cbiAqL1xuXG5cbi8qXG4gKiBNb2R1bGVzIHVzZWRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGJpdHMgPSByZXF1aXJlKFwiLi9iaXRzXCIpO1xudmFyIGJ1ZnMgPSByZXF1aXJlKFwiLi9idWZzXCIpO1xuXG5cbi8qXG4gKiBNb2R1bGUgdmFyaWFibGVzXG4gKi9cblxuLyoqIFRoZSBtaW5pbXVtIHBvc3NpYmxlIDMyLWJpdCBzaWduZWQgaW50LiAqL1xudmFyIE1JTl9JTlQzMiA9IC0weDgwMDAwMDAwO1xuXG4vKiogVGhlIG1heGltdW0gcG9zc2libGUgMzItYml0IHNpZ25lZCBpbnQuICovXG52YXIgTUFYX0lOVDMyID0gMHg3ZmZmZmZmZjtcblxuLyoqIFRoZSBtYXhpbXVtIHBvc3NpYmxlIDMyLWJpdCB1bnNpZ25lZCBpbnQuICovXG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8qKiBUaGUgbWluaW11bSBwb3NzaWJsZSA2NC1iaXQgc2lnbmVkIGludC4gKi9cbnZhciBNSU5fSU5UNjQgPSAtMHg4MDAwMDAwMDAwMDAwMDAwO1xuXG4vKipcbiAqIFRoZSBtYXhpbXVtIHBvc3NpYmxlIDY0LWJpdCBzaWduZWQgaW50IHRoYXQgaXMgcmVwcmVzZW50YWJsZSBhcyBhXG4gKiBKYXZhU2NyaXB0IG51bWJlci5cbiAqL1xudmFyIE1BWF9JTlQ2NCA9IDB4N2ZmZmZmZmZmZmZmZmMwMDtcblxuLyoqXG4gKiBUaGUgbWF4aW11bSBwb3NzaWJsZSA2NC1iaXQgdW5zaWduZWQgaW50IHRoYXQgaXMgcmVwcmVzZW50YWJsZSBhcyBhXG4gKiBKYXZhU2NyaXB0IG51bWJlci5cbiAqL1xudmFyIE1BWF9VSU5UNjQgPSAweGZmZmZmZmZmZmZmZmY4MDA7XG5cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnNcbiAqL1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIG51bWJlciBvZiBiaXRzIHJlcXVpcmVkIHRvIGVuY29kZSB0aGUgbnVtYmVyXG4gKiByZXByZXNlbnRlZCBpbiB0aGUgZ2l2ZW4gYnVmZmVyIGFzIGEgc2lnbmVkIHZhbHVlLiBUaGUgYnVmZmVyIGlzXG4gKiB0YWtlbiB0byByZXByZXNlbnQgYSBzaWduZWQgbnVtYmVyIGluIGxpdHRsZS1lbmRpYW4gZm9ybS5cbiAqXG4gKiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gZW5jb2RlIGlzIHRoZSAoemVyby1iYXNlZCkgYml0IG51bWJlciBvZiB0aGVcbiAqIGhpZ2hlc3Qtb3JkZXIgbm9uLXNpZ24tbWF0Y2hpbmcgYml0LCBwbHVzIHR3by4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAxMTExMTAxMSAwMTExMDEwMVxuICogICBoaWdoICAgICAgICAgIGxvd1xuICpcbiAqIFRoZSBzaWduIGJpdCBoZXJlIGlzIDEgKHRoYXQgaXMsIGl0J3MgYSBuZWdhdGl2ZSBudW1iZXIpLiBUaGUgaGlnaGVzdFxuICogYml0IG51bWJlciB0aGF0IGRvZXNuJ3QgbWF0Y2ggdGhlIHNpZ24gaXMgYml0ICMxMCAod2hlcmUgdGhlIGxvd2VzdC1vcmRlclxuICogYml0IGlzIGJpdCAjMCkuIFNvLCB3ZSBoYXZlIHRvIGVuY29kZSBhdCBsZWFzdCAxMiBiaXRzIHRvdGFsLlxuICpcbiAqIEFzIGEgc3BlY2lhbCBkZWdlbmVyYXRlIGNhc2UsIHRoZSBudW1iZXJzIDAgYW5kIC0xIGVhY2ggcmVxdWlyZSBqdXN0IG9uZSBiaXQuXG4gKi9cbmZ1bmN0aW9uIHNpZ25lZEJpdENvdW50KGJ1ZmZlcjogVWludDhBcnJheSk6IG51bWJlciB7XG4gIHJldHVybiBiaXRzLmhpZ2hPcmRlcihiaXRzLmdldFNpZ24oYnVmZmVyKV4xLCBidWZmZXIpICsgMjtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBudW1iZXIgb2YgYml0cyByZXF1aXJlZCB0byBlbmNvZGUgdGhlIG51bWJlclxuICogcmVwcmVzZW50ZWQgaW4gdGhlIGdpdmVuIGJ1ZmZlciBhcyBhbiB1bnNpZ25lZCB2YWx1ZS4gVGhlIGJ1ZmZlciBpc1xuICogdGFrZW4gdG8gcmVwcmVzZW50IGFuIHVuc2lnbmVkIG51bWJlciBpbiBsaXR0bGUtZW5kaWFuIGZvcm0uXG4gKlxuICogVGhlIG51bWJlciBvZiBiaXRzIHRvIGVuY29kZSBpcyB0aGUgKHplcm8tYmFzZWQpIGJpdCBudW1iZXIgb2YgdGhlXG4gKiBoaWdoZXN0LW9yZGVyIDEgYml0LCBwbHVzIG9uZS4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAwMDAxMTAwMCAwMTAxMDAxMVxuICogICBoaWdoICAgICAgICAgIGxvd1xuICpcbiAqIFRoZSBoaWdoZXN0LW9yZGVyIDEgYml0IGhlcmUgaXMgYml0ICMxMiAod2hlcmUgdGhlIGxvd2VzdC1vcmRlciBiaXRcbiAqIGlzIGJpdCAjMCkuIFNvLCB3ZSBoYXZlIHRvIGVuY29kZSBhdCBsZWFzdCAxMyBiaXRzIHRvdGFsLlxuICpcbiAqIEFzIGEgc3BlY2lhbCBkZWdlbmVyYXRlIGNhc2UsIHRoZSBudW1iZXIgMCByZXF1aXJlcyAxIGJpdC5cbiAqL1xuZnVuY3Rpb24gdW5zaWduZWRCaXRDb3VudChidWZmZXI6IFVpbnQ4QXJyYXkpOiBudW1iZXIge1xuICB2YXIgcmVzdWx0ID0gYml0cy5oaWdoT3JkZXIoMSwgYnVmZmVyKSArIDE7XG4gIHJldHVybiByZXN1bHQgPyByZXN1bHQgOiAxO1xufVxuXG4vKipcbiAqIENvbW1vbiBlbmNvZGVyIGZvciBib3RoIHNpZ25lZCBhbmQgdW5zaWduZWQgaW50cy4gVGhpcyB0YWtlcyBhXG4gKiBiaWdpbnQtaXNoIGJ1ZmZlciwgcmV0dXJuaW5nIGFuIExFQjEyOC1lbmNvZGVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQnVmZmVyQ29tbW9uKGJ1ZmZlcjogVWludDhBcnJheSwgc2lnbmVkOiBib29sZWFuKTogVWludDhBcnJheSB7XG4gIHZhciBzaWduQml0O1xuICB2YXIgYml0Q291bnQ7XG5cbiAgaWYgKHNpZ25lZCkge1xuICAgIHNpZ25CaXQgPSBiaXRzLmdldFNpZ24oYnVmZmVyKTtcbiAgICBiaXRDb3VudCA9IHNpZ25lZEJpdENvdW50KGJ1ZmZlcik7XG4gIH0gZWxzZSB7XG4gICAgc2lnbkJpdCA9IDA7XG4gICAgYml0Q291bnQgPSB1bnNpZ25lZEJpdENvdW50KGJ1ZmZlcik7XG4gIH1cblxuICB2YXIgYnl0ZUNvdW50ID0gTWF0aC5jZWlsKGJpdENvdW50IC8gNyk7XG4gIHZhciByZXN1bHQgPSBidWZzLmFsbG9jKGJ5dGVDb3VudCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlQ291bnQ7IGkrKykge1xuICAgIHZhciBwYXlsb2FkID0gYml0cy5leHRyYWN0KGJ1ZmZlciwgaSAqIDcsIDcsIHNpZ25CaXQpO1xuICAgIHJlc3VsdFtpXSA9IHBheWxvYWQgfCAweDgwO1xuICB9XG5cbiAgLy8gTWFzayBvZmYgdGhlIHRvcCBiaXQgb2YgdGhlIGxhc3QgYnl0ZSwgdG8gaW5kaWNhdGUgdGhlIGVuZCBvZiB0aGVcbiAgLy8gZW5jb2RpbmcuXG4gIHJlc3VsdFtieXRlQ291bnQgLSAxXSAmPSAweDdmO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGJ5dGUtbGVuZ3RoIG9mIHRoZSB2YWx1ZSBlbmNvZGVkIGluIHRoZSBnaXZlbiBidWZmZXIgYXRcbiAqIHRoZSBnaXZlbiBpbmRleC5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlZExlbmd0aChlbmNvZGVkQnVmZmVyOiBVaW50OEFycmF5LCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgdmFyIHJlc3VsdCA9IDA7XG5cbiAgd2hpbGUgKGVuY29kZWRCdWZmZXJbaW5kZXggKyByZXN1bHRdID49IDB4ODApIHtcbiAgICByZXN1bHQrKztcbiAgfVxuXG4gIHJlc3VsdCsrOyAvLyB0byBhY2NvdW50IGZvciB0aGUgbGFzdCBieXRlXG5cbiAgaWYgKChpbmRleCArIHJlc3VsdCkgPiBlbmNvZGVkQnVmZmVyLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkJvZ3VzIGVuY29kaW5nXCIpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb21tb24gZGVjb2RlciBmb3IgYm90aCBzaWduZWQgYW5kIHVuc2lnbmVkIGludHMuIFRoaXMgdGFrZXMgYW5cbiAqIExFQjEyOC1lbmNvZGVkIGJ1ZmZlciwgcmV0dXJuaW5nIGEgYmlnaW50LWlzaCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZUJ1ZmZlckNvbW1vbihlbmNvZGVkQnVmZmVyOiBVaW50OEFycmF5LCBpbmRleDogbnVtYmVyLCBzaWduZWQ6IGJvb2xlYW4pOiB7dmFsdWU6IG51bWJlciwgbmV4dEluZGV4OiBudW1iZXJ9IHtcbiAgaW5kZXggPSAoaW5kZXggPT09IHVuZGVmaW5lZCkgPyAwOiBpbmRleDtcblxuICB2YXIgbGVuZ3RoID0gZW5jb2RlZExlbmd0aChlbmNvZGVkQnVmZmVyLCBpbmRleCk7XG4gIHZhciBiaXRMZW5ndGggPSBsZW5ndGggKiA3O1xuICB2YXIgYnl0ZUxlbmd0aCA9IE1hdGguY2VpbChiaXRMZW5ndGggLyA4KTtcbiAgdmFyIHJlc3VsdCA9IGJ1ZnMuYWxsb2MoYnl0ZUxlbmd0aCk7XG4gIHZhciBvdXRJbmRleCA9IDA7XG5cbiAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICBiaXRzLmluamVjdChyZXN1bHQsIG91dEluZGV4LCA3LCBlbmNvZGVkQnVmZmVyW2luZGV4XSk7XG4gICAgb3V0SW5kZXggKz0gNztcbiAgICBpbmRleCsrO1xuICAgIGxlbmd0aC0tO1xuICB9XG5cbiAgdmFyIHNpZ25CaXQ7XG4gIHZhciBzaWduQnl0ZTtcblxuICBpZiAoc2lnbmVkKSB7XG4gICAgLy8gU2lnbi1leHRlbmQgdGhlIGxhc3QgYnl0ZS5cbiAgICB2YXIgbGFzdEJ5dGUgPSByZXN1bHRbYnl0ZUxlbmd0aCAtIDFdO1xuICAgIHZhciBlbmRCaXQgPSBvdXRJbmRleCAlIDg7XG4gICAgaWYgKGVuZEJpdCAhPT0gMCkge1xuICAgICAgdmFyIHNoaWZ0ID0gMzIgLSBlbmRCaXQ7IC8vIDMyIGJlY2F1c2UgSlMgYml0IG9wcyB3b3JrIG9uIDMyLWJpdCBpbnRzLlxuICAgICAgbGFzdEJ5dGUgPSByZXN1bHRbYnl0ZUxlbmd0aCAtIDFdID0gKChsYXN0Qnl0ZSA8PCBzaGlmdCkgPj4gc2hpZnQpICYgMHhmZjtcbiAgICB9XG4gICAgc2lnbkJpdCA9IGxhc3RCeXRlID4+IDc7XG4gICAgc2lnbkJ5dGUgPSBzaWduQml0ICogMHhmZjtcbiAgfSBlbHNlIHtcbiAgICBzaWduQml0ID0gMDtcbiAgICBzaWduQnl0ZSA9IDA7XG4gIH1cblxuICAvLyBTbGljZSBvZmYgYW55IHN1cGVyZmx1b3VzIGJ5dGVzLCB0aGF0IGlzLCBvbmVzIHRoYXQgYWRkIG5vIG1lYW5pbmdmdWxcbiAgLy8gYml0cyAoYmVjYXVzZSB0aGUgdmFsdWUgd291bGQgYmUgdGhlIHNhbWUgaWYgdGhleSB3ZXJlIHJlbW92ZWQpLlxuICB3aGlsZSAoKGJ5dGVMZW5ndGggPiAxKSAmJlxuICAgICAgICAgKHJlc3VsdFtieXRlTGVuZ3RoIC0gMV0gPT09IHNpZ25CeXRlKSAmJlxuICAgICAgICAgKCFzaWduZWQgfHwgKChyZXN1bHRbYnl0ZUxlbmd0aCAtIDJdID4+IDcpID09PSBzaWduQml0KSkpIHtcbiAgICBieXRlTGVuZ3RoLS07XG4gIH1cbiAgcmVzdWx0ID0gYnVmcy5yZXNpemUocmVzdWx0LCBieXRlTGVuZ3RoKTtcblxuICByZXR1cm4geyB2YWx1ZTogcmVzdWx0LCBuZXh0SW5kZXg6IGluZGV4IH07XG59XG5cblxuLypcbiAqIEV4cG9ydGVkIGJpbmRpbmdzXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlSW50QnVmZmVyKGJ1ZmZlcjogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkge1xuICByZXR1cm4gZW5jb2RlQnVmZmVyQ29tbW9uKGJ1ZmZlciwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZUludEJ1ZmZlcihlbmNvZGVkQnVmZmVyOiBVaW50OEFycmF5LCBpbmRleDogbnVtYmVyKToge3ZhbHVlOiBudW1iZXIsIG5leHRJbmRleDogbnVtYmVyfSB7XG4gIHJldHVybiBkZWNvZGVCdWZmZXJDb21tb24oZW5jb2RlZEJ1ZmZlciwgaW5kZXgsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlSW50MzIobnVtOiBudW1iZXIpOiBVaW50OEFycmF5IHtcbiAgaWYobnVtID49IDAgJiYgbnVtIDwgMTI4KSByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW251bV0pO1xuICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShuZXcgSW50MzJBcnJheShbbnVtXSkuYnVmZmVyKTtcblxuICB2YXIgcmVzdWx0ID0gZW5jb2RlSW50QnVmZmVyKGJ1Zik7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUludDMyKGVuY29kZWRCdWZmZXI6IFVpbnQ4QXJyYXksIGluZGV4OiBudW1iZXIpOiB7dmFsdWU6IG51bWJlciwgbmV4dEluZGV4OiBudW1iZXJ9IHtcbiAgdmFyIHJlc3VsdCA9IGRlY29kZUludEJ1ZmZlcihlbmNvZGVkQnVmZmVyLCBpbmRleCk7XG4gIHZhciBwYXJzZWQgPSBidWZzLnJlYWRJbnQocmVzdWx0LnZhbHVlKTtcbiAgdmFyIHZhbHVlID0gcGFyc2VkLnZhbHVlO1xuXG4gIGJ1ZnMuZnJlZShyZXN1bHQudmFsdWUpO1xuXG4gIGlmICgodmFsdWUgPCBNSU5fSU5UMzIpIHx8ICh2YWx1ZSA+IE1BWF9JTlQzMikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXN1bHQgb3V0IG9mIHJhbmdlXCIpO1xuICB9XG5cbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBuZXh0SW5kZXg6IHJlc3VsdC5uZXh0SW5kZXggfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUludDY0KG51bTogbnVtYmVyKTogVWludDhBcnJheSB7XG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KG5ldyBCaWdJbnQ2NEFycmF5KFtCaWdJbnQobnVtKV0pLmJ1ZmZlcik7XG5cbiAgdmFyIHJlc3VsdCA9IGVuY29kZUludEJ1ZmZlcihidWYpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVJbnQ2NChlbmNvZGVkQnVmZmVyOiBVaW50OEFycmF5LCBpbmRleDogbnVtYmVyKToge3ZhbHVlOiBudW1iZXIsIG5leHRJbmRleDogbnVtYmVyLCBsb3NzeTogYm9vbGVhbn0ge1xuICB2YXIgcmVzdWx0ID0gZGVjb2RlSW50QnVmZmVyKGVuY29kZWRCdWZmZXIsIGluZGV4KTtcbiAgdmFyIHBhcnNlZCA9IGJ1ZnMucmVhZEludChyZXN1bHQudmFsdWUpO1xuICB2YXIgdmFsdWUgPSBwYXJzZWQudmFsdWU7XG5cbiAgYnVmcy5mcmVlKHJlc3VsdC52YWx1ZSk7XG5cbiAgaWYgKCh2YWx1ZSA8IE1JTl9JTlQ2NCkgfHwgKHZhbHVlID4gTUFYX0lOVDY0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlc3VsdCBvdXQgb2YgcmFuZ2VcIik7XG4gIH1cblxuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIG5leHRJbmRleDogcmVzdWx0Lm5leHRJbmRleCwgbG9zc3k6IHBhcnNlZC5sb3NzeSB9O1xufVxuXG5mdW5jdGlvbiBlbmNvZGVVSW50QnVmZmVyKGJ1ZmZlcjogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkge1xuICByZXR1cm4gZW5jb2RlQnVmZmVyQ29tbW9uKGJ1ZmZlciwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVVSW50QnVmZmVyKGVuY29kZWRCdWZmZXI6IFVpbnQ4QXJyYXksIGluZGV4OiBudW1iZXIpOiB7dmFsdWU6IG51bWJlciwgbmV4dEluZGV4OiBudW1iZXJ9IHtcbiAgcmV0dXJuIGRlY29kZUJ1ZmZlckNvbW1vbihlbmNvZGVkQnVmZmVyLCBpbmRleCwgZmFsc2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVUludDMyKG51bTogbnVtYmVyKTogVWludDhBcnJheSB7XG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KG5ldyBVaW50MzJBcnJheShbbnVtXSkuYnVmZmVyKTtcblxuICB2YXIgcmVzdWx0ID0gZW5jb2RlVUludEJ1ZmZlcihidWYpO1xuXG4gIGJ1ZnMuZnJlZShidWYpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlVUludDMyKGVuY29kZWRCdWZmZXI6IFVpbnQ4QXJyYXksIGluZGV4OiBudW1iZXIpOiB7dmFsdWU6IG51bWJlciwgbmV4dEluZGV4OiBudW1iZXJ9IHtcbiAgdmFyIHJlc3VsdCA9IGRlY29kZVVJbnRCdWZmZXIoZW5jb2RlZEJ1ZmZlciwgaW5kZXgpO1xuICB2YXIgcGFyc2VkID0gYnVmcy5yZWFkVUludChyZXN1bHQudmFsdWUpO1xuICB2YXIgdmFsdWUgPSBwYXJzZWQudmFsdWU7XG5cbiAgYnVmcy5mcmVlKHJlc3VsdC52YWx1ZSk7XG5cbiAgaWYgKHZhbHVlID4gTUFYX1VJTlQzMikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlc3VsdCBvdXQgb2YgcmFuZ2VcIik7XG4gIH1cblxuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIG5leHRJbmRleDogcmVzdWx0Lm5leHRJbmRleCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVUludDY0KG51bTogbnVtYmVyKTogVWludDhBcnJheSB7XG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KG5ldyBCaWdVaW50NjRBcnJheShbQmlnSW50KG51bSldKS5idWZmZXIpO1xuXG4gIHZhciByZXN1bHQgPSBlbmNvZGVVSW50QnVmZmVyKGJ1Zik7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVVJbnQ2NChlbmNvZGVkQnVmZmVyOiBVaW50OEFycmF5LCBpbmRleDogbnVtYmVyKToge3ZhbHVlOiBudW1iZXIsIG5leHRJbmRleDogbnVtYmVyLCBsb3NzeTogYm9vbGVhbn0ge1xuICB2YXIgcmVzdWx0ID0gZGVjb2RlVUludEJ1ZmZlcihlbmNvZGVkQnVmZmVyLCBpbmRleCk7XG4gIHZhciBwYXJzZWQgPSBidWZzLnJlYWRVSW50KHJlc3VsdC52YWx1ZSk7XG4gIHZhciB2YWx1ZSA9IHBhcnNlZC52YWx1ZTtcblxuICBidWZzLmZyZWUocmVzdWx0LnZhbHVlKTtcblxuICBpZiAodmFsdWUgPiBNQVhfVUlOVDY0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUmVzdWx0IG91dCBvZiByYW5nZVwiKTtcbiAgfVxuXG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgbmV4dEluZGV4OiByZXN1bHQubmV4dEluZGV4LCBsb3NzeTogcGFyc2VkLmxvc3N5IH07XG59IiwiaW1wb3J0IHsgVHlwZSB9IGZyb20gXCIuLi90eXBlXCI7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIFQge1xyXG4gICAgZXhwb3J0IGNvbnN0IHR5cGVfc2VjdGlvbiA9IG5ldyBVaW50OEFycmF5KFsweDAxXSk7XHJcbiAgICBleHBvcnQgY29uc3QgaW1wb3J0X3NlY3Rpb24gPSBuZXcgVWludDhBcnJheShbMHgwMl0pO1xyXG4gICAgZXhwb3J0IGNvbnN0IGZ1bmN0aW9uX3NlY3Rpb24gPSBuZXcgVWludDhBcnJheShbMHgwM10pO1xyXG4gICAgZXhwb3J0IGNvbnN0IHRhYmxlX3NlY3Rpb24gPSBuZXcgVWludDhBcnJheShbMHgwNF0pO1xyXG4gICAgZXhwb3J0IGNvbnN0IG1lbW9yeV9zZWN0aW9uID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDVdKTtcclxuICAgIGV4cG9ydCBjb25zdCBnbG9iYWxfc2VjdGlvbiA9IG5ldyBVaW50OEFycmF5KFsweDA2XSk7XHJcbiAgICBleHBvcnQgY29uc3QgZXhwb3J0X3NlY3Rpb24gPSBuZXcgVWludDhBcnJheShbMHgwN10pO1xyXG4gICAgZXhwb3J0IGNvbnN0IHN0YXJ0X3NlY3Rpb24gPSBuZXcgVWludDhBcnJheShbMHgwOF0pO1xyXG4gICAgZXhwb3J0IGNvbnN0IGVsZW1lbnRfc2VjdGlvbiA9IG5ldyBVaW50OEFycmF5KFsweDA5XSk7XHJcbiAgICBleHBvcnQgY29uc3QgY29kZV9zZWN0aW9uID0gbmV3IFVpbnQ4QXJyYXkoWzB4MGFdKTtcclxuICAgIGV4cG9ydCBjb25zdCBkYXRhX3NlY3Rpb24gPSBuZXcgVWludDhBcnJheShbMHgwYl0pO1xyXG4gICAgZXhwb3J0IGNvbnN0IGRhdGFfY291bnRfc2VjdGlvbiA9IG5ldyBVaW50OEFycmF5KFsweDBjXSk7XHJcbiAgICBleHBvcnQgY29uc3QgZnVuYyA9IG5ldyBVaW50OEFycmF5KFsweDYwXSk7XHJcbiAgICBleHBvcnQgY29uc3QgaTMyID0gbmV3IFVpbnQ4QXJyYXkoWzB4N2ZdKTtcclxuICAgIGV4cG9ydCBjb25zdCBpNjQgPSBuZXcgVWludDhBcnJheShbMHg3ZV0pO1xyXG4gICAgZXhwb3J0IGNvbnN0IGYzMiA9IG5ldyBVaW50OEFycmF5KFsweDdkXSk7XHJcbiAgICBleHBvcnQgY29uc3QgZjY0ID0gbmV3IFVpbnQ4QXJyYXkoWzB4N2NdKTtcclxuICAgIGV4cG9ydCBjb25zdCBleHBvcnRfZnVuYyA9IG5ldyBVaW50OEFycmF5KFsweDAwXSk7XHJcbiAgICBleHBvcnQgY29uc3QgZXhwb3J0X3RhYmxlID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDFdKTtcclxuICAgIGV4cG9ydCBjb25zdCBleHBvcnRfbWVtID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDJdKTtcclxuICAgIGV4cG9ydCBjb25zdCBleHBvcnRfZ2xvYmFsID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDNdKTtcclxuICAgIGV4cG9ydCBjb25zdCBsaW1pdF9taW4gPSBuZXcgVWludDhBcnJheShbMHgwMF0pO1xyXG4gICAgZXhwb3J0IGNvbnN0IGxpbWl0X21pbl9tYXggPSBuZXcgVWludDhBcnJheShbMHgwMV0pO1xyXG4gICAgZXhwb3J0IGNvbnN0IGJyYW5jaF9pZl9lbHNlID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDRdKTtcclxuICAgIGV4cG9ydCBjb25zdCBicmFuY2hfZWxzZSA9IG5ldyBVaW50OEFycmF5KFsweDA1XSk7XHJcbiAgICBleHBvcnQgY29uc3QgYnJhbmNoX2VuZCA9IG5ldyBVaW50OEFycmF5KFsweDBCXSk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFByaW1pdGl2ZVR5cGUgPSBVaW50OEFycmF5O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldF9wcmltaXRpdmVfdHlwZSh0OiBUeXBlKTogUHJpbWl0aXZlVHlwZSB7XHJcbiAgICBpZih0ID09IFwidm9pZFwiKSB0aHJvdyBcInZvaWQgaGFzIG5vIHByaW1pdGl2ZSB0eXBlXCJcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgXCJpMzJcIjogVC5pMzIsXHJcbiAgICAgICAgXCJpNjRcIjogVC5pNjQsXHJcbiAgICAgICAgXCJmMzJcIjogVC5mMzIsXHJcbiAgICAgICAgXCJmNjRcIjogVC5mNjQsXHJcbiAgICAgICAgXCJib29sXCI6IFQuaTMyLFxyXG4gICAgfVt0XVxyXG59IiwiaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4vcGFyc2UvcGFyc2VyXCJcclxuaW1wb3J0IHsgV2FzbU91dHB1dCB9IGZyb20gXCIuL2NvZGVnZW4vY29kZWdlblwiXHJcbmltcG9ydCB7IElSUmVwcmVzZW50YXRpb24gfSBmcm9tIFwiLi9hbnlsYXNpcy9JUlJlcHJlc2VudGF0aW9uXCI7XHJcbmltcG9ydCB7IFR5cGVkUHJvZ3JhbSB9IGZyb20gXCIuL2FueWxhc2lzL1R5cGVkRnVuY3Rpb25cIjtcclxuaW1wb3J0IHsgQnVpbHRpbkZ1bmN0aW9uIH0gZnJvbSBcIi4vY29kZWdlbi9kZWNvbXBpbGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb21waWxlciB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGJ1aWx0aW5zOiBCdWlsdGluRnVuY3Rpb25bXSwgcHVibGljIGRhdGFfY291bnQ6IG51bWJlciwgcHVibGljIHN0YXRpY19kYXRhOiBVaW50OEFycmF5KXt9O1xyXG4gICAgcHVibGljIGNvbXBpbGUoaW5wdXQ6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBQYXJzZXIoKS5wYXJzZShpbnB1dCk7XHJcbiAgICAgICAgY29uc3QgdHlwZWQgPSBuZXcgVHlwZWRQcm9ncmFtKHBhcnNlZCwgdGhpcy5idWlsdGlucyk7XHJcbiAgICAgICAgY29uc3QgSVIgPSBuZXcgSVJSZXByZXNlbnRhdGlvbih0eXBlZCk7XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gbmV3IFdhc21PdXRwdXQoSVIuZnVuY3MsIHRoaXMuYnVpbHRpbnMsIHRoaXMuZGF0YV9jb3VudCwgdGhpcy5zdGF0aWNfZGF0YSkuZW5jb2RlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY29uc3QgaTMyID0ge1xyXG4gICAgY29uc3Q6IG5ldyBVaW50OEFycmF5KFsweDQxXSksXHJcbiAgICBsb2FkOiBuZXcgVWludDhBcnJheShbMHgyOF0pLFxyXG4gICAgc3RvcmU6IG5ldyBVaW50OEFycmF5KFsweDM2XSksXHJcbiAgICBlcXo6IG5ldyBVaW50OEFycmF5KFsweDQ1XSksXHJcbiAgICBlcTogbmV3IFVpbnQ4QXJyYXkoWzB4NDZdKSxcclxuICAgIG5lOiBuZXcgVWludDhBcnJheShbMHg0N10pLFxyXG4gICAgbHRfczogbmV3IFVpbnQ4QXJyYXkoWzB4NDhdKSxcclxuICAgIGx0X3U6IG5ldyBVaW50OEFycmF5KFsweDQ5XSksXHJcbiAgICBndF9zOiBuZXcgVWludDhBcnJheShbMHg0QV0pLFxyXG4gICAgZ3RfdTogbmV3IFVpbnQ4QXJyYXkoWzB4NEJdKSxcclxuICAgIGxlX3M6IG5ldyBVaW50OEFycmF5KFsweDRDXSksXHJcbiAgICBsZV91OiBuZXcgVWludDhBcnJheShbMHg0RF0pLFxyXG4gICAgZ2VfczogbmV3IFVpbnQ4QXJyYXkoWzB4NEVdKSxcclxuICAgIGdlX3U6IG5ldyBVaW50OEFycmF5KFsweDRGXSksXHJcbiAgICBjbHo6IG5ldyBVaW50OEFycmF5KFsweDY3XSksXHJcbiAgICBjdHo6IG5ldyBVaW50OEFycmF5KFsweDY4XSksXHJcbiAgICBwb3BjbnQ6IG5ldyBVaW50OEFycmF5KFsweDY5XSksXHJcbiAgICBhZGQ6IG5ldyBVaW50OEFycmF5KFsweDZBXSksXHJcbiAgICBzdWI6IG5ldyBVaW50OEFycmF5KFsweDZCXSksXHJcbiAgICBtdWw6IG5ldyBVaW50OEFycmF5KFsweDZDXSksXHJcbiAgICBkaXZfczogbmV3IFVpbnQ4QXJyYXkoWzB4NkRdKSxcclxuICAgIGRpdl91OiBuZXcgVWludDhBcnJheShbMHg2RV0pLFxyXG4gICAgcmVtX3M6IG5ldyBVaW50OEFycmF5KFsweDZGXSksXHJcbiAgICByZW1fdTogbmV3IFVpbnQ4QXJyYXkoWzB4NzBdKSxcclxuICAgIGFuZDogbmV3IFVpbnQ4QXJyYXkoWzB4NzFdKSxcclxuICAgIG9yOiBuZXcgVWludDhBcnJheShbMHg3Ml0pLFxyXG4gICAgeG9yOiBuZXcgVWludDhBcnJheShbMHg3M10pLFxyXG4gICAgc2hsOiBuZXcgVWludDhBcnJheShbMHg3NF0pLFxyXG4gICAgc2hyX3M6IG5ldyBVaW50OEFycmF5KFsweDc1XSksXHJcbiAgICBzaHJfdTogbmV3IFVpbnQ4QXJyYXkoWzB4NzZdKSxcclxuICAgIHJvdGw6IG5ldyBVaW50OEFycmF5KFsweDc3XSksXHJcbiAgICByb3RyOiBuZXcgVWludDhBcnJheShbMHg3OF0pLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaTY0ID0ge1xyXG4gICAgY29uc3Q6IG5ldyBVaW50OEFycmF5KFsweDQxXSksXHJcbiAgICBsb2FkOiBuZXcgVWludDhBcnJheShbMHgyOF0pLFxyXG4gICAgc3RvcmU6IG5ldyBVaW50OEFycmF5KFsweDM2XSksXHJcbiAgICBlcXo6IG5ldyBVaW50OEFycmF5KFsweDUwXSksXHJcbiAgICBlcTogbmV3IFVpbnQ4QXJyYXkoWzB4NTFdKSxcclxuICAgIG5lOiBuZXcgVWludDhBcnJheShbMHg1Ml0pLFxyXG4gICAgbHRfczogbmV3IFVpbnQ4QXJyYXkoWzB4NTNdKSxcclxuICAgIGx0X3U6IG5ldyBVaW50OEFycmF5KFsweDU0XSksXHJcbiAgICBndF9zOiBuZXcgVWludDhBcnJheShbMHg1NV0pLFxyXG4gICAgZ3RfdTogbmV3IFVpbnQ4QXJyYXkoWzB4NTZdKSxcclxuICAgIGxlX3M6IG5ldyBVaW50OEFycmF5KFsweDU3XSksXHJcbiAgICBsZV91OiBuZXcgVWludDhBcnJheShbMHg1OF0pLFxyXG4gICAgZ2VfczogbmV3IFVpbnQ4QXJyYXkoWzB4NTldKSxcclxuICAgIGdlX3U6IG5ldyBVaW50OEFycmF5KFsweDVBXSksXHJcbiAgICBjbHo6IG5ldyBVaW50OEFycmF5KFsweDc5XSksXHJcbiAgICBjdHo6IG5ldyBVaW50OEFycmF5KFsweDdBXSksXHJcbiAgICBwb3BjbnQ6IG5ldyBVaW50OEFycmF5KFsweDdCXSksXHJcbiAgICBhZGQ6IG5ldyBVaW50OEFycmF5KFsweDdDXSksXHJcbiAgICBzdWI6IG5ldyBVaW50OEFycmF5KFsweDdEXSksXHJcbiAgICBtdWw6IG5ldyBVaW50OEFycmF5KFsweDdFXSksXHJcbiAgICBkaXZfczogbmV3IFVpbnQ4QXJyYXkoWzB4N0ZdKSxcclxuICAgIGRpdl91OiBuZXcgVWludDhBcnJheShbMHg4MF0pLFxyXG4gICAgcmVtX3M6IG5ldyBVaW50OEFycmF5KFsweDgxXSksXHJcbiAgICByZW1fdTogbmV3IFVpbnQ4QXJyYXkoWzB4ODJdKSxcclxuICAgIGFuZDogbmV3IFVpbnQ4QXJyYXkoWzB4ODNdKSxcclxuICAgIG9yOiBuZXcgVWludDhBcnJheShbMHg4NF0pLFxyXG4gICAgeG9yOiBuZXcgVWludDhBcnJheShbMHg4NV0pLFxyXG4gICAgc2hsOiBuZXcgVWludDhBcnJheShbMHg4Nl0pLFxyXG4gICAgc2hyX3M6IG5ldyBVaW50OEFycmF5KFsweDg3XSksXHJcbiAgICBzaHJfdTogbmV3IFVpbnQ4QXJyYXkoWzB4ODhdKSxcclxuICAgIHJvdGw6IG5ldyBVaW50OEFycmF5KFsweDg5XSksXHJcbiAgICByb3RyOiBuZXcgVWludDhBcnJheShbMHg4QV0pLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZjMyID0ge1xyXG4gICAgY29uc3Q6IG5ldyBVaW50OEFycmF5KFsweDQzXSksXHJcbiAgICBlcTogbmV3IFVpbnQ4QXJyYXkoWzB4NUJdKSxcclxuICAgIG5lOiBuZXcgVWludDhBcnJheShbMHg1Q10pLFxyXG4gICAgbHQ6IG5ldyBVaW50OEFycmF5KFsweDVEXSksXHJcbiAgICBndDogbmV3IFVpbnQ4QXJyYXkoWzB4NUVdKSxcclxuICAgIGxlOiBuZXcgVWludDhBcnJheShbMHg1Rl0pLFxyXG4gICAgZ2U6IG5ldyBVaW50OEFycmF5KFsweDYwXSksXHJcbiAgICBhYnM6IG5ldyBVaW50OEFycmF5KFsweDhCXSksXHJcbiAgICBuZWc6IG5ldyBVaW50OEFycmF5KFsweDhDXSksXHJcbiAgICBjZWlsOiBuZXcgVWludDhBcnJheShbMHg4RF0pLFxyXG4gICAgZmxvb3I6IG5ldyBVaW50OEFycmF5KFsweDhFXSksXHJcbiAgICB0cnVuYzogbmV3IFVpbnQ4QXJyYXkoWzB4OEZdKSxcclxuICAgIG5lYXJlc3Q6IG5ldyBVaW50OEFycmF5KFsweDkwXSksXHJcbiAgICBzcXJ0OiBuZXcgVWludDhBcnJheShbMHg5MV0pLFxyXG4gICAgYWRkOiBuZXcgVWludDhBcnJheShbMHg5Ml0pLFxyXG4gICAgc3ViOiBuZXcgVWludDhBcnJheShbMHg5M10pLFxyXG4gICAgbXVsOiBuZXcgVWludDhBcnJheShbMHg5NF0pLFxyXG4gICAgZGl2OiBuZXcgVWludDhBcnJheShbMHg5NV0pLFxyXG4gICAgbWluOiBuZXcgVWludDhBcnJheShbMHg5Nl0pLFxyXG4gICAgbWF4OiBuZXcgVWludDhBcnJheShbMHg5N10pLFxyXG4gICAgY29weXNpZ246IG5ldyBVaW50OEFycmF5KFsweDk4XSksXHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGY2NCA9IHtcclxuICAgIGNvbnN0OiBuZXcgVWludDhBcnJheShbMHg0NF0pLFxyXG4gICAgZXE6IG5ldyBVaW50OEFycmF5KFsweDYxXSksXHJcbiAgICBuZTogbmV3IFVpbnQ4QXJyYXkoWzB4NjJdKSxcclxuICAgIGx0OiBuZXcgVWludDhBcnJheShbMHg2M10pLFxyXG4gICAgZ3Q6IG5ldyBVaW50OEFycmF5KFsweDY0XSksXHJcbiAgICBsZTogbmV3IFVpbnQ4QXJyYXkoWzB4NjVdKSxcclxuICAgIGdlOiBuZXcgVWludDhBcnJheShbMHg2Nl0pLFxyXG4gICAgYWJzOiBuZXcgVWludDhBcnJheShbMHg5OV0pLFxyXG4gICAgbmVnOiBuZXcgVWludDhBcnJheShbMHg5QV0pLFxyXG4gICAgY2VpbDogbmV3IFVpbnQ4QXJyYXkoWzB4OUJdKSxcclxuICAgIGZsb29yOiBuZXcgVWludDhBcnJheShbMHg5Q10pLFxyXG4gICAgdHJ1bmM6IG5ldyBVaW50OEFycmF5KFsweDlEXSksXHJcbiAgICBuZWFyZXN0OiBuZXcgVWludDhBcnJheShbMHg5RV0pLFxyXG4gICAgc3FydDogbmV3IFVpbnQ4QXJyYXkoWzB4OUZdKSxcclxuICAgIGFkZDogbmV3IFVpbnQ4QXJyYXkoWzB4QTBdKSxcclxuICAgIHN1YjogbmV3IFVpbnQ4QXJyYXkoWzB4QTFdKSxcclxuICAgIG11bDogbmV3IFVpbnQ4QXJyYXkoWzB4QTJdKSxcclxuICAgIGRpdjogbmV3IFVpbnQ4QXJyYXkoWzB4QTNdKSxcclxuICAgIG1pbjogbmV3IFVpbnQ4QXJyYXkoWzB4QTRdKSxcclxuICAgIG1heDogbmV3IFVpbnQ4QXJyYXkoWzB4QTVdKSxcclxuICAgIGNvcHlzaWduOiBuZXcgVWludDhBcnJheShbMHhBNl0pLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbWVtb3J5ID0ge1xyXG4gICAgZ3JvdzogbmV3IFVpbnQ4QXJyYXkoWzB4NDAsIDB4MDBdKSxcclxuICAgIHNpemU6IG5ldyBVaW50OEFycmF5KFsweDNmLCAweDAwXSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGxvY2FsID0ge1xyXG4gICAgZ2V0OiBuZXcgVWludDhBcnJheShbMHgyMF0pLFxyXG4gICAgc2V0OiBuZXcgVWludDhBcnJheShbMHgyMV0pLFxyXG4gICAgdGVlOiBuZXcgVWludDhBcnJheShbMHgyMl0pXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnbG9iYWwgPSB7XHJcbiAgICBnZXQ6IG5ldyBVaW50OEFycmF5KFsweDIzXSksXHJcbiAgICBzZXQ6IG5ldyBVaW50OEFycmF5KFsweDI0XSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNhbGwgPSBuZXcgVWludDhBcnJheShbMHgxMF0pO1xyXG5leHBvcnQgY29uc3QgY2FsbF9pbmRlcmVjdCA9IG5ldyBVaW50OEFycmF5KFsweDExXSk7XHJcbmV4cG9ydCBjb25zdCBkcm9wID0gbmV3IFVpbnQ4QXJyYXkoWzB4MUFdKTtcclxuZXhwb3J0IGNvbnN0IHNlbGVjdCA9IG5ldyBVaW50OEFycmF5KFsweDFCXSk7XHJcbmV4cG9ydCBjb25zdCBfcmV0dXJuID0gbmV3IFVpbnQ4QXJyYXkoWzB4MGZdKTtcclxuZXhwb3J0IGNvbnN0IGVuZF9mdW5jID0gbmV3IFVpbnQ4QXJyYXkoWzB4MGJdKTtcclxuIiwiaW1wb3J0IHsgUGFyc2VyQ29udGV4dCB9IGZyb20gXCIuL3BhcnNlckNvbnRleHRcIjtcclxuaW1wb3J0IHsgUGFyc2VyRnVuY3Rpb24sIHBhcnNlX3N0YXRlbWVudCwgU3RhdGVtZW50IH0gZnJvbSBcIi4vc3RhdG1lbnRcIjtcclxuaW1wb3J0IHsgSWRlbnRpZmllciwgQXJndW1lbnQgfSBmcm9tIFwiLi4vdHlwZVwiO1xyXG5pbXBvcnQgTGF5b3V0TGFuZ1BhcnNlciAgZnJvbSBcIi4vcGFyc2UvTGF5b3V0TGFuZ1BhcnNlclwiO1xyXG5leHBvcnQgY2xhc3MgQ29uc3RhbnR7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsOiBudW1iZXIpe31cclxufVxyXG5leHBvcnQgdHlwZSBPcGVyYXRpb24gPSBcIipcIiB8IFwiL1wiIHwgXCIrXCIgfCBcIi1cIiB8IFwiJVwiIHwgXCI8XCIgfCBcIj5cIiB8IFwiPD1cIiB8IFwiPj1cIiB8IFwiJiZcIiB8IFwifHxcIiB8IFwiPT1cIiB8IFwiIT1cIjtcclxuZXhwb3J0IG5hbWVzcGFjZSBPUCB7XHJcbiAgICBleHBvcnQgY29uc3Qgb3BlcmF0aW9ucyA9IFtcIipcIiwgXCIvXCIsIFwiK1wiLCBcIi1cIiwgXCIlXCIsIFwiPFwiLCBcIj5cIiwgXCI8PVwiLCBcIj49XCIsIFwiJiZcIiwgXCJ8fFwiLFwiPT1cIiwgXCIhPVwiXTtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBmcm9tKHN0cjogc3RyaW5nKTogT3BlcmF0aW9uIHtcclxuICAgICAgICBpZighb3BlcmF0aW9ucy5maW5kKHM9PnM9PXN0cikpe1xyXG4gICAgICAgICAgICB0aHJvdyBgb3BlcmF0aW9uICR7c3RyfSBub3QgcmVjb2duaXplZGA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHIgYXMgT3BlcmF0aW9uO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmluYXJ5T3Age1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGxlZnQ6IEV4cHJlc3Npb24sIHB1YmxpYyBvcDogT3BlcmF0aW9uLCBwdWJsaWMgcmlnaHQ6IEV4cHJlc3Npb24pe31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uQ2FsbHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBJZGVudGlmaWVyLCBwdWJsaWMgYXJnczogRXhwcmVzc2lvbltdKXt9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSWZFeHByZXNzaW9ue1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHByZWQ6IEV4cHJlc3Npb24sIHB1YmxpYyB0aGVuX2JvZHk6IFN0YXRlbWVudFtdLCBwdWJsaWMgZWxzZV9ib2R5OiBTdGF0ZW1lbnRbXSl7fTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgRXhwcmVzc2lvbiA9IEJpbmFyeU9wIHwgQ29uc3RhbnQgfCBJZGVudGlmaWVyIHwgRnVuY3Rpb25DYWxsIHwgSWZFeHByZXNzaW9uO1xyXG5cclxuZnVuY3Rpb24gcGFyc2VfYXJnKGN0eDogYW55KXtcclxuICAgIHJldHVybiBuZXcgQXJndW1lbnQobmV3IElkZW50aWZpZXIoY3R4Lm5hbWUudGV4dCksIGN0eC50eXBlX2RlY2wuZ2V0VGV4dCgpKTtcclxufVxyXG5mdW5jdGlvbiBwYXJzZV9ib2R5KGN0eDogTGF5b3V0TGFuZ1BhcnNlcik6IFN0YXRlbWVudFtde1xyXG4gICAgaWYoIShjdHggaW5zdGFuY2VvZiBMYXlvdXRMYW5nUGFyc2VyLkZ1bmNCb2R5Q29udGV4dCkpIHRocm93IFwiRXhwZWN0ZWQgRnVuY3Rpb25Cb2R5XCI7XHJcbiAgICByZXR1cm4gY3R4LnN0YXRlbWVudHMubWFwKHBhcnNlX3N0YXRlbWVudCk7XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VfYXJncyhjdHg6IExheW91dExhbmdQYXJzZXIpOiBBcmd1bWVudFtdIHtcclxuICAgIGlmKCEoY3R4IGluc3RhbmNlb2YgTGF5b3V0TGFuZ1BhcnNlci5BcmdzQ29udGV4dCkpIHRocm93IFwiRXhwZWN0ZWQgQXJnc1wiO1xyXG4gICAgcmV0dXJuIGN0eC5hcmdMaXN0Lm1hcChwYXJzZV9hcmcpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZV9mdW5jdGlvbihjdHg6IExheW91dExhbmdQYXJzZXIpOiBQYXJzZXJGdW5jdGlvbntcclxuICAgIGlmKCEoY3R4IGluc3RhbmNlb2YgTGF5b3V0TGFuZ1BhcnNlci5GdW5jQ29udGV4dCkpIHRocm93IFwiRXhwZWN0ZWQgRnVuY3Rpb25Db250ZXh0XCI7XHJcbiAgICByZXR1cm4gbmV3IFBhcnNlckZ1bmN0aW9uKG5ldyBJZGVudGlmaWVyKGN0eC5uYW1lLnRleHQpLCBwYXJzZV9hcmdzKGN0eC5hcmd1bWVudHMpICwgY3R4LnR5cGVfZGVjbC5nZXRUZXh0KCksIHBhcnNlX2JvZHkoY3R4LmZ1bmNfYm9keSkpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlX2V4cHJlc3Npb24oY3R4OiBQYXJzZXJDb250ZXh0KTogRXhwcmVzc2lvbiB7XHJcbiAgICBpZihjdHggaW5zdGFuY2VvZiBMYXlvdXRMYW5nUGFyc2VyLkludGVnZXJDb250ZXh0KXtcclxuICAgICAgICByZXR1cm4gbmV3IENvbnN0YW50KHBhcnNlSW50KGN0eC5nZXRUZXh0KCkpKTtcclxuICAgIH0gZWxzZSBpZihjdHggaW5zdGFuY2VvZiBMYXlvdXRMYW5nUGFyc2VyLklkZW50aWZpZXJDb250ZXh0KXtcclxuICAgICAgICByZXR1cm4gbmV3IElkZW50aWZpZXIoY3R4LmdldFRleHQoKSk7XHJcbiAgICB9IGVsc2UgaWYoY3R4IGluc3RhbmNlb2YgTGF5b3V0TGFuZ1BhcnNlci5QYXJlbkV4cHJDb250ZXh0KXtcclxuICAgICAgICByZXR1cm4gcGFyc2VfZXhwcmVzc2lvbihjdHguY2hpbGRyZW5bMV0pO1xyXG4gICAgfSBlbHNlIGlmKGN0eCBpbnN0YW5jZW9mIExheW91dExhbmdQYXJzZXIuRnVuY0NhbGxDb250ZXh0KXtcclxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uQ2FsbChuZXcgSWRlbnRpZmllcihjdHgubmFtZS50ZXh0KSwgY3R4LmFyZ0xpc3QuYXJnTGlzdC5tYXAocGFyc2VfZXhwcmVzc2lvbikpO1xyXG4gICAgfSBlbHNlIGlmKGN0eCBpbnN0YW5jZW9mIExheW91dExhbmdQYXJzZXIuSWZFeHByQ29udGV4dCl7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJZkV4cHJlc3Npb24ocGFyc2VfZXhwcmVzc2lvbihjdHgucHJlZCksIHBhcnNlX2JvZHkoY3R4LnRoZW5fYm9keSksIHBhcnNlX2JvZHkoY3R4LmVsc2VfYm9keSkpO1xyXG4gICAgfSBlbHNlIGlmKGN0eCBpbnN0YW5jZW9mIExheW91dExhbmdQYXJzZXIuRXhwckNvbnRleHQpe1xyXG4gICAgICAgIGlmKGN0eC5jaGlsZHJlbi5sZW5ndGggPT0gMyl7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBwYXJzZV9leHByZXNzaW9uKGN0eC5jaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wID0gT1AuZnJvbShjdHguY2hpbGRyZW5bMV0uZ2V0VGV4dCgpKTtcclxuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBwYXJzZV9leHByZXNzaW9uKGN0eC5jaGlsZHJlblsyXSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQmluYXJ5T3AobGVmdCwgb3AsIHJpZ2h0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VfZXhwcmVzc2lvbihjdHguY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgXCJ1bnJlY29nbml6ZWQgZXhwcmVzc2lvbiBmb3JtXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgKiBhcyBhbnRsciBmcm9tICdhbnRscjQnO1xyXG5pbXBvcnQgTGF5b3V0TGFuZ0xleGVyIGZyb20gXCIuL3BhcnNlL0xheW91dExhbmdMZXhlclwiO1xyXG5pbXBvcnQgTGF5b3V0TGFuZ1BhcnNlciBmcm9tIFwiLi9wYXJzZS9MYXlvdXRMYW5nUGFyc2VyXCI7XHJcbmltcG9ydCB7cGFyc2VfZnVuY3Rpb259IGZyb20gXCIuL2V4cHJlc3Npb25cIlxyXG5pbXBvcnQge1BhcnNlckZ1bmN0aW9ufSBmcm9tIFwiLi9zdGF0bWVudFwiXHJcblxyXG5leHBvcnQgY2xhc3MgUGFyc2VyIHtcclxuICAgIGZ1bmNzOiBQYXJzZXJGdW5jdGlvbltdO1xyXG4gICAgcHVibGljIHBhcnNlKGlucHV0OiBzdHJpbmcpOiBQYXJzZXJGdW5jdGlvbltdIHsgXHJcbiAgICAgICAgdGhpcy5mdW5jcyA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCBjaGFycyA9IG5ldyBhbnRsci5JbnB1dFN0cmVhbShpbnB1dCk7XHJcbiAgICAgICAgY29uc3QgbGV4ZXIgPSBuZXcgTGF5b3V0TGFuZ0xleGVyKGNoYXJzKSBhcyBhbnk7XHJcbiAgICAgICAgY29uc3QgdG9rZW5zID0gbmV3IGFudGxyLkNvbW1vblRva2VuU3RyZWFtKGxleGVyKTtcclxuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgTGF5b3V0TGFuZ1BhcnNlcih0b2tlbnMpIGFzIGFueTtcclxuICAgICAgICBwYXJzZXIuYnVpbGRQYXJzZVRyZWVzID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB0cmVlID0gcGFyc2VyLmJvZHkoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRyZWUuZnVuY3Rpb25zLm1hcChwYXJzZV9mdW5jdGlvbik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBFeHByZXNzaW9uLCBwYXJzZV9leHByZXNzaW9ufSBmcm9tIFwiLi9leHByZXNzaW9uXCI7XHJcbmltcG9ydCB7IElkZW50aWZpZXIsIEFyZ3VtZW50LCBUeXBlIH0gZnJvbSBcIi4uL3R5cGVcIjtcclxuaW1wb3J0IExheW91dExhbmdQYXJzZXIgZnJvbSBcIi4vcGFyc2UvTGF5b3V0TGFuZ1BhcnNlclwiXHJcblxyXG5leHBvcnQgY2xhc3MgUmV0dXJuU3RhdGVtZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBleHByOiBFeHByZXNzaW9uKXt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMZXRTdGF0bWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogSWRlbnRpZmllciwgcHVibGljIGV4cHI6IEV4cHJlc3Npb24pe31cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU3RhdGVtZW50ID0gUmV0dXJuU3RhdGVtZW50IHwgTGV0U3RhdG1lbnQ7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFyc2VyRnVuY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IElkZW50aWZpZXIsIHB1YmxpYyBhcmdzOiBBcmd1bWVudFtdLCBwdWJsaWMgcmV0dXJuX3R5cGU6IFR5cGUsIHB1YmxpYyBib2R5OiBTdGF0ZW1lbnRbXSl7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZV9sZXRfc3RhdGVtZW50KGN0eDogTGF5b3V0TGFuZ1BhcnNlcik6IExldFN0YXRtZW50e1xyXG4gICAgY29uc3QgW18xLCBuYW1lLCBfMiwgZXhwciwgXzNdID0gKGN0eCBhcyBhbnkpLmNoaWxkcmVuO1xyXG4gICAgcmV0dXJuIG5ldyBMZXRTdGF0bWVudChuZXcgSWRlbnRpZmllcihuYW1lLmdldFRleHQoKSksIHBhcnNlX2V4cHJlc3Npb24oZXhwcikpO1xyXG59XHJcbmZ1bmN0aW9uIHBhcnNlX3JldHVybl9zdGF0ZW1lbnQoY3R4OiBMYXlvdXRMYW5nUGFyc2VyKTogUmV0dXJuU3RhdGVtZW50e1xyXG4gICAgY29uc3QgW18xLCBleHByLCBfMl0gPSAoY3R4IGFzIGFueSkuY2hpbGRyZW47XHJcbiAgICByZXR1cm4gbmV3IFJldHVyblN0YXRlbWVudChwYXJzZV9leHByZXNzaW9uKGV4cHIpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlX3N0YXRlbWVudChjdHg6IExheW91dExhbmdQYXJzZXIpOiBTdGF0ZW1lbnQge1xyXG4gICAgaWYoIShjdHggaW5zdGFuY2VvZiBMYXlvdXRMYW5nUGFyc2VyLlN0YXRlbWVudENvbnRleHQpKSB0aHJvdyBcIkV4cGVjdGVkIFN0YXRtZW50XCI7XHJcblxyXG4gICAgbGV0IHN0YXRlbWVudCA9IChjdHggYXMgYW55KS5jaGlsZHJlblswXTtcclxuXHJcbiAgICBpZihzdGF0ZW1lbnQgaW5zdGFuY2VvZiBMYXlvdXRMYW5nUGFyc2VyLlJldHVyblN0YXRlbWVudENvbnRleHQpe1xyXG4gICAgICAgIHJldHVybiBwYXJzZV9yZXR1cm5fc3RhdGVtZW50KHN0YXRlbWVudCBhcyBhbnkpO1xyXG4gICAgfSBlbHNlIGlmKHN0YXRlbWVudCBpbnN0YW5jZW9mIExheW91dExhbmdQYXJzZXIuTGV0U3RhdGVtZW50Q29udGV4dCl7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlX2xldF9zdGF0ZW1lbnQoc3RhdGVtZW50IGFzIGFueSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhyb3cgXCJ1bnJlY29nbml6ZWQgc3RhdGVtZW50XCI7XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIElkZW50aWZpZXJ7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nKXt9O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBUeXBlID0gXCJpMzJcIiB8IFwiZjMyXCIgfCBcImk2NFwiIHwgXCJmNjRcIiB8IFwiYm9vbFwiIHwgXCJ2b2lkXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXJndW1lbnR7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogSWRlbnRpZmllciwgcHVibGljIHR5cGU6IFR5cGUpe307XHJcbn0iLCIvLyBDb3B5cmlnaHQgMjAxMiBUaGUgT2J2aW91cyBDb3Jwb3JhdGlvbi5cblxuLypcbiAqIGJpdHM6IEJpdHdpc2UgYnVmZmVyIHV0aWxpdGllcy4gVGhlIHV0aWxpdGllcyBoZXJlIHRyZWF0IGEgYnVmZmVyXG4gKiBhcyBhIGxpdHRsZS1lbmRpYW4gYmlnaW50LCBzbyB0aGUgbG93ZXN0LW9yZGVyIGJpdCBpcyBiaXQgIzAgb2ZcbiAqIGBidWZmZXJbMF1gLCBhbmQgdGhlIGhpZ2hlc3Qtb3JkZXIgYml0IGlzIGJpdCAjNyBvZlxuICogYGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gMV1gLlxuICovXG5cblxuLypcbiAqIE1vZHVsZXMgdXNlZFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qXG4gKiBFeHBvcnRlZCBiaW5kaW5nc1xuICovXG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGdpdmVuIG51bWJlciBvZiBiaXRzIGZyb20gdGhlIGJ1ZmZlciBhdCB0aGUgaW5kaWNhdGVkXG4gKiBpbmRleCwgcmV0dXJuaW5nIGEgc2ltcGxlIG51bWJlciBhcyB0aGUgcmVzdWx0LiBJZiBiaXRzIGFyZSByZXF1ZXN0ZWRcbiAqIHRoYXQgYXJlbid0IGNvdmVyZWQgYnkgdGhlIGJ1ZmZlciwgdGhlIGBkZWZhdWx0Qml0YCBpcyB1c2VkIGFzIHRoZWlyXG4gKiB2YWx1ZS5cbiAqXG4gKiBUaGUgYGJpdExlbmd0aGAgbXVzdCBiZSBubyBtb3JlIHRoYW4gMzIuIFRoZSBgZGVmYXVsdEJpdGAgaWYgbm90XG4gKiBzcGVjaWZpZWQgaXMgdGFrZW4gdG8gYmUgYDBgLlxuICovXG5mdW5jdGlvbiBleHRyYWN0KGJ1ZmZlciwgYml0SW5kZXgsIGJpdExlbmd0aCwgZGVmYXVsdEJpdCkge1xuICBpZiAoKGJpdExlbmd0aCA8IDApIHx8IChiaXRMZW5ndGggPiAzMikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgdmFsdWUgZm9yIGJpdExlbmd0aC5cIik7XG4gIH1cblxuICBpZiAoZGVmYXVsdEJpdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdEJpdCA9IDA7XG4gIH0gZWxzZSBpZiAoKGRlZmF1bHRCaXQgIT09IDApICYmIChkZWZhdWx0Qml0ICE9PSAxKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkJhZCB2YWx1ZSBmb3IgZGVmYXVsdEJpdC5cIik7XG4gIH1cblxuICB2YXIgZGVmYXVsdEJ5dGUgPSBkZWZhdWx0Qml0ICogMHhmZjtcbiAgdmFyIHJlc3VsdCA9IDA7XG5cbiAgLy8gQWxsIHN0YXJ0cyBhcmUgaW5jbHVzaXZlLiBUaGUge2VuZEJ5dGUsIGVuZEJpdH0gcGFpciBpcyBleGNsdXNpdmUsIGJ1dFxuICAvLyBpZiBlbmRCaXQgIT09IDAsIHRoZW4gZW5kQnl0ZSBpcyBpbmNsdXNpdmUuXG4gIHZhciBsYXN0Qml0ID0gYml0SW5kZXggKyBiaXRMZW5ndGg7XG4gIHZhciBzdGFydEJ5dGUgPSBNYXRoLmZsb29yKGJpdEluZGV4IC8gOCk7XG4gIHZhciBzdGFydEJpdCA9IGJpdEluZGV4ICUgODtcbiAgdmFyIGVuZEJ5dGUgPSBNYXRoLmZsb29yKGxhc3RCaXQgLyA4KTtcbiAgdmFyIGVuZEJpdCA9IGxhc3RCaXQgJSA4O1xuXG4gIGlmIChlbmRCaXQgIT09IDApIHtcbiAgICAvLyBgKDEgPDwgZW5kQml0KSAtIDFgIGlzIHRoZSBtYXNrIG9mIGFsbCBiaXRzIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nXG4gICAgLy8gdGhlIGVuZEJpdC5cbiAgICByZXN1bHQgPSBnZXQoZW5kQnl0ZSkgJiAoKDEgPDwgZW5kQml0KSAtIDEpO1xuICB9XG5cbiAgd2hpbGUgKGVuZEJ5dGUgPiBzdGFydEJ5dGUpIHtcbiAgICBlbmRCeXRlLS07XG4gICAgcmVzdWx0ID0gKHJlc3VsdCA8PCA4KSB8IGdldChlbmRCeXRlKTtcbiAgfVxuXG4gIHJlc3VsdCA+Pj49IHN0YXJ0Qml0O1xuICByZXR1cm4gcmVzdWx0O1xuXG4gIGZ1bmN0aW9uIGdldChpbmRleCkge1xuICAgIHZhciByZXN1bHQgPSBidWZmZXJbaW5kZXhdO1xuICAgIHJldHVybiAocmVzdWx0ID09PSB1bmRlZmluZWQpID8gZGVmYXVsdEJ5dGUgOiByZXN1bHQ7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmplY3RzIHRoZSBnaXZlbiBiaXRzIGludG8gdGhlIGdpdmVuIGJ1ZmZlciBhdCB0aGUgZ2l2ZW4gaW5kZXguIEFueVxuICogYml0cyBpbiB0aGUgdmFsdWUgYmV5b25kIHRoZSBsZW5ndGggdG8gc2V0IGFyZSBpZ25vcmVkLlxuICovXG5mdW5jdGlvbiBpbmplY3QoYnVmZmVyLCBiaXRJbmRleCwgYml0TGVuZ3RoLCB2YWx1ZSkge1xuICBpZiAoKGJpdExlbmd0aCA8IDApIHx8IChiaXRMZW5ndGggPiAzMikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgdmFsdWUgZm9yIGJpdExlbmd0aC5cIik7XG4gIH1cblxuICB2YXIgbGFzdEJ5dGUgPSBNYXRoLmZsb29yKChiaXRJbmRleCArIGJpdExlbmd0aCAtIDEpIC8gOCk7XG4gIGlmICgoYml0SW5kZXggPCAwKSB8fCAobGFzdEJ5dGUgPj0gYnVmZmVyLmxlbmd0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2UuXCIpO1xuICB9XG5cbiAgLy8gSnVzdCBrZWVwaW5nIGl0IHNpbXBsZSwgdW50aWwgLyB1bmxlc3MgcHJvZmlsaW5nIHNob3dzIHRoYXQgdGhpc1xuICAvLyBpcyBhIHByb2JsZW0uXG5cbiAgdmFyIGF0Qnl0ZSA9IE1hdGguZmxvb3IoYml0SW5kZXggLyA4KTtcbiAgdmFyIGF0Qml0ID0gYml0SW5kZXggJSA4O1xuXG4gIHdoaWxlIChiaXRMZW5ndGggPiAwKSB7XG4gICAgaWYgKHZhbHVlICYgMSkge1xuICAgICAgYnVmZmVyW2F0Qnl0ZV0gfD0gKDEgPDwgYXRCaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXJbYXRCeXRlXSAmPSB+KDEgPDwgYXRCaXQpO1xuICAgIH1cblxuICAgIHZhbHVlID4+PSAxO1xuICAgIGJpdExlbmd0aC0tO1xuXG4gICAgYXRCaXQgPSAoYXRCaXQgKyAxKSAlIDg7XG4gICAgaWYgKGF0Qml0ID09PSAwKSB7XG4gICAgICBhdEJ5dGUrKztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzaWduIGJpdCBvZiB0aGUgZ2l2ZW4gYnVmZmVyLlxuICovXG5mdW5jdGlvbiBnZXRTaWduKGJ1ZmZlcikge1xuICByZXR1cm4gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSAxXSA+Pj4gNztcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB6ZXJvLWJhc2VkIGJpdCBudW1iZXIgb2YgdGhlIGhpZ2hlc3Qtb3JkZXIgYml0IHdpdGggdGhlXG4gKiBnaXZlbiB2YWx1ZSBpbiB0aGUgZ2l2ZW4gYnVmZmVyLlxuICpcbiAqIElmIHRoZSBidWZmZXIgY29uc2lzdHMgZW50aXJlbHkgb2YgdGhlIG90aGVyIGJpdCB2YWx1ZSwgdGhlbiB0aGlzIHJldHVybnNcbiAqIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGhpZ2hPcmRlcihiaXQsIGJ1ZmZlcikge1xuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGZ1bGx5V3JvbmdCeXRlID0gKGJpdF4xKSAqIDB4ZmY7IC8vIHRoZSBvdGhlci1iaXQgZXh0ZW5kZWQgdG8gYSBmdWxsIGJ5dGVcblxuICB3aGlsZSAoKGxlbmd0aCA+IDApICYmIChidWZmZXJbbGVuZ3RoIC0gMV0gPT09IGZ1bGx5V3JvbmdCeXRlKSkge1xuICAgIGxlbmd0aC0tO1xuICB9XG5cbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIC8vIERlZ2VuZXJhdGUgY2FzZS4gVGhlIGJ1ZmZlciBjb25zaXN0cyBlbnRpcmVseSBvZiB+Yml0LlxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHZhciBieXRlVG9DaGVjayA9IGJ1ZmZlcltsZW5ndGggLSAxXTtcbiAgdmFyIHJlc3VsdCA9IGxlbmd0aCAqIDggLSAxO1xuXG4gIGZvciAodmFyIGkgPSA3OyBpID4gMDsgaS0tKSB7XG4gICAgaWYgKCgoYnl0ZVRvQ2hlY2sgPj4gaSkgJiAxKSA9PT0gYml0KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmVzdWx0LS07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZXh0cmFjdDogZXh0cmFjdCxcbiAgaW5qZWN0OiBpbmplY3QsXG4gIGdldFNpZ246IGdldFNpZ24sXG4gIGhpZ2hPcmRlcjogaGlnaE9yZGVyXG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTIgVGhlIE9idmlvdXMgQ29ycG9yYXRpb24uXG5cbi8qXG4gKiBidWZzOiBCdWZmZXIgdXRpbGl0aWVzLlxuICovXG5cblxuLypcbiAqIE1vZHVsZXMgdXNlZFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qXG4gKiBNb2R1bGUgdmFyaWFibGVzXG4gKi9cblxuLyoqIFBvb2wgb2YgYnVmZmVycywgd2hlcmUgYGJ1ZlBvb2xbeF0ubGVuZ3RoID09PSB4YC4gKi9cbnZhciBidWZQb29sID0gW107XG5cbi8qKiBNYXhpbXVtIGxlbmd0aCBvZiBrZXB0IHRlbXBvcmFyeSBidWZmZXJzLiAqL1xudmFyIFRFTVBfQlVGX01BWElNVU1fTEVOR1RIID0gMjA7XG5cbi8qKiBNaW5pbXVtIGV4YWN0bHktcmVwcmVzZW50YWJsZSA2NC1iaXQgaW50LiAqL1xudmFyIE1JTl9FWEFDVF9JTlQ2NCA9IC0weDgwMDAwMDAwMDAwMDAwMDA7XG5cbi8qKiBNYXhpbXVtIGV4YWN0bHktcmVwcmVzZW50YWJsZSA2NC1iaXQgaW50LiAqL1xudmFyIE1BWF9FWEFDVF9JTlQ2NCA9IDB4N2ZmZmZmZmZmZmZmZmMwMDtcblxuLyoqIE1heGltdW0gZXhhY3RseS1yZXByZXNlbnRhYmxlIDY0LWJpdCB1aW50LiAqL1xudmFyIE1BWF9FWEFDVF9VSU5UNjQgPSAweGZmZmZmZmZmZmZmZmY4MDA7XG5cbi8qKlxuICogVGhlIGludCB2YWx1ZSBjb25zaXN0aW5nIGp1c3Qgb2YgYSAxIGluIGJpdCAjMzIgKHRoYXQgaXMsIG9uZSBtb3JlXG4gKiB0aGFuIHRoZSBtYXhpbXVtIDMyLWJpdCB1bnNpZ25lZCB2YWx1ZSkuXG4gKi9cbnZhciBCSVRfMzIgPSAweDEwMDAwMDAwMDtcblxuLyoqXG4gKiBUaGUgaW50IHZhbHVlIGNvbnNpc3RpbmcganVzdCBvZiBhIDEgaW4gYml0ICM2NCAodGhhdCBpcywgb25lIG1vcmVcbiAqIHRoYW4gdGhlIG1heGltdW0gNjQtYml0IHVuc2lnbmVkIHZhbHVlKS5cbiAqL1xudmFyIEJJVF82NCA9IDB4MTAwMDAwMDAwMDAwMDAwMDA7XG5cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnNcbiAqL1xuXG4vKipcbiAqIE1hc2tzIG9mZiBhbGwgYnV0IHRoZSBsb3dlc3QgYml0IHNldCBvZiB0aGUgZ2l2ZW4gbnVtYmVyLlxuICovXG5mdW5jdGlvbiBsb3dlc3RCaXQobnVtKSB7XG4gIHJldHVybiBudW0gJiAtbnVtO1xufVxuXG4vKipcbiAqIEdldHMgd2hldGhlciB0cnlpbmcgdG8gYWRkIHRoZSBzZWNvbmQgbnVtYmVyIHRvIHRoZSBmaXJzdCBpcyBsb3NzeVxuICogKGluZXhhY3QpLiBUaGUgZmlyc3QgbnVtYmVyIGlzIG1lYW50IHRvIGJlIGFuIGFjY3VtdWxhdGVkIHJlc3VsdC5cbiAqL1xuZnVuY3Rpb24gaXNMb3NzeVRvQWRkKGFjY3VtLCBudW0pIHtcbiAgaWYgKG51bSA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsb3dCaXQgPSBsb3dlc3RCaXQobnVtKTtcbiAgdmFyIGFkZGVkID0gYWNjdW0gKyBsb3dCaXQ7XG5cbiAgaWYgKGFkZGVkID09PSBhY2N1bSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKChhZGRlZCAtIGxvd0JpdCkgIT09IGFjY3VtKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cblxuLypcbiAqIEV4cG9ydGVkIGZ1bmN0aW9uc1xuICovXG5cbi8qKlxuICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBnaXZlbiBsZW5ndGgsIHdoaWNoIGlzIGluaXRpYWxpemVkXG4gKiB3aXRoIGFsbCB6ZXJvZXMuIFRoaXMgcmV0dXJucyBhIGJ1ZmZlciBmcm9tIHRoZSBwb29sIGlmIGl0IGlzXG4gKiBhdmFpbGFibGUsIG9yIGEgZnJlc2hseS1hbGxvY2F0ZWQgYnVmZmVyIGlmIG5vdC5cbiAqL1xuZnVuY3Rpb24gYWxsb2MobGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgVWludDhBcnJheShsZW5ndGgpO1xufVxuXG4vKipcbiAqIFJlbGVhc2VzIGEgYnVmZmVyIGJhY2sgdG8gdGhlIHBvb2wuXG4gKi9cbmZ1bmN0aW9uIGZyZWUoYnVmZmVyKSB7XG5cbn1cblxuLyoqXG4gKiBSZXNpemVzIGEgYnVmZmVyLCByZXR1cm5pbmcgYSBuZXcgYnVmZmVyLiBSZXR1cm5zIHRoZSBhcmd1bWVudCBpZlxuICogdGhlIGxlbmd0aCB3b3VsZG4ndCBhY3R1YWxseSBjaGFuZ2UuIFRoaXMgZnVuY3Rpb24gaXMgb25seSBzYWZlIHRvXG4gKiB1c2UgaWYgdGhlIGdpdmVuIGJ1ZmZlciB3YXMgYWxsb2NhdGVkIHdpdGhpbiB0aGlzIG1vZHVsZSAoc2luY2VcbiAqIG90aGVyd2lzZSB0aGUgYnVmZmVyIG1pZ2h0IHBvc3NpYmx5IGJlIHNoYXJlZCBleHRlcm5hbGx5KS5cbiAqL1xuZnVuY3Rpb24gcmVzaXplKGJ1ZmZlciwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIsIDAsIGxlbmd0aCk7XG4gIGlmIChsZW5ndGggPT09IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgdmFyIG5ld0J1ZiA9IGFsbG9jKGxlbmd0aCk7XG5cbiAgbGV0IGEgPSBuZXcgVWludDhBcnJheSgpXG4gIG5ld0J1Zi5zZXQoYnVmZmVyKTtcbiAgLy8gYnVmZmVyLmNvcHkobmV3QnVmKTtcbiAgZnJlZShidWZmZXIpO1xuICByZXR1cm4gbmV3QnVmO1xufVxuXG4vKipcbiAqIFJlYWRzIGFuIGFyYml0cmFyeSBzaWduZWQgaW50IGZyb20gYSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIHJlYWRJbnQoYnVmZmVyKSB7XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuICB2YXIgcG9zaXRpdmUgPSBidWZmZXJbbGVuZ3RoIC0gMV0gPCAweDgwO1xuICB2YXIgcmVzdWx0ID0gcG9zaXRpdmUgPyAwIDogLTE7XG4gIHZhciBsb3NzeSA9IGZhbHNlO1xuXG4gIC8vIE5vdGU6IFdlIGNhbid0IHVzZSBiaXQgbWFuaXB1bGF0aW9uIGhlcmUsIHNpbmNlIHRoYXQgc3RvcHNcbiAgLy8gd29ya2luZyBpZiB0aGUgcmVzdWx0IHdvbid0IGZpdCBpbiBhIDMyLWJpdCBpbnQuXG5cbiAgaWYgKGxlbmd0aCA8IDcpIHtcbiAgICAvLyBDb21tb24gY2FzZSB3aGljaCBjYW4ndCBwb3NzaWJseSBiZSBsb3NzeSAoYmVjYXVzZSB0aGUgcmVzdWx0IGhhc1xuICAgIC8vIG5vIG1vcmUgdGhhbiA0OCBiaXRzLCBhbmQgbG9zcyBvbmx5IGhhcHBlbnMgd2l0aCA1NCBvciBtb3JlKS5cbiAgICBmb3IgKHZhciBpID0gbGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAweDEwMCkgKyBidWZmZXJbaV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSBsZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIG9uZSA9IGJ1ZmZlcltpXTtcbiAgICAgIHJlc3VsdCAqPSAweDEwMDtcbiAgICAgIGlmIChpc0xvc3N5VG9BZGQocmVzdWx0LCBvbmUpKSB7XG4gICAgICAgIGxvc3N5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCArPSBvbmU7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4geyB2YWx1ZTogcmVzdWx0LCBsb3NzeTogbG9zc3kgfTtcbn1cblxuLyoqXG4gKiBSZWFkcyBhbiBhcmJpdHJhcnkgdW5zaWduZWQgaW50IGZyb20gYSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIHJlYWRVSW50KGJ1ZmZlcikge1xuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IDA7XG4gIHZhciBsb3NzeSA9IGZhbHNlO1xuXG4gIC8vIE5vdGU6IFNlZSBhYm92ZSBpbiByZSBiaXQgbWFuaXB1bGF0aW9uLlxuXG4gIGlmIChsZW5ndGggPCA3KSB7XG4gICAgLy8gQ29tbW9uIGNhc2Ugd2hpY2ggY2FuJ3QgcG9zc2libHkgYmUgbG9zc3kgKHNlZSBhYm92ZSkuXG4gICAgZm9yICh2YXIgaSA9IGxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICByZXN1bHQgPSAocmVzdWx0ICogMHgxMDApICsgYnVmZmVyW2ldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gbGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBvbmUgPSBidWZmZXJbaV07XG4gICAgICByZXN1bHQgKj0gMHgxMDA7XG4gICAgICBpZiAoaXNMb3NzeVRvQWRkKHJlc3VsdCwgb25lKSkge1xuICAgICAgICBsb3NzeSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gb25lO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdCwgbG9zc3k6IGxvc3N5IH07XG59XG5cbi8qKlxuICogV3JpdGVzIGEgbGl0dGxlLWVuZGlhbiA2NC1iaXQgc2lnbmVkIGludCBpbnRvIGEgYnVmZmVyLlxuICovXG5mdW5jdGlvbiB3cml0ZUludDY0KHZhbHVlLCBidWZmZXIpIHtcbiAgaWYgKCh2YWx1ZSA8IE1JTl9FWEFDVF9JTlQ2NCkgfHwgKHZhbHVlID4gTUFYX0VYQUNUX0lOVDY0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIG91dCBvZiByYW5nZS5cIik7XG4gIH1cblxuICBpZiAodmFsdWUgPCAwKSB7XG4gICAgdmFsdWUgKz0gQklUXzY0O1xuICB9XG5cbiAgd3JpdGVVSW50NjQodmFsdWUsIGJ1ZmZlcik7XG59XG5cbi8qKlxuICogV3JpdGVzIGEgbGl0dGxlLWVuZGlhbiA2NC1iaXQgdW5zaWduZWQgaW50IGludG8gYSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVUludDY0KHZhbHVlLCBidWZmZXIpIHtcbiAgaWYgKCh2YWx1ZSA8IDApIHx8ICh2YWx1ZSA+IE1BWF9FWEFDVF9VSU5UNjQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgb3V0IG9mIHJhbmdlLlwiKTtcbiAgfVxuXG4gIHZhciBsb3dXb3JkID0gdmFsdWUgJSBCSVRfMzI7XG4gIHZhciBoaWdoV29yZCA9IE1hdGguZmxvb3IodmFsdWUgLyBCSVRfMzIpO1xuXG4gIGJ1ZmZlci53cml0ZVVJbnQzMkxFKGxvd1dvcmQsIDApO1xuICBidWZmZXIud3JpdGVVSW50MzJMRShoaWdoV29yZCwgNCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhbGxvYzogYWxsb2MsXG4gIGZyZWU6IGZyZWUsXG4gIHJlYWRJbnQ6IHJlYWRJbnQsXG4gIHJlYWRVSW50OiByZWFkVUludCxcbiAgcmVzaXplOiByZXNpemUsXG4gIHdyaXRlSW50NjQ6IHdyaXRlSW50NjQsXG4gIHdyaXRlVUludDY0OiB3cml0ZVVJbnQ2NFxufTtcbiIsIi8vIEdlbmVyYXRlZCBmcm9tIExheW91dExhbmcuZzQgYnkgQU5UTFIgNC45XHJcbi8vIGpzaGludCBpZ25vcmU6IHN0YXJ0XHJcbmltcG9ydCBhbnRscjQgZnJvbSAnYW50bHI0JztcclxuXHJcblxyXG5cclxuY29uc3Qgc2VyaWFsaXplZEFUTiA9IFtcIlxcdTAwMDNcXHU2MDhiXFx1YTcyYVxcdTgxMzNcXHViOWVkXFx1NDE3Y1xcdTNiZTdcXHU3Nzg2XCIsXHJcbiAgICBcIlxcdTU5NjRcXHUwMDAyXFx1MDAxNHlcXGJcXHUwMDAxXFx1MDAwNFxcdTAwMDJcXHRcXHUwMDAyXFx1MDAwNFxcdTAwMDNcXHRcXHUwMDAzXCIsXHJcbiAgICBcIlxcdTAwMDRcXHUwMDA0XFx0XFx1MDAwNFxcdTAwMDRcXHUwMDA1XFx0XFx1MDAwNVxcdTAwMDRcXHUwMDA2XFx0XFx1MDAwNlxcdTAwMDRcXHUwMDA3XCIsXHJcbiAgICBcIlxcdFxcdTAwMDdcXHUwMDA0XFxiXFx0XFxiXFx1MDAwNFxcdFxcdFxcdFxcdTAwMDRcXG5cXHRcXG5cXHUwMDA0XFx1MDAwYlxcdFxcdTAwMGJcXHUwMDA0XCIsXHJcbiAgICBcIlxcZlxcdFxcZlxcdTAwMDRcXHJcXHRcXHJcXHUwMDA0XFx1MDAwZVxcdFxcdTAwMGVcXHUwMDA0XFx1MDAwZlxcdFxcdTAwMGZcXHUwMDA0XFx1MDAxMFwiLFxyXG4gICAgXCJcXHRcXHUwMDEwXFx1MDAwNFxcdTAwMTFcXHRcXHUwMDExXFx1MDAwNFxcdTAwMTJcXHRcXHUwMDEyXFx1MDAwNFxcdTAwMTNcXHRcXHUwMDEzXCIsXHJcbiAgICBcIlxcdTAwMDNcXHUwMDAyXFx1MDAwM1xcdTAwMDJcXHUwMDAzXFx1MDAwMlxcdTAwMDNcXHUwMDAzXFx1MDAwM1xcdTAwMDNcXHUwMDAzXFx1MDAwNFwiLFxyXG4gICAgXCJcXHUwMDAzXFx1MDAwNFxcdTAwMDNcXHUwMDA1XFx1MDAwM1xcdTAwMDVcXHUwMDAzXFx1MDAwNVxcdTAwMDNcXHUwMDA2XFx1MDAwM1xcdTAwMDZcIixcclxuICAgIFwiXFx1MDAwM1xcdTAwMDdcXHUwMDAzXFx1MDAwN1xcdTAwMDNcXGJcXHUwMDAzXFxiXFx1MDAwM1xcYlxcdTAwMDNcXGJcXHUwMDAzXFxiXFx1MDAwM1wiLFxyXG4gICAgXCJcXGJcXHUwMDAzXFxiXFx1MDAwM1xcdFxcdTAwMDNcXHRcXHUwMDAzXFxuXFx1MDAwM1xcblxcdTAwMDNcXG5cXHUwMDAzXFxuXFx1MDAwM1xcdTAwMGJcIixcclxuICAgIFwiXFx1MDAwM1xcdTAwMGJcXHUwMDAzXFxmXFx1MDAwM1xcZlxcdTAwMDNcXHJcXHUwMDAzXFxyXFx1MDAwM1xcdTAwMGVcXHUwMDAzXFx1MDAwZVwiLFxyXG4gICAgXCJcXHUwMDAzXFx1MDAwZVxcdTAwMDNcXHUwMDBmXFx1MDAwM1xcdTAwMGZcXHUwMDAzXFx1MDAwZlxcdTAwMDNcXHUwMDBmXFx1MDAwM1xcdTAwMGZcIixcclxuICAgIFwiXFx1MDAwM1xcdTAwMTBcXHUwMDAzXFx1MDAxMFxcdTAwMDNcXHUwMDEwXFx1MDAwM1xcdTAwMTBcXHUwMDAzXFx1MDAxMFxcdTAwMDNcXHUwMDEwXCIsXHJcbiAgICBcIlxcdTAwMDNcXHUwMDEwXFx1MDAwM1xcdTAwMTBcXHUwMDAzXFx1MDAxMFxcdTAwMDNcXHUwMDEwXFx1MDAwM1xcdTAwMTBcXHUwMDAzXFx1MDAxMFwiLFxyXG4gICAgXCJcXHUwMDAzXFx1MDAxMFxcdTAwMDNcXHUwMDEwXFx1MDAwM1xcdTAwMTBcXHUwMDAzXFx1MDAxMFxcdTAwMDNcXHUwMDEwXFx1MDAwNVxcdTAwMTBcIixcclxuICAgIFwiYlxcblxcdTAwMTBcXHUwMDAzXFx1MDAxMVxcdTAwMDVcXHUwMDExZVxcblxcdTAwMTFcXHUwMDAzXFx1MDAxMVxcdTAwMDZcXHUwMDExaFwiLFxyXG4gICAgXCJcXG5cXHUwMDExXFxyXFx1MDAxMVxcdTAwMGVcXHUwMDExaVxcdTAwMDNcXHUwMDEyXFx1MDAwM1xcdTAwMTJcXHUwMDA3XFx1MDAxMm5cXG5cIixcclxuICAgIFwiXFx1MDAxMlxcZlxcdTAwMTJcXHUwMDBlXFx1MDAxMnFcXHUwMDBiXFx1MDAxMlxcdTAwMDNcXHUwMDEzXFx1MDAwNlxcdTAwMTN0XFxuXFx1MDAxM1wiLFxyXG4gICAgXCJcXHJcXHUwMDEzXFx1MDAwZVxcdTAwMTN1XFx1MDAwM1xcdTAwMTNcXHUwMDAzXFx1MDAxM1xcdTAwMDJcXHUwMDAyXFx1MDAxNFxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwM1xcdTAwMDVcXHUwMDA0XFx1MDAwN1xcdTAwMDVcXHRcXHUwMDA2XFx1MDAwYlxcdTAwMDdcXHJcXGJcXHUwMDBmXFx0XFx1MDAxMVwiLFxyXG4gICAgXCJcXG5cXHUwMDEzXFx1MDAwYlxcdTAwMTVcXGZcXHUwMDE3XFxyXFx1MDAxOVxcdTAwMGVcXHUwMDFiXFx1MDAwZlxcdTAwMWRcXHUwMDEwXFx1MDAxZlwiLFxyXG4gICAgXCJcXHUwMDExIVxcdTAwMTIjXFx1MDAxMyVcXHUwMDE0XFx1MDAwM1xcdTAwMDJcXGJcXGJcXHUwMDAyXFwnXFwnLC0vLzExPj5AQFxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwMi8vXFx1MDAwM1xcdTAwMDIyO1xcdTAwMDRcXHUwMDAyQ1xcXFxjfFxcdTAwMDZcXHUwMDAyMjtDXFxcXGFhY3xcXHUwMDA1XFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDBiXFxmXFx1MDAwZlxcdTAwMGZcXFwiXFxcIlxcdTAwMDJcXHUwMDg0XFx1MDAwMlxcdTAwMDNcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDA1XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDA3XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyXFx0XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDBiXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyXFxyXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDBmXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyXFx1MDAxMVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAxM1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMTVcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMTdcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDE5XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDFiXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyXFx1MDAxZFxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAxZlxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMiFcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAwMiNcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCIlXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMDNcXCdcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAwNSpcXHUwMDAzXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMDcsXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdC5cXHUwMDAzXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMGIxXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxccjNcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAwZlwiLFxyXG4gICAgXCI1XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMTE8XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMTM+XFx1MDAwM1wiLFxyXG4gICAgXCJcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDE1QlxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDE3RFxcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyXFx1MDAxOUZcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAxYkhcXHUwMDAzXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMWRLXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMWZhXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCIhZFxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDIja1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDIlc1xcdTAwMDNcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyXFwnKFxcdTAwMDdoXFx1MDAwMlxcdTAwMDIoKVxcdTAwMDdwXFx1MDAwMlxcdTAwMDIpXFx1MDAwNFxcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyKitcXHUwMDA3KlxcdTAwMDJcXHUwMDAyK1xcdTAwMDZcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyLC1cXHUwMDA3XCIsXHJcbiAgICBcIitcXHUwMDAyXFx1MDAwMi1cXGJcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyLi9cXHUwMDA3L1xcdTAwMDJcXHUwMDAyLzBcXHUwMDA3XCIsXHJcbiAgICBcIkBcXHUwMDAyXFx1MDAwMjBcXG5cXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyMTJcXHUwMDA3fVxcdTAwMDJcXHUwMDAyMlxcZlxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMDJcXHUwMDAyMzRcXHUwMDA3XFx1MDA3ZlxcdTAwMDJcXHUwMDAyNFxcdTAwMGVcXHUwMDAzXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMjU2XFx1MDAwN3RcXHUwMDAyXFx1MDAwMjY3XFx1MDAwN2dcXHUwMDAyXFx1MDAwMjc4XFx1MDAwN3ZcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCI4OVxcdTAwMDd3XFx1MDAwMlxcdTAwMDI5OlxcdTAwMDd0XFx1MDAwMlxcdTAwMDI6O1xcdTAwMDdwXFx1MDAwMlxcdTAwMDI7XFx1MDAxMFwiLFxyXG4gICAgXCJcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyPD1cXHUwMDA3PVxcdTAwMDJcXHUwMDAyPVxcdTAwMTJcXHUwMDAzXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMj4/XFx1MDAwN25cXHUwMDAyXFx1MDAwMj9AXFx1MDAwN2dcXHUwMDAyXFx1MDAwMkBBXFx1MDAwN3ZcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJBXFx1MDAxNFxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJCQ1xcdTAwMDc/XFx1MDAwMlxcdTAwMDJDXFx1MDAxNlxcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyREVcXHUwMDA3LlxcdTAwMDJcXHUwMDAyRVxcdTAwMThcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyRkdcXHUwMDA3XCIsXHJcbiAgICBcIjxcXHUwMDAyXFx1MDAwMkdcXHUwMDFhXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMkhJXFx1MDAwN2tcXHUwMDAyXFx1MDAwMklKXCIsXHJcbiAgICBcIlxcdTAwMDdoXFx1MDAwMlxcdTAwMDJKXFx1MDAxY1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJLTFxcdTAwMDdnXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiTE1cXHUwMDA3blxcdTAwMDJcXHUwMDAyTU5cXHUwMDA3dVxcdTAwMDJcXHUwMDAyTk9cXHUwMDA3Z1xcdTAwMDJcXHUwMDAyT1xcdTAwMWVcIixcclxuICAgIFwiXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlBiXFx0XFx1MDAwMlxcdTAwMDJcXHUwMDAyUVJcXHUwMDA3QFxcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcIlJiXFx1MDAwNz9cXHUwMDAyXFx1MDAwMlNUXFx1MDAwNz5cXHUwMDAyXFx1MDAwMlRiXFx1MDAwNz9cXHUwMDAyXFx1MDAwMlVWXFx1MDAwN1wiLFxyXG4gICAgXCJ+XFx1MDAwMlxcdTAwMDJWYlxcdTAwMDd+XFx1MDAwMlxcdTAwMDJXWFxcdTAwMDcoXFx1MDAwMlxcdTAwMDJYYlxcdTAwMDcoXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyWVpcXHUwMDA3P1xcdTAwMDJcXHUwMDAyWmJcXHUwMDA3P1xcdTAwMDJcXHUwMDAyW1xcXFxcXHUwMDA3I1xcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcIlxcXFxiXFx1MDAwNz9cXHUwMDAyXFx1MDAwMl1eXFx1MDAwNz5cXHUwMDAyXFx1MDAwMl5iXFx1MDAwNz5cXHUwMDAyXFx1MDAwMl9gXFx1MDAwN1wiLFxyXG4gICAgXCJAXFx1MDAwMlxcdTAwMDJgYlxcdTAwMDdAXFx1MDAwMlxcdTAwMDJhUFxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJhUVxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMDJcXHUwMDAyYVNcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyYVVcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcImFXXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMmFZXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMmFbXFx1MDAwM1xcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJhXVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJhX1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJiIFxcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyY2VcXHRcXHUwMDAzXFx1MDAwMlxcdTAwMDJkY1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJkZVxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMDJcXHUwMDAyZWdcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyZmhcXHRcXHUwMDA0XFx1MDAwMlxcdTAwMDJnXCIsXHJcbiAgICBcImZcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyaGlcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyaWdcXHUwMDAzXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMmlqXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMmpcXFwiXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMmtvXFx0XFx1MDAwNVwiLFxyXG4gICAgXCJcXHUwMDAyXFx1MDAwMmxuXFx0XFx1MDAwNlxcdTAwMDJcXHUwMDAybWxcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAybnFcXHUwMDAzXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyXFx1MDAwMm9tXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMm9wXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJwJFxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJxb1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJydFxcdFxcdTAwMDdcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJzclxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJ0dVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJ1c1xcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAydXZcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAydndcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyd3hcXGJcIixcclxuICAgIFwiXFx1MDAxM1xcdTAwMDJcXHUwMDAyeCZcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFxiXFx1MDAwMmFkaW91XFx1MDAwM1xcYlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMlwiXS5qb2luKFwiXCIpO1xyXG5cclxuXHJcbmNvbnN0IGF0biA9IG5ldyBhbnRscjQuYXRuLkFUTkRlc2VyaWFsaXplcigpLmRlc2VyaWFsaXplKHNlcmlhbGl6ZWRBVE4pO1xyXG5cclxuY29uc3QgZGVjaXNpb25zVG9ERkEgPSBhdG4uZGVjaXNpb25Ub1N0YXRlLm1hcCggKGRzLCBpbmRleCkgPT4gbmV3IGFudGxyNC5kZmEuREZBKGRzLCBpbmRleCkgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExheW91dExhbmdMZXhlciBleHRlbmRzIGFudGxyNC5MZXhlciB7XHJcblxyXG4gICAgc3RhdGljIGdyYW1tYXJGaWxlTmFtZSA9IFwiTGF5b3V0TGFuZy5nNFwiO1xyXG4gICAgc3RhdGljIGNoYW5uZWxOYW1lcyA9IFsgXCJERUZBVUxUX1RPS0VOX0NIQU5ORUxcIiwgXCJISURERU5cIiBdO1xyXG5cdHN0YXRpYyBtb2RlTmFtZXMgPSBbIFwiREVGQVVMVF9NT0RFXCIgXTtcclxuXHRzdGF0aWMgbGl0ZXJhbE5hbWVzID0gWyBudWxsLCBcIidmbidcIiwgXCInKCdcIiwgXCInKSdcIiwgXCInLT4nXCIsIFwiJ3snXCIsIFwiJ30nXCIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCIncmV0dXJuJ1wiLCBcIic7J1wiLCBcIidsZXQnXCIsIFwiJz0nXCIsIFwiJywnXCIsIFwiJzonXCIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCInaWYnXCIsIFwiJ2Vsc2UnXCIgXTtcclxuXHRzdGF0aWMgc3ltYm9saWNOYW1lcyA9IFsgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgXCJCSU5BUllPUFwiLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIklOVFwiLCBcIklERU5USUZJRVJcIiwgXCJXU1wiIF07XHJcblx0c3RhdGljIHJ1bGVOYW1lcyA9IFsgXCJUX18wXCIsIFwiVF9fMVwiLCBcIlRfXzJcIiwgXCJUX18zXCIsIFwiVF9fNFwiLCBcIlRfXzVcIiwgXCJUX182XCIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgXCJUX183XCIsIFwiVF9fOFwiLCBcIlRfXzlcIiwgXCJUX18xMFwiLCBcIlRfXzExXCIsIFwiVF9fMTJcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICBcIlRfXzEzXCIsIFwiQklOQVJZT1BcIiwgXCJJTlRcIiwgXCJJREVOVElGSUVSXCIsIFwiV1NcIiBdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XHJcbiAgICAgICAgc3VwZXIoaW5wdXQpXHJcbiAgICAgICAgdGhpcy5faW50ZXJwID0gbmV3IGFudGxyNC5hdG4uTGV4ZXJBVE5TaW11bGF0b3IodGhpcywgYXRuLCBkZWNpc2lvbnNUb0RGQSwgbmV3IGFudGxyNC5QcmVkaWN0aW9uQ29udGV4dENhY2hlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBhdG4oKSB7XHJcbiAgICAgICAgcmV0dXJuIGF0bjtcclxuICAgIH1cclxufVxyXG5cclxuTGF5b3V0TGFuZ0xleGVyLkVPRiA9IGFudGxyNC5Ub2tlbi5FT0Y7XHJcbkxheW91dExhbmdMZXhlci5UX18wID0gMTtcclxuTGF5b3V0TGFuZ0xleGVyLlRfXzEgPSAyO1xyXG5MYXlvdXRMYW5nTGV4ZXIuVF9fMiA9IDM7XHJcbkxheW91dExhbmdMZXhlci5UX18zID0gNDtcclxuTGF5b3V0TGFuZ0xleGVyLlRfXzQgPSA1O1xyXG5MYXlvdXRMYW5nTGV4ZXIuVF9fNSA9IDY7XHJcbkxheW91dExhbmdMZXhlci5UX182ID0gNztcclxuTGF5b3V0TGFuZ0xleGVyLlRfXzcgPSA4O1xyXG5MYXlvdXRMYW5nTGV4ZXIuVF9fOCA9IDk7XHJcbkxheW91dExhbmdMZXhlci5UX185ID0gMTA7XHJcbkxheW91dExhbmdMZXhlci5UX18xMCA9IDExO1xyXG5MYXlvdXRMYW5nTGV4ZXIuVF9fMTEgPSAxMjtcclxuTGF5b3V0TGFuZ0xleGVyLlRfXzEyID0gMTM7XHJcbkxheW91dExhbmdMZXhlci5UX18xMyA9IDE0O1xyXG5MYXlvdXRMYW5nTGV4ZXIuQklOQVJZT1AgPSAxNTtcclxuTGF5b3V0TGFuZ0xleGVyLklOVCA9IDE2O1xyXG5MYXlvdXRMYW5nTGV4ZXIuSURFTlRJRklFUiA9IDE3O1xyXG5MYXlvdXRMYW5nTGV4ZXIuV1MgPSAxODtcclxuXHJcblxyXG5cclxuIiwiLy8gR2VuZXJhdGVkIGZyb20gTGF5b3V0TGFuZy5nNCBieSBBTlRMUiA0LjlcclxuLy8ganNoaW50IGlnbm9yZTogc3RhcnRcclxuaW1wb3J0IGFudGxyNCBmcm9tICdhbnRscjQnO1xyXG5cclxuLy8gVGhpcyBjbGFzcyBkZWZpbmVzIGEgY29tcGxldGUgbGlzdGVuZXIgZm9yIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyLlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYXlvdXRMYW5nTGlzdGVuZXIgZXh0ZW5kcyBhbnRscjQudHJlZS5QYXJzZVRyZWVMaXN0ZW5lciB7XHJcblxyXG5cdC8vIEVudGVyIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2JvZHkuXHJcblx0ZW50ZXJCb2R5KGN0eCkge1xyXG5cdH1cclxuXHJcblx0Ly8gRXhpdCBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNib2R5LlxyXG5cdGV4aXRCb2R5KGN0eCkge1xyXG5cdH1cclxuXHJcblxyXG5cdC8vIEVudGVyIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2Z1bmMuXHJcblx0ZW50ZXJGdW5jKGN0eCkge1xyXG5cdH1cclxuXHJcblx0Ly8gRXhpdCBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNmdW5jLlxyXG5cdGV4aXRGdW5jKGN0eCkge1xyXG5cdH1cclxuXHJcblxyXG5cdC8vIEVudGVyIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2Z1bmNCb2R5LlxyXG5cdGVudGVyRnVuY0JvZHkoY3R4KSB7XHJcblx0fVxyXG5cclxuXHQvLyBFeGl0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2Z1bmNCb2R5LlxyXG5cdGV4aXRGdW5jQm9keShjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHQvLyBFbnRlciBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNzdGF0ZW1lbnQuXHJcblx0ZW50ZXJTdGF0ZW1lbnQoY3R4KSB7XHJcblx0fVxyXG5cclxuXHQvLyBFeGl0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI3N0YXRlbWVudC5cclxuXHRleGl0U3RhdGVtZW50KGN0eCkge1xyXG5cdH1cclxuXHJcblxyXG5cdC8vIEVudGVyIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI3JldHVyblN0YXRlbWVudC5cclxuXHRlbnRlclJldHVyblN0YXRlbWVudChjdHgpIHtcclxuXHR9XHJcblxyXG5cdC8vIEV4aXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IExheW91dExhbmdQYXJzZXIjcmV0dXJuU3RhdGVtZW50LlxyXG5cdGV4aXRSZXR1cm5TdGF0ZW1lbnQoY3R4KSB7XHJcblx0fVxyXG5cclxuXHJcblx0Ly8gRW50ZXIgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IExheW91dExhbmdQYXJzZXIjbGV0U3RhdGVtZW50LlxyXG5cdGVudGVyTGV0U3RhdGVtZW50KGN0eCkge1xyXG5cdH1cclxuXHJcblx0Ly8gRXhpdCBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNsZXRTdGF0ZW1lbnQuXHJcblx0ZXhpdExldFN0YXRlbWVudChjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHQvLyBFbnRlciBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciN0eXBlLlxyXG5cdGVudGVyVHlwZShjdHgpIHtcclxuXHR9XHJcblxyXG5cdC8vIEV4aXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IExheW91dExhbmdQYXJzZXIjdHlwZS5cclxuXHRleGl0VHlwZShjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHQvLyBFbnRlciBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNhcmdzLlxyXG5cdGVudGVyQXJncyhjdHgpIHtcclxuXHR9XHJcblxyXG5cdC8vIEV4aXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IExheW91dExhbmdQYXJzZXIjYXJncy5cclxuXHRleGl0QXJncyhjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHQvLyBFbnRlciBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNhcmcuXHJcblx0ZW50ZXJBcmcoY3R4KSB7XHJcblx0fVxyXG5cclxuXHQvLyBFeGl0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2FyZy5cclxuXHRleGl0QXJnKGN0eCkge1xyXG5cdH1cclxuXHJcblxyXG5cdC8vIEVudGVyIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2V4cHIuXHJcblx0ZW50ZXJFeHByKGN0eCkge1xyXG5cdH1cclxuXHJcblx0Ly8gRXhpdCBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNleHByLlxyXG5cdGV4aXRFeHByKGN0eCkge1xyXG5cdH1cclxuXHJcblxyXG5cdC8vIEVudGVyIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2V4cHJMaXN0LlxyXG5cdGVudGVyRXhwckxpc3QoY3R4KSB7XHJcblx0fVxyXG5cclxuXHQvLyBFeGl0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2V4cHJMaXN0LlxyXG5cdGV4aXRFeHByTGlzdChjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHQvLyBFbnRlciBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNpZkV4cHIuXHJcblx0ZW50ZXJJZkV4cHIoY3R4KSB7XHJcblx0fVxyXG5cclxuXHQvLyBFeGl0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2lmRXhwci5cclxuXHRleGl0SWZFeHByKGN0eCkge1xyXG5cdH1cclxuXHJcblxyXG5cdC8vIEVudGVyIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2Z1bmNDYWxsLlxyXG5cdGVudGVyRnVuY0NhbGwoY3R4KSB7XHJcblx0fVxyXG5cclxuXHQvLyBFeGl0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2Z1bmNDYWxsLlxyXG5cdGV4aXRGdW5jQ2FsbChjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHQvLyBFbnRlciBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNwYXJlbkV4cHIuXHJcblx0ZW50ZXJQYXJlbkV4cHIoY3R4KSB7XHJcblx0fVxyXG5cclxuXHQvLyBFeGl0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI3BhcmVuRXhwci5cclxuXHRleGl0UGFyZW5FeHByKGN0eCkge1xyXG5cdH1cclxuXHJcblxyXG5cdC8vIEVudGVyIGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2JpbmFyeW9wLlxyXG5cdGVudGVyQmluYXJ5b3AoY3R4KSB7XHJcblx0fVxyXG5cclxuXHQvLyBFeGl0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBMYXlvdXRMYW5nUGFyc2VyI2JpbmFyeW9wLlxyXG5cdGV4aXRCaW5hcnlvcChjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHQvLyBFbnRlciBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNpZGVudGlmaWVyLlxyXG5cdGVudGVySWRlbnRpZmllcihjdHgpIHtcclxuXHR9XHJcblxyXG5cdC8vIEV4aXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IExheW91dExhbmdQYXJzZXIjaWRlbnRpZmllci5cclxuXHRleGl0SWRlbnRpZmllcihjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHQvLyBFbnRlciBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgTGF5b3V0TGFuZ1BhcnNlciNpbnRlZ2VyLlxyXG5cdGVudGVySW50ZWdlcihjdHgpIHtcclxuXHR9XHJcblxyXG5cdC8vIEV4aXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IExheW91dExhbmdQYXJzZXIjaW50ZWdlci5cclxuXHRleGl0SW50ZWdlcihjdHgpIHtcclxuXHR9XHJcblxyXG5cclxuXHJcbn0iLCIvLyBHZW5lcmF0ZWQgZnJvbSBMYXlvdXRMYW5nLmc0IGJ5IEFOVExSIDQuOVxyXG4vLyBqc2hpbnQgaWdub3JlOiBzdGFydFxyXG5pbXBvcnQgYW50bHI0IGZyb20gJ2FudGxyNCc7XHJcbmltcG9ydCBMYXlvdXRMYW5nTGlzdGVuZXIgZnJvbSAnLi9MYXlvdXRMYW5nTGlzdGVuZXIuanMnO1xyXG5cclxuY29uc3Qgc2VyaWFsaXplZEFUTiA9IFtcIlxcdTAwMDNcXHU2MDhiXFx1YTcyYVxcdTgxMzNcXHViOWVkXFx1NDE3Y1xcdTNiZTdcXHU3Nzg2XCIsXHJcbiAgICBcIlxcdTU5NjRcXHUwMDAzXFx1MDAxNFxcdTAwOTJcXHUwMDA0XFx1MDAwMlxcdFxcdTAwMDJcXHUwMDA0XFx1MDAwM1xcdFxcdTAwMDNcXHUwMDA0XCIsXHJcbiAgICBcIlxcdTAwMDRcXHRcXHUwMDA0XFx1MDAwNFxcdTAwMDVcXHRcXHUwMDA1XFx1MDAwNFxcdTAwMDZcXHRcXHUwMDA2XFx1MDAwNFxcdTAwMDdcXHRcIixcclxuICAgIFwiXFx1MDAwN1xcdTAwMDRcXGJcXHRcXGJcXHUwMDA0XFx0XFx0XFx0XFx1MDAwNFxcblxcdFxcblxcdTAwMDRcXHUwMDBiXFx0XFx1MDAwYlxcdTAwMDRcIixcclxuICAgIFwiXFxmXFx0XFxmXFx1MDAwNFxcclxcdFxcclxcdTAwMDRcXHUwMDBlXFx0XFx1MDAwZVxcdTAwMDRcXHUwMDBmXFx0XFx1MDAwZlxcdTAwMDRcXHUwMDEwXCIsXHJcbiAgICBcIlxcdFxcdTAwMTBcXHUwMDA0XFx1MDAxMVxcdFxcdTAwMTFcXHUwMDA0XFx1MDAxMlxcdFxcdTAwMTJcXHUwMDAzXFx1MDAwMlxcdTAwMDdcXHUwMDAyXCIsXHJcbiAgICBcIiZcXG5cXHUwMDAyXFxmXFx1MDAwMlxcdTAwMGVcXHUwMDAyKVxcdTAwMGJcXHUwMDAyXFx1MDAwM1xcdTAwMDNcXHUwMDAzXFx1MDAwM1xcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwM1xcdTAwMDNcXHUwMDAzXFx1MDAwM1xcdTAwMDNcXHUwMDAzXFx1MDAwM1xcdTAwMDNcXHUwMDAzXFx1MDAwM1xcdTAwMDNcXHUwMDAzXCIsXHJcbiAgICBcIlxcdTAwMDNcXHUwMDAzXFx1MDAwM1xcdTAwMDNcXHUwMDAzXFx1MDAwM1xcdTAwMDRcXHUwMDA3XFx1MDAwNDdcXG5cXHUwMDA0XFxmXFx1MDAwNFwiLFxyXG4gICAgXCJcXHUwMDBlXFx1MDAwNDpcXHUwMDBiXFx1MDAwNFxcdTAwMDNcXHUwMDA1XFx1MDAwM1xcdTAwMDVcXHUwMDA1XFx1MDAwNT5cXG5cXHUwMDA1XCIsXHJcbiAgICBcIlxcdTAwMDNcXHUwMDA2XFx1MDAwM1xcdTAwMDZcXHUwMDAzXFx1MDAwNlxcdTAwMDNcXHUwMDA2XFx1MDAwM1xcdTAwMDdcXHUwMDAzXFx1MDAwN1wiLFxyXG4gICAgXCJcXHUwMDAzXFx1MDAwN1xcdTAwMDNcXHUwMDA3XFx1MDAwM1xcdTAwMDdcXHUwMDAzXFx1MDAwN1xcdTAwMDNcXGJcXHUwMDAzXFxiXFx1MDAwM1wiLFxyXG4gICAgXCJcXHRcXHUwMDAzXFx0XFx1MDAwM1xcdFxcdTAwMDNcXHRcXHUwMDA3XFx0UFxcblxcdFxcZlxcdFxcdTAwMGVcXHRTXFx1MDAwYlxcdFxcdTAwMDVcXHRcIixcclxuICAgIFwiVVxcblxcdFxcdTAwMDNcXG5cXHUwMDAzXFxuXFx1MDAwM1xcblxcdTAwMDNcXG5cXHUwMDAzXFx1MDAwYlxcdTAwMDNcXHUwMDBiXFx1MDAwM1wiLFxyXG4gICAgXCJcXHUwMDBiXFx1MDAwM1xcdTAwMGJcXHUwMDAzXFx1MDAwYlxcdTAwMDNcXHUwMDBiXFx1MDAwNVxcdTAwMGJhXFxuXFx1MDAwYlxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwYlxcdTAwMDNcXHUwMDBiXFx1MDAwM1xcdTAwMGJcXHUwMDAzXFx1MDAwYlxcdTAwMDdcXHUwMDBiZ1xcblxcdTAwMGJcXGZcXHUwMDBiXCIsXHJcbiAgICBcIlxcdTAwMGVcXHUwMDBialxcdTAwMGJcXHUwMDBiXFx1MDAwM1xcZlxcdTAwMDNcXGZcXHUwMDAzXFxmXFx1MDAwM1xcZlxcdTAwMDdcXGZwXFxuXCIsXHJcbiAgICBcIlxcZlxcZlxcZlxcdTAwMGVcXGZzXFx1MDAwYlxcZlxcdTAwMDVcXGZ1XFxuXFxmXFx1MDAwM1xcclxcdTAwMDNcXHJcXHUwMDAzXFxyXFx1MDAwM1xcclwiLFxyXG4gICAgXCJcXHUwMDAzXFxyXFx1MDAwM1xcclxcdTAwMDNcXHJcXHUwMDAzXFxyXFx1MDAwM1xcclxcdTAwMDNcXHJcXHUwMDAzXFxyXFx1MDAwM1xcclxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwZVxcdTAwMDNcXHUwMDBlXFx1MDAwM1xcdTAwMGVcXHUwMDAzXFx1MDAwZVxcdTAwMDNcXHUwMDBlXFx1MDAwM1xcdTAwMGZcXHUwMDAzXCIsXHJcbiAgICBcIlxcdTAwMGZcXHUwMDAzXFx1MDAwZlxcdTAwMDNcXHUwMDBmXFx1MDAwM1xcdTAwMTBcXHUwMDAzXFx1MDAxMFxcdTAwMDNcXHUwMDExXFx1MDAwM1wiLFxyXG4gICAgXCJcXHUwMDExXFx1MDAwM1xcdTAwMTJcXHUwMDAzXFx1MDAxMlxcdTAwMDNcXHUwMDEyXFx1MDAwMlxcdTAwMDNcXHUwMDE0XFx1MDAxM1xcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwNFxcdTAwMDZcXGJcXG5cXGZcXHUwMDBlXFx1MDAxMFxcdTAwMTJcXHUwMDE0XFx1MDAxNlxcdTAwMThcXHUwMDFhXFx1MDAxY1xcdTAwMWVcIixcclxuICAgIFwiIFxcXCJcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDhjXFx1MDAwMlxcJ1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDA0KlxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAwNjhcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFxiPVxcdTAwMDNcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyXFxuP1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXGZDXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMGVJXCIsXHJcbiAgICBcIlxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDEwVFxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDEyVlxcdTAwMDNcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAxNGBcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDAxNnRcXHUwMDAzXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyXFx1MDAwMlxcdTAwMTh2XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMWFcXHUwMDgyXFx1MDAwM1xcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMDJcXHUwMDFjXFx1MDA4N1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDFlXFx1MDA4YlxcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyIFxcdTAwOGRcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFxcIlxcdTAwOGZcXHUwMDAzXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMiQmXFx1MDAwNVxcdTAwMDRcXHUwMDAzXFx1MDAwMiUkXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMiYpXFx1MDAwM1xcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMlxcdTAwMDJcXCclXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcJyhcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyKFwiLFxyXG4gICAgXCJcXHUwMDAzXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMilcXCdcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyKitcXHUwMDA3XFx1MDAwM1wiLFxyXG4gICAgXCJcXHUwMDAyXFx1MDAwMissXFx1MDAwN1xcdTAwMTNcXHUwMDAyXFx1MDAwMiwtXFx1MDAwN1xcdTAwMDRcXHUwMDAyXFx1MDAwMi0uXFx1MDAwNVwiLFxyXG4gICAgXCJcXHUwMDEwXFx0XFx1MDAwMi4vXFx1MDAwN1xcdTAwMDVcXHUwMDAyXFx1MDAwMi8wXFx1MDAwN1xcdTAwMDZcXHUwMDAyXFx1MDAwMjBcIixcclxuICAgIFwiMVxcdTAwMDVcXHUwMDBlXFxiXFx1MDAwMjEyXFx1MDAwN1xcdTAwMDdcXHUwMDAyXFx1MDAwMjIzXFx1MDAwNVxcdTAwMDZcXHUwMDA0XCIsXHJcbiAgICBcIlxcdTAwMDIzNFxcdTAwMDdcXGJcXHUwMDAyXFx1MDAwMjRcXHUwMDA1XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMjU3XFx1MDAwNVwiLFxyXG4gICAgXCJcXGJcXHUwMDA1XFx1MDAwMjY1XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMjc6XFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMjhcIixcclxuICAgIFwiNlxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDI4OVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDI5XFx1MDAwN1xcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyOjhcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyOz5cXHUwMDA1XFxuXFx1MDAwNlxcdTAwMDI8PlxcdTAwMDVcIixcclxuICAgIFwiXFxmXFx1MDAwN1xcdTAwMDI9O1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDI9PFxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDI+XCIsXHJcbiAgICBcIlxcdFxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDI/QFxcdTAwMDdcXHRcXHUwMDAyXFx1MDAwMkBBXFx1MDAwNVxcdTAwMTRcXHUwMDBiXCIsXHJcbiAgICBcIlxcdTAwMDJBQlxcdTAwMDdcXG5cXHUwMDAyXFx1MDAwMkJcXHUwMDBiXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMkNEXFx1MDAwN1wiLFxyXG4gICAgXCJcXHUwMDBiXFx1MDAwMlxcdTAwMDJERVxcdTAwMDdcXHUwMDEzXFx1MDAwMlxcdTAwMDJFRlxcdTAwMDdcXGZcXHUwMDAyXFx1MDAwMkZcIixcclxuICAgIFwiR1xcdTAwMDVcXHUwMDE0XFx1MDAwYlxcdTAwMDJHSFxcdTAwMDdcXG5cXHUwMDAyXFx1MDAwMkhcXHJcXHUwMDAzXFx1MDAwMlxcdTAwMDJcIixcclxuICAgIFwiXFx1MDAwMklKXFx1MDAwN1xcdTAwMTNcXHUwMDAyXFx1MDAwMkpcXHUwMDBmXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMktVXFx1MDAwM1wiLFxyXG4gICAgXCJcXHUwMDAyXFx1MDAwMlxcdTAwMDJMUVxcdTAwMDVcXHUwMDEyXFxuXFx1MDAwMk1OXFx1MDAwN1xcclxcdTAwMDJcXHUwMDAyTlBcXHUwMDA1XCIsXHJcbiAgICBcIlxcdTAwMTJcXG5cXHUwMDAyT01cXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyUFNcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyUVwiLFxyXG4gICAgXCJPXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlFSXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlJVXFx1MDAwM1xcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJTUVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJUS1xcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJUTFxcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyVVxcdTAwMTFcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyVldcXHUwMDA3XFx1MDAxM1xcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcIldYXFx1MDAwN1xcdTAwMGVcXHUwMDAyXFx1MDAwMlhZXFx1MDAwNVxcdTAwMGVcXGJcXHUwMDAyWVxcdTAwMTNcXHUwMDAzXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyXFx1MDAwMlpbXFxiXFx1MDAwYlxcdTAwMDFcXHUwMDAyW2FcXHUwMDA1XFx1MDAxOFxcclxcdTAwMDJcXFxcYVxcdTAwMDVcXHUwMDFhXCIsXHJcbiAgICBcIlxcdTAwMGVcXHUwMDAyXWFcXHUwMDA1XFx1MDAxY1xcdTAwMGZcXHUwMDAyXmFcXHUwMDA1IFxcdTAwMTFcXHUwMDAyX2FcXHUwMDA1XCIsXHJcbiAgICBcIlxcXCJcXHUwMDEyXFx1MDAwMmBaXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMmBcXFxcXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJgXVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJgXlxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJgX1xcdTAwMDNcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJcXHUwMDAyYWhcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyYmNcXGZcXHUwMDA1XFx1MDAwMlxcdTAwMDJjZFxcdTAwMDVcXHUwMDFlXCIsXHJcbiAgICBcIlxcdTAwMTBcXHUwMDAyZGVcXHUwMDA1XFx1MDAxNFxcdTAwMGJcXHUwMDA2ZWdcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyZmJcXHUwMDAzXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAyXFx1MDAwMmdqXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMmhmXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlwiLFxyXG4gICAgXCJoaVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJpXFx1MDAxNVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJqaFxcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAya3VcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAybHFcXHUwMDA1XFx1MDAxNFxcdTAwMGJcXHUwMDAybW5cXHUwMDA3XCIsXHJcbiAgICBcIlxcclxcdTAwMDJcXHUwMDAybnBcXHUwMDA1XFx1MDAxNFxcdTAwMGJcXHUwMDAyb21cXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAycFwiLFxyXG4gICAgXCJzXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMnFvXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMnFyXFx1MDAwM1xcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJydVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJzcVxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJ0a1xcdTAwMDNcXHUwMDAyXCIsXHJcbiAgICBcIlxcdTAwMDJcXHUwMDAydGxcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAydVxcdTAwMTdcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXCIsXHJcbiAgICBcInZ3XFx1MDAwN1xcdTAwMGZcXHUwMDAyXFx1MDAwMnd4XFx1MDAwN1xcdTAwMDRcXHUwMDAyXFx1MDAwMnh5XFx1MDAwNVxcdTAwMTRcXHUwMDBiXCIsXHJcbiAgICBcIlxcdTAwMDJ5elxcdTAwMDdcXHUwMDA1XFx1MDAwMlxcdTAwMDJ6e1xcdTAwMDdcXHUwMDA3XFx1MDAwMlxcdTAwMDJ7fFxcdTAwMDVcXHUwMDA2XCIsXHJcbiAgICBcIlxcdTAwMDRcXHUwMDAyfH1cXHUwMDA3XFxiXFx1MDAwMlxcdTAwMDJ9flxcdTAwMDdcXHUwMDEwXFx1MDAwMlxcdTAwMDJ+XFx1MDA3ZlwiLFxyXG4gICAgXCJcXHUwMDA3XFx1MDAwN1xcdTAwMDJcXHUwMDAyXFx1MDA3ZlxcdTAwODBcXHUwMDA1XFx1MDAwNlxcdTAwMDRcXHUwMDAyXFx1MDA4MFxcdTAwODFcIixcclxuICAgIFwiXFx1MDAwN1xcYlxcdTAwMDJcXHUwMDAyXFx1MDA4MVxcdTAwMTlcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDA4MlxcdTAwODNcIixcclxuICAgIFwiXFx1MDAwN1xcdTAwMTNcXHUwMDAyXFx1MDAwMlxcdTAwODNcXHUwMDg0XFx1MDAwN1xcdTAwMDRcXHUwMDAyXFx1MDAwMlxcdTAwODRcXHUwMDg1XCIsXHJcbiAgICBcIlxcdTAwMDVcXHUwMDE2XFxmXFx1MDAwMlxcdTAwODVcXHUwMDg2XFx1MDAwN1xcdTAwMDVcXHUwMDAyXFx1MDAwMlxcdTAwODZcXHUwMDFiXCIsXHJcbiAgICBcIlxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDg3XFx1MDA4OFxcdTAwMDdcXHUwMDA0XFx1MDAwMlxcdTAwMDJcXHUwMDg4XFx1MDA4OVwiLFxyXG4gICAgXCJcXHUwMDA1XFx1MDAxNFxcdTAwMGJcXHUwMDAyXFx1MDA4OVxcdTAwOGFcXHUwMDA3XFx1MDAwNVxcdTAwMDJcXHUwMDAyXFx1MDA4YVxcdTAwMWRcIixcclxuICAgIFwiXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwOGJcXHUwMDhjXFx1MDAwN1xcdTAwMTFcXHUwMDAyXFx1MDAwMlxcdTAwOGNcXHUwMDFmXCIsXHJcbiAgICBcIlxcdTAwMDNcXHUwMDAyXFx1MDAwMlxcdTAwMDJcXHUwMDhkXFx1MDA4ZVxcdTAwMDdcXHUwMDEzXFx1MDAwMlxcdTAwMDJcXHUwMDhlIVwiLFxyXG4gICAgXCJcXHUwMDAzXFx1MDAwMlxcdTAwMDJcXHUwMDAyXFx1MDA4ZlxcdTAwOTBcXHUwMDA3XFx1MDAxMlxcdTAwMDJcXHUwMDAyXFx1MDA5MCNcIixcclxuICAgIFwiXFx1MDAwM1xcdTAwMDJcXHUwMDAyXFx1MDAwMlxcdTAwMGJcXCc4PVFUYGhxdFwiXS5qb2luKFwiXCIpO1xyXG5cclxuXHJcbmNvbnN0IGF0biA9IG5ldyBhbnRscjQuYXRuLkFUTkRlc2VyaWFsaXplcigpLmRlc2VyaWFsaXplKHNlcmlhbGl6ZWRBVE4pO1xyXG5cclxuY29uc3QgZGVjaXNpb25zVG9ERkEgPSBhdG4uZGVjaXNpb25Ub1N0YXRlLm1hcCggKGRzLCBpbmRleCkgPT4gbmV3IGFudGxyNC5kZmEuREZBKGRzLCBpbmRleCkgKTtcclxuXHJcbmNvbnN0IHNoYXJlZENvbnRleHRDYWNoZSA9IG5ldyBhbnRscjQuUHJlZGljdGlvbkNvbnRleHRDYWNoZSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGF5b3V0TGFuZ1BhcnNlciBleHRlbmRzIGFudGxyNC5QYXJzZXIge1xyXG5cclxuICAgIHN0YXRpYyBncmFtbWFyRmlsZU5hbWUgPSBcIkxheW91dExhbmcuZzRcIjtcclxuICAgIHN0YXRpYyBsaXRlcmFsTmFtZXMgPSBbIG51bGwsIFwiJ2ZuJ1wiLCBcIicoJ1wiLCBcIicpJ1wiLCBcIictPidcIiwgXCIneydcIiwgXCInfSdcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIidyZXR1cm4nXCIsIFwiJzsnXCIsIFwiJ2xldCdcIiwgXCInPSdcIiwgXCInLCdcIiwgXCInOidcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIidpZidcIiwgXCInZWxzZSdcIiBdO1xyXG4gICAgc3RhdGljIHN5bWJvbGljTmFtZXMgPSBbIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIFwiQklOQVJZT1BcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJJTlRcIiwgXCJJREVOVElGSUVSXCIsIFwiV1NcIiBdO1xyXG4gICAgc3RhdGljIHJ1bGVOYW1lcyA9IFsgXCJib2R5XCIsIFwiZnVuY1wiLCBcImZ1bmNCb2R5XCIsIFwic3RhdGVtZW50XCIsIFwicmV0dXJuU3RhdGVtZW50XCIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCJsZXRTdGF0ZW1lbnRcIiwgXCJ0eXBlXCIsIFwiYXJnc1wiLCBcImFyZ1wiLCBcImV4cHJcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBcImV4cHJMaXN0XCIsIFwiaWZFeHByXCIsIFwiZnVuY0NhbGxcIiwgXCJwYXJlbkV4cHJcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBcImJpbmFyeW9wXCIsIFwiaWRlbnRpZmllclwiLCBcImludGVnZXJcIiBdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XHJcbiAgICAgICAgc3VwZXIoaW5wdXQpO1xyXG4gICAgICAgIHRoaXMuX2ludGVycCA9IG5ldyBhbnRscjQuYXRuLlBhcnNlckFUTlNpbXVsYXRvcih0aGlzLCBhdG4sIGRlY2lzaW9uc1RvREZBLCBzaGFyZWRDb250ZXh0Q2FjaGUpO1xyXG4gICAgICAgIHRoaXMucnVsZU5hbWVzID0gTGF5b3V0TGFuZ1BhcnNlci5ydWxlTmFtZXM7XHJcbiAgICAgICAgdGhpcy5saXRlcmFsTmFtZXMgPSBMYXlvdXRMYW5nUGFyc2VyLmxpdGVyYWxOYW1lcztcclxuICAgICAgICB0aGlzLnN5bWJvbGljTmFtZXMgPSBMYXlvdXRMYW5nUGFyc2VyLnN5bWJvbGljTmFtZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGF0bigpIHtcclxuICAgICAgICByZXR1cm4gYXRuO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbXByZWQobG9jYWxjdHgsIHJ1bGVJbmRleCwgcHJlZEluZGV4KSB7XHJcbiAgICBcdHN3aXRjaChydWxlSW5kZXgpIHtcclxuICAgIFx0Y2FzZSA5OlxyXG4gICAgXHQgICAgXHRcdHJldHVybiB0aGlzLmV4cHJfc2VtcHJlZChsb2NhbGN0eCwgcHJlZEluZGV4KTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBcIk5vIHByZWRpY2F0ZSB3aXRoIGluZGV4OlwiICsgcnVsZUluZGV4O1xyXG4gICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cHJfc2VtcHJlZChsb2NhbGN0eCwgcHJlZEluZGV4KSB7XHJcbiAgICBcdHN3aXRjaChwcmVkSW5kZXgpIHtcclxuICAgIFx0XHRjYXNlIDA6XHJcbiAgICBcdFx0XHRyZXR1cm4gdGhpcy5wcmVjcHJlZCh0aGlzLl9jdHgsIDMpO1xyXG4gICAgXHRcdGRlZmF1bHQ6XHJcbiAgICBcdFx0XHR0aHJvdyBcIk5vIHByZWRpY2F0ZSB3aXRoIGluZGV4OlwiICsgcHJlZEluZGV4O1xyXG4gICAgXHR9XHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG5cclxuXHRib2R5KCkge1xyXG5cdCAgICBsZXQgbG9jYWxjdHggPSBuZXcgQm9keUNvbnRleHQodGhpcywgdGhpcy5fY3R4LCB0aGlzLnN0YXRlKTtcclxuXHQgICAgdGhpcy5lbnRlclJ1bGUobG9jYWxjdHgsIDAsIExheW91dExhbmdQYXJzZXIuUlVMRV9ib2R5KTtcclxuXHQgICAgdmFyIF9sYSA9IDA7IC8vIFRva2VuIHR5cGVcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMzc7XHJcblx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XHJcblx0ICAgICAgICBfbGEgPSB0aGlzLl9pbnB1dC5MQSgxKTtcclxuXHQgICAgICAgIHdoaWxlKF9sYT09PUxheW91dExhbmdQYXJzZXIuVF9fMCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAzNDtcclxuXHQgICAgICAgICAgICBsb2NhbGN0eC5fZnVuYyA9IHRoaXMuZnVuYygpO1xyXG5cdCAgICAgICAgICAgIGxvY2FsY3R4LmZ1bmN0aW9ucy5wdXNoKGxvY2FsY3R4Ll9mdW5jKTtcclxuXHQgICAgICAgICAgICB0aGlzLnN0YXRlID0gMzk7XHJcblx0ICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5zeW5jKHRoaXMpO1xyXG5cdCAgICAgICAgICAgIF9sYSA9IHRoaXMuX2lucHV0LkxBKDEpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9IGNhdGNoIChyZSkge1xyXG5cdCAgICBcdGlmKHJlIGluc3RhbmNlb2YgYW50bHI0LmVycm9yLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XHJcblx0XHQgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdFx0ICAgIFx0dGhyb3cgcmU7XHJcblx0XHQgICAgfVxyXG5cdCAgICB9IGZpbmFsbHkge1xyXG5cdCAgICAgICAgdGhpcy5leGl0UnVsZSgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBsb2NhbGN0eDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0ZnVuYygpIHtcclxuXHQgICAgbGV0IGxvY2FsY3R4ID0gbmV3IEZ1bmNDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCAyLCBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfZnVuYyk7XHJcblx0ICAgIHRyeSB7XHJcblx0ICAgICAgICB0aGlzLmVudGVyT3V0ZXJBbHQobG9jYWxjdHgsIDEpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDQwO1xyXG5cdCAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzApO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDQxO1xyXG5cdCAgICAgICAgbG9jYWxjdHgubmFtZSA9IHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5JREVOVElGSUVSKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA0MjtcclxuXHQgICAgICAgIHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5UX18xKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA0MztcclxuXHQgICAgICAgIGxvY2FsY3R4LmFyZ3VtZW50cyA9IHRoaXMuYXJncygpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDQ0O1xyXG5cdCAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzIpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDQ1O1xyXG5cdCAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzMpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDQ2O1xyXG5cdCAgICAgICAgbG9jYWxjdHgudHlwZV9kZWNsID0gdGhpcy50eXBlKCk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gNDc7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fNCk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gNDg7XHJcblx0ICAgICAgICBsb2NhbGN0eC5mdW5jX2JvZHkgPSB0aGlzLmZ1bmNCb2R5KCk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gNDk7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fNSk7XHJcblx0ICAgIH0gY2F0Y2ggKHJlKSB7XHJcblx0ICAgIFx0aWYocmUgaW5zdGFuY2VvZiBhbnRscjQuZXJyb3IuUmVjb2duaXRpb25FeGNlcHRpb24pIHtcclxuXHRcdCAgICAgICAgbG9jYWxjdHguZXhjZXB0aW9uID0gcmU7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVwb3J0RXJyb3IodGhpcywgcmUpO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXIodGhpcywgcmUpO1xyXG5cdFx0ICAgIH0gZWxzZSB7XHJcblx0XHQgICAgXHR0aHJvdyByZTtcclxuXHRcdCAgICB9XHJcblx0ICAgIH0gZmluYWxseSB7XHJcblx0ICAgICAgICB0aGlzLmV4aXRSdWxlKCk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIGxvY2FsY3R4O1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHRmdW5jQm9keSgpIHtcclxuXHQgICAgbGV0IGxvY2FsY3R4ID0gbmV3IEZ1bmNCb2R5Q29udGV4dCh0aGlzLCB0aGlzLl9jdHgsIHRoaXMuc3RhdGUpO1xyXG5cdCAgICB0aGlzLmVudGVyUnVsZShsb2NhbGN0eCwgNCwgTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2Z1bmNCb2R5KTtcclxuXHQgICAgdmFyIF9sYSA9IDA7IC8vIFRva2VuIHR5cGVcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gNTQ7XHJcblx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XHJcblx0ICAgICAgICBfbGEgPSB0aGlzLl9pbnB1dC5MQSgxKTtcclxuXHQgICAgICAgIHdoaWxlKF9sYT09PUxheW91dExhbmdQYXJzZXIuVF9fNiB8fCBfbGE9PT1MYXlvdXRMYW5nUGFyc2VyLlRfXzgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnN0YXRlID0gNTE7XHJcblx0ICAgICAgICAgICAgbG9jYWxjdHguX3N0YXRlbWVudCA9IHRoaXMuc3RhdGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgbG9jYWxjdHguc3RhdGVtZW50cy5wdXNoKGxvY2FsY3R4Ll9zdGF0ZW1lbnQpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA1NjtcclxuXHQgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XHJcblx0ICAgICAgICAgICAgX2xhID0gdGhpcy5faW5wdXQuTEEoMSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0gY2F0Y2ggKHJlKSB7XHJcblx0ICAgIFx0aWYocmUgaW5zdGFuY2VvZiBhbnRscjQuZXJyb3IuUmVjb2duaXRpb25FeGNlcHRpb24pIHtcclxuXHRcdCAgICAgICAgbG9jYWxjdHguZXhjZXB0aW9uID0gcmU7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVwb3J0RXJyb3IodGhpcywgcmUpO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXIodGhpcywgcmUpO1xyXG5cdFx0ICAgIH0gZWxzZSB7XHJcblx0XHQgICAgXHR0aHJvdyByZTtcclxuXHRcdCAgICB9XHJcblx0ICAgIH0gZmluYWxseSB7XHJcblx0ICAgICAgICB0aGlzLmV4aXRSdWxlKCk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIGxvY2FsY3R4O1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHRzdGF0ZW1lbnQoKSB7XHJcblx0ICAgIGxldCBsb2NhbGN0eCA9IG5ldyBTdGF0ZW1lbnRDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCA2LCBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfc3RhdGVtZW50KTtcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA1OTtcclxuXHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcclxuXHQgICAgICAgIHN3aXRjaCh0aGlzLl9pbnB1dC5MQSgxKSkge1xyXG5cdCAgICAgICAgY2FzZSBMYXlvdXRMYW5nUGFyc2VyLlRfXzY6XHJcblx0ICAgICAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHQgICAgICAgICAgICB0aGlzLnN0YXRlID0gNTc7XHJcblx0ICAgICAgICAgICAgdGhpcy5yZXR1cm5TdGF0ZW1lbnQoKTtcclxuXHQgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgIGNhc2UgTGF5b3V0TGFuZ1BhcnNlci5UX184OlxyXG5cdCAgICAgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMik7XHJcblx0ICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDU4O1xyXG5cdCAgICAgICAgICAgIHRoaXMubGV0U3RhdGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgIHRocm93IG5ldyBhbnRscjQuZXJyb3IuTm9WaWFibGVBbHRFeGNlcHRpb24odGhpcyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0gY2F0Y2ggKHJlKSB7XHJcblx0ICAgIFx0aWYocmUgaW5zdGFuY2VvZiBhbnRscjQuZXJyb3IuUmVjb2duaXRpb25FeGNlcHRpb24pIHtcclxuXHRcdCAgICAgICAgbG9jYWxjdHguZXhjZXB0aW9uID0gcmU7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVwb3J0RXJyb3IodGhpcywgcmUpO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXIodGhpcywgcmUpO1xyXG5cdFx0ICAgIH0gZWxzZSB7XHJcblx0XHQgICAgXHR0aHJvdyByZTtcclxuXHRcdCAgICB9XHJcblx0ICAgIH0gZmluYWxseSB7XHJcblx0ICAgICAgICB0aGlzLmV4aXRSdWxlKCk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIGxvY2FsY3R4O1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHRyZXR1cm5TdGF0ZW1lbnQoKSB7XHJcblx0ICAgIGxldCBsb2NhbGN0eCA9IG5ldyBSZXR1cm5TdGF0ZW1lbnRDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCA4LCBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfcmV0dXJuU3RhdGVtZW50KTtcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gNjE7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fNik7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gNjI7XHJcblx0ICAgICAgICBsb2NhbGN0eC5leHByZXNzaW9uID0gdGhpcy5leHByKDApO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDYzO1xyXG5cdCAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzcpO1xyXG5cdCAgICB9IGNhdGNoIChyZSkge1xyXG5cdCAgICBcdGlmKHJlIGluc3RhbmNlb2YgYW50bHI0LmVycm9yLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XHJcblx0XHQgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdFx0ICAgIFx0dGhyb3cgcmU7XHJcblx0XHQgICAgfVxyXG5cdCAgICB9IGZpbmFsbHkge1xyXG5cdCAgICAgICAgdGhpcy5leGl0UnVsZSgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBsb2NhbGN0eDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0bGV0U3RhdGVtZW50KCkge1xyXG5cdCAgICBsZXQgbG9jYWxjdHggPSBuZXcgTGV0U3RhdGVtZW50Q29udGV4dCh0aGlzLCB0aGlzLl9jdHgsIHRoaXMuc3RhdGUpO1xyXG5cdCAgICB0aGlzLmVudGVyUnVsZShsb2NhbGN0eCwgMTAsIExheW91dExhbmdQYXJzZXIuUlVMRV9sZXRTdGF0ZW1lbnQpO1xyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA2NTtcclxuXHQgICAgICAgIHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5UX184KTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA2NjtcclxuXHQgICAgICAgIGxvY2FsY3R4Lm5hbWUgPSB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuSURFTlRJRklFUik7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gNjc7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fOSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gNjg7XHJcblx0ICAgICAgICBsb2NhbGN0eC5leHByZXNzaW9uID0gdGhpcy5leHByKDApO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDY5O1xyXG5cdCAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzcpO1xyXG5cdCAgICB9IGNhdGNoIChyZSkge1xyXG5cdCAgICBcdGlmKHJlIGluc3RhbmNlb2YgYW50bHI0LmVycm9yLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XHJcblx0XHQgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdFx0ICAgIFx0dGhyb3cgcmU7XHJcblx0XHQgICAgfVxyXG5cdCAgICB9IGZpbmFsbHkge1xyXG5cdCAgICAgICAgdGhpcy5leGl0UnVsZSgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBsb2NhbGN0eDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0dHlwZSgpIHtcclxuXHQgICAgbGV0IGxvY2FsY3R4ID0gbmV3IFR5cGVDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCAxMiwgTGF5b3V0TGFuZ1BhcnNlci5SVUxFX3R5cGUpO1xyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA3MTtcclxuXHQgICAgICAgIHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5JREVOVElGSUVSKTtcclxuXHQgICAgfSBjYXRjaCAocmUpIHtcclxuXHQgICAgXHRpZihyZSBpbnN0YW5jZW9mIGFudGxyNC5lcnJvci5SZWNvZ25pdGlvbkV4Y2VwdGlvbikge1xyXG5cdFx0ICAgICAgICBsb2NhbGN0eC5leGNlcHRpb24gPSByZTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZXBvcnRFcnJvcih0aGlzLCByZSk7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVjb3Zlcih0aGlzLCByZSk7XHJcblx0XHQgICAgfSBlbHNlIHtcclxuXHRcdCAgICBcdHRocm93IHJlO1xyXG5cdFx0ICAgIH1cclxuXHQgICAgfSBmaW5hbGx5IHtcclxuXHQgICAgICAgIHRoaXMuZXhpdFJ1bGUoKTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gbG9jYWxjdHg7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdGFyZ3MoKSB7XHJcblx0ICAgIGxldCBsb2NhbGN0eCA9IG5ldyBBcmdzQ29udGV4dCh0aGlzLCB0aGlzLl9jdHgsIHRoaXMuc3RhdGUpO1xyXG5cdCAgICB0aGlzLmVudGVyUnVsZShsb2NhbGN0eCwgMTQsIExheW91dExhbmdQYXJzZXIuUlVMRV9hcmdzKTtcclxuXHQgICAgdmFyIF9sYSA9IDA7IC8vIFRva2VuIHR5cGVcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA4MjtcclxuXHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcclxuXHQgICAgICAgIHN3aXRjaCh0aGlzLl9pbnB1dC5MQSgxKSkge1xyXG5cdCAgICAgICAgY2FzZSBMYXlvdXRMYW5nUGFyc2VyLlRfXzI6XHJcblx0ICAgICAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHJcblx0ICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICBjYXNlIExheW91dExhbmdQYXJzZXIuSURFTlRJRklFUjpcclxuXHQgICAgICAgICAgICB0aGlzLmVudGVyT3V0ZXJBbHQobG9jYWxjdHgsIDIpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA3NDtcclxuXHQgICAgICAgICAgICBsb2NhbGN0eC5fYXJnID0gdGhpcy5hcmcoKTtcclxuXHQgICAgICAgICAgICBsb2NhbGN0eC5hcmdMaXN0LnB1c2gobG9jYWxjdHguX2FyZyk7XHJcblx0ICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDc5O1xyXG5cdCAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcclxuXHQgICAgICAgICAgICBfbGEgPSB0aGlzLl9pbnB1dC5MQSgxKTtcclxuXHQgICAgICAgICAgICB3aGlsZShfbGE9PT1MYXlvdXRMYW5nUGFyc2VyLlRfXzEwKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA3NTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzEwKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDc2O1xyXG5cdCAgICAgICAgICAgICAgICBsb2NhbGN0eC5fYXJnID0gdGhpcy5hcmcoKTtcclxuXHQgICAgICAgICAgICAgICAgbG9jYWxjdHguYXJnTGlzdC5wdXNoKGxvY2FsY3R4Ll9hcmcpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gODE7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcclxuXHQgICAgICAgICAgICAgICAgX2xhID0gdGhpcy5faW5wdXQuTEEoMSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICB0aHJvdyBuZXcgYW50bHI0LmVycm9yLk5vVmlhYmxlQWx0RXhjZXB0aW9uKHRoaXMpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9IGNhdGNoIChyZSkge1xyXG5cdCAgICBcdGlmKHJlIGluc3RhbmNlb2YgYW50bHI0LmVycm9yLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XHJcblx0XHQgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdFx0ICAgIFx0dGhyb3cgcmU7XHJcblx0XHQgICAgfVxyXG5cdCAgICB9IGZpbmFsbHkge1xyXG5cdCAgICAgICAgdGhpcy5leGl0UnVsZSgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBsb2NhbGN0eDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0YXJnKCkge1xyXG5cdCAgICBsZXQgbG9jYWxjdHggPSBuZXcgQXJnQ29udGV4dCh0aGlzLCB0aGlzLl9jdHgsIHRoaXMuc3RhdGUpO1xyXG5cdCAgICB0aGlzLmVudGVyUnVsZShsb2NhbGN0eCwgMTYsIExheW91dExhbmdQYXJzZXIuUlVMRV9hcmcpO1xyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA4NDtcclxuXHQgICAgICAgIGxvY2FsY3R4Lm5hbWUgPSB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuSURFTlRJRklFUik7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gODU7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fMTEpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDg2O1xyXG5cdCAgICAgICAgbG9jYWxjdHgudHlwZV9kZWNsID0gdGhpcy50eXBlKCk7XHJcblx0ICAgIH0gY2F0Y2ggKHJlKSB7XHJcblx0ICAgIFx0aWYocmUgaW5zdGFuY2VvZiBhbnRscjQuZXJyb3IuUmVjb2duaXRpb25FeGNlcHRpb24pIHtcclxuXHRcdCAgICAgICAgbG9jYWxjdHguZXhjZXB0aW9uID0gcmU7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVwb3J0RXJyb3IodGhpcywgcmUpO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXIodGhpcywgcmUpO1xyXG5cdFx0ICAgIH0gZWxzZSB7XHJcblx0XHQgICAgXHR0aHJvdyByZTtcclxuXHRcdCAgICB9XHJcblx0ICAgIH0gZmluYWxseSB7XHJcblx0ICAgICAgICB0aGlzLmV4aXRSdWxlKCk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIGxvY2FsY3R4O1xyXG5cdH1cclxuXHJcblxyXG5cdGV4cHIoX3ApIHtcclxuXHRcdGlmKF9wPT09dW5kZWZpbmVkKSB7XHJcblx0XHQgICAgX3AgPSAwO1xyXG5cdFx0fVxyXG5cdCAgICBjb25zdCBfcGFyZW50Y3R4ID0gdGhpcy5fY3R4O1xyXG5cdCAgICBjb25zdCBfcGFyZW50U3RhdGUgPSB0aGlzLnN0YXRlO1xyXG5cdCAgICBsZXQgbG9jYWxjdHggPSBuZXcgRXhwckNvbnRleHQodGhpcywgdGhpcy5fY3R4LCBfcGFyZW50U3RhdGUpO1xyXG5cdCAgICBsZXQgX3ByZXZjdHggPSBsb2NhbGN0eDtcclxuXHQgICAgY29uc3QgX3N0YXJ0U3RhdGUgPSAxODtcclxuXHQgICAgdGhpcy5lbnRlclJlY3Vyc2lvblJ1bGUobG9jYWxjdHgsIDE4LCBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfZXhwciwgX3ApO1xyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSA5NDtcclxuXHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcclxuXHQgICAgICAgIHZhciBsYV8gPSB0aGlzLl9pbnRlcnAuYWRhcHRpdmVQcmVkaWN0KHRoaXMuX2lucHV0LDUsdGhpcy5fY3R4KTtcclxuXHQgICAgICAgIHN3aXRjaChsYV8pIHtcclxuXHQgICAgICAgIGNhc2UgMTpcclxuXHQgICAgICAgICAgICB0aGlzLnN0YXRlID0gODk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pZkV4cHIoKTtcclxuXHQgICAgICAgICAgICBicmVhaztcclxuXHJcblx0ICAgICAgICBjYXNlIDI6XHJcblx0ICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDkwO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZnVuY0NhbGwoKTtcclxuXHQgICAgICAgICAgICBicmVhaztcclxuXHJcblx0ICAgICAgICBjYXNlIDM6XHJcblx0ICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDkxO1xyXG5cdCAgICAgICAgICAgIHRoaXMucGFyZW5FeHByKCk7XHJcblx0ICAgICAgICAgICAgYnJlYWs7XHJcblxyXG5cdCAgICAgICAgY2FzZSA0OlxyXG5cdCAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA5MjtcclxuXHQgICAgICAgICAgICB0aGlzLmlkZW50aWZpZXIoKTtcclxuXHQgICAgICAgICAgICBicmVhaztcclxuXHJcblx0ICAgICAgICBjYXNlIDU6XHJcblx0ICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDkzO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW50ZWdlcigpO1xyXG5cdCAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRoaXMuX2N0eC5zdG9wID0gdGhpcy5faW5wdXQuTFQoLTEpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDEwMjtcclxuXHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcclxuXHQgICAgICAgIGxldCBfYWx0ID0gdGhpcy5faW50ZXJwLmFkYXB0aXZlUHJlZGljdCh0aGlzLl9pbnB1dCw2LHRoaXMuX2N0eClcclxuXHQgICAgICAgIHdoaWxlKF9hbHQhPTIgJiYgX2FsdCE9YW50bHI0LmF0bi5BVE4uSU5WQUxJRF9BTFRfTlVNQkVSKSB7XHJcblx0ICAgICAgICAgICAgaWYoX2FsdD09PTEpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYodGhpcy5fcGFyc2VMaXN0ZW5lcnMhPT1udWxsKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJFeGl0UnVsZUV2ZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgX3ByZXZjdHggPSBsb2NhbGN0eDtcclxuXHQgICAgICAgICAgICAgICAgbG9jYWxjdHggPSBuZXcgRXhwckNvbnRleHQodGhpcywgX3BhcmVudGN0eCwgX3BhcmVudFN0YXRlKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5wdXNoTmV3UmVjdXJzaW9uQ29udGV4dChsb2NhbGN0eCwgX3N0YXJ0U3RhdGUsIExheW91dExhbmdQYXJzZXIuUlVMRV9leHByKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDk2O1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoISggdGhpcy5wcmVjcHJlZCh0aGlzLl9jdHgsIDMpKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGFudGxyNC5lcnJvci5GYWlsZWRQcmVkaWNhdGVFeGNlcHRpb24odGhpcywgXCJ0aGlzLnByZWNwcmVkKHRoaXMuX2N0eCwgMylcIik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDk3O1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmJpbmFyeW9wKCk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA5ODtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHByKDQpOyBcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDEwNDtcclxuXHQgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XHJcblx0ICAgICAgICAgICAgX2FsdCA9IHRoaXMuX2ludGVycC5hZGFwdGl2ZVByZWRpY3QodGhpcy5faW5wdXQsNix0aGlzLl9jdHgpO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfSBjYXRjaCggZXJyb3IpIHtcclxuXHQgICAgICAgIGlmKGVycm9yIGluc3RhbmNlb2YgYW50bHI0LmVycm9yLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XHJcblx0XHQgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IGVycm9yO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIGVycm9yKTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIGVycm9yKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdFx0ICAgIFx0dGhyb3cgZXJyb3I7XHJcblx0XHQgICAgfVxyXG5cdCAgICB9IGZpbmFsbHkge1xyXG5cdCAgICAgICAgdGhpcy51bnJvbGxSZWN1cnNpb25Db250ZXh0cyhfcGFyZW50Y3R4KVxyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBsb2NhbGN0eDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0ZXhwckxpc3QoKSB7XHJcblx0ICAgIGxldCBsb2NhbGN0eCA9IG5ldyBFeHByTGlzdENvbnRleHQodGhpcywgdGhpcy5fY3R4LCB0aGlzLnN0YXRlKTtcclxuXHQgICAgdGhpcy5lbnRlclJ1bGUobG9jYWxjdHgsIDIwLCBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfZXhwckxpc3QpO1xyXG5cdCAgICB2YXIgX2xhID0gMDsgLy8gVG9rZW4gdHlwZVxyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDExNDtcclxuXHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcclxuXHQgICAgICAgIHN3aXRjaCh0aGlzLl9pbnB1dC5MQSgxKSkge1xyXG5cdCAgICAgICAgY2FzZSBMYXlvdXRMYW5nUGFyc2VyLlRfXzI6XHJcblx0ICAgICAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHJcblx0ICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICBjYXNlIExheW91dExhbmdQYXJzZXIuVF9fMTpcclxuXHQgICAgICAgIGNhc2UgTGF5b3V0TGFuZ1BhcnNlci5UX18xMjpcclxuXHQgICAgICAgIGNhc2UgTGF5b3V0TGFuZ1BhcnNlci5JTlQ6XHJcblx0ICAgICAgICBjYXNlIExheW91dExhbmdQYXJzZXIuSURFTlRJRklFUjpcclxuXHQgICAgICAgICAgICB0aGlzLmVudGVyT3V0ZXJBbHQobG9jYWxjdHgsIDIpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAxMDY7XHJcblx0ICAgICAgICAgICAgbG9jYWxjdHguX2V4cHIgPSB0aGlzLmV4cHIoMCk7XHJcblx0ICAgICAgICAgICAgbG9jYWxjdHguYXJnTGlzdC5wdXNoKGxvY2FsY3R4Ll9leHByKTtcclxuXHQgICAgICAgICAgICB0aGlzLnN0YXRlID0gMTExO1xyXG5cdCAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcclxuXHQgICAgICAgICAgICBfbGEgPSB0aGlzLl9pbnB1dC5MQSgxKTtcclxuXHQgICAgICAgICAgICB3aGlsZShfbGE9PT1MYXlvdXRMYW5nUGFyc2VyLlRfXzEwKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAxMDc7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5UX18xMCk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAxMDg7XHJcblx0ICAgICAgICAgICAgICAgIGxvY2FsY3R4Ll9leHByID0gdGhpcy5leHByKDApO1xyXG5cdCAgICAgICAgICAgICAgICBsb2NhbGN0eC5hcmdMaXN0LnB1c2gobG9jYWxjdHguX2V4cHIpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gMTEzO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XHJcblx0ICAgICAgICAgICAgICAgIF9sYSA9IHRoaXMuX2lucHV0LkxBKDEpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IGFudGxyNC5lcnJvci5Ob1ZpYWJsZUFsdEV4Y2VwdGlvbih0aGlzKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfSBjYXRjaCAocmUpIHtcclxuXHQgICAgXHRpZihyZSBpbnN0YW5jZW9mIGFudGxyNC5lcnJvci5SZWNvZ25pdGlvbkV4Y2VwdGlvbikge1xyXG5cdFx0ICAgICAgICBsb2NhbGN0eC5leGNlcHRpb24gPSByZTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZXBvcnRFcnJvcih0aGlzLCByZSk7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVjb3Zlcih0aGlzLCByZSk7XHJcblx0XHQgICAgfSBlbHNlIHtcclxuXHRcdCAgICBcdHRocm93IHJlO1xyXG5cdFx0ICAgIH1cclxuXHQgICAgfSBmaW5hbGx5IHtcclxuXHQgICAgICAgIHRoaXMuZXhpdFJ1bGUoKTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gbG9jYWxjdHg7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdGlmRXhwcigpIHtcclxuXHQgICAgbGV0IGxvY2FsY3R4ID0gbmV3IElmRXhwckNvbnRleHQodGhpcywgdGhpcy5fY3R4LCB0aGlzLnN0YXRlKTtcclxuXHQgICAgdGhpcy5lbnRlclJ1bGUobG9jYWxjdHgsIDIyLCBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfaWZFeHByKTtcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMTE2O1xyXG5cdCAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzEyKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxMTc7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fMSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMTE4O1xyXG5cdCAgICAgICAgbG9jYWxjdHgucHJlZCA9IHRoaXMuZXhwcigwKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxMTk7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fMik7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMTIwO1xyXG5cdCAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzQpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDEyMTtcclxuXHQgICAgICAgIGxvY2FsY3R4LnRoZW5fYm9keSA9IHRoaXMuZnVuY0JvZHkoKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxMjI7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fNSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMTIzO1xyXG5cdCAgICAgICAgdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLlRfXzEzKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxMjQ7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fNCk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMTI1O1xyXG5cdCAgICAgICAgbG9jYWxjdHguZWxzZV9ib2R5ID0gdGhpcy5mdW5jQm9keSgpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDEyNjtcclxuXHQgICAgICAgIHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5UX181KTtcclxuXHQgICAgfSBjYXRjaCAocmUpIHtcclxuXHQgICAgXHRpZihyZSBpbnN0YW5jZW9mIGFudGxyNC5lcnJvci5SZWNvZ25pdGlvbkV4Y2VwdGlvbikge1xyXG5cdFx0ICAgICAgICBsb2NhbGN0eC5leGNlcHRpb24gPSByZTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZXBvcnRFcnJvcih0aGlzLCByZSk7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVjb3Zlcih0aGlzLCByZSk7XHJcblx0XHQgICAgfSBlbHNlIHtcclxuXHRcdCAgICBcdHRocm93IHJlO1xyXG5cdFx0ICAgIH1cclxuXHQgICAgfSBmaW5hbGx5IHtcclxuXHQgICAgICAgIHRoaXMuZXhpdFJ1bGUoKTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gbG9jYWxjdHg7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdGZ1bmNDYWxsKCkge1xyXG5cdCAgICBsZXQgbG9jYWxjdHggPSBuZXcgRnVuY0NhbGxDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCAyNCwgTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2Z1bmNDYWxsKTtcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMTI4O1xyXG5cdCAgICAgICAgbG9jYWxjdHgubmFtZSA9IHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5JREVOVElGSUVSKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxMjk7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fMSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMTMwO1xyXG5cdCAgICAgICAgbG9jYWxjdHguYXJnTGlzdCA9IHRoaXMuZXhwckxpc3QoKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxMzE7XHJcblx0ICAgICAgICB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuVF9fMik7XHJcblx0ICAgIH0gY2F0Y2ggKHJlKSB7XHJcblx0ICAgIFx0aWYocmUgaW5zdGFuY2VvZiBhbnRscjQuZXJyb3IuUmVjb2duaXRpb25FeGNlcHRpb24pIHtcclxuXHRcdCAgICAgICAgbG9jYWxjdHguZXhjZXB0aW9uID0gcmU7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVwb3J0RXJyb3IodGhpcywgcmUpO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXIodGhpcywgcmUpO1xyXG5cdFx0ICAgIH0gZWxzZSB7XHJcblx0XHQgICAgXHR0aHJvdyByZTtcclxuXHRcdCAgICB9XHJcblx0ICAgIH0gZmluYWxseSB7XHJcblx0ICAgICAgICB0aGlzLmV4aXRSdWxlKCk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIGxvY2FsY3R4O1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHRwYXJlbkV4cHIoKSB7XHJcblx0ICAgIGxldCBsb2NhbGN0eCA9IG5ldyBQYXJlbkV4cHJDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCAyNiwgTGF5b3V0TGFuZ1BhcnNlci5SVUxFX3BhcmVuRXhwcik7XHJcblx0ICAgIHRyeSB7XHJcblx0ICAgICAgICB0aGlzLmVudGVyT3V0ZXJBbHQobG9jYWxjdHgsIDEpO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDEzMztcclxuXHQgICAgICAgIHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5UX18xKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxMzQ7XHJcblx0ICAgICAgICBsb2NhbGN0eC5leHByZXNzaW9uID0gdGhpcy5leHByKDApO1xyXG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IDEzNTtcclxuXHQgICAgICAgIHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5UX18yKTtcclxuXHQgICAgfSBjYXRjaCAocmUpIHtcclxuXHQgICAgXHRpZihyZSBpbnN0YW5jZW9mIGFudGxyNC5lcnJvci5SZWNvZ25pdGlvbkV4Y2VwdGlvbikge1xyXG5cdFx0ICAgICAgICBsb2NhbGN0eC5leGNlcHRpb24gPSByZTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZXBvcnRFcnJvcih0aGlzLCByZSk7XHJcblx0XHQgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVjb3Zlcih0aGlzLCByZSk7XHJcblx0XHQgICAgfSBlbHNlIHtcclxuXHRcdCAgICBcdHRocm93IHJlO1xyXG5cdFx0ICAgIH1cclxuXHQgICAgfSBmaW5hbGx5IHtcclxuXHQgICAgICAgIHRoaXMuZXhpdFJ1bGUoKTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gbG9jYWxjdHg7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdGJpbmFyeW9wKCkge1xyXG5cdCAgICBsZXQgbG9jYWxjdHggPSBuZXcgQmluYXJ5b3BDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCAyOCwgTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2JpbmFyeW9wKTtcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XHJcblx0ICAgICAgICB0aGlzLnN0YXRlID0gMTM3O1xyXG5cdCAgICAgICAgbG9jYWxjdHgub3AgPSB0aGlzLm1hdGNoKExheW91dExhbmdQYXJzZXIuQklOQVJZT1ApO1xyXG5cdCAgICB9IGNhdGNoIChyZSkge1xyXG5cdCAgICBcdGlmKHJlIGluc3RhbmNlb2YgYW50bHI0LmVycm9yLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XHJcblx0XHQgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdFx0ICAgIFx0dGhyb3cgcmU7XHJcblx0XHQgICAgfVxyXG5cdCAgICB9IGZpbmFsbHkge1xyXG5cdCAgICAgICAgdGhpcy5leGl0UnVsZSgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBsb2NhbGN0eDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0aWRlbnRpZmllcigpIHtcclxuXHQgICAgbGV0IGxvY2FsY3R4ID0gbmV3IElkZW50aWZpZXJDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCAzMCwgTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2lkZW50aWZpZXIpO1xyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxMzk7XHJcblx0ICAgICAgICBsb2NhbGN0eC5uYW1lID0gdGhpcy5tYXRjaChMYXlvdXRMYW5nUGFyc2VyLklERU5USUZJRVIpO1xyXG5cdCAgICB9IGNhdGNoIChyZSkge1xyXG5cdCAgICBcdGlmKHJlIGluc3RhbmNlb2YgYW50bHI0LmVycm9yLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XHJcblx0XHQgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdFx0ICAgIFx0dGhyb3cgcmU7XHJcblx0XHQgICAgfVxyXG5cdCAgICB9IGZpbmFsbHkge1xyXG5cdCAgICAgICAgdGhpcy5leGl0UnVsZSgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBsb2NhbGN0eDtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0aW50ZWdlcigpIHtcclxuXHQgICAgbGV0IGxvY2FsY3R4ID0gbmV3IEludGVnZXJDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XHJcblx0ICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCAzMiwgTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2ludGVnZXIpO1xyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy5lbnRlck91dGVyQWx0KGxvY2FsY3R4LCAxKTtcclxuXHQgICAgICAgIHRoaXMuc3RhdGUgPSAxNDE7XHJcblx0ICAgICAgICBsb2NhbGN0eC52YWx1ZSA9IHRoaXMubWF0Y2goTGF5b3V0TGFuZ1BhcnNlci5JTlQpO1xyXG5cdCAgICB9IGNhdGNoIChyZSkge1xyXG5cdCAgICBcdGlmKHJlIGluc3RhbmNlb2YgYW50bHI0LmVycm9yLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XHJcblx0XHQgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xyXG5cdFx0ICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcclxuXHRcdCAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdFx0ICAgIFx0dGhyb3cgcmU7XHJcblx0XHQgICAgfVxyXG5cdCAgICB9IGZpbmFsbHkge1xyXG5cdCAgICAgICAgdGhpcy5leGl0UnVsZSgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBsb2NhbGN0eDtcclxuXHR9XHJcblxyXG5cclxufVxyXG5cclxuTGF5b3V0TGFuZ1BhcnNlci5FT0YgPSBhbnRscjQuVG9rZW4uRU9GO1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzAgPSAxO1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzEgPSAyO1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzIgPSAzO1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzMgPSA0O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzQgPSA1O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzUgPSA2O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzYgPSA3O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzcgPSA4O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzggPSA5O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzkgPSAxMDtcclxuTGF5b3V0TGFuZ1BhcnNlci5UX18xMCA9IDExO1xyXG5MYXlvdXRMYW5nUGFyc2VyLlRfXzExID0gMTI7XHJcbkxheW91dExhbmdQYXJzZXIuVF9fMTIgPSAxMztcclxuTGF5b3V0TGFuZ1BhcnNlci5UX18xMyA9IDE0O1xyXG5MYXlvdXRMYW5nUGFyc2VyLkJJTkFSWU9QID0gMTU7XHJcbkxheW91dExhbmdQYXJzZXIuSU5UID0gMTY7XHJcbkxheW91dExhbmdQYXJzZXIuSURFTlRJRklFUiA9IDE3O1xyXG5MYXlvdXRMYW5nUGFyc2VyLldTID0gMTg7XHJcblxyXG5MYXlvdXRMYW5nUGFyc2VyLlJVTEVfYm9keSA9IDA7XHJcbkxheW91dExhbmdQYXJzZXIuUlVMRV9mdW5jID0gMTtcclxuTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2Z1bmNCb2R5ID0gMjtcclxuTGF5b3V0TGFuZ1BhcnNlci5SVUxFX3N0YXRlbWVudCA9IDM7XHJcbkxheW91dExhbmdQYXJzZXIuUlVMRV9yZXR1cm5TdGF0ZW1lbnQgPSA0O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlJVTEVfbGV0U3RhdGVtZW50ID0gNTtcclxuTGF5b3V0TGFuZ1BhcnNlci5SVUxFX3R5cGUgPSA2O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlJVTEVfYXJncyA9IDc7XHJcbkxheW91dExhbmdQYXJzZXIuUlVMRV9hcmcgPSA4O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlJVTEVfZXhwciA9IDk7XHJcbkxheW91dExhbmdQYXJzZXIuUlVMRV9leHByTGlzdCA9IDEwO1xyXG5MYXlvdXRMYW5nUGFyc2VyLlJVTEVfaWZFeHByID0gMTE7XHJcbkxheW91dExhbmdQYXJzZXIuUlVMRV9mdW5jQ2FsbCA9IDEyO1xyXG5MYXlvdXRMYW5nUGFyc2VyLlJVTEVfcGFyZW5FeHByID0gMTM7XHJcbkxheW91dExhbmdQYXJzZXIuUlVMRV9iaW5hcnlvcCA9IDE0O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlJVTEVfaWRlbnRpZmllciA9IDE1O1xyXG5MYXlvdXRMYW5nUGFyc2VyLlJVTEVfaW50ZWdlciA9IDE2O1xyXG5cclxuY2xhc3MgQm9keUNvbnRleHQgZXh0ZW5kcyBhbnRscjQuUGFyc2VyUnVsZUNvbnRleHQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyZW50LCBpbnZva2luZ1N0YXRlKSB7XHJcbiAgICAgICAgaWYocGFyZW50PT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGludm9raW5nU3RhdGU9PT11bmRlZmluZWQgfHwgaW52b2tpbmdTdGF0ZT09PW51bGwpIHtcclxuICAgICAgICAgICAgaW52b2tpbmdTdGF0ZSA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihwYXJlbnQsIGludm9raW5nU3RhdGUpO1xyXG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2JvZHk7XHJcbiAgICAgICAgdGhpcy5fZnVuYyA9IG51bGw7IC8vIEZ1bmNDb250ZXh0XHJcbiAgICAgICAgdGhpcy5mdW5jdGlvbnMgPSBbXTsgLy8gb2YgRnVuY0NvbnRleHRzXHJcbiAgICB9XHJcblxyXG5cdGZ1bmMgPSBmdW5jdGlvbihpKSB7XHJcblx0ICAgIGlmKGk9PT11bmRlZmluZWQpIHtcclxuXHQgICAgICAgIGkgPSBudWxsO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmKGk9PT1udWxsKSB7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0cyhGdW5jQ29udGV4dCk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KEZ1bmNDb250ZXh0LGkpO1xyXG5cdCAgICB9XHJcblx0fTtcclxuXHJcblx0ZW50ZXJSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZW50ZXJCb2R5KHRoaXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZXhpdFJ1bGUobGlzdGVuZXIpIHtcclxuXHQgICAgaWYobGlzdGVuZXIgaW5zdGFuY2VvZiBMYXlvdXRMYW5nTGlzdGVuZXIgKSB7XHJcblx0ICAgICAgICBsaXN0ZW5lci5leGl0Qm9keSh0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxufVxyXG5cclxuXHJcblxyXG5jbGFzcyBGdW5jQ29udGV4dCBleHRlbmRzIGFudGxyNC5QYXJzZXJSdWxlQ29udGV4dCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcclxuICAgICAgICBpZihwYXJlbnQ9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaW52b2tpbmdTdGF0ZT09PXVuZGVmaW5lZCB8fCBpbnZva2luZ1N0YXRlPT09bnVsbCkge1xyXG4gICAgICAgICAgICBpbnZva2luZ1N0YXRlID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfZnVuYztcclxuICAgICAgICB0aGlzLm5hbWUgPSBudWxsOyAvLyBUb2tlblxyXG4gICAgICAgIHRoaXMuYXJndW1lbnRzID0gbnVsbDsgLy8gQXJnc0NvbnRleHRcclxuICAgICAgICB0aGlzLnR5cGVfZGVjbCA9IG51bGw7IC8vIFR5cGVDb250ZXh0XHJcbiAgICAgICAgdGhpcy5mdW5jX2JvZHkgPSBudWxsOyAvLyBGdW5jQm9keUNvbnRleHRcclxuICAgIH1cclxuXHJcblx0SURFTlRJRklFUigpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW4oTGF5b3V0TGFuZ1BhcnNlci5JREVOVElGSUVSLCAwKTtcclxuXHR9O1xyXG5cclxuXHRhcmdzKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KEFyZ3NDb250ZXh0LDApO1xyXG5cdH07XHJcblxyXG5cdHR5cGUoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoVHlwZUNvbnRleHQsMCk7XHJcblx0fTtcclxuXHJcblx0ZnVuY0JvZHkoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoRnVuY0JvZHlDb250ZXh0LDApO1xyXG5cdH07XHJcblxyXG5cdGVudGVyUnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmVudGVyRnVuYyh0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGV4aXRSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZXhpdEZ1bmModGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgRnVuY0JvZHlDb250ZXh0IGV4dGVuZHMgYW50bHI0LlBhcnNlclJ1bGVDb250ZXh0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIHBhcmVudCwgaW52b2tpbmdTdGF0ZSkge1xyXG4gICAgICAgIGlmKHBhcmVudD09PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihpbnZva2luZ1N0YXRlPT09dW5kZWZpbmVkIHx8IGludm9raW5nU3RhdGU9PT1udWxsKSB7XHJcbiAgICAgICAgICAgIGludm9raW5nU3RhdGUgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIocGFyZW50LCBpbnZva2luZ1N0YXRlKTtcclxuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcclxuICAgICAgICB0aGlzLnJ1bGVJbmRleCA9IExheW91dExhbmdQYXJzZXIuUlVMRV9mdW5jQm9keTtcclxuICAgICAgICB0aGlzLl9zdGF0ZW1lbnQgPSBudWxsOyAvLyBTdGF0ZW1lbnRDb250ZXh0XHJcbiAgICAgICAgdGhpcy5zdGF0ZW1lbnRzID0gW107IC8vIG9mIFN0YXRlbWVudENvbnRleHRzXHJcbiAgICB9XHJcblxyXG5cdHN0YXRlbWVudCA9IGZ1bmN0aW9uKGkpIHtcclxuXHQgICAgaWYoaT09PXVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgaSA9IG51bGw7XHJcblx0ICAgIH1cclxuXHQgICAgaWYoaT09PW51bGwpIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHRzKFN0YXRlbWVudENvbnRleHQpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChTdGF0ZW1lbnRDb250ZXh0LGkpO1xyXG5cdCAgICB9XHJcblx0fTtcclxuXHJcblx0ZW50ZXJSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZW50ZXJGdW5jQm9keSh0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGV4aXRSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZXhpdEZ1bmNCb2R5KHRoaXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG59XHJcblxyXG5cclxuXHJcbmNsYXNzIFN0YXRlbWVudENvbnRleHQgZXh0ZW5kcyBhbnRscjQuUGFyc2VyUnVsZUNvbnRleHQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyZW50LCBpbnZva2luZ1N0YXRlKSB7XHJcbiAgICAgICAgaWYocGFyZW50PT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGludm9raW5nU3RhdGU9PT11bmRlZmluZWQgfHwgaW52b2tpbmdTdGF0ZT09PW51bGwpIHtcclxuICAgICAgICAgICAgaW52b2tpbmdTdGF0ZSA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihwYXJlbnQsIGludm9raW5nU3RhdGUpO1xyXG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gTGF5b3V0TGFuZ1BhcnNlci5SVUxFX3N0YXRlbWVudDtcclxuICAgIH1cclxuXHJcblx0cmV0dXJuU3RhdGVtZW50KCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KFJldHVyblN0YXRlbWVudENvbnRleHQsMCk7XHJcblx0fTtcclxuXHJcblx0bGV0U3RhdGVtZW50KCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KExldFN0YXRlbWVudENvbnRleHQsMCk7XHJcblx0fTtcclxuXHJcblx0ZW50ZXJSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZW50ZXJTdGF0ZW1lbnQodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRleGl0UnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmV4aXRTdGF0ZW1lbnQodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgUmV0dXJuU3RhdGVtZW50Q29udGV4dCBleHRlbmRzIGFudGxyNC5QYXJzZXJSdWxlQ29udGV4dCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcclxuICAgICAgICBpZihwYXJlbnQ9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaW52b2tpbmdTdGF0ZT09PXVuZGVmaW5lZCB8fCBpbnZva2luZ1N0YXRlPT09bnVsbCkge1xyXG4gICAgICAgICAgICBpbnZva2luZ1N0YXRlID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfcmV0dXJuU3RhdGVtZW50O1xyXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IG51bGw7IC8vIEV4cHJDb250ZXh0XHJcbiAgICB9XHJcblxyXG5cdGV4cHIoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoRXhwckNvbnRleHQsMCk7XHJcblx0fTtcclxuXHJcblx0ZW50ZXJSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZW50ZXJSZXR1cm5TdGF0ZW1lbnQodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRleGl0UnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmV4aXRSZXR1cm5TdGF0ZW1lbnQodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgTGV0U3RhdGVtZW50Q29udGV4dCBleHRlbmRzIGFudGxyNC5QYXJzZXJSdWxlQ29udGV4dCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcclxuICAgICAgICBpZihwYXJlbnQ9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaW52b2tpbmdTdGF0ZT09PXVuZGVmaW5lZCB8fCBpbnZva2luZ1N0YXRlPT09bnVsbCkge1xyXG4gICAgICAgICAgICBpbnZva2luZ1N0YXRlID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfbGV0U3RhdGVtZW50O1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG51bGw7IC8vIFRva2VuXHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9uID0gbnVsbDsgLy8gRXhwckNvbnRleHRcclxuICAgIH1cclxuXHJcblx0SURFTlRJRklFUigpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW4oTGF5b3V0TGFuZ1BhcnNlci5JREVOVElGSUVSLCAwKTtcclxuXHR9O1xyXG5cclxuXHRleHByKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KEV4cHJDb250ZXh0LDApO1xyXG5cdH07XHJcblxyXG5cdGVudGVyUnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmVudGVyTGV0U3RhdGVtZW50KHRoaXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZXhpdFJ1bGUobGlzdGVuZXIpIHtcclxuXHQgICAgaWYobGlzdGVuZXIgaW5zdGFuY2VvZiBMYXlvdXRMYW5nTGlzdGVuZXIgKSB7XHJcblx0ICAgICAgICBsaXN0ZW5lci5leGl0TGV0U3RhdGVtZW50KHRoaXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG59XHJcblxyXG5cclxuXHJcbmNsYXNzIFR5cGVDb250ZXh0IGV4dGVuZHMgYW50bHI0LlBhcnNlclJ1bGVDb250ZXh0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIHBhcmVudCwgaW52b2tpbmdTdGF0ZSkge1xyXG4gICAgICAgIGlmKHBhcmVudD09PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihpbnZva2luZ1N0YXRlPT09dW5kZWZpbmVkIHx8IGludm9raW5nU3RhdGU9PT1udWxsKSB7XHJcbiAgICAgICAgICAgIGludm9raW5nU3RhdGUgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIocGFyZW50LCBpbnZva2luZ1N0YXRlKTtcclxuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcclxuICAgICAgICB0aGlzLnJ1bGVJbmRleCA9IExheW91dExhbmdQYXJzZXIuUlVMRV90eXBlO1xyXG4gICAgfVxyXG5cclxuXHRJREVOVElGSUVSKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihMYXlvdXRMYW5nUGFyc2VyLklERU5USUZJRVIsIDApO1xyXG5cdH07XHJcblxyXG5cdGVudGVyUnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmVudGVyVHlwZSh0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGV4aXRSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZXhpdFR5cGUodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgQXJnc0NvbnRleHQgZXh0ZW5kcyBhbnRscjQuUGFyc2VyUnVsZUNvbnRleHQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyZW50LCBpbnZva2luZ1N0YXRlKSB7XHJcbiAgICAgICAgaWYocGFyZW50PT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGludm9raW5nU3RhdGU9PT11bmRlZmluZWQgfHwgaW52b2tpbmdTdGF0ZT09PW51bGwpIHtcclxuICAgICAgICAgICAgaW52b2tpbmdTdGF0ZSA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihwYXJlbnQsIGludm9raW5nU3RhdGUpO1xyXG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2FyZ3M7XHJcbiAgICAgICAgdGhpcy5fYXJnID0gbnVsbDsgLy8gQXJnQ29udGV4dFxyXG4gICAgICAgIHRoaXMuYXJnTGlzdCA9IFtdOyAvLyBvZiBBcmdDb250ZXh0c1xyXG4gICAgfVxyXG5cclxuXHRhcmcgPSBmdW5jdGlvbihpKSB7XHJcblx0ICAgIGlmKGk9PT11bmRlZmluZWQpIHtcclxuXHQgICAgICAgIGkgPSBudWxsO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmKGk9PT1udWxsKSB7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0cyhBcmdDb250ZXh0KTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoQXJnQ29udGV4dCxpKTtcclxuXHQgICAgfVxyXG5cdH07XHJcblxyXG5cdGVudGVyUnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmVudGVyQXJncyh0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGV4aXRSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZXhpdEFyZ3ModGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgQXJnQ29udGV4dCBleHRlbmRzIGFudGxyNC5QYXJzZXJSdWxlQ29udGV4dCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcclxuICAgICAgICBpZihwYXJlbnQ9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaW52b2tpbmdTdGF0ZT09PXVuZGVmaW5lZCB8fCBpbnZva2luZ1N0YXRlPT09bnVsbCkge1xyXG4gICAgICAgICAgICBpbnZva2luZ1N0YXRlID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfYXJnO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG51bGw7IC8vIFRva2VuXHJcbiAgICAgICAgdGhpcy50eXBlX2RlY2wgPSBudWxsOyAvLyBUeXBlQ29udGV4dFxyXG4gICAgfVxyXG5cclxuXHRJREVOVElGSUVSKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihMYXlvdXRMYW5nUGFyc2VyLklERU5USUZJRVIsIDApO1xyXG5cdH07XHJcblxyXG5cdHR5cGUoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoVHlwZUNvbnRleHQsMCk7XHJcblx0fTtcclxuXHJcblx0ZW50ZXJSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZW50ZXJBcmcodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRleGl0UnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmV4aXRBcmcodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgRXhwckNvbnRleHQgZXh0ZW5kcyBhbnRscjQuUGFyc2VyUnVsZUNvbnRleHQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyZW50LCBpbnZva2luZ1N0YXRlKSB7XHJcbiAgICAgICAgaWYocGFyZW50PT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGludm9raW5nU3RhdGU9PT11bmRlZmluZWQgfHwgaW52b2tpbmdTdGF0ZT09PW51bGwpIHtcclxuICAgICAgICAgICAgaW52b2tpbmdTdGF0ZSA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihwYXJlbnQsIGludm9raW5nU3RhdGUpO1xyXG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2V4cHI7XHJcbiAgICB9XHJcblxyXG5cdGlmRXhwcigpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChJZkV4cHJDb250ZXh0LDApO1xyXG5cdH07XHJcblxyXG5cdGZ1bmNDYWxsKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KEZ1bmNDYWxsQ29udGV4dCwwKTtcclxuXHR9O1xyXG5cclxuXHRwYXJlbkV4cHIoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoUGFyZW5FeHByQ29udGV4dCwwKTtcclxuXHR9O1xyXG5cclxuXHRpZGVudGlmaWVyKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KElkZW50aWZpZXJDb250ZXh0LDApO1xyXG5cdH07XHJcblxyXG5cdGludGVnZXIoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoSW50ZWdlckNvbnRleHQsMCk7XHJcblx0fTtcclxuXHJcblx0ZXhwciA9IGZ1bmN0aW9uKGkpIHtcclxuXHQgICAgaWYoaT09PXVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgaSA9IG51bGw7XHJcblx0ICAgIH1cclxuXHQgICAgaWYoaT09PW51bGwpIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHRzKEV4cHJDb250ZXh0KTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoRXhwckNvbnRleHQsaSk7XHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHRiaW5hcnlvcCgpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChCaW5hcnlvcENvbnRleHQsMCk7XHJcblx0fTtcclxuXHJcblx0ZW50ZXJSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZW50ZXJFeHByKHRoaXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZXhpdFJ1bGUobGlzdGVuZXIpIHtcclxuXHQgICAgaWYobGlzdGVuZXIgaW5zdGFuY2VvZiBMYXlvdXRMYW5nTGlzdGVuZXIgKSB7XHJcblx0ICAgICAgICBsaXN0ZW5lci5leGl0RXhwcih0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxufVxyXG5cclxuXHJcblxyXG5jbGFzcyBFeHByTGlzdENvbnRleHQgZXh0ZW5kcyBhbnRscjQuUGFyc2VyUnVsZUNvbnRleHQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyZW50LCBpbnZva2luZ1N0YXRlKSB7XHJcbiAgICAgICAgaWYocGFyZW50PT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGludm9raW5nU3RhdGU9PT11bmRlZmluZWQgfHwgaW52b2tpbmdTdGF0ZT09PW51bGwpIHtcclxuICAgICAgICAgICAgaW52b2tpbmdTdGF0ZSA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihwYXJlbnQsIGludm9raW5nU3RhdGUpO1xyXG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2V4cHJMaXN0O1xyXG4gICAgICAgIHRoaXMuX2V4cHIgPSBudWxsOyAvLyBFeHByQ29udGV4dFxyXG4gICAgICAgIHRoaXMuYXJnTGlzdCA9IFtdOyAvLyBvZiBFeHByQ29udGV4dHNcclxuICAgIH1cclxuXHJcblx0ZXhwciA9IGZ1bmN0aW9uKGkpIHtcclxuXHQgICAgaWYoaT09PXVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgaSA9IG51bGw7XHJcblx0ICAgIH1cclxuXHQgICAgaWYoaT09PW51bGwpIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHRzKEV4cHJDb250ZXh0KTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoRXhwckNvbnRleHQsaSk7XHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHRlbnRlclJ1bGUobGlzdGVuZXIpIHtcclxuXHQgICAgaWYobGlzdGVuZXIgaW5zdGFuY2VvZiBMYXlvdXRMYW5nTGlzdGVuZXIgKSB7XHJcblx0ICAgICAgICBsaXN0ZW5lci5lbnRlckV4cHJMaXN0KHRoaXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZXhpdFJ1bGUobGlzdGVuZXIpIHtcclxuXHQgICAgaWYobGlzdGVuZXIgaW5zdGFuY2VvZiBMYXlvdXRMYW5nTGlzdGVuZXIgKSB7XHJcblx0ICAgICAgICBsaXN0ZW5lci5leGl0RXhwckxpc3QodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgSWZFeHByQ29udGV4dCBleHRlbmRzIGFudGxyNC5QYXJzZXJSdWxlQ29udGV4dCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcclxuICAgICAgICBpZihwYXJlbnQ9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaW52b2tpbmdTdGF0ZT09PXVuZGVmaW5lZCB8fCBpbnZva2luZ1N0YXRlPT09bnVsbCkge1xyXG4gICAgICAgICAgICBpbnZva2luZ1N0YXRlID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfaWZFeHByO1xyXG4gICAgICAgIHRoaXMucHJlZCA9IG51bGw7IC8vIEV4cHJDb250ZXh0XHJcbiAgICAgICAgdGhpcy50aGVuX2JvZHkgPSBudWxsOyAvLyBGdW5jQm9keUNvbnRleHRcclxuICAgICAgICB0aGlzLmVsc2VfYm9keSA9IG51bGw7IC8vIEZ1bmNCb2R5Q29udGV4dFxyXG4gICAgfVxyXG5cclxuXHRleHByKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KEV4cHJDb250ZXh0LDApO1xyXG5cdH07XHJcblxyXG5cdGZ1bmNCb2R5ID0gZnVuY3Rpb24oaSkge1xyXG5cdCAgICBpZihpPT09dW5kZWZpbmVkKSB7XHJcblx0ICAgICAgICBpID0gbnVsbDtcclxuXHQgICAgfVxyXG5cdCAgICBpZihpPT09bnVsbCkge1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dHMoRnVuY0JvZHlDb250ZXh0KTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoRnVuY0JvZHlDb250ZXh0LGkpO1xyXG5cdCAgICB9XHJcblx0fTtcclxuXHJcblx0ZW50ZXJSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZW50ZXJJZkV4cHIodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRleGl0UnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmV4aXRJZkV4cHIodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgRnVuY0NhbGxDb250ZXh0IGV4dGVuZHMgYW50bHI0LlBhcnNlclJ1bGVDb250ZXh0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIHBhcmVudCwgaW52b2tpbmdTdGF0ZSkge1xyXG4gICAgICAgIGlmKHBhcmVudD09PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihpbnZva2luZ1N0YXRlPT09dW5kZWZpbmVkIHx8IGludm9raW5nU3RhdGU9PT1udWxsKSB7XHJcbiAgICAgICAgICAgIGludm9raW5nU3RhdGUgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIocGFyZW50LCBpbnZva2luZ1N0YXRlKTtcclxuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcclxuICAgICAgICB0aGlzLnJ1bGVJbmRleCA9IExheW91dExhbmdQYXJzZXIuUlVMRV9mdW5jQ2FsbDtcclxuICAgICAgICB0aGlzLm5hbWUgPSBudWxsOyAvLyBUb2tlblxyXG4gICAgICAgIHRoaXMuYXJnTGlzdCA9IG51bGw7IC8vIEV4cHJMaXN0Q29udGV4dFxyXG4gICAgfVxyXG5cclxuXHRJREVOVElGSUVSKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihMYXlvdXRMYW5nUGFyc2VyLklERU5USUZJRVIsIDApO1xyXG5cdH07XHJcblxyXG5cdGV4cHJMaXN0KCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KEV4cHJMaXN0Q29udGV4dCwwKTtcclxuXHR9O1xyXG5cclxuXHRlbnRlclJ1bGUobGlzdGVuZXIpIHtcclxuXHQgICAgaWYobGlzdGVuZXIgaW5zdGFuY2VvZiBMYXlvdXRMYW5nTGlzdGVuZXIgKSB7XHJcblx0ICAgICAgICBsaXN0ZW5lci5lbnRlckZ1bmNDYWxsKHRoaXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZXhpdFJ1bGUobGlzdGVuZXIpIHtcclxuXHQgICAgaWYobGlzdGVuZXIgaW5zdGFuY2VvZiBMYXlvdXRMYW5nTGlzdGVuZXIgKSB7XHJcblx0ICAgICAgICBsaXN0ZW5lci5leGl0RnVuY0NhbGwodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgUGFyZW5FeHByQ29udGV4dCBleHRlbmRzIGFudGxyNC5QYXJzZXJSdWxlQ29udGV4dCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcclxuICAgICAgICBpZihwYXJlbnQ9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaW52b2tpbmdTdGF0ZT09PXVuZGVmaW5lZCB8fCBpbnZva2luZ1N0YXRlPT09bnVsbCkge1xyXG4gICAgICAgICAgICBpbnZva2luZ1N0YXRlID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfcGFyZW5FeHByO1xyXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IG51bGw7IC8vIEV4cHJDb250ZXh0XHJcbiAgICB9XHJcblxyXG5cdGV4cHIoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoRXhwckNvbnRleHQsMCk7XHJcblx0fTtcclxuXHJcblx0ZW50ZXJSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZW50ZXJQYXJlbkV4cHIodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRleGl0UnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmV4aXRQYXJlbkV4cHIodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgQmluYXJ5b3BDb250ZXh0IGV4dGVuZHMgYW50bHI0LlBhcnNlclJ1bGVDb250ZXh0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIHBhcmVudCwgaW52b2tpbmdTdGF0ZSkge1xyXG4gICAgICAgIGlmKHBhcmVudD09PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihpbnZva2luZ1N0YXRlPT09dW5kZWZpbmVkIHx8IGludm9raW5nU3RhdGU9PT1udWxsKSB7XHJcbiAgICAgICAgICAgIGludm9raW5nU3RhdGUgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIocGFyZW50LCBpbnZva2luZ1N0YXRlKTtcclxuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcclxuICAgICAgICB0aGlzLnJ1bGVJbmRleCA9IExheW91dExhbmdQYXJzZXIuUlVMRV9iaW5hcnlvcDtcclxuICAgICAgICB0aGlzLm9wID0gbnVsbDsgLy8gVG9rZW5cclxuICAgIH1cclxuXHJcblx0QklOQVJZT1AoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLmdldFRva2VuKExheW91dExhbmdQYXJzZXIuQklOQVJZT1AsIDApO1xyXG5cdH07XHJcblxyXG5cdGVudGVyUnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmVudGVyQmluYXJ5b3AodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRleGl0UnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmV4aXRCaW5hcnlvcCh0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxufVxyXG5cclxuXHJcblxyXG5jbGFzcyBJZGVudGlmaWVyQ29udGV4dCBleHRlbmRzIGFudGxyNC5QYXJzZXJSdWxlQ29udGV4dCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcclxuICAgICAgICBpZihwYXJlbnQ9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaW52b2tpbmdTdGF0ZT09PXVuZGVmaW5lZCB8fCBpbnZva2luZ1N0YXRlPT09bnVsbCkge1xyXG4gICAgICAgICAgICBpbnZva2luZ1N0YXRlID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5ydWxlSW5kZXggPSBMYXlvdXRMYW5nUGFyc2VyLlJVTEVfaWRlbnRpZmllcjtcclxuICAgICAgICB0aGlzLm5hbWUgPSBudWxsOyAvLyBUb2tlblxyXG4gICAgfVxyXG5cclxuXHRJREVOVElGSUVSKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihMYXlvdXRMYW5nUGFyc2VyLklERU5USUZJRVIsIDApO1xyXG5cdH07XHJcblxyXG5cdGVudGVyUnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmVudGVySWRlbnRpZmllcih0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGV4aXRSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZXhpdElkZW50aWZpZXIodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgSW50ZWdlckNvbnRleHQgZXh0ZW5kcyBhbnRscjQuUGFyc2VyUnVsZUNvbnRleHQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyZW50LCBpbnZva2luZ1N0YXRlKSB7XHJcbiAgICAgICAgaWYocGFyZW50PT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGludm9raW5nU3RhdGU9PT11bmRlZmluZWQgfHwgaW52b2tpbmdTdGF0ZT09PW51bGwpIHtcclxuICAgICAgICAgICAgaW52b2tpbmdTdGF0ZSA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihwYXJlbnQsIGludm9raW5nU3RhdGUpO1xyXG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gTGF5b3V0TGFuZ1BhcnNlci5SVUxFX2ludGVnZXI7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7IC8vIFRva2VuXHJcbiAgICB9XHJcblxyXG5cdElOVCgpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW4oTGF5b3V0TGFuZ1BhcnNlci5JTlQsIDApO1xyXG5cdH07XHJcblxyXG5cdGVudGVyUnVsZShsaXN0ZW5lcikge1xyXG5cdCAgICBpZihsaXN0ZW5lciBpbnN0YW5jZW9mIExheW91dExhbmdMaXN0ZW5lciApIHtcclxuXHQgICAgICAgIGxpc3RlbmVyLmVudGVySW50ZWdlcih0aGlzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGV4aXRSdWxlKGxpc3RlbmVyKSB7XHJcblx0ICAgIGlmKGxpc3RlbmVyIGluc3RhbmNlb2YgTGF5b3V0TGFuZ0xpc3RlbmVyICkge1xyXG5cdCAgICAgICAgbGlzdGVuZXIuZXhpdEludGVnZXIodGhpcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbkxheW91dExhbmdQYXJzZXIuQm9keUNvbnRleHQgPSBCb2R5Q29udGV4dDsgXHJcbkxheW91dExhbmdQYXJzZXIuRnVuY0NvbnRleHQgPSBGdW5jQ29udGV4dDsgXHJcbkxheW91dExhbmdQYXJzZXIuRnVuY0JvZHlDb250ZXh0ID0gRnVuY0JvZHlDb250ZXh0OyBcclxuTGF5b3V0TGFuZ1BhcnNlci5TdGF0ZW1lbnRDb250ZXh0ID0gU3RhdGVtZW50Q29udGV4dDsgXHJcbkxheW91dExhbmdQYXJzZXIuUmV0dXJuU3RhdGVtZW50Q29udGV4dCA9IFJldHVyblN0YXRlbWVudENvbnRleHQ7IFxyXG5MYXlvdXRMYW5nUGFyc2VyLkxldFN0YXRlbWVudENvbnRleHQgPSBMZXRTdGF0ZW1lbnRDb250ZXh0OyBcclxuTGF5b3V0TGFuZ1BhcnNlci5UeXBlQ29udGV4dCA9IFR5cGVDb250ZXh0OyBcclxuTGF5b3V0TGFuZ1BhcnNlci5BcmdzQ29udGV4dCA9IEFyZ3NDb250ZXh0OyBcclxuTGF5b3V0TGFuZ1BhcnNlci5BcmdDb250ZXh0ID0gQXJnQ29udGV4dDsgXHJcbkxheW91dExhbmdQYXJzZXIuRXhwckNvbnRleHQgPSBFeHByQ29udGV4dDsgXHJcbkxheW91dExhbmdQYXJzZXIuRXhwckxpc3RDb250ZXh0ID0gRXhwckxpc3RDb250ZXh0OyBcclxuTGF5b3V0TGFuZ1BhcnNlci5JZkV4cHJDb250ZXh0ID0gSWZFeHByQ29udGV4dDsgXHJcbkxheW91dExhbmdQYXJzZXIuRnVuY0NhbGxDb250ZXh0ID0gRnVuY0NhbGxDb250ZXh0OyBcclxuTGF5b3V0TGFuZ1BhcnNlci5QYXJlbkV4cHJDb250ZXh0ID0gUGFyZW5FeHByQ29udGV4dDsgXHJcbkxheW91dExhbmdQYXJzZXIuQmluYXJ5b3BDb250ZXh0ID0gQmluYXJ5b3BDb250ZXh0OyBcclxuTGF5b3V0TGFuZ1BhcnNlci5JZGVudGlmaWVyQ29udGV4dCA9IElkZW50aWZpZXJDb250ZXh0OyBcclxuTGF5b3V0TGFuZ1BhcnNlci5JbnRlZ2VyQ29udGV4dCA9IEludGVnZXJDb250ZXh0OyBcclxuIiwiLyogKGlnbm9yZWQpICovIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBkZWNvbXBpbGUgfSBmcm9tIFwiLi9jb21waWxlci9jb2RlZ2VuL2RlY29tcGlsZVwiO1xyXG5pbXBvcnQgeyBDb21waWxlciB9IGZyb20gXCIuL2NvbXBpbGVyL2NvbXBpbGVyXCI7XHJcbmNvbnN0IGNvZGVfYXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29kZS1hcmVhXCIpO1xyXG5jb25zdCBjb25zb2xlX2FyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnNvbGUtYXJlYVwiKTtcclxuLy8gY29uc3QgZnVuY3MgPSBbXHJcbi8vICAgICBuZXcgRnVuY3Rpb24oXCJtYWluXCIsIFtdLCBULmkzMiksXHJcbi8vICAgICBuZXcgRnVuY3Rpb24oXCJtYWluMlwiLCBbXSwgVC5pMzIpXHJcbi8vIF07XHJcblxyXG4vLyBjb25zdCB3YXNtX291dHB1dCA9IG5ldyBXYXNtT3V0cHV0KGZ1bmNzKTtcclxuXHJcbi8vIGNvbnN0IG91dHB1dCA9IHdhc21fb3V0cHV0LmVuY29kZSgpO1xyXG5cclxuLy8gYXN5bmMgZnVuY3Rpb24gbWFpbigpe1xyXG5cclxuLy8gICAgIGxldCB7bW9kdWxlLCBpbnN0YW5jZX0gPSBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShvdXRwdXQpO1xyXG4vLyAgICAgY29uc29sZS5sb2coXCJCaW5hcnkgU2l6ZTogXCIsIG91dHB1dC5sZW5ndGgpO1xyXG4vLyAgICAgY29uc29sZS5sb2coKGluc3RhbmNlLmV4cG9ydHMgYXMgYW55KS5tYWluKCkpO1xyXG4vLyAgICAgKGdsb2JhbFRoaXMgYXMgYW55KS5pbnN0ID0gaW5zdGFuY2U7XHJcbi8vIH1cclxuLy8gbWFpbigpO1xyXG5cclxuY29uc3Qgc3RhcnRpbmdfY29kZSA9IFxyXG5gXHJcbmZuIGlmX2Z1bmMoYTogaTMyKSAtPiBpMzJ7XHJcbiAgICByZXR1cm4gaWYoYSA8IDIpe1xyXG4gICAgICAgIHJldHVybiBpZihhIDwgLTEwKXtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgKyAyO1xyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBhICogMTAwO1xyXG4gICAgfTtcclxufVxyXG5cclxuYFxyXG5sZXQgYnVpbHRpbnM6IGFueSA9IG51bGw7XHJcblxyXG53aW5kb3cub25sb2FkID0gYXN5bmMgKCk9PntcclxuICAgIGJ1aWx0aW5zID0gYXdhaXQgZGVjb21waWxlKFwiLi4vY3Bwc3JjL3N0YWNrX2FsbG9jLndhc21cIik7XHJcbiAgICAoY29kZV9hcmVhIGFzIGFueSkuZWRpdG9yLnNldFZhbHVlKHN0YXJ0aW5nX2NvZGUpO1xyXG4gICAgc2V0SW50ZXJ2YWwodXBkYXRlLCAxNik7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZSgpe1xyXG4gICAgY29uc3QgaW5wdXQgPSAoY29kZV9hcmVhIGFzIGFueSkuZWRpdG9yLmdldFZhbHVlKCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGJpbmFyeSA9IG5ldyBDb21waWxlcihidWlsdGlucy5mdW5jdGlvbnMsIGJ1aWx0aW5zLmRhdGFfY291bnQsIGJ1aWx0aW5zLnN0YXRpY19kYXRhKS5jb21waWxlKGlucHV0KTtcclxuICAgICAgICBjb25zdCB7aW5zdGFuY2V9ID0gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYmluYXJ5KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSAoaW5zdGFuY2UuZXhwb3J0cyBhcyBhbnkpLm1haW4oKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xyXG4gICAgICAgIGNvbnNvbGVfYXJlYS5pbm5lckhUTUwgPSByZXN1bHQ7XHJcbiAgICB9IGNhdGNoKGUpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgY29uc29sZV9hcmVhLmlubmVySFRNTCA9IGUudG9TdHJpbmcoKTtcclxuICAgIH0gXHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9